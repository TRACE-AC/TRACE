slug,path,method_name,test_method,exception_info
Chart_1,/222043010/omniapr/defects4j/Chart_1_buggy/tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java,test2947660,"    public void test2947660() {
        AbstractCategoryItemRenderer r = new LineAndShapeRenderer();
        assertNotNull(r.getLegendItems());
        assertEquals(0, r.getLegendItems().getItemCount());

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        CategoryPlot plot = new CategoryPlot();
        plot.setDataset(dataset);
        plot.setRenderer(r);
        assertEquals(0, r.getLegendItems().getItemCount());

        dataset.addValue(1.0, ""S1"", ""C1"");
        LegendItemCollection lic = r.getLegendItems();
        assertEquals(1, lic.getItemCount());
        assertEquals(""S1"", lic.get(0).getLabel());
    }",junit.framework.AssertionFailedError: expected:<1> but was:<0>
Chart_2,/222043010/omniapr/defects4j/Chart_2_buggy/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java,testBug2849731_2,"    public void testBug2849731_2() {
        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();
        XYIntervalSeries s = new XYIntervalSeries(""S1"");
        s.add(1.0, Double.NaN, Double.NaN, Double.NaN, 1.5, Double.NaN);
        d.addSeries(s);
        Range r = DatasetUtilities.iterateDomainBounds(d);
        assertEquals(1.0, r.getLowerBound(), EPSILON);
        assertEquals(1.0, r.getUpperBound(), EPSILON);

        s.add(1.0, 1.5, Double.NaN, Double.NaN, 1.5, Double.NaN);
        r = DatasetUtilities.iterateDomainBounds(d);
        assertEquals(1.0, r.getLowerBound(), EPSILON);
        assertEquals(1.5, r.getUpperBound(), EPSILON);

        s.add(1.0, Double.NaN, 0.5, Double.NaN, 1.5, Double.NaN);
        r = DatasetUtilities.iterateDomainBounds(d);
        assertEquals(0.5, r.getLowerBound(), EPSILON);
        assertEquals(1.5, r.getUpperBound(), EPSILON);
    }",java.lang.NullPointerException
Chart_2,/222043010/omniapr/defects4j/Chart_2_buggy/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java,testBug2849731_3,"    public void testBug2849731_3() {
        XYIntervalSeriesCollection d = new XYIntervalSeriesCollection();
        XYIntervalSeries s = new XYIntervalSeries(""S1"");
        s.add(1.0, Double.NaN, Double.NaN, 1.5, Double.NaN, Double.NaN);
        d.addSeries(s);
        Range r = DatasetUtilities.iterateRangeBounds(d);
        assertEquals(1.5, r.getLowerBound(), EPSILON);
        assertEquals(1.5, r.getUpperBound(), EPSILON);

        s.add(1.0, 1.5, Double.NaN, Double.NaN, Double.NaN, 2.5);
        r = DatasetUtilities.iterateRangeBounds(d);
        assertEquals(1.5, r.getLowerBound(), EPSILON);
        assertEquals(2.5, r.getUpperBound(), EPSILON);

        s.add(1.0, Double.NaN, 0.5, Double.NaN, 3.5, Double.NaN);
        r = DatasetUtilities.iterateRangeBounds(d);
        assertEquals(1.5, r.getLowerBound(), EPSILON);
        assertEquals(3.5, r.getUpperBound(), EPSILON);
    }",java.lang.NullPointerException
Chart_3,/222043010/omniapr/defects4j/Chart_3_buggy/tests/org/jfree/data/time/junit/TimeSeriesTests.java,testCreateCopy3,"    public void testCreateCopy3() throws CloneNotSupportedException {
        TimeSeries s1 = new TimeSeries(""S1"");
        s1.add(new Year(2009), 100.0);
        s1.add(new Year(2010), 101.0);
        s1.add(new Year(2011), 102.0);
        assertEquals(100.0, s1.getMinY(), EPSILON);
        assertEquals(102.0, s1.getMaxY(), EPSILON);

        TimeSeries s2 = s1.createCopy(0, 1);
        assertEquals(100.0, s2.getMinY(), EPSILON);
        assertEquals(101.0, s2.getMaxY(), EPSILON);

        TimeSeries s3 = s1.createCopy(1, 2);
        assertEquals(101.0, s3.getMinY(), EPSILON);
        assertEquals(102.0, s3.getMaxY(), EPSILON);
    }",junit.framework.AssertionFailedError: expected:<101.0> but was:<102.0>
Chart_4,/222043010/omniapr/defects4j/Chart_4_buggy/tests/org/jfree/chart/axis/junit/LogAxisTests.java,testXYAutoRange1,"    public void testXYAutoRange1() {
        XYSeries series = new XYSeries(""Series 1"");
        series.add(1.0, 1.0);
        series.add(2.0, 2.0);
        series.add(3.0, 3.0);
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series);
        JFreeChart chart = ChartFactory.createScatterPlot(
            ""Test"",
            ""X"",
            ""Y"",
            dataset,
            PlotOrientation.VERTICAL,
            false,
            false,
            false
        );
        XYPlot plot = (XYPlot) chart.getPlot();
        LogAxis axis = new LogAxis(""Log(Y)"");
        plot.setRangeAxis(axis);
        assertEquals(0.9465508226401592, axis.getLowerBound(), EPSILON);
        assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);
    }",java.lang.NullPointerException
Chart_4,/222043010/omniapr/defects4j/Chart_4_buggy/tests/org/jfree/chart/axis/junit/LogAxisTests.java,testXYAutoRange2,"    public void testXYAutoRange2() {
        XYSeries series = new XYSeries(""Series 1"");
        series.add(1.0, 1.0);
        series.add(2.0, 2.0);
        series.add(3.0, 3.0);
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series);
        JFreeChart chart = ChartFactory.createScatterPlot(
            ""Test"",
            ""X"",
            ""Y"",
            dataset,
            PlotOrientation.VERTICAL,
            false,
            false,
            false
        );
        XYPlot plot = (XYPlot) chart.getPlot();
        LogAxis axis = new LogAxis(""Log(Y)"");
        plot.setRangeAxis(axis);
        assertEquals(0.9465508226401592, axis.getLowerBound(), EPSILON);
        assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);
    }",java.lang.NullPointerException
Chart_4,/222043010/omniapr/defects4j/Chart_4_buggy/tests/org/jfree/chart/axis/junit/NumberAxisTests.java,testXYAutoRange1,"    public void testXYAutoRange1() {
        XYSeries series = new XYSeries(""Series 1"");
        series.add(1.0, 1.0);
        series.add(2.0, 2.0);
        series.add(3.0, 3.0);
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series);
        JFreeChart chart = ChartFactory.createScatterPlot(
            ""Test"",
            ""X"",
            ""Y"",
            dataset,
            PlotOrientation.VERTICAL,
            false,
            false,
            false
        );
        XYPlot plot = (XYPlot) chart.getPlot();
        NumberAxis axis = (NumberAxis) plot.getDomainAxis();
        axis.setAutoRangeIncludesZero(false);
        assertEquals(0.9, axis.getLowerBound(), EPSILON);
        assertEquals(3.1, axis.getUpperBound(), EPSILON);
    }",java.lang.NullPointerException
Chart_4,/222043010/omniapr/defects4j/Chart_4_buggy/tests/org/jfree/chart/axis/junit/NumberAxisTests.java,testXYAutoRange2,"    public void testXYAutoRange2() {
        XYSeries series = new XYSeries(""Series 1"");
        series.add(1.0, 1.0);
        series.add(2.0, 2.0);
        series.add(3.0, 3.0);
        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series);
        JFreeChart chart = ChartFactory.createScatterPlot(
            ""Test"",
            ""X"",
            ""Y"",
            dataset,
            PlotOrientation.VERTICAL,
            false,
            false,
            false
        );
        XYPlot plot = (XYPlot) chart.getPlot();
        NumberAxis axis = (NumberAxis) plot.getRangeAxis();
        axis.setAutoRangeIncludesZero(false);
        assertEquals(0.9, axis.getLowerBound(), EPSILON);
        assertEquals(3.1, axis.getUpperBound(), EPSILON);
    }",java.lang.NullPointerException
Chart_4,/222043010/omniapr/defects4j/Chart_4_buggy/tests/org/jfree/chart/axis/junit/ValueAxisTests.java,testAxisMargins,"    public void testAxisMargins() {
        XYSeries series = new XYSeries(""S1"");
        series.add(100.0, 1.1);
        series.add(200.0, 2.2);
        XYSeriesCollection dataset = new XYSeriesCollection(series);
        dataset.setIntervalWidth(0.0);
        JFreeChart chart = ChartFactory.createScatterPlot(
            ""Title"", ""X"", ""Y"", dataset, PlotOrientation.VERTICAL,
            false, false, false
        );
        ValueAxis domainAxis = ((XYPlot) chart.getPlot()).getDomainAxis();
        Range r = domainAxis.getRange();
        assertEquals(110.0, r.getLength(), EPSILON);
        domainAxis.setLowerMargin(0.10);
        domainAxis.setUpperMargin(0.10);
        r = domainAxis.getRange();
        assertEquals(120.0, r.getLength(), EPSILON);
    }",java.lang.NullPointerException
Chart_4,/222043010/omniapr/defects4j/Chart_4_buggy/tests/org/jfree/chart/junit/JFreeChartTests.java,testSerialization4,"    public void testSerialization4() {

        RegularTimePeriod t = new Day();
        TimeSeries series = new TimeSeries(""Series 1"");
        series.add(t, 36.4);
        t = t.next();
        series.add(t, 63.5);
        TimeSeriesCollection dataset = new TimeSeriesCollection();
        dataset.addSeries(series);

        JFreeChart c1 = ChartFactory.createTimeSeriesChart(""Test"", ""Date"",
                ""Value"", dataset, true, true, true);
        JFreeChart c2 = null;

        try {
            ByteArrayOutputStream buffer = new ByteArrayOutputStream();
            ObjectOutput out = new ObjectOutputStream(buffer);
            out.writeObject(c1);
            out.close();

            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
                    buffer.toByteArray()));
            c2 = (JFreeChart) in.readObject();
            in.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        assertEquals(c1, c2);

    }",java.lang.NullPointerException
Chart_4,/222043010/omniapr/defects4j/Chart_4_buggy/tests/org/jfree/chart/junit/ScatterPlotTests.java,testDrawWithNullInfo,"    public void testDrawWithNullInfo() {

        boolean success = false;

        try {
            BufferedImage image = new BufferedImage(200 , 100,
                    BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = image.createGraphics();
            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,
                    null);
            g2.dispose();
            success = true;
        }
        catch (Exception e) {
          success = false;
          e.printStackTrace();
        }

        assertTrue(success);

    }",java.lang.NullPointerException
Chart_4,/222043010/omniapr/defects4j/Chart_4_buggy/tests/org/jfree/chart/junit/ScatterPlotTests.java,testSetSeriesToolTipGenerator,"    public void testSetSeriesToolTipGenerator() {
        XYPlot plot = (XYPlot) this.chart.getPlot();
        XYItemRenderer renderer = plot.getRenderer();
        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();
        renderer.setSeriesToolTipGenerator(0, tt);
        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0, false);
        assertTrue(tt2 == tt);
    }",java.lang.NullPointerException
Chart_4,/222043010/omniapr/defects4j/Chart_4_buggy/tests/org/jfree/chart/junit/ScatterPlotTests.java,testReplaceDataset,"    public void testReplaceDataset() {

        // create a dataset...
        XYSeries series1 = new XYSeries(""Series 1"");
        series1.add(10.0, 10.0);
        series1.add(20.0, 20.0);
        series1.add(30.0, 30.0);
        XYDataset dataset = new XYSeriesCollection(series1);

        LocalListener l = new LocalListener();
        this.chart.addChangeListener(l);
        XYPlot plot = (XYPlot) this.chart.getPlot();
        plot.setDataset(dataset);
        assertEquals(true, l.flag);
        ValueAxis axis = plot.getRangeAxis();
        Range range = axis.getRange();
        assertTrue(""Expecting the lower bound of the range to be around 10: ""
                   + range.getLowerBound(), range.getLowerBound() <= 10);
        assertTrue(""Expecting the upper bound of the range to be around 30: ""
                   + range.getUpperBound(), range.getUpperBound() >= 30);

    }",java.lang.NullPointerException
Chart_4,/222043010/omniapr/defects4j/Chart_4_buggy/tests/org/jfree/chart/junit/TimeSeriesChartTests.java,testDrawWithNullInfo,"    public void testDrawWithNullInfo() {

        boolean success = false;
        try {
            BufferedImage image = new BufferedImage(200 , 100,
                    BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = image.createGraphics();
            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,
                    null);
            g2.dispose();
            success = true;
        }
        catch (Exception e) {
          success = false;
          e.printStackTrace();
        }
        assertTrue(success);

    }",java.lang.NullPointerException
Chart_4,/222043010/omniapr/defects4j/Chart_4_buggy/tests/org/jfree/chart/junit/TimeSeriesChartTests.java,testSetSeriesToolTipGenerator,"    public void testSetSeriesToolTipGenerator() {
        XYPlot plot = (XYPlot) this.chart.getPlot();
        XYItemRenderer renderer = plot.getRenderer();
        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();
        renderer.setSeriesToolTipGenerator(0, tt);
        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0, false);
        assertTrue(tt2 == tt);
    }",java.lang.NullPointerException
Chart_4,/222043010/omniapr/defects4j/Chart_4_buggy/tests/org/jfree/chart/junit/TimeSeriesChartTests.java,testReplaceDataset,"    public void testReplaceDataset() {

        // create a dataset...
        XYSeries series1 = new XYSeries(""Series 1"");
        series1.add(10.0, 10.0);
        series1.add(20.0, 20.0);
        series1.add(30.0, 30.0);
        XYDataset dataset = new XYSeriesCollection(series1);

        LocalListener l = new LocalListener();
        this.chart.addChangeListener(l);
        XYPlot plot = (XYPlot) this.chart.getPlot();
        plot.setDataset(dataset);
        assertEquals(true, l.flag);
        ValueAxis axis = plot.getRangeAxis();
        Range range = axis.getRange();
        assertTrue(""Expecting the lower bound of the range to be around 10: ""
                   + range.getLowerBound(), range.getLowerBound() <= 10);
        assertTrue(""Expecting the upper bound of the range to be around 30: ""
                   + range.getUpperBound(), range.getUpperBound() >= 30);

    }",java.lang.NullPointerException
Chart_4,/222043010/omniapr/defects4j/Chart_4_buggy/tests/org/jfree/chart/junit/XYAreaChartTests.java,testDrawWithNullInfo,"    public void testDrawWithNullInfo() {

        boolean success = false;
        try {
            BufferedImage image = new BufferedImage(200 , 100,
                    BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = image.createGraphics();
            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,
                    null);
            g2.dispose();
            success = true;
        }
        catch (Exception e) {
          success = false;
          e.printStackTrace();
        }
        assertTrue(success);

    }",java.lang.NullPointerException
Chart_4,/222043010/omniapr/defects4j/Chart_4_buggy/tests/org/jfree/chart/junit/XYAreaChartTests.java,testSetSeriesToolTipGenerator,"    public void testSetSeriesToolTipGenerator() {
        XYPlot plot = (XYPlot) this.chart.getPlot();
        XYItemRenderer renderer = plot.getRenderer();
        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();
        renderer.setSeriesToolTipGenerator(0, tt);
        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0,
                false);
        assertTrue(tt2 == tt);
    }",java.lang.NullPointerException
Chart_4,/222043010/omniapr/defects4j/Chart_4_buggy/tests/org/jfree/chart/junit/XYAreaChartTests.java,testReplaceDataset,"    public void testReplaceDataset() {

        // create a dataset...
        XYSeries series1 = new XYSeries(""Series 1"");
        series1.add(10.0, 10.0);
        series1.add(20.0, 20.0);
        series1.add(30.0, 30.0);
        XYDataset dataset = new XYSeriesCollection(series1);

        LocalListener l = new LocalListener();
        this.chart.addChangeListener(l);
        XYPlot plot = (XYPlot) this.chart.getPlot();
        plot.setDataset(dataset);
        assertEquals(true, l.flag);
        ValueAxis axis = plot.getRangeAxis();
        Range range = axis.getRange();
        assertTrue(""Expecting the lower bound of the range to be around 10: ""
                   + range.getLowerBound(), range.getLowerBound() <= 10);
        assertTrue(""Expecting the upper bound of the range to be around 30: ""
                   + range.getUpperBound(), range.getUpperBound() >= 30);

    }",java.lang.NullPointerException
Chart_4,/222043010/omniapr/defects4j/Chart_4_buggy/tests/org/jfree/chart/junit/XYStepAreaChartTests.java,testDrawWithNullInfo,"    public void testDrawWithNullInfo() {

        boolean success = false;
        try {
            BufferedImage image = new BufferedImage(200 , 100,
                    BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = image.createGraphics();
            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,
                    null);
            g2.dispose();
            success = true;
        }
        catch (Exception e) {
          success = false;
          e.printStackTrace();
        }
        assertTrue(success);

    }",java.lang.NullPointerException
Chart_4,/222043010/omniapr/defects4j/Chart_4_buggy/tests/org/jfree/chart/junit/XYStepAreaChartTests.java,testSetSeriesToolTipGenerator,"    public void testSetSeriesToolTipGenerator() {
        XYPlot plot = (XYPlot) this.chart.getPlot();
        XYItemRenderer renderer = plot.getRenderer();
        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();
        renderer.setSeriesToolTipGenerator(0, tt);
        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0, false);
        assertTrue(tt2 == tt);
    }",java.lang.NullPointerException
Chart_4,/222043010/omniapr/defects4j/Chart_4_buggy/tests/org/jfree/chart/junit/XYStepAreaChartTests.java,testReplaceDataset,"    public void testReplaceDataset() {

        // create a dataset...
        XYSeries series1 = new XYSeries(""Series 1"");
        series1.add(10.0, 10.0);
        series1.add(20.0, 20.0);
        series1.add(30.0, 30.0);
        XYDataset dataset = new XYSeriesCollection(series1);

        LocalListener l = new LocalListener();
        this.chart.addChangeListener(l);
        XYPlot plot = (XYPlot) this.chart.getPlot();
        plot.setDataset(dataset);
        assertEquals(true, l.flag);
        ValueAxis axis = plot.getRangeAxis();
        Range range = axis.getRange();
        assertTrue(""Expecting the lower bound of the range to be around 10: ""
                   + range.getLowerBound(), range.getLowerBound() <= 10);
        assertTrue(""Expecting the upper bound of the range to be around 30: ""
                   + range.getUpperBound(), range.getUpperBound() >= 30);

    }",java.lang.NullPointerException
Chart_4,/222043010/omniapr/defects4j/Chart_4_buggy/tests/org/jfree/chart/junit/XYStepChartTests.java,testDrawWithNullInfo,"    public void testDrawWithNullInfo() {

        boolean success = false;
        try {
            BufferedImage image = new BufferedImage(200 , 100,
                    BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = image.createGraphics();
            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,
                    null);
            g2.dispose();
            success = true;
        }
        catch (Exception e) {
          success = false;
          e.printStackTrace();
        }
        assertTrue(success);

    }",java.lang.NullPointerException
Chart_4,/222043010/omniapr/defects4j/Chart_4_buggy/tests/org/jfree/chart/junit/XYStepChartTests.java,testSetSeriesToolTipGenerator,"    public void testSetSeriesToolTipGenerator() {
        XYPlot plot = (XYPlot) this.chart.getPlot();
        XYItemRenderer renderer = plot.getRenderer();
        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();
        renderer.setSeriesToolTipGenerator(0, tt);
        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0, false);
        assertTrue(tt2 == tt);
    }",java.lang.NullPointerException
Chart_4,/222043010/omniapr/defects4j/Chart_4_buggy/tests/org/jfree/chart/junit/XYStepChartTests.java,testReplaceDataset,"    public void testReplaceDataset() {

        // create a dataset...
        XYSeries series1 = new XYSeries(""Series 1"");
        series1.add(10.0, 10.0);
        series1.add(20.0, 20.0);
        series1.add(30.0, 30.0);
        XYDataset dataset = new XYSeriesCollection(series1);

        LocalListener l = new LocalListener();
        this.chart.addChangeListener(l);
        XYPlot plot = (XYPlot) this.chart.getPlot();
        plot.setDataset(dataset);
        assertEquals(true, l.flag);
        ValueAxis axis = plot.getRangeAxis();
        Range range = axis.getRange();
        assertTrue(""Expecting the lower bound of the range to be around 10: ""
                   + range.getLowerBound(), range.getLowerBound() <= 10);
        assertTrue(""Expecting the upper bound of the range to be around 30: ""
                   + range.getUpperBound(), range.getUpperBound() >= 30);

    }",java.lang.NullPointerException
Chart_4,/222043010/omniapr/defects4j/Chart_4_buggy/tests/org/jfree/chart/plot/junit/XYPlotTests.java,testDrawRangeGridlines,"    public void testDrawRangeGridlines() {
        DefaultXYDataset dataset = new DefaultXYDataset();
        JFreeChart chart = ChartFactory.createXYLineChart(""Title"", ""X"", ""Y"",
                dataset, PlotOrientation.VERTICAL, true, false, false);
        XYPlot plot = (XYPlot) chart.getPlot();
        plot.setRenderer(null);
        boolean success = false;
        try {
            BufferedImage image = new BufferedImage(200 , 100,
                    BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = image.createGraphics();
            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);
            g2.dispose();
            success = true;
        }
        catch (Exception e) {
            e.printStackTrace();
            success = false;
        }
        assertTrue(success);
    }",java.lang.NullPointerException
Chart_5,/222043010/omniapr/defects4j/Chart_5_buggy/tests/org/jfree/data/xy/junit/XYSeriesTests.java,testBug1955483,"    public void testBug1955483() {
        XYSeries series = new XYSeries(""Series"", true, true);
        series.addOrUpdate(1.0, 1.0);
        series.addOrUpdate(1.0, 2.0);
        assertEquals(new Double(1.0), series.getY(0));
        assertEquals(new Double(2.0), series.getY(1));
        assertEquals(2, series.getItemCount());
    }","java.lang.IndexOutOfBoundsException: Index: -1, Size: 1"
Chart_6,/222043010/omniapr/defects4j/Chart_6_buggy/tests/org/jfree/chart/util/junit/ShapeListTests.java,testSerialization,"    public void testSerialization() {

        ShapeList l1 = new ShapeList();
        l1.setShape(0, new Rectangle(1, 2, 3, 4));
        l1.setShape(1, new Line2D.Double(1.0, 2.0, 3.0, 4.0));
        l1.setShape(2, null);

        ShapeList l2 = null;

        try {
            ByteArrayOutputStream buffer = new ByteArrayOutputStream();
            ObjectOutput out = new ObjectOutputStream(buffer);
            out.writeObject(l1);
            out.close();

            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(
            		buffer.toByteArray()));
            l2 = (ShapeList) in.readObject();
            in.close();
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        assertEquals(l1, l2);

    }",junit.framework.AssertionFailedError: expected:<org.jfree.chart.util.ShapeList@aac24dc9> but was:<org.jfree.chart.util.ShapeList@e4584f91>
Chart_6,/222043010/omniapr/defects4j/Chart_6_buggy/tests/org/jfree/chart/util/junit/ShapeListTests.java,testEquals,"    public void testEquals() {
        ShapeList l1 = new ShapeList();
        l1.setShape(0, new Rectangle(1, 2, 3, 4));
        l1.setShape(1, new Line2D.Double(1.0, 2.0, 3.0, 4.0));
        l1.setShape(2, null);

        ShapeList l2 = new ShapeList();
        l2.setShape(0, new Rectangle(1, 2, 3, 4));
        l2.setShape(1, new Line2D.Double(1.0, 2.0, 3.0, 4.0));
        l2.setShape(2, null);

        assertTrue(l1.equals(l2));
        assertTrue(l2.equals(l2));
    }",junit.framework.AssertionFailedError: expected:<org.jfree.chart.util.ShapeList@aac24dc9> but was:<org.jfree.chart.util.ShapeList@e4584f91>
Chart_7,/222043010/omniapr/defects4j/Chart_7_buggy/tests/org/jfree/data/time/junit/TimePeriodValuesTests.java,testGetMaxMiddleIndex,"    public void testGetMaxMiddleIndex() {
        TimePeriodValues s = new TimePeriodValues(""Test"");
        assertEquals(-1, s.getMaxMiddleIndex());
        s.add(new SimpleTimePeriod(100L, 200L), 1.0);
        assertEquals(0, s.getMaxMiddleIndex());
        s.add(new SimpleTimePeriod(300L, 400L), 2.0);
        assertEquals(1, s.getMaxMiddleIndex());
        s.add(new SimpleTimePeriod(0L, 50L), 3.0);
        assertEquals(1, s.getMaxMiddleIndex());
        s.add(new SimpleTimePeriod(150L, 200L), 4.0);
        assertEquals(1, s.getMaxMiddleIndex());
    }",junit.framework.AssertionFailedError: expected:<1> but was:<3>
Chart_8,/222043010/omniapr/defects4j/Chart_8_buggy/tests/org/jfree/data/time/junit/WeekTests.java,testConstructor,"    public void testConstructor() {
        Locale savedLocale = Locale.getDefault();
        TimeZone savedZone = TimeZone.getDefault();
        Locale.setDefault(new Locale(""da"", ""DK""));
        TimeZone.setDefault(TimeZone.getTimeZone(""Europe/Copenhagen""));
        GregorianCalendar cal = (GregorianCalendar) Calendar.getInstance(
                TimeZone.getDefault(), Locale.getDefault());

        // first day of week is monday
        assertEquals(Calendar.MONDAY, cal.getFirstDayOfWeek());
        cal.set(2007, Calendar.AUGUST, 26, 1, 0, 0);
        cal.set(Calendar.MILLISECOND, 0);
        Date t = cal.getTime();
        Week w = new Week(t, TimeZone.getTimeZone(""Europe/Copenhagen""));
        assertEquals(34, w.getWeek());

        Locale.setDefault(Locale.US);
        TimeZone.setDefault(TimeZone.getTimeZone(""US/Detroit""));
        cal = (GregorianCalendar) Calendar.getInstance(TimeZone.getDefault());
        // first day of week is Sunday
        assertEquals(Calendar.SUNDAY, cal.getFirstDayOfWeek());
        cal.set(2007, Calendar.AUGUST, 26, 1, 0, 0);
        cal.set(Calendar.MILLISECOND, 0);

        t = cal.getTime();
        w = new Week(t, TimeZone.getTimeZone(""Europe/Copenhagen""));
        assertEquals(35, w.getWeek());
        w = new Week(t, TimeZone.getTimeZone(""Europe/Copenhagen""),
                new Locale(""da"", ""DK""));
        assertEquals(34, w.getWeek());

        Locale.setDefault(savedLocale);
        TimeZone.setDefault(savedZone);
    }",junit.framework.AssertionFailedError: expected:<35> but was:<34>
Chart_9,/222043010/omniapr/defects4j/Chart_9_buggy/tests/org/jfree/data/time/junit/TimeSeriesTests.java,testBug1864222,"    public void testBug1864222() {
        TimeSeries s = new TimeSeries(""S"");
        s.add(new Day(19, 8, 2005), 1);
        s.add(new Day(31, 1, 2006), 1);
        boolean pass = true;
        try {
            s.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006));
        }
        catch (CloneNotSupportedException e) {
            pass = false;
        }
        assertTrue(pass);
    }",java.lang.IllegalArgumentException: Requires start <= end.
Chart_10,/222043010/omniapr/defects4j/Chart_10_buggy/tests/org/jfree/chart/imagemap/junit/StandardToolTipTagFragmentGeneratorTests.java,testGenerateURLFragment,"    public void testGenerateURLFragment() {
        StandardToolTipTagFragmentGenerator g
                = new StandardToolTipTagFragmentGenerator();
        assertEquals("" title=\""abc\"" alt=\""\"""",
                g.generateToolTipFragment(""abc""));
        assertEquals("" title=\""Series &quot;A&quot;, 100.0\"" alt=\""\"""",
                g.generateToolTipFragment(""Series \""A\"", 100.0""));
    }","junit.framework.ComparisonFailure: expected:< title=""Series [&quot;A&quot;], 100.0"" alt=""""> but was:< title=""Series [""A""], 100.0"" alt="""">"
Chart_11,/222043010/omniapr/defects4j/Chart_11_buggy/tests/org/jfree/chart/util/junit/ShapeUtilitiesTests.java,testEqualGeneralPaths,"    public void testEqualGeneralPaths() {
        GeneralPath g1 = new GeneralPath();
        g1.moveTo(1.0f, 2.0f);
        g1.lineTo(3.0f, 4.0f);
        g1.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);
        g1.quadTo(1.0f, 2.0f, 3.0f, 4.0f);
        g1.closePath();
        GeneralPath g2 = new GeneralPath();
        g2.moveTo(1.0f, 2.0f);
        g2.lineTo(3.0f, 4.0f);
        g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);
        g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f);
        g2.closePath();
        assertTrue(ShapeUtilities.equal(g1, g2));

        g2 = new GeneralPath();
        g2.moveTo(11.0f, 22.0f);
        g2.lineTo(3.0f, 4.0f);
        g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);
        g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f);
        g2.closePath();
        assertFalse(ShapeUtilities.equal(g1, g2));

        g2 = new GeneralPath();
        g2.moveTo(1.0f, 2.0f);
        g2.lineTo(33.0f, 44.0f);
        g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);
        g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f);
        g2.closePath();
        assertFalse(ShapeUtilities.equal(g1, g2));

        g2 = new GeneralPath();
        g2.moveTo(1.0f, 2.0f);
        g2.lineTo(3.0f, 4.0f);
        g2.curveTo(55.0f, 66.0f, 77.0f, 88.0f, 99.0f, 100.0f);
        g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f);
        g2.closePath();
        assertFalse(ShapeUtilities.equal(g1, g2));

        g2 = new GeneralPath();
        g2.moveTo(1.0f, 2.0f);
        g2.lineTo(3.0f, 4.0f);
        g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);
        g2.quadTo(11.0f, 22.0f, 33.0f, 44.0f);
        g2.closePath();
        assertFalse(ShapeUtilities.equal(g1, g2));

        g2 = new GeneralPath();
        g2.moveTo(1.0f, 2.0f);
        g2.lineTo(3.0f, 4.0f);
        g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);
        g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f);
        g2.lineTo(3.0f, 4.0f);
        g2.closePath();
        assertFalse(ShapeUtilities.equal(g1, g2));
    }",junit.framework.AssertionFailedError
Chart_12,/222043010/omniapr/defects4j/Chart_12_buggy/tests/org/jfree/chart/plot/junit/MultiplePiePlotTests.java,testConstructor,"    public void testConstructor() {
    	MultiplePiePlot plot = new MultiplePiePlot();
    	assertNull(plot.getDataset());

    	// the following checks that the plot registers itself as a listener
    	// with the dataset passed to the constructor - see patch 1943021
    	DefaultCategoryDataset dataset = new DefaultCategoryDataset();
    	plot = new MultiplePiePlot(dataset);
    	assertTrue(dataset.hasListener(plot));
    }",junit.framework.AssertionFailedError
Chart_13,/222043010/omniapr/defects4j/Chart_13_buggy/tests/org/jfree/chart/block/junit/BorderArrangementTests.java,testSizingWithWidthConstraint,"    public void testSizingWithWidthConstraint() {
        RectangleConstraint constraint = new RectangleConstraint(
            10.0, new Range(10.0, 10.0), LengthConstraintType.FIXED,
            0.0, new Range(0.0, 0.0), LengthConstraintType.NONE
        );
                
        BlockContainer container = new BlockContainer(new BorderArrangement());
        BufferedImage image = new BufferedImage(
            200, 100, BufferedImage.TYPE_INT_RGB
        );
        Graphics2D g2 = image.createGraphics();
        
        // TBLRC
        // 00001 - center item only
        container.add(new EmptyBlock(5.0, 6.0));
        Size2D size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(6.0, size.height, EPSILON);
        
        container.clear();
        container.add(new EmptyBlock(15.0, 16.0));
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(16.0, size.height, EPSILON);

        // TBLRC
        // 00010 - right item only
        container.clear();
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(45.6, size.height, EPSILON);
        
        // TBLRC
        // 00011 - right and center items
        container.clear();
        container.add(new EmptyBlock(7.0, 20.0));
        container.add(new EmptyBlock(8.0, 45.6), RectangleEdge.RIGHT);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(45.6, size.height, EPSILON);
        
        // TBLRC
        // 00100 - left item only
        container.clear();
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(45.6, size.height, EPSILON);
        
        // TBLRC
        // 00101 - left and center items
        container.clear();
        container.add(new EmptyBlock(10.0, 20.0));
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(45.6, size.height, EPSILON);
        
        // TBLRC
        // 00110 - left and right items
        container.clear();
        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(45.6, size.height, EPSILON);
        
        // TBLRC
        // 00111 - left, right and center items
        container.clear();
        container.add(new EmptyBlock(10.0, 20.0));
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);
        container.add(new EmptyBlock(5.4, 3.2), RectangleEdge.RIGHT);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(45.6, size.height, EPSILON);
        
        // TBLRC
        // 01000 - bottom item only
        container.clear();
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(45.6, size.height, EPSILON);
        
        // TBLRC
        // 01001 - bottom and center only
        container.clear();
        container.add(new EmptyBlock(10.0, 20.0));
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(65.6, size.height, EPSILON);
        
        // TBLRC
        // 01010 - bottom and right only
        container.clear();
        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(65.6, size.height, EPSILON);
        
        // TBLRC
        // 01011 - bottom, right and center
        container.clear();
        container.add(new EmptyBlock(21.0, 12.3));
        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(65.6, size.height, EPSILON);
        
        // TBLRC
        // 01100
        container.clear();
        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(65.6, size.height, EPSILON);
        
        // TBLRC
        // 01101 - bottom, left and center
        container.clear();
        container.add(new EmptyBlock(21.0, 12.3));
        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(65.6, size.height, EPSILON);
        
        // TBLRC
        // 01110 - bottom. left and right
        container.clear();
        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);
        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(65.6, size.height, EPSILON);
        
        // TBLRC
        // 01111
        container.clear();
        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);
        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);
        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);
        container.add(new EmptyBlock(9.0, 10.0));
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(14.0, size.height, EPSILON);
        
        // TBLRC
        // 10000 - top item only
        container.clear();
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(45.6, size.height, EPSILON);
        
        // TBLRC
        // 10001 - top and center only
        container.clear();
        container.add(new EmptyBlock(10.0, 20.0));
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(65.6, size.height, EPSILON);
                
        // TBLRC
        // 10010 - right and top only
        container.clear();
        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(65.6, size.height, EPSILON);
        
        // TBLRC
        // 10011 - top, right and center
        container.clear();
        container.add(new EmptyBlock(21.0, 12.3));
        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(65.6, size.height, EPSILON);

        // TBLRC
        // 10100 - top and left only
        container.clear();
        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(65.6, size.height, EPSILON);
        
        // TBLRC
        // 10101 - top, left and center
        container.clear();
        container.add(new EmptyBlock(21.0, 12.3));
        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(65.6, size.height, EPSILON);
        
        // TBLRC
        // 10110 - top, left and right
        container.clear();
        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);
        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(65.6, size.height, EPSILON);
        
        // TBLRC
        // 10111
        container.clear();
        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);
        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);
        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);
        container.add(new EmptyBlock(9.0, 10.0));
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(12.0, size.height, EPSILON);

        // TBLRC
        // 11000 - top and bottom only
        container.clear();
        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(65.6, size.height, EPSILON);
        
        // TBLRC
        // 11001
        container.clear();
        container.add(new EmptyBlock(21.0, 12.3));
        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(77.9, size.height, EPSILON);
        
        // TBLRC
        // 11010 - top, bottom and right
        container.clear();
        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);
        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(77.9, size.height, EPSILON);
                
        // TBLRC
        // 11011
        container.clear();
        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);
        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);
        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);
        container.add(new EmptyBlock(9.0, 10.0));
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(16.0, size.height, EPSILON);
        
        // TBLRC
        // 11100
        container.clear();
        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.LEFT);
        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);
        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(77.9, size.height, EPSILON);

        // TBLRC
        // 11101
        container.clear();
        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);
        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);
        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);
        container.add(new EmptyBlock(9.0, 10.0));
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(16.0, size.height, EPSILON);
        
        // TBLRC
        // 11110
        container.clear();
        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);
        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);
        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);
        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(14.0, size.height, EPSILON);
        
        // TBLRC
        // 11111 - all
        container.clear();
        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);
        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);
        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);
        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);
        container.add(new EmptyBlock(9.0, 10.0));
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(16.0, size.height, EPSILON);

        // TBLRC
        // 00000 - no items
        container.clear();
        size = container.arrange(g2, constraint);
        assertEquals(10.0, size.width, EPSILON);
        assertEquals(0.0, size.height, EPSILON);
        
    }","java.lang.IllegalArgumentException: Range(double, double): require lower (0.0) <= upper (-2.3000000000000007)."
Chart_14,/222043010/omniapr/defects4j/Chart_14_buggy/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java,testRemoveRangeMarker,"    public void testRemoveRangeMarker() {
    	CategoryPlot plot = new CategoryPlot();
    	assertFalse(plot.removeRangeMarker(new ValueMarker(0.5)));
    }",java.lang.NullPointerException
Chart_14,/222043010/omniapr/defects4j/Chart_14_buggy/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java,testRemoveDomainMarker,"    public void testRemoveDomainMarker() {
    	CategoryPlot plot = new CategoryPlot();
    	assertFalse(plot.removeDomainMarker(new CategoryMarker(""Category 1"")));
    }",java.lang.NullPointerException
Chart_14,/222043010/omniapr/defects4j/Chart_14_buggy/tests/org/jfree/chart/plot/junit/XYPlotTests.java,testRemoveRangeMarker,"    public void testRemoveRangeMarker() {
    	XYPlot plot = new XYPlot();
    	assertFalse(plot.removeRangeMarker(new ValueMarker(0.5)));
    }",java.lang.NullPointerException
Chart_14,/222043010/omniapr/defects4j/Chart_14_buggy/tests/org/jfree/chart/plot/junit/XYPlotTests.java,testRemoveDomainMarker,"    public void testRemoveDomainMarker() {
    	XYPlot plot = new XYPlot();
    	assertFalse(plot.removeDomainMarker(new ValueMarker(0.5)));
    }",java.lang.NullPointerException
Chart_15,/222043010/omniapr/defects4j/Chart_15_buggy/tests/org/jfree/chart/plot/junit/PiePlot3DTests.java,testDrawWithNullDataset,"    public void testDrawWithNullDataset() {
        JFreeChart chart = ChartFactory.createPieChart3D(""Test"", null, true, 
                false, false);
        boolean success = false;
        try {
            BufferedImage image = new BufferedImage(200 , 100, 
                    BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = image.createGraphics();
            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);
            g2.dispose();
            success = true;
        }
        catch (Exception e) {
            success = false;
        }
        assertTrue(success);
    }",junit.framework.AssertionFailedError
Chart_16,/222043010/omniapr/defects4j/Chart_16_buggy/tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java,testGetCategoryIndex,"    public void testGetCategoryIndex() {
    	// check an empty dataset
    	DefaultIntervalCategoryDataset empty 
    	        = new DefaultIntervalCategoryDataset(new double[0][0], 
    	        		new double[0][0]);
    	assertEquals(-1, empty.getCategoryIndex(""ABC""));
    }",java.lang.NullPointerException
Chart_16,/222043010/omniapr/defects4j/Chart_16_buggy/tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java,testSetCategoryKeys,"    public void testSetCategoryKeys() {
    	// check an empty dataset
    	DefaultIntervalCategoryDataset empty 
    	        = new DefaultIntervalCategoryDataset(new double[0][0], 
    	        		new double[0][0]);
    	boolean pass = true;
    	try {
    		empty.setCategoryKeys(new String[0]);
    	}
    	catch (RuntimeException e) {
    		pass = false;
    	}
    	assertTrue(pass);
    }",java.lang.NullPointerException
Chart_16,/222043010/omniapr/defects4j/Chart_16_buggy/tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java,testGetSeriesIndex,"    public void testGetSeriesIndex() {
    	// check an empty dataset
    	DefaultIntervalCategoryDataset empty 
    	        = new DefaultIntervalCategoryDataset(new double[0][0], 
    	        		new double[0][0]);
    	assertEquals(-1, empty.getSeriesIndex(""ABC""));
    }",java.lang.NullPointerException
Chart_16,/222043010/omniapr/defects4j/Chart_16_buggy/tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java,testGetRowCount,"    public void testGetRowCount() {
    	// check an empty dataset
    	DefaultIntervalCategoryDataset empty 
    	        = new DefaultIntervalCategoryDataset(new double[0][0], 
    	        		new double[0][0]);
        assertEquals(0, empty.getColumnCount());
    }",java.lang.NullPointerException
Chart_16,/222043010/omniapr/defects4j/Chart_16_buggy/tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java,testGetRowIndex,"    public void testGetRowIndex() {
    	// check an empty dataset
    	DefaultIntervalCategoryDataset empty 
    	        = new DefaultIntervalCategoryDataset(new double[0][0], 
    	        		new double[0][0]);
    	assertEquals(-1, empty.getRowIndex(""ABC""));
    }",java.lang.NullPointerException
Chart_16,/222043010/omniapr/defects4j/Chart_16_buggy/tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java,testGetColumnCount,"    public void testGetColumnCount() {
    	// check an empty dataset
    	DefaultIntervalCategoryDataset empty 
    	        = new DefaultIntervalCategoryDataset(new double[0][0], 
    	        		new double[0][0]);
        assertEquals(0, empty.getColumnCount());
    }",java.lang.NullPointerException
Chart_16,/222043010/omniapr/defects4j/Chart_16_buggy/tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java,testGetColumnIndex,"    public void testGetColumnIndex() {
    	// check an empty dataset
    	DefaultIntervalCategoryDataset empty 
    	        = new DefaultIntervalCategoryDataset(new double[0][0], 
    	        		new double[0][0]);
    	assertEquals(-1, empty.getColumnIndex(""ABC""));
    }",java.lang.NullPointerException
Chart_16,/222043010/omniapr/defects4j/Chart_16_buggy/tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java,testCloning2,"    public void testCloning2() {
    	DefaultIntervalCategoryDataset d1 
                = new DefaultIntervalCategoryDataset(new double[0][0], 
        		    new double[0][0]);
        DefaultIntervalCategoryDataset d2 = null;
        try {
            d2 = (DefaultIntervalCategoryDataset) d1.clone();
        }
        catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }
        assertTrue(d1 != d2);
        assertTrue(d1.getClass() == d2.getClass());
        assertTrue(d1.equals(d2));	
    }",java.lang.NullPointerException
Chart_17,/222043010/omniapr/defects4j/Chart_17_buggy/tests/org/jfree/data/time/junit/TimeSeriesTests.java,testBug1832432,"    public void testBug1832432() {
        TimeSeries s1 = new TimeSeries(""Series"");
        TimeSeries s2 = null;
        try {
            s2 = (TimeSeries) s1.clone();
        }
        catch (CloneNotSupportedException e) {
            e.printStackTrace();
        }
        assertTrue(s1 != s2);
        assertTrue(s1.getClass() == s2.getClass());
        assertTrue(s1.equals(s2));

        // test independence
        s1.add(new Day(1, 1, 2007), 100.0);
        assertFalse(s1.equals(s2));    	
    }",java.lang.IllegalArgumentException: Requires start <= end.
Chart_19,/222043010/omniapr/defects4j/Chart_19_buggy/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java,testGetRangeAxisIndex,"    public void testGetRangeAxisIndex() {
        CategoryAxis domainAxis1 = new CategoryAxis(""X1"");
        NumberAxis rangeAxis1 = new NumberAxis(""Y1"");
        NumberAxis rangeAxis2 = new NumberAxis(""Y2"");
        CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, 
                null);
        assertEquals(0, plot.getRangeAxisIndex(rangeAxis1));
        assertEquals(-1, plot.getRangeAxisIndex(rangeAxis2));
        plot.setRangeAxis(1, rangeAxis2);
        assertEquals(1, plot.getRangeAxisIndex(rangeAxis2));
        assertEquals(-1, plot.getRangeAxisIndex(new NumberAxis(""Y2"")));
        boolean pass = false;
        try {
            plot.getRangeAxisIndex(null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        assertTrue(pass);
    }",junit.framework.AssertionFailedError
Chart_19,/222043010/omniapr/defects4j/Chart_19_buggy/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java,testGetDomainAxisIndex,"    public void testGetDomainAxisIndex() {
        CategoryAxis domainAxis1 = new CategoryAxis(""X1"");
        CategoryAxis domainAxis2 = new CategoryAxis(""X2"");
        NumberAxis rangeAxis1 = new NumberAxis(""Y1"");
        CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, 
                null);
        assertEquals(0, plot.getDomainAxisIndex(domainAxis1));
        assertEquals(-1, plot.getDomainAxisIndex(domainAxis2));
        plot.setDomainAxis(1, domainAxis2);
        assertEquals(1, plot.getDomainAxisIndex(domainAxis2));
        assertEquals(-1, plot.getDomainAxisIndex(new CategoryAxis(""X2"")));
        boolean pass = false;
        try {
            plot.getDomainAxisIndex(null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        assertTrue(pass);
    }",junit.framework.AssertionFailedError
Chart_20,/222043010/omniapr/defects4j/Chart_20_buggy/tests/org/jfree/chart/plot/junit/ValueMarkerTests.java,test1808376,"    public void test1808376() {
        Stroke stroke = new BasicStroke(1.0f);
        Stroke outlineStroke = new BasicStroke(2.0f);
        ValueMarker m = new ValueMarker(1.0, Color.red, stroke, Color.blue, 
                outlineStroke, 0.5f);
        assertEquals(1.0, m.getValue(), EPSILON);
        assertEquals(Color.red, m.getPaint());
        assertEquals(stroke, m.getStroke());
        assertEquals(Color.blue, m.getOutlinePaint());
        assertEquals(outlineStroke, m.getOutlineStroke());
        assertEquals(0.5f, m.getAlpha(), EPSILON);
    }","junit.framework.AssertionFailedError: expected:<java.awt.Color[r=0,g=0,b=255]> but was:<java.awt.Color[r=255,g=0,b=0]>"
Chart_21,/222043010/omniapr/defects4j/Chart_21_buggy/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java,testGetRangeBounds,"    public void testGetRangeBounds() {
        DefaultBoxAndWhiskerCategoryDataset d1 
                = new DefaultBoxAndWhiskerCategoryDataset();
        d1.add(new BoxAndWhiskerItem(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 
                new ArrayList()), ""R1"", ""C1"");
        assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));
        assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));
        
        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 
                new ArrayList()), ""R1"", ""C1"");
        assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));
        assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));
        
        d1.add(new BoxAndWhiskerItem(2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 
                new ArrayList()), ""R2"", ""C1"");
        assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));
        assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));
        
        // this replaces the entry with the current minimum value, but the new
        // minimum value is now in a different item
        d1.add(new BoxAndWhiskerItem(1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 8.6, 9.6, 
                new ArrayList()), ""R1"", ""C1"");
        assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));
        assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));
    }","junit.framework.AssertionFailedError: expected:<Range[8.5,9.6]> but was:<Range[8.6,9.6]>"
Chart_22,/222043010/omniapr/defects4j/Chart_22_buggy/tests/org/jfree/data/junit/KeyedObjects2DTests.java,testRemoveColumnByKey,"    public void testRemoveColumnByKey() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject(""Obj1"", ""R1"", ""C1"");
        data.setObject(""Obj2"", ""R2"", ""C2"");
        data.removeColumn(""C2"");
        assertEquals(1, data.getColumnCount());
        assertEquals(""Obj1"", data.getObject(0, 0));
        
        // try unknown column key
        boolean pass = false;
        try {
            data.removeColumn(""XXX"");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        assertTrue(pass);
        
        // try null column key
        pass = false;
        try {
            data.removeColumn(null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        assertTrue(pass);
    }",org.jfree.data.UnknownKeyException: The key (C2) is not recognised.
Chart_22,/222043010/omniapr/defects4j/Chart_22_buggy/tests/org/jfree/data/junit/KeyedObjects2DTests.java,testRemoveValue,"    public void testRemoveValue() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject(""Obj1"", ""R1"", ""C1"");
        data.setObject(""Obj2"", ""R2"", ""C2"");
        data.removeObject(""R2"", ""C2"");
        assertEquals(1, data.getRowCount());
        assertEquals(1, data.getColumnCount());
        assertEquals(""Obj1"", data.getObject(0, 0));
    }",org.jfree.data.UnknownKeyException: The key (C2) is not recognised.
Chart_22,/222043010/omniapr/defects4j/Chart_22_buggy/tests/org/jfree/data/junit/KeyedObjects2DTests.java,testGetValueByKey,"    public void testGetValueByKey() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.addObject(""Obj1"", ""R1"", ""C1"");
        data.addObject(""Obj2"", ""R2"", ""C2"");
        assertEquals(""Obj1"", data.getObject(""R1"", ""C1""));
        assertEquals(""Obj2"", data.getObject(""R2"", ""C2""));
        assertNull(data.getObject(""R1"", ""C2""));
        assertNull(data.getObject(""R2"", ""C1""));
        
        // check invalid indices
        boolean pass = false;
        try {
            data.getObject(""XX"", ""C1"");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        assertTrue(pass);
        
        pass = false;
        try {
            data.getObject(""R1"", ""XX"");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        assertTrue(pass);

        pass = false;
        try {
            data.getObject(""XX"", ""C1"");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        assertTrue(pass);

        pass = false;
        try {
            data.getObject(""R1"", ""XX"");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        assertTrue(pass);
    }",org.jfree.data.UnknownKeyException: The key (C2) is not recognised.
Chart_22,/222043010/omniapr/defects4j/Chart_22_buggy/tests/org/jfree/data/junit/KeyedObjects2DTests.java,testRemoveColumnByIndex,"    public void testRemoveColumnByIndex() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject(""Obj1"", ""R1"", ""C1"");
        data.setObject(""Obj2"", ""R2"", ""C2"");
        data.removeColumn(0);
        assertEquals(1, data.getColumnCount());
        assertEquals(""Obj2"", data.getObject(1, 0));
        
        // try negative column index
        boolean pass = false;
        try {
            data.removeColumn(-1);
        }
        catch (IndexOutOfBoundsException e) {
            pass = true;
        }
        assertTrue(pass);
        
        // try column index too high
        pass = false;
        try {
            data.removeColumn(data.getColumnCount());
        }
        catch (IndexOutOfBoundsException e) {
            pass = true;
        }
        assertTrue(pass);
    }",org.jfree.data.UnknownKeyException: The key (C2) is not recognised.
Chart_22,/222043010/omniapr/defects4j/Chart_22_buggy/tests/org/jfree/data/junit/KeyedObjects2DTests.java,testSetObject,"    public void testSetObject() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject(""Obj1"", ""R1"", ""C1"");
        data.setObject(""Obj2"", ""R2"", ""C2"");
        assertEquals(""Obj1"", data.getObject(""R1"", ""C1""));
        assertEquals(""Obj2"", data.getObject(""R2"", ""C2""));
        assertNull(data.getObject(""R1"", ""C2""));
        assertNull(data.getObject(""R2"", ""C1""));
        
        // confirm overwriting an existing value
        data.setObject(""ABC"", ""R2"", ""C2"");
        assertEquals(""ABC"", data.getObject(""R2"", ""C2""));
        
        // try null keys
        boolean pass = false;
        try {
            data.setObject(""X"", null, ""C1"");
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        assertTrue(pass);
        
        pass = false;
        try {
            data.setObject(""X"", ""R1"", null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        assertTrue(pass);
    }",org.jfree.data.UnknownKeyException: The key (C2) is not recognised.
Chart_22,/222043010/omniapr/defects4j/Chart_22_buggy/tests/org/jfree/data/junit/KeyedObjects2DTests.java,testRemoveRowByKey,"    public void testRemoveRowByKey() {
        KeyedObjects2D data = new KeyedObjects2D();
        data.setObject(""Obj1"", ""R1"", ""C1"");
        data.setObject(""Obj2"", ""R2"", ""C2"");
        data.removeRow(""R2"");
        assertEquals(1, data.getRowCount());
        assertEquals(""Obj1"", data.getObject(0, 0));
        
        // try unknown row key
        boolean pass = false;
        try {
            data.removeRow(""XXX"");
        }
        catch (UnknownKeyException e) {
            pass = true;
        }
        assertTrue(pass);
        
        // try null row key
        pass = false;
        try {
            data.removeRow(null);
        }
        catch (IllegalArgumentException e) {
            pass = true;
        }
        assertTrue(pass);
    }",org.jfree.data.UnknownKeyException: The key (C2) is not recognised.
Chart_23,/222043010/omniapr/defects4j/Chart_23_buggy/tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java,testEquals,"    public void testEquals() {
        MinMaxCategoryRenderer r1 = new MinMaxCategoryRenderer();
        MinMaxCategoryRenderer r2 = new MinMaxCategoryRenderer();
        assertEquals(r1, r2);
        
        r1.setDrawLines(true);
        assertFalse(r1.equals(r2));
        r2.setDrawLines(true);
        assertTrue(r1.equals(r2));
        
        r1.setGroupPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, 
                Color.yellow));
        assertFalse(r1.equals(r2));
        r2.setGroupPaint(new GradientPaint(1.0f, 2.0f, Color.red, 3.0f, 4.0f, 
                Color.yellow));
        assertTrue(r1.equals(r2));
        
        r1.setGroupStroke(new BasicStroke(1.2f));
        assertFalse(r1.equals(r2));
        r2.setGroupStroke(new BasicStroke(1.2f));
        assertTrue(r1.equals(r2));
    }",junit.framework.AssertionFailedError
Chart_24,/222043010/omniapr/defects4j/Chart_24_buggy/tests/org/jfree/chart/renderer/junit/GrayPaintScaleTests.java,testGetPaint,"    public void testGetPaint() {
        GrayPaintScale gps = new GrayPaintScale();
        Color c = (Color) gps.getPaint(0.0);
        assertTrue(c.equals(Color.black));
        c = (Color) gps.getPaint(1.0);
        assertTrue(c.equals(Color.white));
        
        // check lookup values that are outside the bounds - see bug report
        // 1767315
        c = (Color) gps.getPaint(-0.5);
        assertTrue(c.equals(Color.black));
        c = (Color) gps.getPaint(1.5);
        assertTrue(c.equals(Color.white));
    }",java.lang.IllegalArgumentException: Color parameter outside of expected range: Red Green Blue
Chart_25,/222043010/omniapr/defects4j/Chart_25_buggy/tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java,testDrawWithNullMeanVertical,"    public void testDrawWithNullMeanVertical() {
        boolean success = false;
        try {
            DefaultStatisticalCategoryDataset dataset 
                    = new DefaultStatisticalCategoryDataset();
            dataset.add(1.0, 2.0, ""S1"", ""C1"");
            dataset.add(null, new Double(4.0), ""S1"", ""C2"");
            CategoryPlot plot = new CategoryPlot(dataset, 
                    new CategoryAxis(""Category""), new NumberAxis(""Value""), 
                    new StatisticalBarRenderer());
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200, 
                    null);
            success = true;
        }
        catch (NullPointerException e) {
            e.printStackTrace();
            success = false;
        }
        assertTrue(success);
    }",junit.framework.AssertionFailedError
Chart_25,/222043010/omniapr/defects4j/Chart_25_buggy/tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java,testDrawWithNullDeviationVertical,"    public void testDrawWithNullDeviationVertical() {
        boolean success = false;
        try {
            DefaultStatisticalCategoryDataset dataset 
                    = new DefaultStatisticalCategoryDataset();
            dataset.add(1.0, 2.0, ""S1"", ""C1"");
            dataset.add(new Double(4.0), null, ""S1"", ""C2"");
            CategoryPlot plot = new CategoryPlot(dataset, 
                    new CategoryAxis(""Category""), new NumberAxis(""Value""), 
                    new StatisticalBarRenderer());
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200, 
                    null);
            success = true;
        }
        catch (NullPointerException e) {
            e.printStackTrace();
            success = false;
        }
        assertTrue(success);
    }",junit.framework.AssertionFailedError
Chart_25,/222043010/omniapr/defects4j/Chart_25_buggy/tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java,testDrawWithNullMeanHorizontal,"    public void testDrawWithNullMeanHorizontal() {
        boolean success = false;
        try {
            DefaultStatisticalCategoryDataset dataset 
                    = new DefaultStatisticalCategoryDataset();
            dataset.add(1.0, 2.0, ""S1"", ""C1"");
            dataset.add(null, new Double(4.0), ""S1"", ""C2"");
            CategoryPlot plot = new CategoryPlot(dataset, 
                    new CategoryAxis(""Category""), new NumberAxis(""Value""), 
                    new StatisticalBarRenderer());
            plot.setOrientation(PlotOrientation.HORIZONTAL);
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200, 
                    null);
            success = true;
        }
        catch (NullPointerException e) {
            e.printStackTrace();
            success = false;
        }
        assertTrue(success);
    }",junit.framework.AssertionFailedError
Chart_25,/222043010/omniapr/defects4j/Chart_25_buggy/tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java,testDrawWithNullDeviationHorizontal,"    public void testDrawWithNullDeviationHorizontal() {
        boolean success = false;
        try {
            DefaultStatisticalCategoryDataset dataset 
                    = new DefaultStatisticalCategoryDataset();
            dataset.add(1.0, 2.0, ""S1"", ""C1"");
            dataset.add(new Double(4.0), null, ""S1"", ""C2"");
            CategoryPlot plot = new CategoryPlot(dataset, 
                    new CategoryAxis(""Category""), new NumberAxis(""Value""), 
                    new StatisticalBarRenderer());
            plot.setOrientation(PlotOrientation.HORIZONTAL);
            JFreeChart chart = new JFreeChart(plot);
            /* BufferedImage image = */ chart.createBufferedImage(300, 200, 
                    null);
            success = true;
        }
        catch (NullPointerException e) {
            e.printStackTrace();
            success = false;
        }
        assertTrue(success);
    }",junit.framework.AssertionFailedError
Math_1,/222043010/omniapr/defects4j/Math_1_buggy/src/test/java/org/apache/commons/math3/fraction/BigFractionTest.java,testDigitLimitConstructor,"    public void testDigitLimitConstructor() throws ConvergenceException {
        assertFraction(2, 5, new BigFraction(0.4, 9));
        assertFraction(2, 5, new BigFraction(0.4, 99));
        assertFraction(2, 5, new BigFraction(0.4, 999));

        assertFraction(3, 5, new BigFraction(0.6152, 9));
        assertFraction(8, 13, new BigFraction(0.6152, 99));
        assertFraction(510, 829, new BigFraction(0.6152, 999));
        assertFraction(769, 1250, new BigFraction(0.6152, 9999));
        
        // MATH-996
        assertFraction(1, 2, new BigFraction(0.5000000001, 10));
    }","org.apache.commons.math3.fraction.FractionConversionException: illegal state: Overflow trying to convert 0.5 to fraction (2,499,999,794/4,999,999,587)"
Math_1,/222043010/omniapr/defects4j/Math_1_buggy/src/test/java/org/apache/commons/math3/fraction/FractionTest.java,testDigitLimitConstructor,"    public void testDigitLimitConstructor() throws ConvergenceException  {
        assertFraction(2, 5, new Fraction(0.4,   9));
        assertFraction(2, 5, new Fraction(0.4,  99));
        assertFraction(2, 5, new Fraction(0.4, 999));

        assertFraction(3, 5,      new Fraction(0.6152,    9));
        assertFraction(8, 13,     new Fraction(0.6152,   99));
        assertFraction(510, 829,  new Fraction(0.6152,  999));
        assertFraction(769, 1250, new Fraction(0.6152, 9999));

        // MATH-996
        assertFraction(1, 2, new Fraction(0.5000000001, 10));
    }","org.apache.commons.math3.fraction.FractionConversionException: illegal state: Overflow trying to convert 0.5 to fraction (2,499,999,794/4,999,999,587)"
Math_2,/222043010/omniapr/defects4j/Math_2_buggy/src/test/java/org/apache/commons/math3/distribution/HypergeometricDistributionTest.java,testMath1021,"    public void testMath1021() {
        final int N = 43130568;
        final int m = 42976365;
        final int n = 50;
        final HypergeometricDistribution dist = new HypergeometricDistribution(N, m, n);

        for (int i = 0; i < 100; i++) {
            final int sample = dist.sample();
            Assert.assertTrue(""sample="" + sample, 0 <= sample);
            Assert.assertTrue(""sample="" + sample, sample <= n);
        }
    }",junit.framework.AssertionFailedError: sample=-50
Math_2,/222043010/omniapr/defects4j/Math_2_buggy/src/test/java/org/apache/commons/math3/genetics/FixedElapsedTimeTest.java,testIsSatisfied,"    public void testIsSatisfied() {
        final Population pop = new Population() {
            public void addChromosome(final Chromosome chromosome) {
                // unimportant
            }
            public Chromosome getFittestChromosome() {
                // unimportant
                return null;
            }
            public int getPopulationLimit() {
                // unimportant
                return 0;
            }
            public int getPopulationSize() {
                // unimportant
                return 0;
            }
            public Population nextGeneration() {
                // unimportant
                return null;
            }
            public Iterator<Chromosome> iterator() {
                // unimportant
                return null;
            }
        };

        final long start = System.nanoTime();
        final long duration = 3;
        final FixedElapsedTime tec = new FixedElapsedTime(duration, TimeUnit.SECONDS);

        while (!tec.isSatisfied(pop)) {
            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                // ignore
            }
        }

        final long end = System.nanoTime();
        final long elapsedTime = end - start;
        final long diff = FastMath.abs(elapsedTime - TimeUnit.SECONDS.toNanos(duration));

        Assert.assertTrue(diff < TimeUnit.MILLISECONDS.toNanos(100));
    }",junit.framework.AssertionFailedError
Math_3,/222043010/omniapr/defects4j/Math_3_buggy/src/test/java/org/apache/commons/math3/util/MathArraysTest.java,testLinearCombinationWithSingleElementArray,"    public void testLinearCombinationWithSingleElementArray() {
        final double[] a = { 1.23456789 };
        final double[] b = { 98765432.1 };

        Assert.assertEquals(a[0] * b[0], MathArrays.linearCombination(a, b), 0d);
    }",java.lang.ArrayIndexOutOfBoundsException: 1
Math_4,/222043010/omniapr/defects4j/Math_4_buggy/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java,testIntersectionNotIntersecting,"    public void testIntersectionNotIntersecting() throws MathIllegalArgumentException {
        SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(1.5, 1, 1));
        SubLine sub2 = new SubLine(new Vector3D(2, 3, 0), new Vector3D(2, 3, 0.5));
        Assert.assertNull(sub1.intersection(sub2, true));
        Assert.assertNull(sub1.intersection(sub2, false));
    }",java.lang.NullPointerException
Math_4,/222043010/omniapr/defects4j/Math_4_buggy/src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java,testIntersectionParallel,"    public void testIntersectionParallel() {
        final SubLine sub1 = new SubLine(new Vector2D(0, 1), new Vector2D(0, 2));
        final SubLine sub2 = new SubLine(new Vector2D(66, 3), new Vector2D(66, 4));
        Assert.assertNull(sub1.intersection(sub2, true));
        Assert.assertNull(sub1.intersection(sub2, false));
    }",java.lang.NullPointerException
Math_5,/222043010/omniapr/defects4j/Math_5_buggy/src/test/java/org/apache/commons/math3/complex/ComplexTest.java,testReciprocalZero,"    public void testReciprocalZero() {
        Assert.assertEquals(Complex.ZERO.reciprocal(), Complex.INF);
    }","junit.framework.AssertionFailedError: expected:<(NaN, NaN)> but was:<(Infinity, Infinity)>"
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java,testTrivial,"    public void testTrivial() {
        LinearProblem problem
            = new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });
        NonLinearConjugateGradientOptimizer optimizer
            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
                                                      new SimpleValueChecker(1e-6, 1e-6));
        PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 problem.getObjectiveFunction(),
                                 problem.getObjectiveFunctionGradient(),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 0 }));
        Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);
        Assert.assertEquals(0.0, optimum.getValue(), 1.0e-10);

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java,testConstrainedRosen,"    public void testConstrainedRosen() {
        double[] startPoint = point(DIM, 0.1);
        double[] insigma = point(DIM, 0.1);
        double[][] boundaries = boundaries(DIM, -1, 2);
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java,testElliRotated,"    public void testElliRotated() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new ElliRotated(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new ElliRotated(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java,testEllipse,"    public void testEllipse() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Elli(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new Elli(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java,testTwoAxes,"    public void testTwoAxes() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new TwoAxes(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);
        doTest(new TwoAxes(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,
                1e-8, 1e-3, 200000, expected);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java,testCigar,"    public void testCigar() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);
        doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java,testRosen,"    public void testRosen() {
        double[] startPoint = point(DIM,0.1);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java,testRastrigin,"    public void testRastrigin() {
        double[] startPoint = point(DIM,0.1);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Rastrigin(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);
        doTest(new Rastrigin(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), false, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java,testDiagonalRosen,"    public void testDiagonalRosen() {
        double[] startPoint = point(DIM,0.1);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 1, 1e-13,
                1e-10, 1e-4, 1000000, expected);
     }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java,testSsDiffPow,"    public void testSsDiffPow() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new SsDiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, true, 0, 1e-13,
                1e-4, 1e-1, 200000, expected);
        doTest(new SsDiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, false, 0, 1e-13,
                1e-4, 1e-1, 200000, expected);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java,testMaximize,"    public void testMaximize() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),1.0);
        doTest(new MinusElli(), startPoint, insigma, boundaries,
                GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,
                2e-10, 5e-6, 100000, expected);
        doTest(new MinusElli(), startPoint, insigma, boundaries,
                GoalType.MAXIMIZE, LAMBDA, false, 0, 1.0-1e-13,
                2e-10, 5e-6, 100000, expected);
        boundaries = boundaries(DIM,-0.3,0.3); 
        startPoint = point(DIM,0.1);
        doTest(new MinusElli(), startPoint, insigma, boundaries,
                GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,
                2e-10, 5e-6, 100000, expected);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java,testAckley,"    public void testAckley() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,1.0);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Ackley(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,
                1e-9, 1e-5, 100000, expected);
        doTest(new Ackley(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,
                1e-9, 1e-5, 100000, expected);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java,testCigTab,"    public void testCigTab() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.3);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new CigTab(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 5e-5, 100000, expected);
        doTest(new CigTab(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 5e-5, 100000, expected);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java,testDiffPow,"    public void testDiffPow() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new DiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, true, 0, 1e-13,
                1e-8, 1e-1, 100000, expected);
        doTest(new DiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, false, 0, 1e-13,
                1e-8, 2e-1, 100000, expected);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java,testSphere,"    public void testSphere() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Sphere(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new Sphere(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java,testTablet,"    public void testTablet() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Tablet(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new Tablet(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java,testCigarWithBoundaries,"    public void testCigarWithBoundaries() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = boundaries(DIM, -1e100, Double.POSITIVE_INFINITY);
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);
        doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java,testSumSinc,"    public void testSumSinc() {
        final MultivariateFunction func = new SumSincFunction(-1);

        int dim = 2;
        final double[] minPoint = new double[dim];
        for (int i = 0; i < dim; i++) {
            minPoint[i] = 0;
        }

        double[] init = new double[dim];

        // Initial is minimum.
        for (int i = 0; i < dim; i++) {
            init[i] = minPoint[i];
        }
        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9);

        // Initial is far from minimum.
        for (int i = 0; i < dim; i++) {
            init[i] = minPoint[i] + 3;
        }
        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-5);
        // More stringent line search tolerance enhances the precision
        // of the result.
        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9, 1e-7);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java,testMaximize1,"    public void testMaximize1() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { -3.0, 0.0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 7e-7);
        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-7);
        Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 2e-14);
        Assert.assertTrue(optimizer.getEvaluations() > 120);
        Assert.assertTrue(optimizer.getEvaluations() < 150);

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java,testMaximize2,"    public void testMaximize2() {
        SimplexOptimizer optimizer = new SimplexOptimizer(new SimpleValueChecker(1e-15, 1e-30));
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);
        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);
        Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 2e-12);
        Assert.assertTrue(optimizer.getEvaluations() > 180);
        Assert.assertTrue(optimizer.getEvaluations() < 220);

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java,testMinimize1,"    public void testMinimize1() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 4e-6);
        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);
        Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 8e-13);
        Assert.assertTrue(optimizer.getEvaluations() > 120);
        Assert.assertTrue(optimizer.getEvaluations() < 150);

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java,testMinimize2,"    public void testMinimize2() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);
        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);
        Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 2e-12);
        Assert.assertTrue(optimizer.getEvaluations() > 120);
        Assert.assertTrue(optimizer.getEvaluations() < 150);

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java,testMaximize1,"    public void testMaximize1() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5);
        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);
        Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12);
        Assert.assertTrue(optimizer.getEvaluations() > 60);
        Assert.assertTrue(optimizer.getEvaluations() < 90);

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java,testMaximize2,"    public void testMaximize2() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6);
        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6);
        Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12);
        Assert.assertTrue(optimizer.getEvaluations() > 60);
        Assert.assertTrue(optimizer.getEvaluations() < 90);

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java,testMinimize1,"    public void testMinimize1() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7);
        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5);
        Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12);
        Assert.assertTrue(optimizer.getEvaluations() > 60);
        Assert.assertTrue(optimizer.getEvaluations() < 90);

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);
    }",junit.framework.AssertionFailedError
Math_6,/222043010/omniapr/defects4j/Math_6_buggy/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java,testMinimize2,"    public void testMinimize2() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6);
        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6);
        Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11);
        Assert.assertTrue(optimizer.getEvaluations() > 60);
        Assert.assertTrue(optimizer.getEvaluations() < 90);

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);
    }",junit.framework.AssertionFailedError
Math_7,/222043010/omniapr/defects4j/Math_7_buggy/src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java,testEventsScheduling,"  public void testEventsScheduling() {

      FirstOrderDifferentialEquations sincos = new FirstOrderDifferentialEquations() {

          public int getDimension() {
              return 2;
          }

          public void computeDerivatives(double t, double[] y, double[] yDot) {
              yDot[0] =  y[1];
              yDot[1] = -y[0];
          }

      };

      SchedulingChecker sinChecker = new SchedulingChecker(0); // events at 0, PI, 2PI ...
      SchedulingChecker cosChecker = new SchedulingChecker(1); // events at PI/2, 3PI/2, 5PI/2 ...

      FirstOrderIntegrator integ =
              new DormandPrince853Integrator(0.001, 1.0, 1.0e-12, 0.0);
      integ.addEventHandler(sinChecker, 0.01, 1.0e-7, 100);
      integ.addStepHandler(sinChecker);
      integ.addEventHandler(cosChecker, 0.01, 1.0e-7, 100);
      integ.addStepHandler(cosChecker);
      double   t0 = 0.5;
      double[] y0 = new double[] { FastMath.sin(t0), FastMath.cos(t0) };
      double   t  = 10.0;
      double[] y  = new double[2];
      integ.integrate(sincos, t0, y0, t, y);

  }",junit.framework.AssertionFailedError
Math_8,/222043010/omniapr/defects4j/Math_8_buggy/src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java,testIssue942,"    public void testIssue942() {
        List<Pair<Object,Double>> list = new ArrayList<Pair<Object, Double>>();
        list.add(new Pair<Object, Double>(new Object() {}, new Double(0)));
        list.add(new Pair<Object, Double>(new Object() {}, new Double(1)));
        Assert.assertEquals(1, new DiscreteDistribution<Object>(list).sample(1).length);
    }",java.lang.ArrayStoreException: org.apache.commons.math3.distribution.DiscreteRealDistributionTest$2
Math_9,/222043010/omniapr/defects4j/Math_9_buggy/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/LineTest.java,testRevert,"    public void testRevert() {
        
        // setup
        Line line = new Line(new Vector3D(1653345.6696423641, 6170370.041579291, 90000),
                             new Vector3D(1650757.5050732433, 6160710.879908984, 0.9));
        Vector3D expected = line.getDirection().negate();

        // action
        Line reverted = line.revert();

        // verify
        Assert.assertArrayEquals(expected.toArray(), reverted.getDirection().toArray(), 0);

    }",junit.framework.AssertionFailedError: arrays first differed at element [0]; expected:<0.028581782127907646> but was:<0.028581782243293483>
Math_10,/222043010/omniapr/defects4j/Math_10_buggy/src/test/java/org/apache/commons/math3/analysis/differentiation/DerivativeStructureTest.java,testAtan2SpecialCases,"    public void testAtan2SpecialCases() {

        DerivativeStructure pp =
                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, +0.0),
                                          new DerivativeStructure(2, 2, 1, +0.0));
        Assert.assertEquals(0, pp.getValue(), 1.0e-15);
        Assert.assertEquals(+1, FastMath.copySign(1, pp.getValue()), 1.0e-15);

        DerivativeStructure pn =
                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, +0.0),
                                          new DerivativeStructure(2, 2, 1, -0.0));
        Assert.assertEquals(FastMath.PI, pn.getValue(), 1.0e-15);

        DerivativeStructure np =
                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, -0.0),
                                          new DerivativeStructure(2, 2, 1, +0.0));
        Assert.assertEquals(0, np.getValue(), 1.0e-15);
        Assert.assertEquals(-1, FastMath.copySign(1, np.getValue()), 1.0e-15);

        DerivativeStructure nn =
                DerivativeStructure.atan2(new DerivativeStructure(2, 2, 1, -0.0),
                                          new DerivativeStructure(2, 2, 1, -0.0));
        Assert.assertEquals(-FastMath.PI, nn.getValue(), 1.0e-15);

    }",junit.framework.AssertionFailedError: expected:<0.0> but was:<NaN>
Math_11,/222043010/omniapr/defects4j/Math_11_buggy/src/test/java/org/apache/commons/math3/distribution/MultivariateNormalDistributionTest.java,testUnivariateDistribution,"    public void testUnivariateDistribution() {
        final double[] mu = { -1.5 };
        final double[][] sigma = { { 1 } };
 
        final MultivariateNormalDistribution multi = new MultivariateNormalDistribution(mu, sigma);

        final NormalDistribution uni = new NormalDistribution(mu[0], sigma[0][0]);
        final Random rng = new Random();
        final int numCases = 100;
        final double tol = Math.ulp(1d);
        for (int i = 0; i < numCases; i++) {
            final double v = rng.nextDouble() * 10 - 5;
            Assert.assertEquals(uni.density(v), multi.density(new double[] { v }), tol);
        }
    }",junit.framework.AssertionFailedError: expected:<0.1732841149422468> but was:<0.434358862058644>
Math_13,/222043010/omniapr/defects4j/Math_13_buggy/src/test/java/org/apache/commons/math3/optimization/fitting/PolynomialFitterTest.java,testLargeSample,"    public void testLargeSample() {
        Random randomizer = new Random(0x5551480dca5b369bl);
        double maxError = 0;
        for (int degree = 0; degree < 10; ++degree) {
            PolynomialFunction p = buildRandomPolynomial(degree, randomizer);

            PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());
            for (int i = 0; i < 40000; ++i) {
                double x = -1.0 + i / 20000.0;
                fitter.addObservedPoint(1.0, x,
                                        p.value(x) + 0.1 * randomizer.nextGaussian());
            }

            final double[] init = new double[degree + 1];
            PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));

            for (double x = -1.0; x < 1.0; x += 0.01) {
                double error = FastMath.abs(p.value(x) - fitted.value(x)) /
                              (1.0 + FastMath.abs(p.value(x)));
                maxError = FastMath.max(maxError, error);
                Assert.assertTrue(FastMath.abs(error) < 0.01);
            }
        }
        Assert.assertTrue(maxError > 0.001);
    }",java.lang.OutOfMemoryError: Java heap space
Math_14,/222043010/omniapr/defects4j/Math_14_buggy/src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java,testLargeSample,"    public void testLargeSample() {
        Random randomizer = new Random(0x5551480dca5b369bl);
        double maxError = 0;
        for (int degree = 0; degree < 10; ++degree) {
            PolynomialFunction p = buildRandomPolynomial(degree, randomizer);

            PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());
            for (int i = 0; i < 40000; ++i) {
                double x = -1.0 + i / 20000.0;
                fitter.addObservedPoint(1.0, x,
                                        p.value(x) + 0.1 * randomizer.nextGaussian());
            }

            final double[] init = new double[degree + 1];
            PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));

            for (double x = -1.0; x < 1.0; x += 0.01) {
                double error = FastMath.abs(p.value(x) - fitted.value(x)) /
                              (1.0 + FastMath.abs(p.value(x)));
                maxError = FastMath.max(maxError, error);
                Assert.assertTrue(FastMath.abs(error) < 0.01);
            }
        }
        Assert.assertTrue(maxError > 0.001);
    }",java.lang.OutOfMemoryError: Java heap space
Math_15,/222043010/omniapr/defects4j/Math_15_buggy/src/test/java/org/apache/commons/math3/genetics/FixedElapsedTimeTest.java,testIsSatisfied,"    public void testIsSatisfied() {
        final Population pop = new Population() {
            public void addChromosome(final Chromosome chromosome) {
                // unimportant
            }
            public Chromosome getFittestChromosome() {
                // unimportant
                return null;
            }
            public int getPopulationLimit() {
                // unimportant
                return 0;
            }
            public int getPopulationSize() {
                // unimportant
                return 0;
            }
            public Population nextGeneration() {
                // unimportant
                return null;
            }
            public Iterator<Chromosome> iterator() {
                // unimportant
                return null;
            }
        };

        final long start = System.nanoTime();
        final long duration = 3;
        final FixedElapsedTime tec = new FixedElapsedTime(duration, TimeUnit.SECONDS);

        while (!tec.isSatisfied(pop)) {
            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                // ignore
            }
        }

        final long end = System.nanoTime();
        final long elapsedTime = end - start;
        final long diff = FastMath.abs(elapsedTime - TimeUnit.SECONDS.toNanos(duration));

        Assert.assertTrue(diff < TimeUnit.MILLISECONDS.toNanos(100));
    }",junit.framework.AssertionFailedError
Math_15,/222043010/omniapr/defects4j/Math_15_buggy/src/test/java/org/apache/commons/math3/util/FastMathTest.java,testMath904,"    public void testMath904() {
        final double x = -1;
        final double y = (5 + 1e-15) * 1e15;
        Assert.assertEquals(Math.pow(x, y),
                            FastMath.pow(x, y), 0);
        Assert.assertEquals(Math.pow(x, -y),
                            FastMath.pow(x, -y), 0);
    }",junit.framework.AssertionFailedError: expected:<-1.0> but was:<1.0>
Math_16,/222043010/omniapr/defects4j/Math_16_buggy/src/test/java/org/apache/commons/math3/genetics/FixedElapsedTimeTest.java,testIsSatisfied,"    public void testIsSatisfied() {
        final Population pop = new Population() {
            public void addChromosome(final Chromosome chromosome) {
                // unimportant
            }
            public Chromosome getFittestChromosome() {
                // unimportant
                return null;
            }
            public int getPopulationLimit() {
                // unimportant
                return 0;
            }
            public int getPopulationSize() {
                // unimportant
                return 0;
            }
            public Population nextGeneration() {
                // unimportant
                return null;
            }
            public Iterator<Chromosome> iterator() {
                // unimportant
                return null;
            }
        };

        final long start = System.nanoTime();
        final long duration = 3;
        final FixedElapsedTime tec = new FixedElapsedTime(duration, TimeUnit.SECONDS);

        while (!tec.isSatisfied(pop)) {
            try {
                Thread.sleep(50);
            } catch (InterruptedException e) {
                // ignore
            }
        }

        final long end = System.nanoTime();
        final long elapsedTime = end - start;
        final long diff = FastMath.abs(elapsedTime - TimeUnit.SECONDS.toNanos(duration));

        Assert.assertTrue(diff < TimeUnit.MILLISECONDS.toNanos(100));
    }",junit.framework.AssertionFailedError
Math_16,/222043010/omniapr/defects4j/Math_16_buggy/src/test/java/org/apache/commons/math3/util/FastMathTest.java,testMath905LargePositive,"    public void testMath905LargePositive() {
        final double start = StrictMath.log(Double.MAX_VALUE);
        final double endT = StrictMath.sqrt(2) * StrictMath.sqrt(Double.MAX_VALUE);
        final double end = 2 * StrictMath.log(endT);

        double maxErr = 0;
        for (double x = start; x < end; x += 1e-3) {
            final double tst = FastMath.cosh(x);
            final double ref = Math.cosh(x);
            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            
        }
        Assert.assertEquals(0, maxErr, 3);

        for (double x = start; x < end; x += 1e-3) {
            final double tst = FastMath.sinh(x);
            final double ref = Math.sinh(x);
            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            
        }
        Assert.assertEquals(0, maxErr, 3);
    }",junit.framework.AssertionFailedError: expected:<0.0> but was:<Infinity>
Math_16,/222043010/omniapr/defects4j/Math_16_buggy/src/test/java/org/apache/commons/math3/util/FastMathTest.java,testMath905LargeNegative,"    public void testMath905LargeNegative() {
        final double start = -StrictMath.log(Double.MAX_VALUE);
        final double endT = StrictMath.sqrt(2) * StrictMath.sqrt(Double.MAX_VALUE);
        final double end = -2 * StrictMath.log(endT);

        double maxErr = 0;
        for (double x = start; x > end; x -= 1e-3) {
            final double tst = FastMath.cosh(x);
            final double ref = Math.cosh(x);
            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            
        }
        Assert.assertEquals(0, maxErr, 3);

        for (double x = start; x > end; x -= 1e-3) {
            final double tst = FastMath.sinh(x);
            final double ref = Math.sinh(x);
            maxErr = FastMath.max(maxErr, FastMath.abs(ref - tst) / FastMath.ulp(ref));            
        }
        Assert.assertEquals(0, maxErr, 3);
    }",junit.framework.AssertionFailedError: expected:<0.0> but was:<Infinity>
Math_17,/222043010/omniapr/defects4j/Math_17_buggy/src/test/java/org/apache/commons/math3/dfp/DfpTest.java,testMultiply,"    public void testMultiply()
    {
        test(field.newDfp(""1"").multiply(field.newDfp(""1"")),      // Basic tests   1*1 = 1
             field.newDfp(""1""),
             0, ""Multiply #1"");

        test(field.newDfp(""1"").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp(""1""),
             0, ""Multiply #2"");

        test(field.newDfp(""-1"").multiply(field.newDfp(""1"")),     // Basic tests   -1*1 = -1
             field.newDfp(""-1""),
             0, ""Multiply #3"");

        test(field.newDfp(""-1"").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp(""-1""),
             0, ""Multiply #4"");

        // basic tests with integers
        test(field.newDfp(""2"").multiply(field.newDfp(""3"")),
             field.newDfp(""6""),
             0, ""Multiply #5"");

        test(field.newDfp(""2"").multiply(3),
             field.newDfp(""6""),
             0, ""Multiply #6"");

        test(field.newDfp(""-2"").multiply(field.newDfp(""3"")),
             field.newDfp(""-6""),
             0, ""Multiply #7"");

        test(field.newDfp(""-2"").multiply(3),
             field.newDfp(""-6""),
             0, ""Multiply #8"");

        test(field.newDfp(""2"").multiply(field.newDfp(""-3"")),
             field.newDfp(""-6""),
             0, ""Multiply #9"");

        test(field.newDfp(""-2"").multiply(field.newDfp(""-3"")),
             field.newDfp(""6""),
             0, ""Multiply #10"");

        //multiply by zero

        test(field.newDfp(""-2"").multiply(field.newDfp(""0"")),
             field.newDfp(""-0""),
             0, ""Multiply #11"");

        test(field.newDfp(""-2"").multiply(0),
             field.newDfp(""-0""),
             0, ""Multiply #12"");

        test(field.newDfp(""2"").multiply(field.newDfp(""0"")),
             field.newDfp(""0""),
             0, ""Multiply #13"");

        test(field.newDfp(""2"").multiply(0),
             field.newDfp(""0""),
             0, ""Multiply #14"");

        test(field.newDfp(""2"").multiply(pinf),
             pinf,
             0, ""Multiply #15"");

        test(field.newDfp(""2"").multiply(ninf),
             ninf,
             0, ""Multiply #16"");

        test(field.newDfp(""-2"").multiply(pinf),
             ninf,
             0, ""Multiply #17"");

        test(field.newDfp(""-2"").multiply(ninf),
             pinf,
             0, ""Multiply #18"");

        test(ninf.multiply(field.newDfp(""-2"")),
             pinf,
             0, ""Multiply #18.1"");

        test(field.newDfp(""5e131071"").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, ""Multiply #19"");

        test(field.newDfp(""5e131071"").multiply(field.newDfp(""1.999999999999999"")),
             field.newDfp(""9.9999999999999950000e131071""),
             0, ""Multiply #20"");

        test(field.newDfp(""-5e131071"").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, ""Multiply #22"");

        test(field.newDfp(""-5e131071"").multiply(field.newDfp(""1.999999999999999"")),
             field.newDfp(""-9.9999999999999950000e131071""),
             0, ""Multiply #23"");

        test(field.newDfp(""1e-65539"").multiply(field.newDfp(""1e-65539"")),
             field.newDfp(""1e-131078""),
             DfpField.FLAG_UNDERFLOW, ""Multiply #24"");

        test(field.newDfp(""1"").multiply(nan),
             nan,
             0, ""Multiply #25"");

        test(nan.multiply(field.newDfp(""1"")),
             nan,
             0, ""Multiply #26"");

        test(nan.multiply(pinf),
             nan,
             0, ""Multiply #27"");

        test(pinf.multiply(nan),
             nan,
             0, ""Multiply #27"");

        test(pinf.multiply(field.newDfp(""0"")),
             nan,
             DfpField.FLAG_INVALID, ""Multiply #28"");

        test(field.newDfp(""0"").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, ""Multiply #29"");

        test(pinf.multiply(pinf),
             pinf,
             0, ""Multiply #30"");

        test(ninf.multiply(pinf),
             ninf,
             0, ""Multiply #31"");

        test(pinf.multiply(ninf),
             ninf,
             0, ""Multiply #32"");

        test(ninf.multiply(ninf),
             pinf,
             0, ""Multiply #33"");

        test(pinf.multiply(1),
             pinf,
             0, ""Multiply #34"");

        test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, ""Multiply #35"");

        test(nan.multiply(1),
             nan,
             0, ""Multiply #36"");

        test(field.newDfp(""1"").multiply(10000),
             field.newDfp(""10000""),
             0, ""Multiply #37"");

        test(field.newDfp(""2"").multiply(1000000),
             field.newDfp(""2000000""),
             0, ""Multiply #38"");

        test(field.newDfp(""1"").multiply(-1),
             field.newDfp(""-1""),
             0, ""Multiply #39"");
    }",junit.framework.AssertionFailedError: assersion failed Multiply #37 x = NaN flags = 1
Math_18,/222043010/omniapr/defects4j/Math_18_buggy/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,testFitAccuracyDependsOnBoundary,"    public void testFitAccuracyDependsOnBoundary() {
        final CMAESOptimizer optimizer = new CMAESOptimizer();
        final MultivariateFunction fitnessFunction = new MultivariateFunction() {
                public double value(double[] parameters) {
                    final double target = 11.1;
                    final double error = target - parameters[0];
                    return error * error;
                }
            };

        final double[] start = { 1 };
 
        // No bounds.
        PointValuePair result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,
                                                   start);
        final double resNoBound = result.getPoint()[0];

        // Optimum is near the lower bound.
        final double[] lower = { -20 };
        final double[] upper = { 5e16 };
        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,
                                    start, lower, upper);
        final double resNearLo = result.getPoint()[0];

        // Optimum is near the upper bound.
        lower[0] = -5e16;
        upper[0] = 20;
        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,
                                    start, lower, upper);
        final double resNearHi = result.getPoint()[0];

        // System.out.println(""resNoBound="" + resNoBound +
        //                    "" resNearLo="" + resNearLo +
        //                    "" resNearHi="" + resNearHi);

        // The two values currently differ by a substantial amount, indicating that
        // the bounds definition can prevent reaching the optimum.
        Assert.assertEquals(resNoBound, resNearLo, 1e-3);
        Assert.assertEquals(resNoBound, resNearHi, 1e-3);
    }",junit.framework.AssertionFailedError: expected:<11.10000000142497> but was:<8.0>
Math_19,/222043010/omniapr/defects4j/Math_19_buggy/src/test/java/org/apache/commons/math3/genetics/FixedElapsedTimeTest.java,testIsSatisfied,"    public void testIsSatisfied() {
        final Population pop = new Population() {
            public void addChromosome(final Chromosome chromosome) {
                // unimportant
            }
            public Chromosome getFittestChromosome() {
                // unimportant
                return null;
            }
            public int getPopulationLimit() {
                // unimportant
                return 0;
            }
            public int getPopulationSize() {
                // unimportant
                return 0;
            }
            public Population nextGeneration() {
                // unimportant
                return null;
            }
            public Iterator<Chromosome> iterator() {
                // unimportant
                return null;
            }
        };

        final long start = System.nanoTime();
        final long duration = 3;
        final FixedElapsedTime tec = new FixedElapsedTime(duration, TimeUnit.SECONDS);

        while (!tec.isSatisfied(pop)) {
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                // ignore
            }
        }

        final long end = System.nanoTime();
        final long elapsedTime = end - start;
        final long diff = FastMath.abs(elapsedTime - TimeUnit.SECONDS.toNanos(duration));

        Assert.assertTrue(diff < TimeUnit.MILLISECONDS.toNanos(100));
    }",junit.framework.AssertionFailedError
Math_19,/222043010/omniapr/defects4j/Math_19_buggy/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,testBoundaryRangeTooLarge,"    public void testBoundaryRangeTooLarge() {
        final CMAESOptimizer optimizer = new CMAESOptimizer();
        final MultivariateFunction fitnessFunction = new MultivariateFunction() {
                public double value(double[] parameters) {
                    if (Double.isNaN(parameters[0])) {
                        throw new MathIllegalStateException();
                    }
                    final double target = 1;
                    final double error = target - parameters[0];
                    return error * error;
                }
            };

        final double[] start = { 0 };

        // The difference between upper and lower bounds is used to used
        // normalize the variables: In case of overflow, NaN is produced.
        final double max = Double.MAX_VALUE / 2;
        final double tooLarge = FastMath.nextUp(max);
        final double[] lower = { -tooLarge };
        final double[] upper = { tooLarge };
        final double[] result = optimizer.optimize(10000, fitnessFunction, GoalType.MINIMIZE,
                                                   start, lower, upper).getPoint();
    }","java.lang.Exception: Unexpected exception, expected<org.apache.commons.math3.exception.NumberIsTooLargeException> but was<org.apache.commons.math3.exception.MathIllegalStateException>"
Math_20,/222043010/omniapr/defects4j/Math_20_buggy/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java,testMath864,"    public void testMath864() {
        final CMAESOptimizer optimizer = new CMAESOptimizer();
        final MultivariateFunction fitnessFunction = new MultivariateFunction() {
                @Override
                public double value(double[] parameters) {
                    final double target = 1;
                    final double error = target - parameters[0];
                    return error * error;
                }
            };

        final double[] start = { 0 };
        final double[] lower = { -1e6 };
        final double[] upper = { 0.5 };
        final double[] result = optimizer.optimize(10000, fitnessFunction, GoalType.MINIMIZE,
                                                   start, lower, upper).getPoint();
        Assert.assertTrue(""Out of bounds ("" + result[0] + "" > "" + upper[0] + "")"",
                          result[0] <= upper[0]);
    }",junit.framework.AssertionFailedError: Out of bounds (0.562780738226138 > 0.5)
Math_21,/222043010/omniapr/defects4j/Math_21_buggy/src/test/java/org/apache/commons/math3/genetics/FixedElapsedTimeTest.java,testIsSatisfied,"    public void testIsSatisfied() {
        final Population pop = new Population() {
            public void addChromosome(final Chromosome chromosome) {
                // unimportant
            }
            public Chromosome getFittestChromosome() {
                // unimportant
                return null;
            }
            public int getPopulationLimit() {
                // unimportant
                return 0;
            }
            public int getPopulationSize() {
                // unimportant
                return 0;
            }
            public Population nextGeneration() {
                // unimportant
                return null;
            }
            public Iterator<Chromosome> iterator() {
                // unimportant
                return null;
            }
        };

        final long start = System.nanoTime();
        final long duration = 3;
        final FixedElapsedTime tec = new FixedElapsedTime(duration, TimeUnit.SECONDS);

        while (!tec.isSatisfied(pop)) {
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                // ignore
            }
        }

        final long end = System.nanoTime();
        final long elapsedTime = end - start;
        final long diff = FastMath.abs(elapsedTime - TimeUnit.SECONDS.toNanos(duration));

        Assert.assertTrue(diff < TimeUnit.MILLISECONDS.toNanos(100));
    }",junit.framework.AssertionFailedError
Math_21,/222043010/omniapr/defects4j/Math_21_buggy/src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,testMath789,"    public void testMath789() {

        final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][]{
            {0.013445532, 0.010394690, 0.009881156, 0.010499559},
            {0.010394690, 0.023006616, 0.008196856, 0.010732709},
            {0.009881156, 0.008196856, 0.019023866, 0.009210099},
            {0.010499559, 0.010732709, 0.009210099, 0.019107243}
        });
        RealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix();
        RealMatrix rebuiltM1 = root1.multiply(root1.transpose());
        Assert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16);

        final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][]{
            {0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559},
            {0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709},
            {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},
            {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}
        });
        RealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix();
        RealMatrix rebuiltM2 = root2.multiply(root2.transpose());
        Assert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16);

        final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][]{
            {0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559},
            {0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709},
            {0.0, 0.0, 0.0, 0.0, 0.0},
            {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},
            {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}
        });
        RealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix();
        RealMatrix rebuiltM3 = root3.multiply(root3.transpose());
        Assert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);

    }",junit.framework.AssertionFailedError: expected:<0.0> but was:<0.0180652917341963>
Math_21,/222043010/omniapr/defects4j/Math_21_buggy/src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java,testFullRank,"    public void testFullRank() {

        RealMatrix base = MatrixUtils.createRealMatrix(new double[][] {
            { 0.1159548705,      0.,           0.,           0.      },
            { 0.0896442724, 0.1223540781,      0.,           0.      },
            { 0.0852155322, 4.558668e-3,  0.1083577299,      0.      },
            { 0.0905486674, 0.0213768077, 0.0128878333, 0.1014155693 }
        });

        RealMatrix m = base.multiply(base.transpose());

        RectangularCholeskyDecomposition d =
                new RectangularCholeskyDecomposition(m, 1.0e-10);

        RealMatrix root = d.getRootMatrix();
        RealMatrix rebuiltM = root.multiply(root.transpose());
        Assert.assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15);

        // the pivoted Cholesky decomposition is *not* unique. Here, the root is
        // not equal to the original trianbular base matrix
        Assert.assertTrue(root.subtract(base).getNorm() > 0.3);

    }",junit.framework.AssertionFailedError: expected:<0.0> but was:<0.0180652917341963>
Math_23,/222043010/omniapr/defects4j/Math_23_buggy/src/test/java/org/apache/commons/math3/genetics/FixedElapsedTimeTest.java,testIsSatisfied,"    public void testIsSatisfied() {
        final Population pop = new Population() {
            public void addChromosome(final Chromosome chromosome) {
                // unimportant
            }
            public Chromosome getFittestChromosome() {
                // unimportant
                return null;
            }
            public int getPopulationLimit() {
                // unimportant
                return 0;
            }
            public int getPopulationSize() {
                // unimportant
                return 0;
            }
            public Population nextGeneration() {
                // unimportant
                return null;
            }
            public Iterator<Chromosome> iterator() {
                // unimportant
                return null;
            }
        };

        final long start = System.nanoTime();
        final long duration = 3;
        final FixedElapsedTime tec = new FixedElapsedTime(duration, TimeUnit.SECONDS);

        while (!tec.isSatisfied(pop)) {
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                // ignore
            }
        }

        final long end = System.nanoTime();
        final long elapsedTime = end - start;
        final long diff = FastMath.abs(elapsedTime - TimeUnit.SECONDS.toNanos(duration));

        Assert.assertTrue(diff < TimeUnit.MILLISECONDS.toNanos(100));
    }",junit.framework.AssertionFailedError
Math_23,/222043010/omniapr/defects4j/Math_23_buggy/src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,testKeepInitIfBest,"    public void testKeepInitIfBest() {
        final double minSin = 3 * Math.PI / 2;
        final double offset = 1e-8;
        final double delta = 1e-7;
        final UnivariateFunction f1 = new Sin();
        final UnivariateFunction f2 = new StepFunction(new double[] { minSin, minSin + offset, minSin + 2 * offset},
                                                       new double[] { 0, -1, 0 });
        final UnivariateFunction f = FunctionUtils.add(f1, f2);
        // A slightly less stringent tolerance would make the test pass
        // even with the previous implementation.
        final double relTol = 1e-8;
        final UnivariateOptimizer optimizer = new BrentOptimizer(relTol, 1e-100);
        final double init = minSin + 1.5 * offset;
        final UnivariatePointValuePair result
            = optimizer.optimize(200, f, GoalType.MINIMIZE,
                                 minSin - 6.789 * delta,
                                 minSin + 9.876 * delta,
                                 init);
        final int numEval = optimizer.getEvaluations();

        final double sol = result.getPoint();
        final double expected = init;

//         System.out.println(""numEval="" + numEval);
//         System.out.println(""min="" + init + "" f="" + f.value(init));
//         System.out.println(""sol="" + sol + "" f="" + f.value(sol));
//         System.out.println(""exp="" + expected + "" f="" + f.value(expected));

        Assert.assertTrue(""Best point not reported"", f.value(sol) <= f.value(expected));
    }",junit.framework.AssertionFailedError: Best point not reported
Math_24,/222043010/omniapr/defects4j/Math_24_buggy/src/test/java/org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java,testMath855,"    public void testMath855() {
        final double minSin = 3 * Math.PI / 2;
        final double offset = 1e-8;
        final double delta = 1e-7;
        final UnivariateFunction f1 = new Sin();
        final UnivariateFunction f2 = new StepFunction(new double[] { minSin, minSin + offset, minSin + 5 * offset },
                                                       new double[] { 0, -1, 0 });
        final UnivariateFunction f = FunctionUtils.add(f1, f2);
        final UnivariateOptimizer optimizer = new BrentOptimizer(1e-8, 1e-100);
        final UnivariatePointValuePair result
            = optimizer.optimize(200, f, GoalType.MINIMIZE, minSin - 6.789 * delta, minSin + 9.876 * delta);
        final int numEval = optimizer.getEvaluations();

        final double sol = result.getPoint();
        final double expected = 4.712389027602411;

        // System.out.println(""min="" + (minSin + offset) + "" f="" + f.value(minSin + offset));
        // System.out.println(""sol="" + sol + "" f="" + f.value(sol));
        // System.out.println(""exp="" + expected + "" f="" + f.value(expected));

        Assert.assertTrue(""Best point not reported"", f.value(sol) <= f.value(expected));
    }",junit.framework.AssertionFailedError: Best point not reported
Math_25,/222043010/omniapr/defects4j/Math_25_buggy/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java,testMath844,"    public void testMath844() {
        final double[] y = { 0, 1, 2, 3, 2, 1,
                             0, -1, -2, -3, -2, -1,
                             0, 1, 2, 3, 2, 1,
                             0, -1, -2, -3, -2, -1,
                             0, 1, 2, 3, 2, 1, 0 };
        final int len = y.length;
        final WeightedObservedPoint[] points = new WeightedObservedPoint[len];
        for (int i = 0; i < len; i++) {
            points[i] = new WeightedObservedPoint(1, i, y[i]);
        }

        final HarmonicFitter.ParameterGuesser guesser
            = new HarmonicFitter.ParameterGuesser(points);

        // The guesser fails because the function is far from an harmonic
        // function: It is a triangular periodic function with amplitude 3
        // and period 12, and all sample points are taken at integer abscissae
        // so function values all belong to the integer subset {-3, -2, -1, 0,
        // 1, 2, 3}.
        guesser.guess();
    }",junit.framework.AssertionFailedError: Expected exception: org.apache.commons.math3.exception.MathIllegalStateException
Math_26,/222043010/omniapr/defects4j/Math_26_buggy/src/test/java/org/apache/commons/math3/fraction/FractionTest.java,testIntegerOverflow,"    public void testIntegerOverflow() {
        checkIntegerOverflow(0.75000000001455192);
        checkIntegerOverflow(1.0e10);
        checkIntegerOverflow(-1.0e10);
        checkIntegerOverflow(-43979.60679604749);
    }",junit.framework.AssertionFailedError: an exception should have been thrown
Math_27,/222043010/omniapr/defects4j/Math_27_buggy/src/test/java/org/apache/commons/math3/fraction/FractionTest.java,testMath835,"    public void testMath835() {
        final int numer = Integer.MAX_VALUE / 99;
        final int denom = 1;
        final double percentage = 100 * ((double) numer) / denom;
        final Fraction frac = new Fraction(numer, denom);
        // With the implementation that preceded the fix suggested in MATH-835,
        // this test was failing, due to overflow.
        Assert.assertEquals(percentage, frac.percentageValue(), Math.ulp(percentage));
    }",junit.framework.AssertionFailedError: expected:<2.1691754E9> but was:<-2.125791896E9>
Math_28,/222043010/omniapr/defects4j/Math_28_buggy/src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,testMath828Cycle,"    public void testMath828Cycle() {
        LinearObjectiveFunction f = new LinearObjectiveFunction(
                new double[] { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, 0.0);
        
        ArrayList <LinearConstraint>constraints = new ArrayList<LinearConstraint>();

        constraints.add(new LinearConstraint(new double[] {0.0, 16.0, 14.0, 69.0, 1.0, 85.0, 52.0, 43.0, 64.0, 97.0, 14.0, 74.0, 89.0, 28.0, 94.0, 58.0, 13.0, 22.0, 21.0, 17.0, 30.0, 25.0, 1.0, 59.0, 91.0, 78.0, 12.0, 74.0, 56.0, 3.0, 88.0,}, Relationship.GEQ, 91.0));
        constraints.add(new LinearConstraint(new double[] {0.0, 60.0, 40.0, 81.0, 71.0, 72.0, 46.0, 45.0, 38.0, 48.0, 40.0, 17.0, 33.0, 85.0, 64.0, 32.0, 84.0, 3.0, 54.0, 44.0, 71.0, 67.0, 90.0, 95.0, 54.0, 99.0, 99.0, 29.0, 52.0, 98.0, 9.0,}, Relationship.GEQ, 54.0));
        constraints.add(new LinearConstraint(new double[] {0.0, 41.0, 12.0, 86.0, 90.0, 61.0, 31.0, 41.0, 23.0, 89.0, 17.0, 74.0, 44.0, 27.0, 16.0, 47.0, 80.0, 32.0, 11.0, 56.0, 68.0, 82.0, 11.0, 62.0, 62.0, 53.0, 39.0, 16.0, 48.0, 1.0, 63.0,}, Relationship.GEQ, 62.0));
        constraints.add(new LinearConstraint(new double[] {83.0, -76.0, -94.0, -19.0, -15.0, -70.0, -72.0, -57.0, -63.0, -65.0, -22.0, -94.0, -22.0, -88.0, -86.0, -89.0, -72.0, -16.0, -80.0, -49.0, -70.0, -93.0, -95.0, -17.0, -83.0, -97.0, -31.0, -47.0, -31.0, -13.0, -23.0,}, Relationship.GEQ, 0.0));
        constraints.add(new LinearConstraint(new double[] {41.0, -96.0, -41.0, -48.0, -70.0, -43.0, -43.0, -43.0, -97.0, -37.0, -85.0, -70.0, -45.0, -67.0, -87.0, -69.0, -94.0, -54.0, -54.0, -92.0, -79.0, -10.0, -35.0, -20.0, -41.0, -41.0, -65.0, -25.0, -12.0, -8.0, -46.0,}, Relationship.GEQ, 0.0));
        constraints.add(new LinearConstraint(new double[] {27.0, -42.0, -65.0, -49.0, -53.0, -42.0, -17.0, -2.0, -61.0, -31.0, -76.0, -47.0, -8.0, -93.0, -86.0, -62.0, -65.0, -63.0, -22.0, -43.0, -27.0, -23.0, -32.0, -74.0, -27.0, -63.0, -47.0, -78.0, -29.0, -95.0, -73.0,}, Relationship.GEQ, 0.0));
        constraints.add(new LinearConstraint(new double[] {15.0, -46.0, -41.0, -83.0, -98.0, -99.0, -21.0, -35.0, -7.0, -14.0, -80.0, -63.0, -18.0, -42.0, -5.0, -34.0, -56.0, -70.0, -16.0, -18.0, -74.0, -61.0, -47.0, -41.0, -15.0, -79.0, -18.0, -47.0, -88.0, -68.0, -55.0,}, Relationship.GEQ, 0.0));
        
        double epsilon = 1e-6;
        PointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MINIMIZE, true);
        Assert.assertEquals(1.0d, solution.getValue(), epsilon);
        Assert.assertTrue(validSolution(solution, constraints, epsilon));        
    }",org.apache.commons.math3.exception.MaxCountExceededException: illegal state: maximal count (100) exceeded
Math_30,/222043010/omniapr/defects4j/Math_30_buggy/src/test/java/org/apache/commons/math3/stat/inference/MannWhitneyUTestTest.java,testBigDataSet,"    public void testBigDataSet() throws Exception {
        double[] d1 = new double[1500];
        double[] d2 = new double[1500];
        for (int i = 0; i < 1500; i++) {
            d1[i] = 2 * i;
            d2[i] = 2 * i + 1;
        }
        double result = testStatistic.mannWhitneyUTest(d1, d2);
        Assert.assertTrue(result > 0.1);
    }",junit.framework.AssertionFailedError
Math_31,/222043010/omniapr/defects4j/Math_31_buggy/src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java,testMath718,"    public void testMath718() {
        // for large trials the evaluation of ContinuedFraction was inaccurate
        // do a sweep over several large trials to test if the current implementation is
        // numerically stable.

        for (int trials = 500000; trials < 20000000; trials += 100000) {
            BinomialDistribution dist = new BinomialDistribution(trials, 0.5);
            int p = dist.inverseCumulativeProbability(0.5);
            Assert.assertEquals(trials / 2, p);
        }

    }",org.apache.commons.math3.exception.ConvergenceException: illegal state: Continued fraction diverged to NaN for value 0.5
Math_31,/222043010/omniapr/defects4j/Math_31_buggy/src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java,testMath785,"    public void testMath785() {
        // this test was failing due to inaccurate results from ContinuedFraction.

        try {
            double prob = 0.01;
            FDistribution f = new FDistribution(200000, 200000);
            double result = f.inverseCumulativeProbability(prob);
            Assert.assertTrue(result < 1.0);
        } catch (Exception e) {
            Assert.fail(""Failing to calculate inverse cumulative probability"");
        }
    }",junit.framework.AssertionFailedError: Failing to calculate inverse cumulative probability
Math_32,/222043010/omniapr/defects4j/Math_32_buggy/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java,testIssue780,"    public void testIssue780() {
        float[] coords = {
            1.000000f, -1.000000f, -1.000000f, 
            1.000000f, -1.000000f, 1.000000f, 
            -1.000000f, -1.000000f, 1.000000f, 
            -1.000000f, -1.000000f, -1.000000f, 
            1.000000f, 1.000000f, -1f, 
            0.999999f, 1.000000f, 1.000000f,   // 1.000000f, 1.000000f, 1.000000f, 
            -1.000000f, 1.000000f, 1.000000f, 
            -1.000000f, 1.000000f, -1.000000f};
        int[] indices = {
            0, 1, 2, 0, 2, 3, 
            4, 7, 6, 4, 6, 5, 
            0, 4, 5, 0, 5, 1, 
            1, 5, 6, 1, 6, 2, 
            2, 6, 7, 2, 7, 3, 
            4, 0, 3, 4, 3, 7};
        ArrayList<SubHyperplane<Euclidean3D>> subHyperplaneList = new ArrayList<SubHyperplane<Euclidean3D>>();
        for (int idx = 0; idx < indices.length; idx += 3) {
            int idxA = indices[idx] * 3;
            int idxB = indices[idx + 1] * 3;
            int idxC = indices[idx + 2] * 3;
            Vector3D v_1 = new Vector3D(coords[idxA], coords[idxA + 1], coords[idxA + 2]);
            Vector3D v_2 = new Vector3D(coords[idxB], coords[idxB + 1], coords[idxB + 2]);
            Vector3D v_3 = new Vector3D(coords[idxC], coords[idxC + 1], coords[idxC + 2]);
            Vector3D[] vertices = {v_1, v_2, v_3};
            Plane polyPlane = new Plane(v_1, v_2, v_3);
            ArrayList<SubHyperplane<Euclidean2D>> lines = new ArrayList<SubHyperplane<Euclidean2D>>();

            Vector2D[] projPts = new Vector2D[vertices.length];
            for (int ptIdx = 0; ptIdx < projPts.length; ptIdx++) {
                projPts[ptIdx] = polyPlane.toSubSpace(vertices[ptIdx]);
            }

            SubLine lineInPlane = null;
            for (int ptIdx = 0; ptIdx < projPts.length; ptIdx++) {
                lineInPlane = new SubLine(projPts[ptIdx], projPts[(ptIdx + 1) % projPts.length]);
                lines.add(lineInPlane);
            }
            Region<Euclidean2D> polyRegion = new PolygonsSet(lines);
            SubPlane polygon = new SubPlane(polyPlane, polyRegion);
            subHyperplaneList.add(polygon);
        }
        PolyhedronsSet polyhedronsSet = new PolyhedronsSet(subHyperplaneList);
        Assert.assertEquals( 8.0, polyhedronsSet.getSize(), 3.0e-6);
        Assert.assertEquals(24.0, polyhedronsSet.getBoundarySize(), 5.0e-6);
    }",java.lang.ClassCastException: org.apache.commons.math3.geometry.partitioning.BoundaryAttribute cannot be cast to java.lang.Boolean
Math_33,/222043010/omniapr/defects4j/Math_33_buggy/src/test/java/org/apache/commons/math3/optimization/linear/SimplexSolverTest.java,testMath781,"    public void testMath781() {
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 6, 7 }, 0);

        ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
        constraints.add(new LinearConstraint(new double[] { 1, 2, 1 }, Relationship.LEQ, 2));
        constraints.add(new LinearConstraint(new double[] { -1, 1, 1 }, Relationship.LEQ, -1));
        constraints.add(new LinearConstraint(new double[] { 2, -3, 1 }, Relationship.LEQ, -1));

        double epsilon = 1e-6;
        SimplexSolver solver = new SimplexSolver();
        PointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);

        Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) > 0);
        Assert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) > 0);
        Assert.assertTrue(Precision.compareTo(solution.getPoint()[2], 0.0d, epsilon) < 0);
        Assert.assertEquals(2.0d, solution.getValue(), epsilon);
    }",junit.framework.AssertionFailedError
Math_34,/222043010/omniapr/defects4j/Math_34_buggy/src/test/java/org/apache/commons/math3/genetics/ListPopulationTest.java,testIterator,"    public void testIterator() {
        final ArrayList<Chromosome> chromosomes = new ArrayList<Chromosome>();
        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));
        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));
        chromosomes.add(new DummyBinaryChromosome(BinaryChromosome.randomBinaryRepresentation(3)));

        final ListPopulation population = new ListPopulation(10) {
            public Population nextGeneration() {
                // not important
                return null;
            }
        };

        population.addChromosomes(chromosomes);

        final Iterator<Chromosome> iter = population.iterator();
        while (iter.hasNext()) {
            iter.next();
            iter.remove();
        }
    }",junit.framework.AssertionFailedError: Expected exception: java.lang.UnsupportedOperationException
Math_35,/222043010/omniapr/defects4j/Math_35_buggy/src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,testChromosomeListConstructorTooLow,"    public void testChromosomeListConstructorTooLow() {
        final List<Chromosome> chromosomes = Collections.emptyList();
        final double rate = -0.25;
        new ElitisticListPopulation(chromosomes, 100, rate);
    }",junit.framework.AssertionFailedError: Expected exception: org.apache.commons.math3.exception.OutOfRangeException
Math_35,/222043010/omniapr/defects4j/Math_35_buggy/src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,testConstructorTooHigh,"    public void testConstructorTooHigh() {
        final double rate = 1.25;
        new ElitisticListPopulation(100, rate);
    }",junit.framework.AssertionFailedError: Expected exception: org.apache.commons.math3.exception.OutOfRangeException
Math_35,/222043010/omniapr/defects4j/Math_35_buggy/src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,testConstructorTooLow,"    public void testConstructorTooLow() {
        final double rate = -0.25;
        new ElitisticListPopulation(100, rate);
    }",junit.framework.AssertionFailedError: Expected exception: org.apache.commons.math3.exception.OutOfRangeException
Math_35,/222043010/omniapr/defects4j/Math_35_buggy/src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java,testChromosomeListConstructorTooHigh,"    public void testChromosomeListConstructorTooHigh() {
        final List<Chromosome> chromosomes = Collections.emptyList();
        final double rate = 1.25;
        new ElitisticListPopulation(chromosomes, 100, rate);
    }",junit.framework.AssertionFailedError: Expected exception: org.apache.commons.math3.exception.OutOfRangeException
Math_36,/222043010/omniapr/defects4j/Math_36_buggy/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,testFloatValueForLargeNumeratorAndDenominator,"    public void testFloatValueForLargeNumeratorAndDenominator() {
        final BigInteger pow400 = BigInteger.TEN.pow(400);
        final BigInteger pow401 = BigInteger.TEN.pow(401);
        final BigInteger two = new BigInteger(""2"");
        final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),
                                                  pow400.multiply(two));

        Assert.assertEquals(5, large.floatValue(), 1e-15);
    }",junit.framework.AssertionFailedError: expected:<5.0> but was:<NaN>
Math_36,/222043010/omniapr/defects4j/Math_36_buggy/src/test/java/org/apache/commons/math/fraction/BigFractionTest.java,testDoubleValueForLargeNumeratorAndDenominator,"    public void testDoubleValueForLargeNumeratorAndDenominator() {
        final BigInteger pow400 = BigInteger.TEN.pow(400);
        final BigInteger pow401 = BigInteger.TEN.pow(401);
        final BigInteger two = new BigInteger(""2"");
        final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),
                                                  pow400.multiply(two));

        Assert.assertEquals(5, large.doubleValue(), 1e-15);
    }",junit.framework.AssertionFailedError: expected:<5.0> but was:<NaN>
Math_37,/222043010/omniapr/defects4j/Math_37_buggy/src/test/java/org/apache/commons/math/complex/ComplexTest.java,testTanhInf,"    public void testTanhInf() {
        TestUtils.assertSame(Complex.NaN, oneInf.tanh());
        TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());
        TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());
        TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());
        TestUtils.assertSame(Complex.NaN, infInf.tanh());
        TestUtils.assertSame(Complex.NaN, infNegInf.tanh());
        TestUtils.assertSame(Complex.NaN, negInfInf.tanh());
        TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());
    }",junit.framework.AssertionFailedError: expected:<1.0> but was:<NaN>
Math_37,/222043010/omniapr/defects4j/Math_37_buggy/src/test/java/org/apache/commons/math/complex/ComplexTest.java,testTan,"    public void testTan() {
        Complex z = new Complex(3, 4);
        Complex expected = new Complex(-0.000187346, 0.999356);
        TestUtils.assertEquals(expected, z.tan(), 1.0e-5);
        /* Check that no overflow occurs (MATH-722) */
        Complex actual = new Complex(3.0, 1E10).tan();
        expected = new Complex(0, 1);
        TestUtils.assertEquals(expected, actual, 1.0e-5);
        actual = new Complex(3.0, -1E10).tan();
        expected = new Complex(0, -1);
        TestUtils.assertEquals(expected, actual, 1.0e-5);
    }",junit.framework.AssertionFailedError: expected:<1.0> but was:<NaN>
Math_37,/222043010/omniapr/defects4j/Math_37_buggy/src/test/java/org/apache/commons/math/complex/ComplexTest.java,testTanh,"    public void testTanh() {
        Complex z = new Complex(3, 4);
        Complex expected = new Complex(1.00071, 0.00490826);
        TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);
        /* Check that no overflow occurs (MATH-722) */
        Complex actual = new Complex(1E10, 3.0).tanh();
        expected = new Complex(1, 0);
        TestUtils.assertEquals(expected, actual, 1.0e-5);
        actual = new Complex(-1E10, 3.0).tanh();
        expected = new Complex(-1, 0);
        TestUtils.assertEquals(expected, actual, 1.0e-5);
    }",junit.framework.AssertionFailedError: expected:<1.0> but was:<NaN>
Math_37,/222043010/omniapr/defects4j/Math_37_buggy/src/test/java/org/apache/commons/math/complex/ComplexTest.java,testTanInf,"    public void testTanInf() {
        TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());
        TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());
        TestUtils.assertSame(Complex.NaN, infOne.tan());
        TestUtils.assertSame(Complex.NaN, negInfOne.tan());
        TestUtils.assertSame(Complex.NaN, infInf.tan());
        TestUtils.assertSame(Complex.NaN, infNegInf.tan());
        TestUtils.assertSame(Complex.NaN, negInfInf.tan());
        TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());
    }",junit.framework.AssertionFailedError: expected:<1.0> but was:<NaN>
Math_38,/222043010/omniapr/defects4j/Math_38_buggy/src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java,testConstrainedRosenWithMoreInterpolationPoints,"    public void testConstrainedRosenWithMoreInterpolationPoints() {
        final double[] startPoint = point(DIM, 0.1);
        final double[][] boundaries = boundaries(DIM, -1, 2);
        final RealPointValuePair expected = new RealPointValuePair(point(DIM, 1.0), 0.0);

        // This should have been 78 because in the code the hard limit is
        // said to be
        //   ((DIM + 1) * (DIM + 2)) / 2 - (2 * DIM + 1)
        // i.e. 78 in this case, but the test fails for 48, 59, 62, 63, 64,
        // 65, 66, ...
        final int maxAdditionalPoints = 47;

        for (int num = 1; num <= maxAdditionalPoints; num++) {
            doTest(new Rosen(), startPoint, boundaries,
                   GoalType.MINIMIZE,
                   1e-12, 1e-6, 2000,
                   num,
                   expected,
                   ""num="" + num);
        }
    }","org.apache.commons.math.optimization.direct.BOBYQAOptimizer$PathIsExploredException: If this exception is thrown, just remove it from the code prelim (at line 1752)"
Math_39,/222043010/omniapr/defects4j/Math_39_buggy/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,testTooLargeFirstStep,"  public void testTooLargeFirstStep() {

      AdaptiveStepsizeIntegrator integ =
              new DormandPrince853Integrator(0, Double.POSITIVE_INFINITY, Double.NaN, Double.NaN);
      final double start = 0.0;
      final double end   = 0.001;
      FirstOrderDifferentialEquations equations = new FirstOrderDifferentialEquations() {

          public int getDimension() {
              return 1;
          }

          public void computeDerivatives(double t, double[] y, double[] yDot) {
              Assert.assertTrue(t >= FastMath.nextAfter(start, Double.NEGATIVE_INFINITY));
              Assert.assertTrue(t <= FastMath.nextAfter(end,   Double.POSITIVE_INFINITY));
              yDot[0] = -100.0 * y[0];
          }

      };

      integ.setStepSizeControl(0, 1.0, 1.0e-6, 1.0e-8);
      integ.integrate(equations, start, new double[] { 1.0 }, end, new double[1]);

  }",junit.framework.AssertionFailedError
Math_40,/222043010/omniapr/defects4j/Math_40_buggy/src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java,testIssue716,"    public void testIssue716() {
        BracketingNthOrderBrentSolver solver =
                new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-10, 1.0e-22, 5);
        UnivariateFunction sharpTurn = new UnivariateFunction() {
            public double value(double x) {
                return (2 * x + 1) / (1.0e9 * (x + 1));
            }
        };
        double result = solver.solve(100, sharpTurn, -0.9999999, 30, 15, AllowedSolution.RIGHT_SIDE);
        Assert.assertEquals(0, sharpTurn.value(result), solver.getFunctionValueAccuracy());
        Assert.assertTrue(sharpTurn.value(result) >= 0);
        Assert.assertEquals(-0.5, result, 1.0e-10);
    }",org.apache.commons.math.exception.TooManyEvaluationsException: illegal state: maximal count (100) exceeded: evaluations
Math_42,/222043010/omniapr/defects4j/Math_42_buggy/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,testMath713NegativeVariable,"    public void testMath713NegativeVariable() {
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {1.0, 1.0}, 0.0d);
        ArrayList<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
        constraints.add(new LinearConstraint(new double[] {1, 0}, Relationship.EQ, 1));

        double epsilon = 1e-6;
        SimplexSolver solver = new SimplexSolver();
        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);

        Assert.assertTrue(Precision.compareTo(solution.getPoint()[0], 0.0d, epsilon) >= 0);
        Assert.assertTrue(Precision.compareTo(solution.getPoint()[1], 0.0d, epsilon) >= 0);
    }",junit.framework.AssertionFailedError
Math_43,/222043010/omniapr/defects4j/Math_43_buggy/src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,testOverrideMeanWithMathClass,"    public void testOverrideMeanWithMathClass() throws Exception {
        double[] scores = {1, 2, 3, 4};
        SummaryStatistics stats = new SummaryStatistics();
        stats.setMeanImpl(new Mean()); 
        for(double i : scores) {
          stats.addValue(i);
        }
        Assert.assertEquals((new Mean()).evaluate(scores),stats.getMean(), 0); 
    }",junit.framework.AssertionFailedError: expected:<2.5> but was:<NaN>
Math_43,/222043010/omniapr/defects4j/Math_43_buggy/src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,testOverrideGeoMeanWithMathClass,"    public void testOverrideGeoMeanWithMathClass() throws Exception {
        double[] scores = {1, 2, 3, 4};
        SummaryStatistics stats = new SummaryStatistics();
        stats.setGeoMeanImpl(new GeometricMean()); 
        for(double i : scores) {
          stats.addValue(i);
        }
        Assert.assertEquals((new GeometricMean()).evaluate(scores),stats.getGeometricMean(), 0); 
    }",junit.framework.AssertionFailedError: expected:<2.5> but was:<NaN>
Math_43,/222043010/omniapr/defects4j/Math_43_buggy/src/test/java/org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java,testOverrideVarianceWithMathClass,"    public void testOverrideVarianceWithMathClass() throws Exception {
        double[] scores = {1, 2, 3, 4};
        SummaryStatistics stats = new SummaryStatistics();
        stats.setVarianceImpl(new Variance(false)); //use ""population variance""
        for(double i : scores) {
          stats.addValue(i);
        }
        Assert.assertEquals((new Variance(false)).evaluate(scores),stats.getVariance(), 0); 
    }",junit.framework.AssertionFailedError: expected:<2.5> but was:<NaN>
Math_44,/222043010/omniapr/defects4j/Math_44_buggy/src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,testIssue695,"    public void testIssue695() {

        FirstOrderDifferentialEquations equation = new FirstOrderDifferentialEquations() {
            
            public int getDimension() {
                return 1;
            }
            
            public void computeDerivatives(double t, double[] y, double[] yDot) {
                yDot[0] = 1.0;
            }
        };

        DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.001, 1000, 1.0e-14, 1.0e-14);
        integrator.addEventHandler(new ResettingEvent(10.99), 0.1, 1.0e-9, 1000);
        integrator.addEventHandler(new ResettingEvent(11.01), 0.1, 1.0e-9, 1000);
        integrator.setInitialStepSize(3.0);

        double target = 30.0;
        double[] y = new double[1];
        double tEnd = integrator.integrate(equation, 0.0, y, target, y);
        Assert.assertEquals(target, tEnd, 1.0e-10);
        Assert.assertEquals(32.0, y[0], 1.0e-10);

    }",junit.framework.AssertionFailedError: going backard in time! (7.796578226186635 < 10.99)
Math_45,/222043010/omniapr/defects4j/Math_45_buggy/src/test/java/org/apache/commons/math/linear/OpenMapRealMatrixTest.java,testMath679,"    public void testMath679() {
        new OpenMapRealMatrix(3, Integer.MAX_VALUE);
    }",junit.framework.AssertionFailedError: Expected exception: org.apache.commons.math.exception.NumberIsTooLargeException
Math_46,/222043010/omniapr/defects4j/Math_46_buggy/src/test/java/org/apache/commons/math/complex/ComplexTest.java,testAtanI,"    public void testAtanI() {
        Assert.assertTrue(Complex.I.atan().isNaN());
    }",junit.framework.AssertionFailedError
Math_46,/222043010/omniapr/defects4j/Math_46_buggy/src/test/java/org/apache/commons/math/complex/ComplexTest.java,testDivideZero,"    public void testDivideZero() {
        Complex x = new Complex(3.0, 4.0);
        Complex z = x.divide(Complex.ZERO);
        // Assert.assertEquals(z, Complex.INF); // See MATH-657
        Assert.assertEquals(z, Complex.NaN);
    }",junit.framework.AssertionFailedError
Math_47,/222043010/omniapr/defects4j/Math_47_buggy/src/test/java/org/apache/commons/math/complex/ComplexTest.java,testAtanI,"    public void testAtanI() {
        for (int i = -10; i < 10; i++) {
            System.out.println(new Complex(0, 1 - 0.1 * i).atan());
        }
        Assert.assertTrue(Complex.I.atan().isInfinite());
    }",junit.framework.AssertionFailedError
Math_47,/222043010/omniapr/defects4j/Math_47_buggy/src/test/java/org/apache/commons/math/complex/ComplexTest.java,testDivideZero,"    public void testDivideZero() {
        Complex x = new Complex(3.0, 4.0);
        Complex z = x.divide(Complex.ZERO);
        Assert.assertEquals(z, Complex.INF);
    }",junit.framework.AssertionFailedError
Math_48,/222043010/omniapr/defects4j/Math_48_buggy/src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,testIssue631,"    public void testIssue631() {
        final UnivariateRealFunction f = new UnivariateRealFunction() {
                /** {@inheritDoc} */
                public double value(double x) {
                    return Math.exp(x) - Math.pow(Math.PI, 3.0);
                }
            };

        final UnivariateRealSolver solver = new RegulaFalsiSolver();
        final double root = solver.solve(3624, f, 1, 10);
        Assert.assertEquals(3.4341896575482003, root, 1e-15);
	}","java.lang.Exception: Unexpected exception, expected<org.apache.commons.math.exception.ConvergenceException> but was<org.apache.commons.math.exception.TooManyEvaluationsException>"
Math_49,/222043010/omniapr/defects4j/Math_49_buggy/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,testConcurrentModification,"    public void testConcurrentModification() {
        final RealVector u = new OpenMapRealVector(3, 1e-6);
        u.setEntry(0, 1);
        u.setEntry(1, 0);
        u.setEntry(2, 2);

        final RealVector v1 = new OpenMapRealVector(3, 1e-6);
        final double[] v2 = new double[3];
        v1.setEntry(0, 0);
        v2[0] = 0;
        v1.setEntry(1, 3);
        v2[1] = 3;
        v1.setEntry(2, 0);
        v2[2] = 0;

        RealVector w;

        w = u.ebeMultiply(v1);
        w = u.ebeMultiply(v2);

        w = u.ebeDivide(v1);
        w = u.ebeDivide(v2);
    }",org.apache.commons.math.MathRuntimeException$6: map has been modified while iterating
Math_50,/222043010/omniapr/defects4j/Math_50_buggy/src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,testIssue631,"    public void testIssue631() {
        final UnivariateRealFunction f = new UnivariateRealFunction() {
                /** {@inheritDoc} */
                public double value(double x) {
                    return Math.exp(x) - Math.pow(Math.PI, 3.0);
                }
            };

        final UnivariateRealSolver solver = new RegulaFalsiSolver();
        final double root = solver.solve(3624, f, 1, 10);
        Assert.assertEquals(3.4341896575482003, root, 1e-15);
	}",junit.framework.AssertionFailedError: Expected exception: org.apache.commons.math.exception.TooManyEvaluationsException
Math_51,/222043010/omniapr/defects4j/Math_51_buggy/src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java,testIssue631,"    public void testIssue631() {
        final UnivariateRealFunction f = new UnivariateRealFunction() {
                @Override
                public double value(double x) {
                    return Math.exp(x) - Math.pow(Math.PI, 3.0);
                }
            };

        final UnivariateRealSolver solver = new RegulaFalsiSolver();
        final double root = solver.solve(3624, f, 1, 10);
        Assert.assertEquals(3.4341896575482003, root, 1e-15);
	}","org.apache.commons.math.exception.TooManyEvaluationsException: illegal state: maximal count (3,624) exceeded: evaluations"
Math_52,/222043010/omniapr/defects4j/Math_52_buggy/src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java,testIssue639,"  public void testIssue639(){
      Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,
                                 -5774608829631843.0 /  268435456.0,
                                 -3822921525525679.0 / 4294967296.0);
      Vector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,
                                 -2275058564560979.0 /    1048576.0,
                                  4423475992255071.0 /      65536.0);
      Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);
      Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);
      Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);
      Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);
      Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);
  }",junit.framework.AssertionFailedError: expected:<0.6228370359608201> but was:<NaN>
Math_53,/222043010/omniapr/defects4j/Math_53_buggy/src/test/java/org/apache/commons/math/complex/ComplexTest.java,testAddNaN,"    public void testAddNaN() {
        Complex x = new Complex(3.0, 4.0);
        Complex z = x.add(Complex.NaN);
        Assert.assertTrue(z.isNaN());
        z = new Complex(1, nan);
        Complex w = x.add(z);
        Assert.assertTrue(Double.isNaN(w.getReal()));
        Assert.assertTrue(Double.isNaN(w.getImaginary()));
    }",junit.framework.AssertionFailedError
Math_54,/222043010/omniapr/defects4j/Math_54_buggy/src/test/java/org/apache/commons/math/dfp/DfpTest.java,testIssue567,"    public void testIssue567() {
        DfpField field = new DfpField(100);
        Assert.assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN);
        Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN);
        Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), MathUtils.EPSILON);
        Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), MathUtils.EPSILON);
    }",junit.framework.AssertionFailedError: expected:<0.0> but was:<-Infinity>
Math_55,/222043010/omniapr/defects4j/Math_55_buggy/src/test/java/org/apache/commons/math/geometry/Vector3DTest.java,testCrossProductCancellation,"    public void testCrossProductCancellation() {
        Vector3D v1 = new Vector3D(9070467121.0, 4535233560.0, 1);
        Vector3D v2 = new Vector3D(9070467123.0, 4535233561.0, 1);
        checkVector(Vector3D.crossProduct(v1, v2), -1, 2, 1);

        double scale    = FastMath.scalb(1.0, 100);
        Vector3D big1   = new Vector3D(scale, v1);
        Vector3D small2 = new Vector3D(1 / scale, v2);
        checkVector(Vector3D.crossProduct(big1, small2), -1, 2, 1);

    }",junit.framework.AssertionFailedError: expected:<1.0> but was:<0.0>
Math_56,/222043010/omniapr/defects4j/Math_56_buggy/src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java,testIterationConsistency,"    public void testIterationConsistency() {
        final MultidimensionalCounter c = new MultidimensionalCounter(2, 3, 4);
        final int[][] expected = new int[][] {
            { 0, 0, 0 },
            { 0, 0, 1 },
            { 0, 0, 2 },
            { 0, 0, 3 },
            { 0, 1, 0 },
            { 0, 1, 1 },
            { 0, 1, 2 },
            { 0, 1, 3 },
            { 0, 2, 0 },
            { 0, 2, 1 },
            { 0, 2, 2 },
            { 0, 2, 3 },
            { 1, 0, 0 },
            { 1, 0, 1 },
            { 1, 0, 2 },
            { 1, 0, 3 },
            { 1, 1, 0 },
            { 1, 1, 1 },
            { 1, 1, 2 },
            { 1, 1, 3 },
            { 1, 2, 0 },
            { 1, 2, 1 },
            { 1, 2, 2 },
            { 1, 2, 3 }
        };

        final int totalSize = c.getSize();
        final int nDim = c.getDimension();
        final MultidimensionalCounter.Iterator iter = c.iterator();
        for (int i = 0; i < totalSize; i++) {
            if (!iter.hasNext()) {
                Assert.fail(""Too short"");
            }
            final int uniDimIndex = iter.next();
            Assert.assertEquals(""Wrong iteration at "" + i, i, uniDimIndex);

            for (int dimIndex = 0; dimIndex < nDim; dimIndex++) {
                Assert.assertEquals(""Wrong multidimensional index for ["" + i + ""]["" + dimIndex + ""]"",
                                    expected[i][dimIndex], iter.getCount(dimIndex));
            }

            Assert.assertEquals(""Wrong unidimensional index for ["" + i + ""]"",
                                c.getCount(expected[i]), uniDimIndex);

            final int[] indices = c.getCounts(uniDimIndex);
            for (int dimIndex = 0; dimIndex < nDim; dimIndex++) {
                Assert.assertEquals(""Wrong multidimensional index for ["" + i + ""]["" + dimIndex + ""]"",
                                    expected[i][dimIndex], indices[dimIndex]);
            }
        }

        if (iter.hasNext()) {
            Assert.fail(""Too long"");
        }
    }",junit.framework.AssertionFailedError: Wrong multidimensional index for [3][2] expected:<3> but was:<2>
Math_57,/222043010/omniapr/defects4j/Math_57_buggy/src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,testSmallDistances,"    public void testSmallDistances() {
        // Create a bunch of CloseIntegerPoints. Most are identical, but one is different by a
        // small distance.
        int[] repeatedArray = { 0 };
        int[] uniqueArray = { 1 };
        CloseIntegerPoint repeatedPoint =
            new CloseIntegerPoint(new EuclideanIntegerPoint(repeatedArray));
        CloseIntegerPoint uniquePoint =
            new CloseIntegerPoint(new EuclideanIntegerPoint(uniqueArray));

        Collection<CloseIntegerPoint> points = new ArrayList<CloseIntegerPoint>();
        final int NUM_REPEATED_POINTS = 10 * 1000;
        for (int i = 0; i < NUM_REPEATED_POINTS; ++i) {
            points.add(repeatedPoint);
        }
        points.add(uniquePoint);

        // Ask a KMeansPlusPlusClusterer to run zero iterations (i.e., to simply choose initial
        // cluster centers).
        final long RANDOM_SEED = 0;
        final int NUM_CLUSTERS = 2;
        final int NUM_ITERATIONS = 0;
        KMeansPlusPlusClusterer<CloseIntegerPoint> clusterer =
            new KMeansPlusPlusClusterer<CloseIntegerPoint>(new Random(RANDOM_SEED));
        List<Cluster<CloseIntegerPoint>> clusters =
            clusterer.cluster(points, NUM_CLUSTERS, NUM_ITERATIONS);

        // Check that one of the chosen centers is the unique point.
        boolean uniquePointIsCenter = false;
        for (Cluster<CloseIntegerPoint> cluster : clusters) {
            if (cluster.getCenter().equals(uniquePoint)) {
                uniquePointIsCenter = true;
            }
        }
        assertTrue(uniquePointIsCenter);
    }",junit.framework.AssertionFailedError
Math_58,/222043010/omniapr/defects4j/Math_58_buggy/src/test/java/org/apache/commons/math/optimization/fitting/GaussianFitterTest.java,testMath519,"    public void testMath519() {
        // The optimizer will try negative sigma values but ""GaussianFitter""
        // will catch the raised exceptions and return NaN values instead.

        final double[] data = { 
            1.1143831578403364E-29,
            4.95281403484594E-28,
            1.1171347211930288E-26,
            1.7044813962636277E-25,
            1.9784716574832164E-24,
            1.8630236407866774E-23,
            1.4820532905097742E-22,
            1.0241963854632831E-21,
            6.275077366673128E-21,
            3.461808994532493E-20,
            1.7407124684715706E-19,
            8.056687953553974E-19,
            3.460193945992071E-18,
            1.3883326374011525E-17,
            5.233894983671116E-17,
            1.8630791465263745E-16,
            6.288759227922111E-16,
            2.0204433920597856E-15,
            6.198768938576155E-15,
            1.821419346860626E-14,
            5.139176445538471E-14,
            1.3956427429045787E-13,
            3.655705706448139E-13,
            9.253753324779779E-13,
            2.267636001476696E-12,
            5.3880460095836855E-12,
            1.2431632654852931E-11
        };

        GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer());
        for (int i = 0; i < data.length; i++) {
            fitter.addObservedPoint(i, data[i]);
        }
        final double[] p = fitter.fit();

        Assert.assertEquals(53.1572792, p[1], 1e-7);
        Assert.assertEquals(5.75214622, p[2], 1e-8);
    }","org.apache.commons.math.exception.NotStrictlyPositiveException: -1.277 is smaller than, or equal to, the minimum (0)"
Math_59,/222043010/omniapr/defects4j/Math_59_buggy/src/test/java/org/apache/commons/math/util/FastMathTest.java,testMinMaxFloat,"    public void testMinMaxFloat() {
        float[][] pairs = {
            { -50.0f, 50.0f },
            {  Float.POSITIVE_INFINITY, 1.0f },
            {  Float.NEGATIVE_INFINITY, 1.0f },
            {  Float.NaN, 1.0f },
            {  Float.POSITIVE_INFINITY, 0.0f },
            {  Float.NEGATIVE_INFINITY, 0.0f },
            {  Float.NaN, 0.0f },
            {  Float.NaN, Float.NEGATIVE_INFINITY },
            {  Float.NaN, Float.POSITIVE_INFINITY }
        };
        for (float[] pair : pairs) {
            Assert.assertEquals(""min("" + pair[0] + "", "" + pair[1] + "")"",
                                Math.min(pair[0], pair[1]),
                                FastMath.min(pair[0], pair[1]),
                                MathUtils.EPSILON);
            Assert.assertEquals(""min("" + pair[1] + "", "" + pair[0] + "")"",
                                Math.min(pair[1], pair[0]),
                                FastMath.min(pair[1], pair[0]),
                                MathUtils.EPSILON);
            Assert.assertEquals(""max("" + pair[0] + "", "" + pair[1] + "")"",
                                Math.max(pair[0], pair[1]),
                                FastMath.max(pair[0], pair[1]),
                                MathUtils.EPSILON);
            Assert.assertEquals(""max("" + pair[1] + "", "" + pair[0] + "")"",
                                Math.max(pair[1], pair[0]),
                                FastMath.max(pair[1], pair[0]),
                                MathUtils.EPSILON);
        }
    }","junit.framework.AssertionFailedError: max(50.0, -50.0) expected:<50.0> but was:<-50.0>"
Math_60,/222043010/omniapr/defects4j/Math_60_buggy/src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java,testExtremeValues,"    public void testExtremeValues() throws Exception {
        NormalDistribution distribution = new NormalDistributionImpl(0, 1);
        for (int i = 0; i < 100; i++) { // make sure no convergence exception
            double lowerTail = distribution.cumulativeProbability(-i);
            double upperTail = distribution.cumulativeProbability(i);
            if (i < 9) { // make sure not top-coded 
                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned
                // TODO: once MATH-364 is resolved, replace 9 with 30
                assertTrue(lowerTail > 0.0d);
                assertTrue(upperTail < 1.0d);
            }
            else { // make sure top coding not reversed
                assertTrue(lowerTail < 0.00001);
                assertTrue(upperTail > 0.99999);
            }
        }
        
        assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);
        assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);
        assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);
        assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);
        
   }",org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value ∞
Math_61,/222043010/omniapr/defects4j/Math_61_buggy/src/test/java/org/apache/commons/math/distribution/PoissonDistributionTest.java,testMean,"    public void testMean() {
        PoissonDistribution dist;
        try {
            dist = new PoissonDistributionImpl(-1);
            fail(""negative mean: NotStrictlyPositiveException expected"");
        } catch(NotStrictlyPositiveException ex) {
            // Expected.
        }

        dist = new PoissonDistributionImpl(10.0);
        assertEquals(10.0, dist.getMean(), 0.0);
    }",org.apache.commons.math.MathRuntimeException$4: the Poisson mean must be positive (-1)
Math_62,/222043010/omniapr/defects4j/Math_62_buggy/src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java,testQuinticMin,"    public void testQuinticMin() throws MathException {
        // The quintic function has zeros at 0, +-0.5 and +-1.
        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,
        UnivariateRealFunction f = new QuinticFunction();
        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);
        underlying.setMaxEvaluations(300);
        JDKRandomGenerator g = new JDKRandomGenerator();
        g.setSeed(4312000053L);
        MultiStartUnivariateRealOptimizer optimizer =
            new MultiStartUnivariateRealOptimizer(underlying, 5, g);

        UnivariateRealPointValuePair optimum
            = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);
        assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);
        assertEquals(-0.0443342695, optimum.getValue(), 1e-9);

        UnivariateRealPointValuePair[] optima = optimizer.getOptima();
        for (int i = 0; i < optima.length; ++i) {
            assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);
        }
        assertTrue(optimizer.getEvaluations() >= 50);
        assertTrue(optimizer.getEvaluations() <= 100);
    }",junit.framework.AssertionFailedError: expected:<-0.2719561293> but was:<-0.2719561278056452>
Math_63,/222043010/omniapr/defects4j/Math_63_buggy/src/test/java/org/apache/commons/math/util/MathUtilsTest.java,testArrayEquals,"    public void testArrayEquals() {
        assertFalse(MathUtils.equals(new double[] { 1d }, null));
        assertFalse(MathUtils.equals(null, new double[] { 1d }));
        assertTrue(MathUtils.equals((double[]) null, (double[]) null));

        assertFalse(MathUtils.equals(new double[] { 1d }, new double[0]));
        assertTrue(MathUtils.equals(new double[] { 1d }, new double[] { 1d }));
        assertTrue(MathUtils.equals(new double[] {
                                      Double.POSITIVE_INFINITY,
                                      Double.NEGATIVE_INFINITY, 1d, 0d
                                    }, new double[] {
                                      Double.POSITIVE_INFINITY,
                                      Double.NEGATIVE_INFINITY, 1d, 0d
                                    }));
        assertFalse(MathUtils.equals(new double[] { Double.NaN },
                                     new double[] { Double.NaN }));
        assertFalse(MathUtils.equals(new double[] { Double.POSITIVE_INFINITY },
                                     new double[] { Double.NEGATIVE_INFINITY }));
        assertFalse(MathUtils.equals(new double[] { 1d },
                                     new double[] { FastMath.nextAfter(FastMath.nextAfter(1d, 2d), 2d) }));

    }",junit.framework.AssertionFailedError
Math_64,/222043010/omniapr/defects4j/Math_64_buggy/src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,testMinpackJennrichSampson,"  public void testMinpackJennrichSampson() {
    minpackTest(new JennrichSampsonFunction(10, new double[] { 0.3, 0.4 },
                                            64.5856498144943, 11.1517793413499,
                                            new double[] {
 //                                            0.2578330049, 0.257829976764542
                                               0.2578199266368004, 0.25782997676455244
                                            }), false);
  }",junit.framework.AssertionFailedError: expected:<0.2578199266368004> but was:<0.2578330049004441>
Math_64,/222043010/omniapr/defects4j/Math_64_buggy/src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,testMinpackFreudensteinRoth,"  public void testMinpackFreudensteinRoth() {
    minpackTest(new FreudensteinRothFunction(new double[] { 0.5, -2.0 },
                                             20.0124960961895, 6.99887517584575,
                                             new double[] {
                                               11.4124844654993,
                                               -0.896827913731509
                                             }), false);
    minpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 },
                                             12432.833948863, 6.9988751744895,
                                             new double[] {
                                                11.41300466147456,
                                                -0.896796038685959
                                             }), false);
    minpackTest(new FreudensteinRothFunction(new double[] { 50.0, -200.0 },
                                             11426454.595762, 6.99887517242903,
                                             new double[] {
                                                 11.412781785788564,
                                                 -0.8968051074920405
                                             }), false);
  }",junit.framework.AssertionFailedError: expected:<0.2578199266368004> but was:<0.2578330049004441>
Math_65,/222043010/omniapr/defects4j/Math_65_buggy/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java,testCircleFitting,"    public void testCircleFitting() throws FunctionEvaluationException, OptimizationException {
        Circle circle = new Circle();
        circle.addPoint( 30.0,  68.0);
        circle.addPoint( 50.0,  -6.0);
        circle.addPoint(110.0, -20.0);
        circle.addPoint( 35.0,  15.0);
        circle.addPoint( 45.0,  97.0);
        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
        VectorialPointValuePair optimum =
            optimizer.optimize(circle, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 },
                               new double[] { 98.680, 47.345 });
        assertTrue(optimizer.getEvaluations() < 10);
        assertTrue(optimizer.getJacobianEvaluations() < 10);
        double rms = optimizer.getRMS();
        assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10);
        Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
        assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10);
        assertEquals(96.07590211815305, center.x,      1.0e-10);
        assertEquals(48.13516790438953, center.y,      1.0e-10);
        double[][] cov = optimizer.getCovariances();
        assertEquals(1.839, cov[0][0], 0.001);
        assertEquals(0.731, cov[0][1], 0.001);
        assertEquals(cov[0][1], cov[1][0], 1.0e-14);
        assertEquals(0.786, cov[1][1], 0.001);
        double[] errors = optimizer.guessParametersErrors();
        assertEquals(1.384, errors[0], 0.001);
        assertEquals(0.905, errors[1], 0.001);

        // add perfect measurements and check errors are reduced
        double  r = circle.getRadius(center);
        for (double d= 0; d < 2 * Math.PI; d += 0.01) {
            circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
        }
        double[] target = new double[circle.getN()];
        Arrays.fill(target, 0.0);
        double[] weights = new double[circle.getN()];
        Arrays.fill(weights, 2.0);
        optimizer.optimize(circle, target, weights, new double[] { 98.680, 47.345 });
        cov = optimizer.getCovariances();
        assertEquals(0.0016, cov[0][0], 0.001);
        assertEquals(3.2e-7, cov[0][1], 1.0e-9);
        assertEquals(cov[0][1], cov[1][0], 1.0e-14);
        assertEquals(0.0016, cov[1][1], 0.001);
        errors = optimizer.guessParametersErrors();
        assertEquals(0.004, errors[0], 0.001);
        assertEquals(0.004, errors[1], 0.001);

    }",junit.framework.AssertionFailedError: expected:<0.004> but was:<0.0019737107108948474>
Math_66,/222043010/omniapr/defects4j/Math_66_buggy/src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,testQuinticMin,"    public void testQuinticMin() throws MathException {
        // The quintic function has zeros at 0, +-0.5 and +-1.
        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,
        UnivariateRealFunction f = new QuinticFunction();
        UnivariateRealOptimizer underlying = new BrentOptimizer();
        underlying.setRelativeAccuracy(1e-15);
        JDKRandomGenerator g = new JDKRandomGenerator();
        g.setSeed(4312000053L);
        MultiStartUnivariateRealOptimizer minimizer =
            new MultiStartUnivariateRealOptimizer(underlying, 5, g);
        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());

        try {
            minimizer.getOptima();
            fail(""an exception should have been thrown"");
        } catch (IllegalStateException ise) {
            // expected
        } catch (Exception e) {
            fail(""wrong exception caught"");
        }
        try {
            minimizer.getOptimaValues();
            fail(""an exception should have been thrown"");
        } catch (IllegalStateException ise) {
            // expected
        } catch (Exception e) {
            fail(""wrong exception caught"");
        }

        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);
        assertEquals(-0.2719561270319131, result, 1.0e-13);
        assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);
        assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);

        double[] optima = minimizer.getOptima();
        double[] optimaValues = minimizer.getOptimaValues();
        for (int i = 0; i < optima.length; ++i) {
            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);
        }
        assertTrue(minimizer.getEvaluations()    >= 120);
        assertTrue(minimizer.getEvaluations()    <= 170);
        assertTrue(minimizer.getIterationCount() >= 120);
        assertTrue(minimizer.getIterationCount() <= 170);
    }",junit.framework.AssertionFailedError: expected:<-0.2719561270319131> but was:<-0.2719561299044896>
Math_66,/222043010/omniapr/defects4j/Math_66_buggy/src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,testSinMin,"    public void testSinMin() throws MathException {
        UnivariateRealFunction f = new SinFunction();
        UnivariateRealOptimizer underlying = new BrentOptimizer();
        JDKRandomGenerator g = new JDKRandomGenerator();
        g.setSeed(44428400075l);
        MultiStartUnivariateRealOptimizer minimizer =
            new MultiStartUnivariateRealOptimizer(underlying, 10, g);
        minimizer.optimize(f, GoalType.MINIMIZE, -100.0, 100.0);
        double[] optima = minimizer.getOptima();
        double[] optimaValues = minimizer.getOptimaValues();
        for (int i = 1; i < optima.length; ++i) {
            double d = (optima[i] - optima[i-1]) / (2 * Math.PI);
            assertTrue (Math.abs(d - Math.rint(d)) < 1.0e-8);
            assertEquals(-1.0, f.value(optima[i]), 1.0e-10);
            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);
        }
        assertTrue(minimizer.getEvaluations() > 150);
        assertTrue(minimizer.getEvaluations() < 250);
    }",junit.framework.AssertionFailedError: expected:<-0.2719561270319131> but was:<-0.2719561299044896>
Math_66,/222043010/omniapr/defects4j/Math_66_buggy/src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,testQuinticMinStatistics,"    public void testQuinticMinStatistics() throws MathException {
        // The function has local minima at -0.27195613 and 0.82221643.
        UnivariateRealFunction f = new QuinticFunction();
        UnivariateRealOptimizer minimizer = new BrentOptimizer();
        minimizer.setRelativeAccuracy(1e-10);
        minimizer.setAbsoluteAccuracy(1e-11);

        final DescriptiveStatistics[] stat = new DescriptiveStatistics[3];
        for (int i = 0; i < stat.length; i++) {
            stat[i] = new DescriptiveStatistics();
        }

        final double min = -0.75;
        final double max = 0.25;
        final int nSamples = 200;
        final double delta = (max - min) / nSamples;
        for (int i = 0; i < nSamples; i++) {
            final double start = min + i * delta;
            stat[0].addValue(minimizer.optimize(f, GoalType.MINIMIZE, min, max, start));
            stat[1].addValue(minimizer.getIterationCount());
            stat[2].addValue(minimizer.getEvaluations());
        }

        final double meanOptValue = stat[0].getMean();
        final double medianIter = stat[1].getPercentile(50);
        final double medianEval = stat[2].getPercentile(50);
        assertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811);
        assertEquals(medianIter, 17, Math.ulp(1d));
        assertEquals(medianEval, 18, Math.ulp(1d));
    }",junit.framework.AssertionFailedError: expected:<1880.5> but was:<18.0>
Math_66,/222043010/omniapr/defects4j/Math_66_buggy/src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java,testSinMin,"    public void testSinMin() throws MathException {
        UnivariateRealFunction f = new SinFunction();
        UnivariateRealOptimizer minimizer = new BrentOptimizer();
        minimizer.setMaxEvaluations(200);
        assertEquals(200, minimizer.getMaxEvaluations());
        try {
            minimizer.getResult();
            fail(""an exception should have been thrown"");
        } catch (NoDataException ise) {
            // expected
        } catch (Exception e) {
            fail(""wrong exception caught"");
        }
        assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());
        assertTrue(minimizer.getIterationCount() <= 50);
        assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());
        assertTrue(minimizer.getIterationCount() <= 50);
        assertTrue(minimizer.getEvaluations()    <= 100);
        assertTrue(minimizer.getEvaluations()    >=  15);
        minimizer.setMaxEvaluations(10);
        try {
            minimizer.optimize(f, GoalType.MINIMIZE, 4, 5);
            fail(""an exception should have been thrown"");
        } catch (FunctionEvaluationException fee) {
            // expected
        } catch (Exception e) {
            fail(""wrong exception caught"");
        }
    }",junit.framework.AssertionFailedError: expected:<1880.5> but was:<18.0>
Math_67,/222043010/omniapr/defects4j/Math_67_buggy/src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java,testQuinticMin,"    public void testQuinticMin() throws MathException {
        // The quintic function has zeros at 0, +-0.5 and +-1.
        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,
        UnivariateRealFunction f = new QuinticFunction();
        UnivariateRealOptimizer underlying = new BrentOptimizer();
        JDKRandomGenerator g = new JDKRandomGenerator();
        g.setSeed(4312000053l);
        MultiStartUnivariateRealOptimizer minimizer =
            new MultiStartUnivariateRealOptimizer(underlying, 5, g);
        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());
        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());

        try {
            minimizer.getOptima();
            fail(""an exception should have been thrown"");
        } catch (IllegalStateException ise) {
            // expected
        } catch (Exception e) {
            fail(""wrong exception caught"");
        }
        try {
            minimizer.getOptimaValues();
            fail(""an exception should have been thrown"");
        } catch (IllegalStateException ise) {
            // expected
        } catch (Exception e) {
            fail(""wrong exception caught"");
        }

        assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);
        assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);
        assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);

        double[] optima = minimizer.getOptima();
        double[] optimaValues = minimizer.getOptimaValues();
        for (int i = 0; i < optima.length; ++i) {
            assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);
        }

        assertTrue(minimizer.getEvaluations()    >= 510);
        assertTrue(minimizer.getEvaluations()    <= 530);
        assertTrue(minimizer.getIterationCount() >= 150);
        assertTrue(minimizer.getIterationCount() <= 170);

    }",junit.framework.AssertionFailedError: expected:<-0.27195612846834> but was:<-0.27194301946870036>
Math_68,/222043010/omniapr/defects4j/Math_68_buggy/src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,testMinpackJennrichSampson,"  public void testMinpackJennrichSampson() {
    minpackTest(new JennrichSampsonFunction(10, new double[] { 0.3, 0.4 },
                                            64.5856498144943, 11.1517793413499,
                                            new double[] {
                                             0.2578330049, 0.257829976764542
                                            }), false);
  }",junit.framework.AssertionFailedError: expected:<0.2578330049> but was:<0.257819926636807>
Math_68,/222043010/omniapr/defects4j/Math_68_buggy/src/test/java/org/apache/commons/math/optimization/general/MinpackTest.java,testMinpackFreudensteinRoth,"  public void testMinpackFreudensteinRoth() {
    minpackTest(new FreudensteinRothFunction(new double[] { 0.5, -2.0 },
                                             20.0124960961895, 6.99887517584575,
                                             new double[] {
                                               11.4124844654993,
                                               -0.896827913731509
                                             }), false);
    minpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 },
                                             12432.833948863, 6.9988751744895,
                                             new double[] {
                                               11.4121122022341,
                                               -0.8968550851268697
                                             }), false);
    minpackTest(new FreudensteinRothFunction(new double[] { 50.0, -200.0 },
                                             11426454.595762, 6.99887517242903,
                                             new double[] {
                                               11.412069435091231,
                                               -0.8968582807605691
                                             }), false);
  }",junit.framework.AssertionFailedError: expected:<0.2578330049> but was:<0.257819926636807>
Math_69,/222043010/omniapr/defects4j/Math_69_buggy/src/test/java/org/apache/commons/math/stat/correlation/PearsonsCorrelationTest.java,testPValueNearZero,"    public void testPValueNearZero() throws Exception {
        /*
         * Create a dataset that has r -> 1, p -> 0 as dimension increases.
         * Prior to the fix for MATH-371, p vanished for dimension >= 14.
         * Post fix, p-values diminish smoothly, vanishing at dimension = 127.
         * Tested value is ~1E-303.
         */
        int dimension = 120; 
        double[][] data = new double[dimension][2];
        for (int i = 0; i < dimension; i++) {
            data[i][0] = i;
            data[i][1] = i + 1/((double)i + 1);
        }
        PearsonsCorrelation corrInstance = new PearsonsCorrelation(data);
        assertTrue(corrInstance.getCorrelationPValues().getEntry(0, 1) > 0);
    }",junit.framework.AssertionFailedError
Math_70,/222043010/omniapr/defects4j/Math_70_buggy/src/test/java/org/apache/commons/math/analysis/solvers/BisectionSolverTest.java,testMath369,"    public void testMath369() throws Exception {
        UnivariateRealFunction f = new SinFunction();
        UnivariateRealSolver solver = new BisectionSolver();
        assertEquals(Math.PI, solver.solve(f, 3.0, 3.2, 3.1), solver.getAbsoluteAccuracy());
    }",java.lang.NullPointerException
Math_71,/222043010/omniapr/defects4j/Math_71_buggy/src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java,testMissedEndEvent,"  public void testMissedEndEvent() throws IntegratorException, DerivativeException {
      final double   t0     = 1878250320.0000029;
      final double   tEvent = 1878250379.9999986;
      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };
      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {

          public int getDimension() {
              return k.length;
          }

          public void computeDerivatives(double t, double[] y, double[] yDot) {
              for (int i = 0; i < y.length; ++i) {
                  yDot[i] = k[i] * y[i];
              }
          }
      };

      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);

      double[] y0   = new double[k.length];
      for (int i = 0; i < y0.length; ++i) {
          y0[i] = i + 1;
      }
      double[] y    = new double[k.length];

      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
      Assert.assertEquals(tEvent, finalT, 5.0e-6);
      for (int i = 0; i < y.length; ++i) {
          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
      }

      integrator.addEventHandler(new EventHandler() {

          public void resetState(double t, double[] y) {
          }

          public double g(double t, double[] y) {
              return t - tEvent;
          }

          public int eventOccurred(double t, double[] y, boolean increasing) {
              Assert.assertEquals(tEvent, t, 5.0e-6);
              return CONTINUE;
          }
      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
      Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);
      for (int i = 0; i < y.length; ++i) {
          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
      }

  }",junit.framework.AssertionFailedError: expected:<1.8782503799999986E9> but was:<1.878250439999994E9>
Math_71,/222043010/omniapr/defects4j/Math_71_buggy/src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java,testMissedEndEvent,"  public void testMissedEndEvent() throws IntegratorException, DerivativeException {
      final double   t0     = 1878250320.0000029;
      final double   tEvent = 1878250379.9999986;
      final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };
      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {

          public int getDimension() {
              return k.length;
          }

          public void computeDerivatives(double t, double[] y, double[] yDot) {
              for (int i = 0; i < y.length; ++i) {
                  yDot[i] = k[i] * y[i];
              }
          }
      };

      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,
                                                                             1.0e-10, 1.0e-10);

      double[] y0   = new double[k.length];
      for (int i = 0; i < y0.length; ++i) {
          y0[i] = i + 1;
      }
      double[] y    = new double[k.length];

      integrator.setInitialStepSize(60.0);
      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);
      Assert.assertEquals(tEvent, finalT, 5.0e-6);
      for (int i = 0; i < y.length; ++i) {
          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
      }

      integrator.setInitialStepSize(60.0);
      integrator.addEventHandler(new EventHandler() {

          public void resetState(double t, double[] y) {
          }

          public double g(double t, double[] y) {
              return t - tEvent;
          }

          public int eventOccurred(double t, double[] y, boolean increasing) {
              Assert.assertEquals(tEvent, t, 5.0e-6);
              return CONTINUE;
          }
      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);
      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);
      Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);
      for (int i = 0; i < y.length; ++i) {
          Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
      }

  }",junit.framework.AssertionFailedError: expected:<1.8782503799999986E9> but was:<1.878250479999994E9>
Math_72,/222043010/omniapr/defects4j/Math_72_buggy/src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,testRootEndpoints,"    public void testRootEndpoints() throws Exception {
        UnivariateRealFunction f = new SinFunction();
        UnivariateRealSolver solver = new BrentSolver();

        // endpoint is root
        double result = solver.solve(f, Math.PI, 4);
        assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());

        result = solver.solve(f, 3, Math.PI);
        assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());

        result = solver.solve(f, Math.PI, 4, 3.5);
        assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());

        result = solver.solve(f, 3, Math.PI, 3.07);
        assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());

    }",junit.framework.AssertionFailedError: expected:<3.141592653589793> but was:<1.2246467991473532E-16>
Math_73,/222043010/omniapr/defects4j/Math_73_buggy/src/test/java/org/apache/commons/math/analysis/solvers/BrentSolverTest.java,testBadEndpoints,"    public void testBadEndpoints() throws Exception {
        UnivariateRealFunction f = new SinFunction();
        UnivariateRealSolver solver = new BrentSolver();
        try {  // bad interval
            solver.solve(f, 1, -1);
            fail(""Expecting IllegalArgumentException - bad interval"");
        } catch (IllegalArgumentException ex) {
            // expected
        }
        try {  // no bracket
            solver.solve(f, 1, 1.5);
            fail(""Expecting IllegalArgumentException - non-bracketing"");
        } catch (IllegalArgumentException ex) {
            // expected
        }
        try {  // no bracket
            solver.solve(f, 1, 1.5, 1.2);
            fail(""Expecting IllegalArgumentException - non-bracketing"");
        } catch (IllegalArgumentException ex) {
            // expected
        }
    }",junit.framework.AssertionFailedError: Expecting IllegalArgumentException - non-bracketing
Math_74,/222043010/omniapr/defects4j/Math_74_buggy/src/test/java/org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java,polynomial,"    public void polynomial() throws DerivativeException, IntegratorException {
        TestProblem6 pb = new TestProblem6();
        double range = Math.abs(pb.getFinalTime() - pb.getInitialTime());

        for (int nSteps = 1; nSteps < 7; ++nSteps) {
            AdamsMoultonIntegrator integ =
                new AdamsMoultonIntegrator(nSteps, 1.0e-6 * range, 0.1 * range, 1.0e-9, 1.0e-9);
            TestProblemHandler handler = new TestProblemHandler(pb, integ);
            integ.addStepHandler(handler);
            integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),
                            pb.getFinalTime(), new double[pb.getDimension()]);
            if (nSteps < 4) {
                assertTrue(integ.getEvaluations() > 140);
            } else {
                assertTrue(integ.getEvaluations() < 90);
            }
        }

    }",junit.framework.AssertionFailedError
Math_75,/222043010/omniapr/defects4j/Math_75_buggy/src/test/java/org/apache/commons/math/stat/FrequencyTest.java,testPcts,"    public void testPcts() {
        f.addValue(oneL);
        f.addValue(twoL);
        f.addValue(oneI);
        f.addValue(twoI);
        f.addValue(threeL);
        f.addValue(threeL);
        f.addValue(3);
        f.addValue(threeI);
        assertEquals(""one pct"",0.25,f.getPct(1),tolerance);
        assertEquals(""two pct"",0.25,f.getPct(Long.valueOf(2)),tolerance);
        assertEquals(""three pct"",0.5,f.getPct(threeL),tolerance);
        // MATH-329
        assertEquals(""three (Object) pct"",0.5,f.getPct((Object) (Integer.valueOf(3))),tolerance);
        assertEquals(""five pct"",0,f.getPct(5),tolerance);
        assertEquals(""foo pct"",0,f.getPct(""foo""),tolerance);
        assertEquals(""one cum pct"",0.25,f.getCumPct(1),tolerance);
        assertEquals(""two cum pct"",0.50,f.getCumPct(Long.valueOf(2)),tolerance);
        assertEquals(""Integer argument"",0.50,f.getCumPct(Integer.valueOf(2)),tolerance);
        assertEquals(""three cum pct"",1.0,f.getCumPct(threeL),tolerance);
        assertEquals(""five cum pct"",1.0,f.getCumPct(5),tolerance);
        assertEquals(""zero cum pct"",0.0,f.getCumPct(0),tolerance);
        assertEquals(""foo cum pct"",0,f.getCumPct(""foo""),tolerance);
    }",junit.framework.AssertionFailedError: three (Object) pct expected:<0.5> but was:<1.0>
Math_76,/222043010/omniapr/defects4j/Math_76_buggy/src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,testMath320A,"    public void testMath320A() {
        RealMatrix rm = new Array2DRowRealMatrix(new double[][] {
            { 1.0, 2.0, 3.0 }, { 2.0, 3.0, 4.0 }, { 3.0, 5.0, 7.0 }
        });
        double s439  = Math.sqrt(439.0);
        double[] reference = new double[] {
            Math.sqrt(3.0 * (21.0 + s439)), Math.sqrt(3.0 * (21.0 - s439))
        };
        SingularValueDecomposition svd =
            new SingularValueDecompositionImpl(rm);

        // check we get the expected theoretical singular values
        double[] singularValues = svd.getSingularValues();
        Assert.assertEquals(reference.length, singularValues.length);
        for (int i = 0; i < reference.length; ++i) {
            Assert.assertEquals(reference[i], singularValues[i], 4.0e-13);
        }

        // check the decomposition allows to recover the original matrix
        RealMatrix recomposed = svd.getU().multiply(svd.getS()).multiply(svd.getVT());
        Assert.assertEquals(0.0, recomposed.subtract(rm).getNorm(), 5.0e-13);

        // check we can solve a singular system
        double[] b = new double[] { 5.0, 6.0, 7.0 };
        double[] resSVD = svd.getSolver().solve(b);
        Assert.assertEquals(rm.getColumnDimension(), resSVD.length);

        // check the solution really minimizes the residuals
        double svdMinResidual = residual(rm, resSVD, b);
        double epsilon = 2 * Math.ulp(svdMinResidual);
        double h = 0.1;
        int    k = 3;
        for (double d0 = -k * h; d0 <= k * h; d0 += h) {
            for (double d1 = -k * h ; d1 <= k * h; d1 += h) {
                for (double d2 = -k * h; d2 <= k * h; d2 += h) {
                    double[] x = new double[] { resSVD[0] + d0, resSVD[1] + d1, resSVD[2] + d2 };
                    Assert.assertTrue((residual(rm, x, b) - svdMinResidual) > -epsilon);
                }
            }
        }

    }",junit.framework.AssertionFailedError: expected:<0.0> but was:<0.09336767546650937>
Math_76,/222043010/omniapr/defects4j/Math_76_buggy/src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java,testMath320B,"    public void testMath320B() {
        RealMatrix rm = new Array2DRowRealMatrix(new double[][] {
            { 1.0, 2.0 }, { 1.0, 2.0 }
        });
        SingularValueDecomposition svd =
            new SingularValueDecompositionImpl(rm);
        RealMatrix recomposed = svd.getU().multiply(svd.getS()).multiply(svd.getVT());
        Assert.assertEquals(0.0, recomposed.subtract(rm).getNorm(), 2.0e-15);
    }",junit.framework.AssertionFailedError: expected:<0.0> but was:<0.09336767546650937>
Math_77,/222043010/omniapr/defects4j/Math_77_buggy/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java,testBasicFunctions,"    public void testBasicFunctions() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        assertEquals(""compare values  "", 8.4261497731763586307, d_getNorm);

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        assertEquals(""compare values  "", 17.0, d_getL1Norm);

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        assertEquals(""compare values  "", 6.0, d_getLInfNorm);


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        assertEquals(""compare values  "",v1.subtract(v2).getNorm(), dist );

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        assertEquals(""compare values  "", v1.subtract(v2).getNorm(),dist_2 );

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        assertEquals(""compare values  "", v1.subtract(v2).getNorm(),dist_3 );

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        assertEquals(""compare values  "",9d, d_getL1Distance );

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        assertEquals(""compare values  "",9d, d_getL1Distance_2 );

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        assertEquals(""compare values  "",9d, d_getL1Distance_3 );

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        assertEquals(""compare values  "",3d, d_getLInfDistance );

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        assertEquals(""compare values  "",3d, d_getLInfDistance_2 );

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        assertEquals(""compare values  "",3d, d_getLInfDistance_3 );

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        assertClose(""compare vect"" ,v_add.getData(),result_add,normTolerance);

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        assertClose(""compare vect"" ,v_add_i.getData(),result_add_i,normTolerance);

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        assertClose(""compare vect"" ,v_subtract.getData(),result_subtract,normTolerance);

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        assertClose(""compare vect"" ,v_subtract_i.getData(),result_subtract_i,normTolerance);

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        assertClose(""compare vect"" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        assertClose(""compare vect"" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        assertClose(""compare vect"" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        assertClose(""compare vect"" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        assertClose(""compare vect"" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        assertClose(""compare vect"" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        assertEquals(""compare val "",32d, dot);

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        assertEquals(""compare val "",32d, dot_2);

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        assertEquals(""compare val "",4d, m_outerProduct.getEntry(0,0));

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        assertEquals(""compare val "",4d, m_outerProduct_2.getEntry(0,0));

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        assertEquals(""compare val "",4d, m_outerProduct_3.getEntry(0,0));

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        assertClose(""compare vect"" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);

        try {
            v_null.unitVector();
            fail(""Expecting ArithmeticException"");
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            fail(""wrong exception caught"");
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        assertClose(""compare vect"" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);
        try {
            v_null.unitize();
            fail(""Expecting ArithmeticException"");
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            fail(""wrong exception caught"");
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        assertClose(""compare vect"", v_projection.getData(), result_projection, normTolerance);

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        assertClose(""compare vect"", v_projection_2.getData(), result_projection_2, normTolerance);

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        assertClose(""compare vect"", v_projection_3.getData(), result_projection_3, normTolerance);

    }",junit.framework.AssertionFailedError: compare values   expected:<6.0> but was:<128.0>
Math_77,/222043010/omniapr/defects4j/Math_77_buggy/src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java,testBasicFunctions,"    public void testBasicFunctions() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        assertEquals(""compare values  "", 8.4261497731763586307, d_getNorm);

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        assertEquals(""compare values  "", 17.0, d_getL1Norm);

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        assertEquals(""compare values  "", 6.0, d_getLInfNorm);

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        assertEquals(""compare values  "",v1.subtract(v2).getNorm(), dist );

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        assertEquals(""compare values  "", v1.subtract(v2).getNorm(),dist_2 );

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        assertEquals(""compare values  "",9d, d_getL1Distance );

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        assertEquals(""compare values  "",9d, d_getL1Distance_2 );

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        assertEquals(""compare values  "",3d, d_getLInfDistance );

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        assertEquals(""compare values  "",3d, d_getLInfDistance_2 );

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        assertClose(""compare vect"" ,v_add.getData(),result_add,normTolerance);

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        assertClose(""compare vect"" ,v_add_i.getData(),result_add_i,normTolerance);

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        assertClose(""compare vect"" ,v_subtract.getData(),result_subtract,normTolerance);

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        assertClose(""compare vect"" ,v_subtract_i.getData(),result_subtract_i,normTolerance);

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        assertClose(""compare vect"" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        assertClose(""compare vect"" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        assertClose(""compare vect"" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        assertClose(""compare vect"" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        assertEquals(""compare val "",32d, dot);

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        assertEquals(""compare val "",32d, dot_2);

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        assertEquals(""compare val "",4d, m_outerProduct.getEntry(0,0));

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        assertEquals(""compare val "",4d, m_outerProduct_2.getEntry(0,0));

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        assertClose(""compare vect"" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);

        try {
            v_null.unitVector();
            fail(""Expecting ArithmeticException"");
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            fail(""wrong exception caught"");
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        assertClose(""compare vect"" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);
        try {
            v_null.unitize();
            fail(""Expecting ArithmeticException"");
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            fail(""wrong exception caught"");
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        assertClose(""compare vect"", v_projection.getData(), result_projection, normTolerance);

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        assertClose(""compare vect"", v_projection_2.getData(), result_projection_2, normTolerance);

    }",junit.framework.AssertionFailedError: compare values   expected:<6.0> but was:<-3.0>
Math_78,/222043010/omniapr/defects4j/Math_78_buggy/src/test/java/org/apache/commons/math/ode/events/EventStateTest.java,closeEvents,"    public void closeEvents()
        throws EventException, ConvergenceException, DerivativeException {

        final double r1  = 90.0;
        final double r2  = 135.0;
        final double gap = r2 - r1;
        EventHandler closeEventsGenerator = new EventHandler() {
            public void resetState(double t, double[] y) {
            }
            public double g(double t, double[] y) {
                return (t - r1) * (r2 - t);
            }
            public int eventOccurred(double t, double[] y, boolean increasing) {
                return CONTINUE;
            }
        };

        final double tolerance = 0.1;
        EventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);

        double t0 = r1 - 0.5 * gap;
        es.reinitializeBegin(t0, new double[0]);
        AbstractStepInterpolator interpolator =
            new DummyStepInterpolator(new double[0], true);
        interpolator.storeTime(t0);

        interpolator.shift();
        interpolator.storeTime(0.5 * (r1 + r2));
        Assert.assertTrue(es.evaluateStep(interpolator));
        Assert.assertEquals(r1, es.getEventTime(), tolerance);
        es.stepAccepted(es.getEventTime(), new double[0]);

        interpolator.shift();
        interpolator.storeTime(r2 + 0.4 * gap);
        Assert.assertTrue(es.evaluateStep(interpolator));
        Assert.assertEquals(r2, es.getEventTime(), tolerance);

    }","org.apache.commons.math.MathRuntimeException$4: function values at endpoints do not have different signs.  Endpoints: [89.999, 153.1], Values: [-0.066, -1,142.11]"
Math_79,/222043010/omniapr/defects4j/Math_79_buggy/src/test/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java,testPerformClusterAnalysisDegenerate,"    public void testPerformClusterAnalysisDegenerate() {
        KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(
                new Random(1746432956321l));
        EuclideanIntegerPoint[] points = new EuclideanIntegerPoint[] {
                new EuclideanIntegerPoint(new int[] { 1959, 325100 }),
                new EuclideanIntegerPoint(new int[] { 1960, 373200 }), };
        List<Cluster<EuclideanIntegerPoint>> clusters = transformer.cluster(Arrays.asList(points), 1, 1);
        assertEquals(1, clusters.size());
        assertEquals(2, (clusters.get(0).getPoints().size()));
        EuclideanIntegerPoint pt1 = new EuclideanIntegerPoint(new int[] { 1959, 325100 });
        EuclideanIntegerPoint pt2 = new EuclideanIntegerPoint(new int[] { 1960, 373200 });
        assertTrue(clusters.get(0).getPoints().contains(pt1));
        assertTrue(clusters.get(0).getPoints().contains(pt2));

    }",java.lang.NullPointerException
Math_80,/222043010/omniapr/defects4j/Math_80_buggy/src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,testMathpbx02,"    public void testMathpbx02() {

        double[] mainTridiagonal = {
        	  7484.860960227216, 18405.28129035345, 13855.225609560746,
        	 10016.708722343366, 559.8117399576674, 6750.190788301587, 
        	    71.21428769782159
        };
        double[] secondaryTridiagonal = {
        	 -4175.088570476366,1975.7955858241994,5193.178422374075, 
        	  1995.286659169179,75.34535882933804,-234.0808002076056
        };

        // the reference values have been computed using routine DSTEMR
        // from the fortran library LAPACK version 3.2.1
        double[] refEigenValues = {
        		20654.744890306974412,16828.208208485466457,
        		6893.155912634994820,6757.083016675340332,
        		5887.799885688558788,64.309089923240379,
        		57.992628792736340
        };
        RealVector[] refEigenVectors = {
        		new ArrayRealVector(new double[] {-0.270356342026904, 0.852811091326997, 0.399639490702077, 0.198794657813990, 0.019739323307666, 0.000106983022327, -0.000001216636321}),
        		new ArrayRealVector(new double[] {0.179995273578326,-0.402807848153042,0.701870993525734,0.555058211014888,0.068079148898236,0.000509139115227,-0.000007112235617}),
        		new ArrayRealVector(new double[] {-0.399582721284727,-0.056629954519333,-0.514406488522827,0.711168164518580,0.225548081276367,0.125943999652923,-0.004321507456014}),
        		new ArrayRealVector(new double[] {0.058515721572821,0.010200130057739,0.063516274916536,-0.090696087449378,-0.017148420432597,0.991318870265707,-0.034707338554096}),
        		new ArrayRealVector(new double[] {0.855205995537564,0.327134656629775,-0.265382397060548,0.282690729026706,0.105736068025572,-0.009138126622039,0.000367751821196}),
        		new ArrayRealVector(new double[] {-0.002913069901144,-0.005177515777101,0.041906334478672,-0.109315918416258,0.436192305456741,0.026307315639535,0.891797507436344}),
        		new ArrayRealVector(new double[] {-0.005738311176435,-0.010207611670378,0.082662420517928,-0.215733886094368,0.861606487840411,-0.025478530652759,-0.451080697503958})
        };

        // the following line triggers the exception
        EigenDecomposition decomposition =
            new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal, MathUtils.SAFE_MIN);

        double[] eigenValues = decomposition.getRealEigenvalues();
        for (int i = 0; i < refEigenValues.length; ++i) {
            assertEquals(refEigenValues[i], eigenValues[i], 1.0e-3);
            if (refEigenVectors[i].dotProduct(decomposition.getEigenvector(i)) < 0) {
                assertEquals(0, refEigenVectors[i].add(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);
            } else {
                assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 1.0e-5);
            }
        }

    }",junit.framework.AssertionFailedError: expected:<16828.208208485466> but was:<20654.74511575945>
Math_81,/222043010/omniapr/defects4j/Math_81_buggy/src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java,testMath308,"    public void testMath308() {

        double[] mainTridiagonal = {
            22.330154644539597, 46.65485522478641, 17.393672330044705, 54.46687435351116, 80.17800767709437
        };
        double[] secondaryTridiagonal = {
            13.04450406501361, -5.977590941539671, 2.9040909856707517, 7.1570352792841225
        };

        // the reference values have been computed using routine DSTEMR
        // from the fortran library LAPACK version 3.2.1
        double[] refEigenValues = {
            82.044413207204002, 53.456697699894512, 52.536278520113882, 18.847969733754262, 14.138204224043099
        };
        RealVector[] refEigenVectors = {
            new ArrayRealVector(new double[] { -0.000462690386766, -0.002118073109055,  0.011530080757413,  0.252322434584915,  0.967572088232592 }),
            new ArrayRealVector(new double[] {  0.314647769490148,  0.750806415553905, -0.167700312025760, -0.537092972407375,  0.143854968127780 }),
            new ArrayRealVector(new double[] {  0.222368839324646,  0.514921891363332, -0.021377019336614,  0.801196801016305, -0.207446991247740 }),
            new ArrayRealVector(new double[] {  0.713933751051495, -0.190582113553930,  0.671410443368332, -0.056056055955050,  0.006541576993581 }),
            new ArrayRealVector(new double[] {  0.584677060845929, -0.367177264979103, -0.721453187784497,  0.052971054621812, -0.005740715188257 })
        };

        EigenDecomposition decomposition =
            new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal, MathUtils.SAFE_MIN);

        double[] eigenValues = decomposition.getRealEigenvalues();
        for (int i = 0; i < refEigenValues.length; ++i) {
            assertEquals(refEigenValues[i], eigenValues[i], 1.0e-5);
            assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 2.0e-7);
        }

    }",java.lang.ArrayIndexOutOfBoundsException: -1
Math_82,/222043010/omniapr/defects4j/Math_82_buggy/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,testMath288,"    public void testMath288() throws OptimizationException {
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 7, 3, 0, 0 }, 0 );
        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
        constraints.add(new LinearConstraint(new double[] { 3, 0, -5, 0 }, Relationship.LEQ, 0.0));
        constraints.add(new LinearConstraint(new double[] { 2, 0, 0, -5 }, Relationship.LEQ, 0.0));
        constraints.add(new LinearConstraint(new double[] { 0, 3, 0, -5 }, Relationship.LEQ, 0.0));
        constraints.add(new LinearConstraint(new double[] { 1, 0, 0, 0 }, Relationship.LEQ, 1.0));
        constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 0 }, Relationship.LEQ, 1.0));

        SimplexSolver solver = new SimplexSolver();
        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);
        assertEquals(10.0, solution.getValue(), .0000001);
    }",junit.framework.AssertionFailedError: expected:<10.0> but was:<11.5>
Math_83,/222043010/omniapr/defects4j/Math_83_buggy/src/test/java/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,testMath286,"    public void testMath286() throws OptimizationException {
      LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.2, 0.3 }, 0 );
      Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
      constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.EQ, 23.0));

      RealPointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, true);
      assertEquals(6.9, solution.getValue(), .0000001);
    }",junit.framework.AssertionFailedError: expected:<6.9> but was:<4.6000000000000005>
Math_84,/222043010/omniapr/defects4j/Math_84_buggy/src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,testMinimizeMaximize,"  public void testMinimizeMaximize()
      throws FunctionEvaluationException, ConvergenceException {

      // the following function has 4 local extrema:
      final double xM        = -3.841947088256863675365;
      final double yM        = -1.391745200270734924416;
      final double xP        =  0.2286682237349059125691;
      final double yP        = -yM;
      final double valueXmYm =  0.2373295333134216789769; // local  maximum
      final double valueXmYp = -valueXmYm;                // local  minimum
      final double valueXpYm = -0.7290400707055187115322; // global minimum
      final double valueXpYp = -valueXpYm;                // global maximum
      MultivariateRealFunction fourExtrema = new MultivariateRealFunction() {
          private static final long serialVersionUID = -7039124064449091152L;
          public double value(double[] variables) throws FunctionEvaluationException {
              final double x = variables[0];
              final double y = variables[1];
              return ((x == 0) || (y == 0)) ? 0 : (Math.atan(x) * Math.atan(x + 2) * Math.atan(y) * Math.atan(y) / (x * y));
          }
      };

      MultiDirectional optimizer = new MultiDirectional();
      optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-11, 1.0e-30));
      optimizer.setMaxIterations(200);
      optimizer.setStartConfiguration(new double[] { 0.2, 0.2 });
      RealPointValuePair optimum;

      // minimization
      optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { -3.0, 0 });
      Assert.assertEquals(xM,        optimum.getPoint()[0], 4.0e-6);
      Assert.assertEquals(yP,        optimum.getPoint()[1], 3.0e-6);
      Assert.assertEquals(valueXmYp, optimum.getValue(),    8.0e-13);
      Assert.assertTrue(optimizer.getEvaluations() > 120);
      Assert.assertTrue(optimizer.getEvaluations() < 150);

      optimum = optimizer.optimize(fourExtrema, GoalType.MINIMIZE, new double[] { +1, 0 });
      Assert.assertEquals(xP,        optimum.getPoint()[0], 2.0e-8);
      Assert.assertEquals(yM,        optimum.getPoint()[1], 3.0e-6);
      Assert.assertEquals(valueXpYm, optimum.getValue(),    2.0e-12);              
      Assert.assertTrue(optimizer.getEvaluations() > 120);
      Assert.assertTrue(optimizer.getEvaluations() < 150);

      // maximization
      optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { -3.0, 0.0 });
      Assert.assertEquals(xM,        optimum.getPoint()[0], 7.0e-7);
      Assert.assertEquals(yM,        optimum.getPoint()[1], 3.0e-7);
      Assert.assertEquals(valueXmYm, optimum.getValue(),    2.0e-14);
      Assert.assertTrue(optimizer.getEvaluations() > 120);
      Assert.assertTrue(optimizer.getEvaluations() < 150);

      optimizer.setConvergenceChecker(new SimpleScalarValueChecker(1.0e-15, 1.0e-30));
      optimum = optimizer.optimize(fourExtrema, GoalType.MAXIMIZE, new double[] { +1, 0 });
      Assert.assertEquals(xP,        optimum.getPoint()[0], 2.0e-8);
      Assert.assertEquals(yP,        optimum.getPoint()[1], 3.0e-6);
      Assert.assertEquals(valueXpYp, optimum.getValue(),    2.0e-12);
      Assert.assertTrue(optimizer.getEvaluations() > 180);
      Assert.assertTrue(optimizer.getEvaluations() < 220);

  }",junit.framework.AssertionFailedError
Math_84,/222043010/omniapr/defects4j/Math_84_buggy/src/test/java/org/apache/commons/math/optimization/direct/MultiDirectionalTest.java,testMath283,"  public void testMath283()
      throws FunctionEvaluationException, OptimizationException {
      // fails because MultiDirectional.iterateSimplex is looping forever
      // the while(true) should be replaced with a convergence check
      MultiDirectional multiDirectional = new MultiDirectional();
      multiDirectional.setMaxIterations(100);
      multiDirectional.setMaxEvaluations(1000);

      final Gaussian2D function = new Gaussian2D(0.0, 0.0, 1.0);

      RealPointValuePair estimate = multiDirectional.optimize(function,
                                    GoalType.MAXIMIZE, function.getMaximumPosition());

      final double EPSILON = 1e-5;

      final double expectedMaximum = function.getMaximum();
      final double actualMaximum = estimate.getValue();
      Assert.assertEquals(expectedMaximum, actualMaximum, EPSILON);

      final double[] expectedPosition = function.getMaximumPosition();
      final double[] actualPosition = estimate.getPoint();
      Assert.assertEquals(expectedPosition[0], actualPosition[0], EPSILON );
      Assert.assertEquals(expectedPosition[1], actualPosition[1], EPSILON );
      
  }",junit.framework.AssertionFailedError
Math_85,/222043010/omniapr/defects4j/Math_85_buggy/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,testMath280,"    public void testMath280() throws MathException {
        NormalDistribution normal = new NormalDistributionImpl(0,1);
        double result = normal.inverseCumulativeProbability(0.9772498680518209);
        assertEquals(2.0, result, 1.0e-12);
    }","org.apache.commons.math.MathException: org.apache.commons.math.ConvergenceException: number of iterations=1, maximum iterations=2,147,483,647, initial=1, lower bound=0, upper bound=179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000, final a value=0, final b value=2, f(a)=-0.477, f(b)=0"
Math_86,/222043010/omniapr/defects4j/Math_86_buggy/src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,testMath274,"    public void testMath274() throws MathException {
        new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[][] {
                { 0.40434286, -0.09376327, 0.30328980, 0.04909388 },
                {-0.09376327,  0.10400408, 0.07137959, 0.04762857 },
                { 0.30328980,  0.07137959, 0.30458776, 0.04882449 },
                { 0.04909388,  0.04762857, 0.04882449, 0.07543265 }
            
        }));
    }",junit.framework.AssertionFailedError: Expected exception: org.apache.commons.math.linear.NotPositiveDefiniteMatrixException
Math_86,/222043010/omniapr/defects4j/Math_86_buggy/src/test/org/apache/commons/math/linear/CholeskyDecompositionImplTest.java,testNotPositiveDefinite,"    public void testNotPositiveDefinite() throws MathException {
        CholeskyDecomposition cd = new CholeskyDecompositionImpl(MatrixUtils.createRealMatrix(new double[][] {
                { 14, 11, 13, 15, 24 },
                { 11, 34, 13, 8,  25 },
                { 13, 13, 14, 15, 21 },
                { 15, 8,  15, 18, 23 },
                { 24, 25, 21, 23, 45 }
        }));
        System.out.println(cd.getL().multiply(cd.getLT()));
    }",junit.framework.AssertionFailedError: Expected exception: org.apache.commons.math.linear.NotPositiveDefiniteMatrixException
Math_87,/222043010/omniapr/defects4j/Math_87_buggy/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,testSingleVariableAndConstraint,"    public void testSingleVariableAndConstraint() throws OptimizationException {
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3 }, 0);
        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
        constraints.add(new LinearConstraint(new double[] { 1 }, Relationship.LEQ, 10));

        SimplexSolver solver = new SimplexSolver();
        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);
        assertEquals(10.0, solution.getPoint()[0], 0.0);
        assertEquals(30.0, solution.getValue(), 0.0);
    }",junit.framework.AssertionFailedError: expected:<10.0> but was:<0.0>
Math_88,/222043010/omniapr/defects4j/Math_88_buggy/src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java,testMath272,"    public void testMath272() throws OptimizationException {
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 2, 1 }, 0);
        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
        constraints.add(new LinearConstraint(new double[] { 1, 1, 0 }, Relationship.GEQ,  1));
        constraints.add(new LinearConstraint(new double[] { 1, 0, 1 }, Relationship.GEQ,  1));
        constraints.add(new LinearConstraint(new double[] { 0, 1, 0 }, Relationship.GEQ,  1));

        SimplexSolver solver = new SimplexSolver();
        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);
        
        assertEquals(0.0, solution.getPoint()[0], .0000001);
        assertEquals(1.0, solution.getPoint()[1], .0000001);
        assertEquals(1.0, solution.getPoint()[2], .0000001);
        assertEquals(3.0, solution.getValue(), .0000001);
      }",junit.framework.AssertionFailedError: expected:<1.0> but was:<0.0>
Math_89,/222043010/omniapr/defects4j/Math_89_buggy/src/test/org/apache/commons/math/stat/FrequencyTest.java,testAddNonComparable,"    public void testAddNonComparable(){
        try {
            f.addValue(new Object()); // This was previously OK
            fail(""Expected IllegalArgumentException"");
        } catch (IllegalArgumentException expected) {
        }
        f.clear();
        f.addValue(1);
        try {
            f.addValue(new Object());
            fail(""Expected IllegalArgumentException"");
        } catch (IllegalArgumentException expected) {
        }
    }",java.lang.ClassCastException: java.lang.Object cannot be cast to java.lang.Comparable
Math_90,/222043010/omniapr/defects4j/Math_90_buggy/src/test/org/apache/commons/math/stat/FrequencyTest.java,testAddNonComparable,"    public void testAddNonComparable(){
        try {
            f.addValue(new Object()); // This was OK
            fail(""Expected ClassCastException"");
        } catch (ClassCastException expected) {
        }
        f.clear();
        f.addValue(1);
        try {
            f.addValue(new Object());
            fail(""Expected ClassCastException""); // Previously would have been IllegalArgument
        } catch (ClassCastException expected) {
        }
    }",java.lang.IllegalArgumentException: Value not comparable to existing values.
Math_91,/222043010/omniapr/defects4j/Math_91_buggy/src/test/org/apache/commons/math/fraction/FractionTest.java,testCompareTo,"    public void testCompareTo() {
        Fraction first = new Fraction(1, 2);
        Fraction second = new Fraction(1, 3);
        Fraction third = new Fraction(1, 2);
        
        assertEquals(0, first.compareTo(first));
        assertEquals(0, first.compareTo(third));
        assertEquals(1, first.compareTo(second));
        assertEquals(-1, second.compareTo(first));

        // these two values are different approximations of PI
        // the first  one is approximately PI - 3.07e-18
        // the second one is approximately PI + 1.936e-17
        Fraction pi1 = new Fraction(1068966896, 340262731);
        Fraction pi2 = new Fraction( 411557987, 131002976);
        assertEquals(-1, pi1.compareTo(pi2));
        assertEquals( 1, pi2.compareTo(pi1));
        assertEquals(0.0, pi1.doubleValue() - pi2.doubleValue(), 1.0e-20);
    }",junit.framework.AssertionFailedError: expected:<-1> but was:<0>
Math_92,/222043010/omniapr/defects4j/Math_92_buggy/src/test/org/apache/commons/math/util/MathUtilsTest.java,testBinomialCoefficientLarge,"    public void testBinomialCoefficientLarge() throws Exception {
        // This tests all legal and illegal values for n <= 200.
        for (int n = 0; n <= 200; n++) {
            for (int k = 0; k <= n; k++) {
                long ourResult = -1;
                long exactResult = -1;
                boolean shouldThrow = false;
                boolean didThrow = false;
                try {
                    ourResult = MathUtils.binomialCoefficient(n, k);
                } catch (ArithmeticException ex) {
                    didThrow = true;
                }
                try {
                    exactResult = binomialCoefficient(n, k);
                } catch (ArithmeticException ex) {
                    shouldThrow = true;
                }
                assertEquals(n+"",""+k, shouldThrow, didThrow);
                assertEquals(n+"",""+k, exactResult, ourResult);
                assertTrue(n+"",""+k, (n > 66 || !didThrow));
            }
        }

        long ourResult = MathUtils.binomialCoefficient(300, 3);
        long exactResult = binomialCoefficient(300, 3);
        assertEquals(exactResult, ourResult);

        ourResult = MathUtils.binomialCoefficient(700, 697);
        exactResult = binomialCoefficient(700, 697);
        assertEquals(exactResult, ourResult);

        // This one should throw
        try {
            MathUtils.binomialCoefficient(700, 300);
            fail(""Expecting ArithmeticException"");
        } catch (ArithmeticException ex) {
            // Expected
        }

        // Larger values cannot be computed directly by our
        // test implementation because of stack limitations,
        // so we make little jumps to fill the cache.
        for (int i = 2000; i <= 10000; i += 2000) {
            ourResult = MathUtils.binomialCoefficient(i, 3);
            exactResult = binomialCoefficient(i, 3);
            assertEquals(exactResult, ourResult);
        }

    }","junit.framework.AssertionFailedError: 48,22 expected:<27385657281648> but was:<27385657281647>"
Math_93,/222043010/omniapr/defects4j/Math_93_buggy/src/test/org/apache/commons/math/util/MathUtilsTest.java,testFactorial,"    public void testFactorial() {
        for (int i = 1; i < 21; i++) {
            assertEquals(i + ""! "", factorial(i), MathUtils.factorial(i));
            assertEquals(i + ""! "", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);
            assertEquals(i + ""! "", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);
        }
        
        assertEquals(""0"", 1, MathUtils.factorial(0));
        assertEquals(""0"", 1.0d, MathUtils.factorialDouble(0), 1E-14);
        assertEquals(""0"", 0.0d, MathUtils.factorialLog(0), 1E-14);
    }",junit.framework.AssertionFailedError: 17!  expected:<3.55687428096E14> but was:<3.55687428096001E14>
Math_94,/222043010/omniapr/defects4j/Math_94_buggy/src/test/org/apache/commons/math/util/MathUtilsTest.java,testGcd,"    public void testGcd() {
        int a = 30;
        int b = 50;
        int c = 77;

        assertEquals(0, MathUtils.gcd(0, 0));

        assertEquals(b, MathUtils.gcd(0, b));
        assertEquals(a, MathUtils.gcd(a, 0));
        assertEquals(b, MathUtils.gcd(0, -b));
        assertEquals(a, MathUtils.gcd(-a, 0));

        assertEquals(10, MathUtils.gcd(a, b));
        assertEquals(10, MathUtils.gcd(-a, b));
        assertEquals(10, MathUtils.gcd(a, -b));
        assertEquals(10, MathUtils.gcd(-a, -b));

        assertEquals(1, MathUtils.gcd(a, c));
        assertEquals(1, MathUtils.gcd(-a, c));
        assertEquals(1, MathUtils.gcd(a, -c));
        assertEquals(1, MathUtils.gcd(-a, -c));

        assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));

    }",junit.framework.AssertionFailedError: expected:<98304> but was:<3440640>
Math_95,/222043010/omniapr/defects4j/Math_95_buggy/src/test/org/apache/commons/math/distribution/FDistributionTest.java,testSmallDegreesOfFreedom,"    public void testSmallDegreesOfFreedom() throws Exception {
        org.apache.commons.math.distribution.FDistributionImpl fd =
            new org.apache.commons.math.distribution.FDistributionImpl(
                1.0, 1.0);
        double p = fd.cumulativeProbability(0.975);
        double x = fd.inverseCumulativeProbability(p);
        assertEquals(0.975, x, 1.0e-5);

        fd.setDenominatorDegreesOfFreedom(2.0);
        p = fd.cumulativeProbability(0.975);
        x = fd.inverseCumulativeProbability(p);
        assertEquals(0.975, x, 1.0e-5);
    }",java.lang.IllegalArgumentException: Invalid endpoint parameters:  lowerBound=0.0 initial=-1.0 upperBound=1.7976931348623157E308
Math_96,/222043010/omniapr/defects4j/Math_96_buggy/src/test/org/apache/commons/math/complex/ComplexTest.java,testMath221,"    public void testMath221() {
        assertEquals(new Complex(0,-1), new Complex(0,1).multiply(new Complex(-1,0)));
    }",junit.framework.AssertionFailedError: expected:<org.apache.commons.math.complex.Complex@98b00000> but was:<org.apache.commons.math.complex.Complex@18b00000>
Math_97,/222043010/omniapr/defects4j/Math_97_buggy/src/test/org/apache/commons/math/analysis/BrentSolverTest.java,testRootEndpoints,"    public void testRootEndpoints() throws Exception {
        UnivariateRealFunction f = new SinFunction();
        UnivariateRealSolver solver = new BrentSolver(f);
        
        // endpoint is root
        double result = solver.solve(Math.PI, 4);
        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());

        result = solver.solve(3, Math.PI);
        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());
    }","java.lang.IllegalArgumentException: Function values at endpoints do not have different signs.  Endpoints: [3.0,3.141592653589793]  Values: [0.1411200080598672,1.2246467991473532E-16]"
Math_98,/222043010/omniapr/defects4j/Math_98_buggy/src/test/org/apache/commons/math/linear/BigMatrixImplTest.java,testMath209,"    public void testMath209() {
        BigMatrix a = new BigMatrixImpl(new BigDecimal[][] {
                { new BigDecimal(1), new BigDecimal(2) },
                { new BigDecimal(3), new BigDecimal(4) },
                { new BigDecimal(5), new BigDecimal(6) }
        }, false);
        BigDecimal[] b = a.operate(new BigDecimal[] { new BigDecimal(1), new BigDecimal(1) });
        assertEquals(a.getRowDimension(), b.length);
        assertEquals( 3.0, b[0].doubleValue(), 1.0e-12);
        assertEquals( 7.0, b[1].doubleValue(), 1.0e-12);
        assertEquals(11.0, b[2].doubleValue(), 1.0e-12);
    }",java.lang.ArrayIndexOutOfBoundsException: 2
Math_98,/222043010/omniapr/defects4j/Math_98_buggy/src/test/org/apache/commons/math/linear/RealMatrixImplTest.java,testMath209,"    public void testMath209() {
        RealMatrix a = new RealMatrixImpl(new double[][] {
                { 1, 2 }, { 3, 4 }, { 5, 6 }
        }, false);
        double[] b = a.operate(new double[] { 1, 1 });
        assertEquals(a.getRowDimension(), b.length);
        assertEquals( 3.0, b[0], 1.0e-12);
        assertEquals( 7.0, b[1], 1.0e-12);
        assertEquals(11.0, b[2], 1.0e-12);
    }",java.lang.ArrayIndexOutOfBoundsException: 2
Math_99,/222043010/omniapr/defects4j/Math_99_buggy/src/test/org/apache/commons/math/util/MathUtilsTest.java,testGcd,"    public void testGcd() {
        int a = 30;
        int b = 50;
        int c = 77;

        assertEquals(0, MathUtils.gcd(0, 0));

        assertEquals(b, MathUtils.gcd(0, b));
        assertEquals(a, MathUtils.gcd(a, 0));
        assertEquals(b, MathUtils.gcd(0, -b));
        assertEquals(a, MathUtils.gcd(-a, 0));

        assertEquals(10, MathUtils.gcd(a, b));
        assertEquals(10, MathUtils.gcd(-a, b));
        assertEquals(10, MathUtils.gcd(a, -b));
        assertEquals(10, MathUtils.gcd(-a, -b));

        assertEquals(1, MathUtils.gcd(a, c));
        assertEquals(1, MathUtils.gcd(-a, c));
        assertEquals(1, MathUtils.gcd(a, -c));
        assertEquals(1, MathUtils.gcd(-a, -c));

        assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));

        assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));
        assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));
        assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));
        try {
            // gcd(Integer.MIN_VALUE, 0) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, 0);
            fail(""expecting ArithmeticException"");
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(0, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(0, Integer.MIN_VALUE);
            fail(""expecting ArithmeticException"");
        } catch (ArithmeticException expected) {
            // expected
        }
        try {
            // gcd(Integer.MIN_VALUE, Integer.MIN_VALUE) > Integer.MAX_VALUE
            MathUtils.gcd(Integer.MIN_VALUE, Integer.MIN_VALUE);
            fail(""expecting ArithmeticException"");
        } catch (ArithmeticException expected) {
            // expected
        }
    }",junit.framework.AssertionFailedError: expecting ArithmeticException
Math_99,/222043010/omniapr/defects4j/Math_99_buggy/src/test/org/apache/commons/math/util/MathUtilsTest.java,testLcm,"    public void testLcm() {
        int a = 30;
        int b = 50;
        int c = 77;

        assertEquals(0, MathUtils.lcm(0, b));
        assertEquals(0, MathUtils.lcm(a, 0));
        assertEquals(b, MathUtils.lcm(1, b));
        assertEquals(a, MathUtils.lcm(a, 1));
        assertEquals(150, MathUtils.lcm(a, b));
        assertEquals(150, MathUtils.lcm(-a, b));
        assertEquals(150, MathUtils.lcm(a, -b));
        assertEquals(150, MathUtils.lcm(-a, -b));
        assertEquals(2310, MathUtils.lcm(a, c));

        // Assert that no intermediate value overflows:
        // The naive implementation of lcm(a,b) would be (a*b)/gcd(a,b)
        assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));

        // Special case
        assertEquals(0, MathUtils.lcm(0, 0));

        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1);
            fail(""Expecting ArithmeticException"");
        } catch (ArithmeticException ex) {
            // expected
        }
        
        try {
            // lcm == abs(MIN_VALUE) cannot be represented as a nonnegative int
            MathUtils.lcm(Integer.MIN_VALUE, 1<<20);
            fail(""Expecting ArithmeticException"");
        } catch (ArithmeticException ex) {
            // expected
        }

        try {
            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);
            fail(""Expecting ArithmeticException"");
        } catch (ArithmeticException ex) {
            // expected
        }
    }",junit.framework.AssertionFailedError: expecting ArithmeticException
Math_100,/222043010/omniapr/defects4j/Math_100_buggy/src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java,testBoundParameters,"  public void testBoundParameters() throws EstimationException {
      EstimatedParameter[] p = {
        new EstimatedParameter(""unbound0"", 2, false),
        new EstimatedParameter(""unbound1"", 2, false),
        new EstimatedParameter(""bound"",    2, true)
      };
      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },
                              new EstimatedParameter[] { p[0], p[1], p[2] },
                              3.0),
        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },
                              new EstimatedParameter[] { p[0], p[1], p[2] },
                              1.0),
        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },
                              new EstimatedParameter[] { p[0], p[1], p[2] },
                              7.0)
      });

      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);
      estimator.estimate(problem);
      assertTrue(estimator.getRMS(problem) < 1.0e-10);
      double[][] covariances = estimator.getCovariances(problem);
      int i0 = 0, i1 = 1;
      if (problem.getUnboundParameters()[0].getName().endsWith(""1"")) {
          i0 = 1;
          i1 = 0;
      }
      assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);
      assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);
      assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);
      assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);

      double[] errors = estimator.guessParametersErrors(problem);
      assertEquals(0, errors[i0], 1.0e-10);
      assertEquals(0, errors[i1], 1.0e-10);

  }",java.lang.ArrayIndexOutOfBoundsException: 6
Math_102,/222043010/omniapr/defects4j/Math_102_buggy/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,testChiSquareLargeTestStatistic,"    public void testChiSquareLargeTestStatistic() throws Exception {
        double[] exp = new double[] {
            3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, 
            232921.0, 437665.75
        };

        long[] obs = new long[] {
            2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899
        };
        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =
            new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); 
        double cst = csti.chiSquareTest(exp, obs); 
        assertEquals(""chi-square p-value"", 0.0, cst, 1E-3);
        assertEquals( ""chi-square test statistic"", 
                114875.90421929007, testStatistic.chiSquare(exp, obs), 1E-9);
    }",	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
Math_102,/222043010/omniapr/defects4j/Math_102_buggy/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java,testChiSquare,"    public void testChiSquare() throws Exception {
 
        // Target values computed using R version 1.8.1 
        // Some assembly required ;-)  
        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and
        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value
        
        long[] observed = {10, 9, 11};
        double[] expected = {10, 10, 10};
        assertEquals(""chi-square statistic"", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);
        assertEquals(""chi-square p-value"", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);
        
        long[] observed1 = { 500, 623, 72, 70, 31 };
        double[] expected1 = { 485, 541, 82, 61, 37 };
        assertEquals( ""chi-square test statistic"", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);
        assertEquals(""chi-square p-value"", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);
        assertTrue(""chi-square test reject"", testStatistic.chiSquareTest(expected1, observed1, 0.08));
        assertTrue(""chi-square test accept"", !testStatistic.chiSquareTest(expected1, observed1, 0.05));

        try {
            testStatistic.chiSquareTest(expected1, observed1, 95);
            fail(""alpha out of range, IllegalArgumentException expected"");
        } catch (IllegalArgumentException ex) {
            // expected
        }  
        
        long[] tooShortObs = { 0 };
        double[] tooShortEx = { 1 };
        try {
            testStatistic.chiSquare(tooShortEx, tooShortObs);
            fail(""arguments too short, IllegalArgumentException expected"");
        } catch (IllegalArgumentException ex) {
            // expected
        }

        // unmatched arrays
        long[] unMatchedObs = { 0, 1, 2, 3 };
        double[] unMatchedEx = { 1, 1, 2 };
        try {
            testStatistic.chiSquare(unMatchedEx, unMatchedObs);
            fail(""arrays have different lengths, IllegalArgumentException expected"");
        } catch (IllegalArgumentException ex) {
            // expected
        }
        
        // 0 expected count
        expected[0] = 0;
        try {
            testStatistic.chiSquareTest(expected, observed, .01);
            fail(""bad expected count, IllegalArgumentException expected"");
        } catch (IllegalArgumentException ex) {
            // expected
        } 
        
        // negative observed count
        expected[0] = 1;
        observed[0] = -1;
        try {
            testStatistic.chiSquareTest(expected, observed, .01);
            fail(""bad expected count, IllegalArgumentException expected"");
        } catch (IllegalArgumentException ex) {
            // expected
        } 
        
    }",	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
Math_102,/222043010/omniapr/defects4j/Math_102_buggy/src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,testChiSquareLargeTestStatistic,"    public void testChiSquareLargeTestStatistic() throws Exception {
        double[] exp = new double[] {
                3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, 
                232921.0, 437665.75
        };

        long[] obs = new long[] {
                2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899
        };
        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =
            new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); 
        double cst = csti.chiSquareTest(exp, obs); 
        assertEquals(""chi-square p-value"", 0.0, cst, 1E-3);
        assertEquals( ""chi-square test statistic"", 
                114875.90421929007, TestUtils.chiSquare(exp, obs), 1E-9);
    }",junit.framework.AssertionFailedError: chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>
Math_102,/222043010/omniapr/defects4j/Math_102_buggy/src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java,testChiSquare,"    public void testChiSquare() throws Exception {
        
        // Target values computed using R version 1.8.1 
        // Some assembly required ;-)  
        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and
        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value
        
        long[] observed = {10, 9, 11};
        double[] expected = {10, 10, 10};
        assertEquals(""chi-square statistic"", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);
        assertEquals(""chi-square p-value"", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);
        
        long[] observed1 = { 500, 623, 72, 70, 31 };
        double[] expected1 = { 485, 541, 82, 61, 37 };
        assertEquals( ""chi-square test statistic"", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);
        assertEquals(""chi-square p-value"", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);
        assertTrue(""chi-square test reject"", TestUtils.chiSquareTest(expected1, observed1, 0.07));
        assertTrue(""chi-square test accept"", !TestUtils.chiSquareTest(expected1, observed1, 0.05));

        try {
            TestUtils.chiSquareTest(expected1, observed1, 95);
            fail(""alpha out of range, IllegalArgumentException expected"");
        } catch (IllegalArgumentException ex) {
            // expected
        }  
        
        long[] tooShortObs = { 0 };
        double[] tooShortEx = { 1 };
        try {
            TestUtils.chiSquare(tooShortEx, tooShortObs);
            fail(""arguments too short, IllegalArgumentException expected"");
        } catch (IllegalArgumentException ex) {
            // expected
        }

        // unmatched arrays
        long[] unMatchedObs = { 0, 1, 2, 3 };
        double[] unMatchedEx = { 1, 1, 2 };
        try {
            TestUtils.chiSquare(unMatchedEx, unMatchedObs);
            fail(""arrays have different lengths, IllegalArgumentException expected"");
        } catch (IllegalArgumentException ex) {
            // expected
        }
        
        // 0 expected count
        expected[0] = 0;
        try {
            TestUtils.chiSquareTest(expected, observed, .01);
            fail(""bad expected count, IllegalArgumentException expected"");
        } catch (IllegalArgumentException ex) {
            // expected
        } 
        
        // negative observed count
        expected[0] = 1;
        observed[0] = -1;
        try {
            TestUtils.chiSquareTest(expected, observed, .01);
            fail(""bad expected count, IllegalArgumentException expected"");
        } catch (IllegalArgumentException ex) {
            // expected
        } 
        
    }",junit.framework.AssertionFailedError: chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>
Math_103,/222043010/omniapr/defects4j/Math_103_buggy/src/test/org/apache/commons/math/distribution/NormalDistributionTest.java,testExtremeValues,"    public void testExtremeValues() throws Exception {
        NormalDistribution distribution = (NormalDistribution) getDistribution();
        distribution.setMean(0);
        distribution.setStandardDeviation(1);
        for (int i = 0; i < 100; i+=5) { // make sure no convergence exception
            double lowerTail = distribution.cumulativeProbability((double)-i);
            double upperTail = distribution.cumulativeProbability((double) i);
            if (i < 10) { // make sure not top-coded
                assertTrue(lowerTail > 0.0d);
                assertTrue(upperTail < 1.0d);
            }
            else { // make sure top coding not reversed
                assertTrue(lowerTail < 0.00001);
                assertTrue(upperTail > 0.99999);
            }
        } 
   }","org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10,000) exceeded"
Math_104,/222043010/omniapr/defects4j/Math_104_buggy/src/test/org/apache/commons/math/special/GammaTest.java,testRegularizedGammaPositivePositive,"    public void testRegularizedGammaPositivePositive() {
        testRegularizedGamma(0.632120558828558, 1.0, 1.0);
    }",junit.framework.AssertionFailedError: expected:<0.632120558828558> but was:<0.6321205587649603>
Math_105,/222043010/omniapr/defects4j/Math_105_buggy/src/test/org/apache/commons/math/stat/regression/SimpleRegressionTest.java,testSSENonNegative,"    public void testSSENonNegative() {
        double[] y = { 8915.102, 8919.302, 8923.502 };
        double[] x = { 1.107178495E2, 1.107264895E2, 1.107351295E2 };
        SimpleRegression reg = new SimpleRegression();
        for (int i = 0; i < x.length; i++) {
            reg.addData(x[i], y[i]);
        }
        assertTrue(reg.getSumSquaredErrors() >= 0.0);
    }",junit.framework.AssertionFailedError
Lang_1,/222043010/omniapr/defects4j/Lang_1_buggy/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,TestLang747,"    public void TestLang747() {
        assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(""0x8000""));
        assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(""0x80000""));
        assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(""0x800000""));
        assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(""0x8000000""));
        assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(""0x7FFFFFFF""));
        assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(""0x80000000""));
        assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(""0xFFFFFFFF""));

        // Leading zero tests
        assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(""0x08000000""));
        assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(""0x007FFFFFFF""));
        assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(""0x080000000""));
        assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(""0x00FFFFFFFF""));

        assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(""0x800000000""));
        assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(""0x8000000000""));
        assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(""0x80000000000""));
        assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(""0x800000000000""));
        assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(""0x8000000000000""));
        assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(""0x80000000000000""));
        assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(""0x800000000000000""));
        assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(""0x7FFFFFFFFFFFFFFF""));
        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long
        assertEquals(new BigInteger(""8000000000000000"", 16), NumberUtils.createNumber(""0x8000000000000000""));
        assertEquals(new BigInteger(""FFFFFFFFFFFFFFFF"", 16), NumberUtils.createNumber(""0xFFFFFFFFFFFFFFFF""));

        // Leading zero tests
        assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(""0x00080000000000000""));
        assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(""0x0800000000000000""));
        assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(""0x07FFFFFFFFFFFFFFF""));
        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long
        assertEquals(new BigInteger(""8000000000000000"", 16), NumberUtils.createNumber(""0x00008000000000000000""));
        assertEquals(new BigInteger(""FFFFFFFFFFFFFFFF"", 16), NumberUtils.createNumber(""0x0FFFFFFFFFFFFFFFF""));
    }","java.lang.NumberFormatException: For input string: ""80000000"""
Lang_3,/222043010/omniapr/defects4j/Lang_3_buggy/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,testStringCreateNumberEnsureNoPrecisionLoss,"    public void testStringCreateNumberEnsureNoPrecisionLoss(){
        String shouldBeFloat = ""1.23"";
        String shouldBeDouble = ""3.40282354e+38"";
        String shouldBeBigDecimal = ""1.797693134862315759e+308"";
        
        assertTrue(NumberUtils.createNumber(shouldBeFloat) instanceof Float);
        assertTrue(NumberUtils.createNumber(shouldBeDouble) instanceof Double);
        assertTrue(NumberUtils.createNumber(shouldBeBigDecimal) instanceof BigDecimal);
    }",junit.framework.AssertionFailedError
Lang_4,/222043010/omniapr/defects4j/Lang_4_buggy/src/test/java/org/apache/commons/lang3/text/translate/LookupTranslatorTest.java,testLang882,"    public void testLang882() throws IOException {
        final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { new StringBuffer(""one""), new StringBuffer(""two"") } });
        final StringWriter out = new StringWriter();
        final int result = lt.translate(new StringBuffer(""one""), 0, out);
        assertEquals(""Incorrect codepoint consumption"", 3, result);
        assertEquals(""Incorrect value"", ""two"", out.toString());
    }",junit.framework.AssertionFailedError: Incorrect codepoint consumption expected:<3> but was:<0>
Lang_5,/222043010/omniapr/defects4j/Lang_5_buggy/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java,testLang865,"    public void testLang865() {
        assertValidToLocale(""_GB"", """", ""GB"", """");
        assertValidToLocale(""_GB_P"", """", ""GB"", ""P"");
        assertValidToLocale(""_GB_POSIX"", """", ""GB"", ""POSIX"");
        try {
            LocaleUtils.toLocale(""_G"");
            fail(""Must be at least 3 chars if starts with underscore"");
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale(""_Gb"");
            fail(""Must be uppercase if starts with underscore"");
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale(""_gB"");
            fail(""Must be uppercase if starts with underscore"");
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale(""_1B"");
            fail(""Must be letter if starts with underscore"");
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale(""_G1"");
            fail(""Must be letter if starts with underscore"");
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale(""_GB_"");
            fail(""Must be at least 5 chars if starts with underscore"");
        } catch (final IllegalArgumentException iae) {
        }
        try {
            LocaleUtils.toLocale(""_GBAP"");
            fail(""Must have underscore after the country if starts with underscore and is at least 5 chars"");
        } catch (final IllegalArgumentException iae) {
        }
    }",java.lang.IllegalArgumentException: Invalid locale format: _GB
Lang_6,/222043010/omniapr/defects4j/Lang_6_buggy/src/test/java/org/apache/commons/lang3/StringUtilsTest.java,testEscapeSurrogatePairs,"    public void testEscapeSurrogatePairs() throws Exception {
        assertEquals(""\uD83D\uDE30"", StringEscapeUtils.escapeCsv(""\uD83D\uDE30""));
        // Examples from https://en.wikipedia.org/wiki/UTF-16
        assertEquals(""\uD800\uDC00"", StringEscapeUtils.escapeCsv(""\uD800\uDC00""));
        assertEquals(""\uD834\uDD1E"", StringEscapeUtils.escapeCsv(""\uD834\uDD1E""));
        assertEquals(""\uDBFF\uDFFD"", StringEscapeUtils.escapeCsv(""\uDBFF\uDFFD""));
        
    }",java.lang.StringIndexOutOfBoundsException: String index out of range: 2
Lang_7,/222043010/omniapr/defects4j/Lang_7_buggy/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,testCreateNumber,"    public void testCreateNumber() {
        // a lot of things can go wrong
        assertEquals(""createNumber(String) 1 failed"", Float.valueOf(""1234.5""), NumberUtils.createNumber(""1234.5""));
        assertEquals(""createNumber(String) 2 failed"", Integer.valueOf(""12345""), NumberUtils.createNumber(""12345""));
        assertEquals(""createNumber(String) 3 failed"", Double.valueOf(""1234.5""), NumberUtils.createNumber(""1234.5D""));
        assertEquals(""createNumber(String) 3 failed"", Double.valueOf(""1234.5""), NumberUtils.createNumber(""1234.5d""));
        assertEquals(""createNumber(String) 4 failed"", Float.valueOf(""1234.5""), NumberUtils.createNumber(""1234.5F""));
        assertEquals(""createNumber(String) 4 failed"", Float.valueOf(""1234.5""), NumberUtils.createNumber(""1234.5f""));
        assertEquals(""createNumber(String) 5 failed"", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""""
            + (Integer.MAX_VALUE + 1L)));
        assertEquals(""createNumber(String) 6 failed"", Long.valueOf(12345), NumberUtils.createNumber(""12345L""));
        assertEquals(""createNumber(String) 6 failed"", Long.valueOf(12345), NumberUtils.createNumber(""12345l""));
        assertEquals(""createNumber(String) 7 failed"", Float.valueOf(""-1234.5""), NumberUtils.createNumber(""-1234.5""));
        assertEquals(""createNumber(String) 8 failed"", Integer.valueOf(""-12345""), NumberUtils.createNumber(""-12345""));
        assertTrue(""createNumber(String) 9a failed"", 0xFADE == NumberUtils.createNumber(""0xFADE"").intValue());
        assertTrue(""createNumber(String) 9b failed"", 0xFADE == NumberUtils.createNumber(""0Xfade"").intValue());
        assertTrue(""createNumber(String) 10a failed"", -0xFADE == NumberUtils.createNumber(""-0xFADE"").intValue());
        assertTrue(""createNumber(String) 10b failed"", -0xFADE == NumberUtils.createNumber(""-0Xfade"").intValue());
        assertEquals(""createNumber(String) 11 failed"", Double.valueOf(""1.1E200""), NumberUtils.createNumber(""1.1E200""));
        assertEquals(""createNumber(String) 12 failed"", Float.valueOf(""1.1E20""), NumberUtils.createNumber(""1.1E20""));
        assertEquals(""createNumber(String) 13 failed"", Double.valueOf(""-1.1E200""), NumberUtils.createNumber(""-1.1E200""));
        assertEquals(""createNumber(String) 14 failed"", Double.valueOf(""1.1E-200""), NumberUtils.createNumber(""1.1E-200""));
        assertEquals(""createNumber(null) failed"", null, NumberUtils.createNumber(null));
        assertEquals(""createNumber(String) failed"", new BigInteger(""12345678901234567890""), NumberUtils
                .createNumber(""12345678901234567890L""));

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
            assertEquals(""createNumber(String) 15 failed"", new BigDecimal(""1.1E-700""), NumberUtils
                    .createNumber(""1.1E-700F""));
        }
        assertEquals(""createNumber(String) 16 failed"", Long.valueOf(""10"" + Integer.MAX_VALUE), NumberUtils
                .createNumber(""10"" + Integer.MAX_VALUE + ""L""));
        assertEquals(""createNumber(String) 17 failed"", Long.valueOf(""10"" + Integer.MAX_VALUE), NumberUtils
                .createNumber(""10"" + Integer.MAX_VALUE));
        assertEquals(""createNumber(String) 18 failed"", new BigInteger(""10"" + Long.MAX_VALUE), NumberUtils
                .createNumber(""10"" + Long.MAX_VALUE));

        // LANG-521
        assertEquals(""createNumber(String) LANG-521 failed"", Float.valueOf(""2.""), NumberUtils.createNumber(""2.""));

        // LANG-638
        assertFalse(""createNumber(String) succeeded"", checkCreateNumber(""1eE""));

        // LANG-693
        assertEquals(""createNumber(String) LANG-693 failed"", Double.valueOf(Double.MAX_VALUE), NumberUtils
                    .createNumber("""" + Double.MAX_VALUE));
        
        // LANG-822
        // ensure that the underlying negative number would create a BigDecimal
        final Number bigNum = NumberUtils.createNumber(""-1.1E-700F"");
        assertEquals(BigDecimal.class,bigNum.getClass());
        assertNotNull(bigNum);

        // Check that the code fails to create a valid number when preceeded by -- rather than -
        try {
            NumberUtils.createNumber(""--1.1E-700F"");
            fail(""Expected NumberFormatException"");
        } catch (NumberFormatException nfe) {
            // expected
        }
    }",junit.framework.AssertionFailedError: Expected NumberFormatException
Lang_8,/222043010/omniapr/defects4j/Lang_8_buggy/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java,testCalendarTimezoneRespected,"    public void testCalendarTimezoneRespected() {
        String[] availableZones = TimeZone.getAvailableIDs();
        TimeZone currentZone = TimeZone.getDefault();
        
        TimeZone anotherZone = null;
        for (String zone : availableZones) {
            if (!zone.equals(currentZone.getID())) {
                anotherZone = TimeZone.getTimeZone(zone);
            }
        }
        
        assertNotNull(""Cannot find another timezone"", anotherZone);
        
        final String pattern = ""h:mma z"";
        final Calendar cal = Calendar.getInstance(anotherZone);
        
        SimpleDateFormat sdf = new SimpleDateFormat(pattern);
        sdf.setTimeZone(anotherZone);
        String expectedValue = sdf.format(cal.getTime());
        String actualValue = FastDateFormat.getInstance(pattern).format(cal);
        assertEquals(expectedValue, actualValue);
    }",	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
Lang_9,/222043010/omniapr/defects4j/Lang_9_buggy/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,testLANG_832,"    public void testLANG_832() throws Exception {
        testSdfAndFdp(""'d'd"" ,""d3"", false); // OK
        testSdfAndFdp(""'d'd'"",""d3"", true); // should fail (unterminated quote)
    }",	at org.apache.commons.lang3.time.FastDateParserTest.testLANG_832(FastDateParserTest.java:348)
Lang_10,/222043010/omniapr/defects4j/Lang_10_buggy/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java,testLANG_831,"    public void testLANG_831() throws Exception {
        testSdfAndFdp(""M E"",""3  Tue"", true);
    }",	at org.apache.commons.lang3.time.FastDateParserTest.testLANG_831(FastDateParserTest.java:348)
Lang_11,/222043010/omniapr/defects4j/Lang_11_buggy/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java,testLANG807,"    public void testLANG807() {
        try {
            RandomStringUtils.random(3,5,5,false,false);
            fail(""Expected IllegalArgumentException"");
        } catch (IllegalArgumentException ex) { // distinguish from Random#nextInt message
            final String msg = ex.getMessage();
            assertTrue(""Message ("" + msg + "") must contain 'start'"", msg.contains(""start""));
            assertTrue(""Message ("" + msg + "") must contain 'end'"", msg.contains(""end""));
        }
    }",junit.framework.AssertionFailedError: Message (bound must be positive) must contain 'start'
Lang_12,/222043010/omniapr/defects4j/Lang_12_buggy/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java,testExceptions,"    public void testExceptions() {
        final char[] DUMMY = new char[]{'a'}; // valid char array
        try {
            RandomStringUtils.random(-1);
            fail();
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, true, true);
            fail();
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, DUMMY);
            fail();
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE
            fail();
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, """");
            fail();
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, (String)null);
            fail();
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false);
            fail();
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY);
            fail();
        } catch (IllegalArgumentException ex) {}
        try {
            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random());
            fail();
        } catch (IllegalArgumentException ex) {}
    }",java.lang.ArrayIndexOutOfBoundsException: 292402521
Lang_12,/222043010/omniapr/defects4j/Lang_12_buggy/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java,testLANG805,"    public void testLANG805() {
        long seed = System.currentTimeMillis();
        assertEquals(""aaa"", RandomStringUtils.random(3,0,0,false,false,new char[]{'a'},new Random(seed)));
    }",java.lang.ArrayIndexOutOfBoundsException: 292402521
Lang_13,/222043010/omniapr/defects4j/Lang_13_buggy/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java,testPrimitiveTypeClassSerialization,"    public void testPrimitiveTypeClassSerialization() {
        Class<?>[] primitiveTypes = { byte.class, short.class, int.class, long.class, float.class, double.class,
                boolean.class, char.class, void.class };

        for (Class<?> primitiveType : primitiveTypes) {
            Class<?> clone = SerializationUtils.clone(primitiveType);
            assertEquals(primitiveType, clone);
        }
    }",org.apache.commons.lang3.SerializationException: ClassNotFoundException while reading cloned object data
Lang_14,/222043010/omniapr/defects4j/Lang_14_buggy/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,testEquals,"    public void testEquals() {
        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;
        assertTrue(StringUtils.equals(null, null));
        assertTrue(StringUtils.equals(fooCs, fooCs));
        assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));
        assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));
        assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));
        assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));
        assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));
        assertFalse(StringUtils.equals(fooCs, barCs));
        assertFalse(StringUtils.equals(fooCs, null));
        assertFalse(StringUtils.equals(null, fooCs));
        assertFalse(StringUtils.equals(fooCs, foobarCs));
        assertFalse(StringUtils.equals(foobarCs, fooCs));
    }",junit.framework.AssertionFailedError
Lang_15,/222043010/omniapr/defects4j/Lang_15_buggy/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,testGetTypeArguments,"    public void testGetTypeArguments() {
        Map<TypeVariable<?>, Type> typeVarAssigns;
        TypeVariable<?> treeSetTypeVar;
        Type typeArg;

        typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        Assert.assertTrue(""Type var assigns for Comparable from Integer: "" + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        Assert.assertEquals(""Type argument of Comparable from Integer: "" + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));

        typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        Assert.assertTrue(""Type var assigns for Comparable from int: "" + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));
        typeArg = typeVarAssigns.get(treeSetTypeVar);
        Assert.assertEquals(""Type argument of Comparable from int: "" + typeArg, Integer.class,
                typeVarAssigns.get(treeSetTypeVar));

        Collection<Integer> col = Arrays.asList(new Integer[0]);
        typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);
        treeSetTypeVar = Comparable.class.getTypeParameters()[0];
        Assert.assertFalse(""Type var assigns for Collection from List: "" + typeVarAssigns,
                typeVarAssigns.containsKey(treeSetTypeVar));

        typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);
        Assert.assertTrue(typeVarAssigns.size() == 2);
        Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));
        Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));

        typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
        Assert.assertEquals(2, typeVarAssigns.size());
        Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));
        Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));
    }",junit.framework.AssertionFailedError: expected:<2> but was:<0>
Lang_15,/222043010/omniapr/defects4j/Lang_15_buggy/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java,testIsAssignable,"    public void testIsAssignable() throws SecurityException, NoSuchMethodException,
            NoSuchFieldException {
        List list0 = null;
        List<Object> list1 = null;
        List<?> list2 = null;
        List<? super Object> list3 = null;
        List<String> list4 = null;
        List<? extends String> list5 = null;
        List<? super String> list6 = null;
        List[] list7 = null;
        List<Object>[] list8 = null;
        List<?>[] list9 = null;
        List<? super Object>[] list10 = null;
        List<String>[] list11 = null;
        List<? extends String>[] list12 = null;
        List<? super String>[] list13;
        Class<?> clazz = getClass();
        Method method = clazz.getMethod(""dummyMethod"", List.class, List.class, List.class,
                List.class, List.class, List.class, List.class, List[].class, List[].class,
                List[].class, List[].class, List[].class, List[].class, List[].class);
        Type[] types = method.getGenericParameterTypes();
//        list0 = list0;
        delegateBooleanAssertion(types, 0, 0, true);
        list1 = list0;
        delegateBooleanAssertion(types, 0, 1, true);
        list0 = list1;
        delegateBooleanAssertion(types, 1, 0, true);
        list2 = list0;
        delegateBooleanAssertion(types, 0, 2, true);
        list0 = list2;
        delegateBooleanAssertion(types, 2, 0, true);
        list3 = list0;
        delegateBooleanAssertion(types, 0, 3, true);
        list0 = list3;
        delegateBooleanAssertion(types, 3, 0, true);
        list4 = list0;
        delegateBooleanAssertion(types, 0, 4, true);
        list0 = list4;
        delegateBooleanAssertion(types, 4, 0, true);
        list5 = list0;
        delegateBooleanAssertion(types, 0, 5, true);
        list0 = list5;
        delegateBooleanAssertion(types, 5, 0, true);
        list6 = list0;
        delegateBooleanAssertion(types, 0, 6, true);
        list0 = list6;
        delegateBooleanAssertion(types, 6, 0, true);
//        list1 = list1;
        delegateBooleanAssertion(types, 1, 1, true);
        list2 = list1;
        delegateBooleanAssertion(types, 1, 2, true);
        list1 = (List<Object>) list2;
        delegateBooleanAssertion(types, 2, 1, false);
        list3 = list1;
        delegateBooleanAssertion(types, 1, 3, true);
        list1 = (List<Object>) list3;
        delegateBooleanAssertion(types, 3, 1, false);
        // list4 = list1;
        delegateBooleanAssertion(types, 1, 4, false);
        // list1 = list4;
        delegateBooleanAssertion(types, 4, 1, false);
        // list5 = list1;
        delegateBooleanAssertion(types, 1, 5, false);
        // list1 = list5;
        delegateBooleanAssertion(types, 5, 1, false);
        list6 = list1;
        delegateBooleanAssertion(types, 1, 6, true);
        list1 = (List<Object>) list6;
        delegateBooleanAssertion(types, 6, 1, false);
//        list2 = list2;
        delegateBooleanAssertion(types, 2, 2, true);
        list2 = list3;
        delegateBooleanAssertion(types, 2, 3, false);
        list2 = list4;
        delegateBooleanAssertion(types, 3, 2, true);
        list3 = (List<? super Object>) list2;
        delegateBooleanAssertion(types, 2, 4, false);
        list2 = list5;
        delegateBooleanAssertion(types, 4, 2, true);
        list4 = (List<String>) list2;
        delegateBooleanAssertion(types, 2, 5, false);
        list2 = list6;
        delegateBooleanAssertion(types, 5, 2, true);
        list5 = (List<? extends String>) list2;
        delegateBooleanAssertion(types, 2, 6, false);
//        list3 = list3;
        delegateBooleanAssertion(types, 6, 2, true);
        list6 = (List<? super String>) list2;
        delegateBooleanAssertion(types, 3, 3, true);
        // list4 = list3;
        delegateBooleanAssertion(types, 3, 4, false);
        // list3 = list4;
        delegateBooleanAssertion(types, 4, 3, false);
        // list5 = list3;
        delegateBooleanAssertion(types, 3, 5, false);
        // list3 = list5;
        delegateBooleanAssertion(types, 5, 3, false);
        list6 = list3;
        delegateBooleanAssertion(types, 3, 6, true);
        list3 = (List<? super Object>) list6;
        delegateBooleanAssertion(types, 6, 3, false);
//        list4 = list4;
        delegateBooleanAssertion(types, 4, 4, true);
        list5 = list4;
        delegateBooleanAssertion(types, 4, 5, true);
        list4 = (List<String>) list5;
        delegateBooleanAssertion(types, 5, 4, false);
        list6 = list4;
        delegateBooleanAssertion(types, 4, 6, true);
        list4 = (List<String>) list6;
        delegateBooleanAssertion(types, 6, 4, false);
//        list5 = list5;
        delegateBooleanAssertion(types, 5, 5, true);
        list6 = (List<? super String>) list5;
        delegateBooleanAssertion(types, 5, 6, false);
        list5 = (List<? extends String>) list6;
        delegateBooleanAssertion(types, 6, 5, false);
//        list6 = list6;
        delegateBooleanAssertion(types, 6, 6, true);

//        list7 = list7;
        delegateBooleanAssertion(types, 7, 7, true);
        list8 = list7;
        delegateBooleanAssertion(types, 7, 8, true);
        list7 = list8;
        delegateBooleanAssertion(types, 8, 7, true);
        list9 = list7;
        delegateBooleanAssertion(types, 7, 9, true);
        list7 = list9;
        delegateBooleanAssertion(types, 9, 7, true);
        list10 = list7;
        delegateBooleanAssertion(types, 7, 10, true);
        list7 = list10;
        delegateBooleanAssertion(types, 10, 7, true);
        list11 = list7;
        delegateBooleanAssertion(types, 7, 11, true);
        list7 = list11;
        delegateBooleanAssertion(types, 11, 7, true);
        list12 = list7;
        delegateBooleanAssertion(types, 7, 12, true);
        list7 = list12;
        delegateBooleanAssertion(types, 12, 7, true);
        list13 = list7;
        delegateBooleanAssertion(types, 7, 13, true);
        list7 = list13;
        delegateBooleanAssertion(types, 13, 7, true);
//        list8 = list8;
        delegateBooleanAssertion(types, 8, 8, true);
        list9 = list8;
        delegateBooleanAssertion(types, 8, 9, true);
        list8 = (List<Object>[]) list9;
        delegateBooleanAssertion(types, 9, 8, false);
        list10 = list8;
        delegateBooleanAssertion(types, 8, 10, true);
        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
        delegateBooleanAssertion(types, 10, 8, false);
        // list11 = list8;
        delegateBooleanAssertion(types, 8, 11, false);
        // list8 = list11;
        delegateBooleanAssertion(types, 11, 8, false);
        // list12 = list8;
        delegateBooleanAssertion(types, 8, 12, false);
        // list8 = list12;
        delegateBooleanAssertion(types, 12, 8, false);
        list13 = list8;
        delegateBooleanAssertion(types, 8, 13, true);
        list8 = (List<Object>[]) list13;
        delegateBooleanAssertion(types, 13, 8, false);
//        list9 = list9;
        delegateBooleanAssertion(types, 9, 9, true);
        list10 = (List<? super Object>[]) list9;
        delegateBooleanAssertion(types, 9, 10, false);
        list9 = list10;
        delegateBooleanAssertion(types, 10, 9, true);
        list11 = (List<String>[]) list9;
        delegateBooleanAssertion(types, 9, 11, false);
        list9 = list11;
        delegateBooleanAssertion(types, 11, 9, true);
        list12 = (List<? extends String>[]) list9;
        delegateBooleanAssertion(types, 9, 12, false);
        list9 = list12;
        delegateBooleanAssertion(types, 12, 9, true);
        list13 = (List<? super String>[]) list9;
        delegateBooleanAssertion(types, 9, 13, false);
        list9 = list13;
        delegateBooleanAssertion(types, 13, 9, true);
//        list10 = list10;
        delegateBooleanAssertion(types, 10, 10, true);
        // list11 = list10;
        delegateBooleanAssertion(types, 10, 11, false);
        // list10 = list11;
        delegateBooleanAssertion(types, 11, 10, false);
        // list12 = list10;
        delegateBooleanAssertion(types, 10, 12, false);
        // list10 = list12;
        delegateBooleanAssertion(types, 12, 10, false);
        list13 = list10;
        delegateBooleanAssertion(types, 10, 13, true);
        list10 = (List<? super Object>[]) list13;
        delegateBooleanAssertion(types, 13, 10, false);
//        list11 = list11;
        delegateBooleanAssertion(types, 11, 11, true);
        list12 = list11;
        delegateBooleanAssertion(types, 11, 12, true);
        list11 = (List<String>[]) list12;
        delegateBooleanAssertion(types, 12, 11, false);
        list13 = list11;
        delegateBooleanAssertion(types, 11, 13, true);
        list11 = (List<String>[]) list13;
        delegateBooleanAssertion(types, 13, 11, false);
//        list12 = list12;
        delegateBooleanAssertion(types, 12, 12, true);
        list13 = (List<? super String>[]) list12;
        delegateBooleanAssertion(types, 12, 13, false);
        list12 = (List<? extends String>[]) list13;
        delegateBooleanAssertion(types, 13, 12, false);
//        list13 = list13;
        delegateBooleanAssertion(types, 13, 13, true);
        Type disType = getClass().getField(""dis"").getGenericType();
        // Reporter.log( ( ( ParameterizedType ) disType
        // ).getOwnerType().getClass().toString() );
        Type datType = getClass().getField(""dat"").getGenericType();
        Type daType = getClass().getField(""da"").getGenericType();
        Type uhderType = getClass().getField(""uhder"").getGenericType();
        Type dingType = getClass().getField(""ding"").getGenericType();
        Type testerType = getClass().getField(""tester"").getGenericType();
        Type tester2Type = getClass().getField(""tester2"").getGenericType();
        Type dat2Type = getClass().getField(""dat2"").getGenericType();
        Type dat3Type = getClass().getField(""dat3"").getGenericType();
        dis = dat;
        Assert.assertTrue(TypeUtils.isAssignable(datType, disType));
        // dis = da;
        Assert.assertFalse(TypeUtils.isAssignable(daType, disType));
        dis = uhder;
        Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));
        dis = ding;
        Assert.assertFalse(String.format(""type %s not assignable to %s!"", dingType, disType),
                TypeUtils.isAssignable(dingType, disType));
        dis = tester;
        Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));
        // dis = tester2;
        Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));
        // dat = dat2;
        Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));
        // dat2 = dat;
        Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));
        // dat = dat3;
        Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));
        char ch = 0;
        boolean bo = false;
        byte by = 0;
        short sh = 0;
        int in = 0;
        long lo = 0;
        float fl = 0;
        double du = 0;
        du = ch;
        Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));
        du = by;
        Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));
        du = sh;
        Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));
        du = in;
        Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));
        du = lo;
        Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));
        du = fl;
        Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));
        lo = in;
        Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));
        lo = Integer.valueOf(0);
        Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));
        // Long lngW = 1;
        Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));
        // lngW = Integer.valueOf( 0 );
        Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));
        in = Integer.valueOf(0);
        Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));
        Integer inte = in;
        Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));
        Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));
        Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));
        Type intComparableType = getClass().getField(""intComparable"").getGenericType();
        intComparable = 1;
        Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));
        Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));
        Serializable ser = 1;
        Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));
        Type longComparableType = getClass().getField(""longComparable"").getGenericType();
        // longComparable = 1;
        Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));
        // longComparable = Integer.valueOf( 0 );
        Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));
        // int[] ia;
        // long[] la = ia;
        Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));
        Integer[] ia = null;
        Type caType = getClass().getField(""intWildcardComparable"").getGenericType();
        intWildcardComparable = ia;
        Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));
        // int[] ina = ia;
        Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));
        int[] ina = null;
        Object[] oa;
        // oa = ina;
        Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));
        oa = new Integer[0];
        Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));
        Type bClassType = AClass.class.getField(""bClass"").getGenericType();
        Type cClassType = AClass.class.getField(""cClass"").getGenericType();
        Type dClassType = AClass.class.getField(""dClass"").getGenericType();
        Type eClassType = AClass.class.getField(""eClass"").getGenericType();
        Type fClassType = AClass.class.getField(""fClass"").getGenericType();
        AClass aClass = new AClass(new AAClass<String>());
        aClass.bClass = aClass.cClass;
        Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));
        aClass.bClass = aClass.dClass;
        Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));
        aClass.bClass = aClass.eClass;
        Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));
        aClass.bClass = aClass.fClass;
        Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));
        aClass.cClass = aClass.dClass;
        Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));
        aClass.cClass = aClass.eClass;
        Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));
        aClass.cClass = aClass.fClass;
        Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));
        aClass.dClass = aClass.eClass;
        Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));
        aClass.dClass = aClass.fClass;
        Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));
        aClass.eClass = aClass.fClass;
        Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));
    }",junit.framework.AssertionFailedError: expected:<2> but was:<0>
Lang_16,/222043010/omniapr/defects4j/Lang_16_buggy/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,testCreateNumber,"    public void testCreateNumber() {
        // a lot of things can go wrong
        assertEquals(""createNumber(String) 1 failed"", Float.valueOf(""1234.5""), NumberUtils.createNumber(""1234.5""));
        assertEquals(""createNumber(String) 2 failed"", Integer.valueOf(""12345""), NumberUtils.createNumber(""12345""));
        assertEquals(""createNumber(String) 3 failed"", Double.valueOf(""1234.5""), NumberUtils.createNumber(""1234.5D""));
        assertEquals(""createNumber(String) 3 failed"", Double.valueOf(""1234.5""), NumberUtils.createNumber(""1234.5d""));
        assertEquals(""createNumber(String) 4 failed"", Float.valueOf(""1234.5""), NumberUtils.createNumber(""1234.5F""));
        assertEquals(""createNumber(String) 4 failed"", Float.valueOf(""1234.5""), NumberUtils.createNumber(""1234.5f""));
        assertEquals(""createNumber(String) 5 failed"", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""""
            + (Integer.MAX_VALUE + 1L)));
        assertEquals(""createNumber(String) 6 failed"", Long.valueOf(12345), NumberUtils.createNumber(""12345L""));
        assertEquals(""createNumber(String) 6 failed"", Long.valueOf(12345), NumberUtils.createNumber(""12345l""));
        assertEquals(""createNumber(String) 7 failed"", Float.valueOf(""-1234.5""), NumberUtils.createNumber(""-1234.5""));
        assertEquals(""createNumber(String) 8 failed"", Integer.valueOf(""-12345""), NumberUtils.createNumber(""-12345""));
        assertTrue(""createNumber(String) 9a failed"", 0xFADE == NumberUtils.createNumber(""0xFADE"").intValue());
        assertTrue(""createNumber(String) 9b failed"", 0xFADE == NumberUtils.createNumber(""0Xfade"").intValue());
        assertTrue(""createNumber(String) 10a failed"", -0xFADE == NumberUtils.createNumber(""-0xFADE"").intValue());
        assertTrue(""createNumber(String) 10b failed"", -0xFADE == NumberUtils.createNumber(""-0Xfade"").intValue());
        assertEquals(""createNumber(String) 11 failed"", Double.valueOf(""1.1E200""), NumberUtils.createNumber(""1.1E200""));
        assertEquals(""createNumber(String) 12 failed"", Float.valueOf(""1.1E20""), NumberUtils.createNumber(""1.1E20""));
        assertEquals(""createNumber(String) 13 failed"", Double.valueOf(""-1.1E200""), NumberUtils.createNumber(""-1.1E200""));
        assertEquals(""createNumber(String) 14 failed"", Double.valueOf(""1.1E-200""), NumberUtils.createNumber(""1.1E-200""));
        assertEquals(""createNumber(null) failed"", null, NumberUtils.createNumber(null));
        assertEquals(""createNumber(String) failed"", new BigInteger(""12345678901234567890""), NumberUtils
                .createNumber(""12345678901234567890L""));

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {
            assertEquals(""createNumber(String) 15 failed"", new BigDecimal(""1.1E-700""), NumberUtils
                    .createNumber(""1.1E-700F""));
        }
        assertEquals(""createNumber(String) 16 failed"", Long.valueOf(""10"" + Integer.MAX_VALUE), NumberUtils
                .createNumber(""10"" + Integer.MAX_VALUE + ""L""));
        assertEquals(""createNumber(String) 17 failed"", Long.valueOf(""10"" + Integer.MAX_VALUE), NumberUtils
                .createNumber(""10"" + Integer.MAX_VALUE));
        assertEquals(""createNumber(String) 18 failed"", new BigInteger(""10"" + Long.MAX_VALUE), NumberUtils
                .createNumber(""10"" + Long.MAX_VALUE));

        // LANG-521
        assertEquals(""createNumber(String) LANG-521 failed"", Float.valueOf(""2.""), NumberUtils.createNumber(""2.""));

        // LANG-638
        assertFalse(""createNumber(String) succeeded"", checkCreateNumber(""1eE""));

        // LANG-693
        assertEquals(""createNumber(String) LANG-693 failed"", Double.valueOf(Double.MAX_VALUE), NumberUtils
                    .createNumber("""" + Double.MAX_VALUE));
    }",java.lang.NumberFormatException: 0Xfade is not a valid number.
Lang_17,/222043010/omniapr/defects4j/Lang_17_buggy/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java,testLang720,"    public void testLang720() {
        String input = new StringBuilder(""\ud842\udfb7"").append(""A"").toString();
        String escaped = StringEscapeUtils.escapeXml(input);
        assertEquals(input, escaped);
    }",junit.framework.ComparisonFailure: expected:<𠮷[A]> but was:<𠮷[?]>
Lang_18,/222043010/omniapr/defects4j/Lang_18_buggy/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,testFormat,"    public void testFormat() {
        Locale realDefaultLocale = Locale.getDefault();
        TimeZone realDefaultZone = TimeZone.getDefault();
        try {
            Locale.setDefault(Locale.US);
            TimeZone.setDefault(TimeZone.getTimeZone(""America/New_York""));

            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
            Date date1 = cal1.getTime();
            Date date2 = cal2.getTime();
            long millis1 = date1.getTime();
            long millis2 = date2.getTime();

            FastDateFormat fdf = FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ss"");
            SimpleDateFormat sdf = new SimpleDateFormat(""yyyy-MM-dd'T'HH:mm:ss"");
            assertEquals(sdf.format(date1), fdf.format(date1));
            assertEquals(""2003-01-10T15:33:20"", fdf.format(date1));
            assertEquals(""2003-01-10T15:33:20"", fdf.format(cal1));
            assertEquals(""2003-01-10T15:33:20"", fdf.format(millis1));
            assertEquals(""2003-07-10T09:00:00"", fdf.format(date2));
            assertEquals(""2003-07-10T09:00:00"", fdf.format(cal2));
            assertEquals(""2003-07-10T09:00:00"", fdf.format(millis2));

            fdf = FastDateFormat.getInstance(""Z"");
            assertEquals(""-0500"", fdf.format(date1));
            assertEquals(""-0500"", fdf.format(cal1));
            assertEquals(""-0500"", fdf.format(millis1));

            assertEquals(""-0400"", fdf.format(date2));
            assertEquals(""-0400"", fdf.format(cal2));
            assertEquals(""-0400"", fdf.format(millis2));

            fdf = FastDateFormat.getInstance(""ZZ"");
            assertEquals(""-05:00"", fdf.format(date1));
            assertEquals(""-05:00"", fdf.format(cal1));
            assertEquals(""-05:00"", fdf.format(millis1));

            assertEquals(""-04:00"", fdf.format(date2));
            assertEquals(""-04:00"", fdf.format(cal2));
            assertEquals(""-04:00"", fdf.format(millis2));

            String pattern = ""GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M"" +
                "" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"";
            fdf = FastDateFormat.getInstance(pattern);
            sdf = new SimpleDateFormat(pattern);
            // SDF bug fix starting with Java 7
            assertEquals(sdf.format(date1).replaceAll(""2003 03 03 03"", ""2003 2003 03 2003""), fdf.format(date1));
            assertEquals(sdf.format(date2).replaceAll(""2003 03 03 03"", ""2003 2003 03 2003""), fdf.format(date2));
        } finally {
            Locale.setDefault(realDefaultLocale);
            TimeZone.setDefault(realDefaultZone);
        }
    }",junit.framework.ComparisonFailure: expected:<AD AD AD AD 2003 [2003 03 20]03 January Jan 01 1 ...> but was:<AD AD AD AD 2003 [03 03 ]03 January Jan 01 1 ...>
Lang_19,/222043010/omniapr/defects4j/Lang_19_buggy/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,testUnfinishedEntity,"    public void testUnfinishedEntity() {
        NumericEntityUnescaper neu = new NumericEntityUnescaper();
        String input = ""Test &#x30 not test"";
        String expected = ""Test \u0030 not test"";

        String result = neu.translate(input);
        assertEquals(""Failed to support unfinished entities (i.e. missing semi-colon"", expected, result);
    }",java.lang.StringIndexOutOfBoundsException: String index out of range: 19
Lang_19,/222043010/omniapr/defects4j/Lang_19_buggy/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,testOutOfBounds,"    public void testOutOfBounds() {
        NumericEntityUnescaper neu = new NumericEntityUnescaper();

        assertEquals(""Failed to ignore when last character is &"", ""Test &"", neu.translate(""Test &""));
        assertEquals(""Failed to ignore when last character is &"", ""Test &#"", neu.translate(""Test &#""));
        assertEquals(""Failed to ignore when last character is &"", ""Test &#x"", neu.translate(""Test &#x""));
        assertEquals(""Failed to ignore when last character is &"", ""Test &#X"", neu.translate(""Test &#X""));
    }",java.lang.StringIndexOutOfBoundsException: String index out of range: 19
Lang_20,/222043010/omniapr/defects4j/Lang_20_buggy/src/test/java/org/apache/commons/lang3/StringUtilsTest.java,testJoin_ArrayChar,"    public void testJoin_ArrayChar() {
        assertEquals(null, StringUtils.join((Object[]) null, ','));
        assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));
        assertEquals("""", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));
        assertEquals("";;foo"", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));
        assertEquals(""foo;2"", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));

        assertEquals(""/"", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));
        assertEquals(""foo"", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));
        assertEquals(""null"", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));
        assertEquals(""foo/2"", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));
        assertEquals(""2"", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));
        assertEquals("""", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));
    }",java.lang.NullPointerException
Lang_20,/222043010/omniapr/defects4j/Lang_20_buggy/src/test/java/org/apache/commons/lang3/StringUtilsTest.java,testJoin_Objectarray,"    public void testJoin_Objectarray() {
//        assertEquals(null, StringUtils.join(null)); // generates warning
        assertEquals(null, StringUtils.join((Object[]) null)); // equivalent explicit cast
        // test additional varargs calls
        assertEquals("""", StringUtils.join()); // empty array
        assertEquals("""", StringUtils.join((Object) null)); // => new Object[]{null}

        assertEquals("""", StringUtils.join(EMPTY_ARRAY_LIST));
        assertEquals("""", StringUtils.join(NULL_ARRAY_LIST));
        assertEquals(""null"", StringUtils.join(NULL_TO_STRING_LIST));
        assertEquals(""abc"", StringUtils.join(new String[] {""a"", ""b"", ""c""}));
        assertEquals(""a"", StringUtils.join(new String[] {null, ""a"", """"}));
        assertEquals(""foo"", StringUtils.join(MIXED_ARRAY_LIST));
        assertEquals(""foo2"", StringUtils.join(MIXED_TYPE_LIST));
    }",java.lang.NullPointerException
Lang_21,/222043010/omniapr/defects4j/Lang_21_buggy/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java,testIsSameLocalTime_Cal,"    public void testIsSameLocalTime_Cal() {
        GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone(""GMT+1""));
        GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone(""GMT-1""));
        cal1.set(2004, 6, 9, 13, 45, 0);
        cal1.set(Calendar.MILLISECOND, 0);
        cal2.set(2004, 6, 9, 13, 45, 0);
        cal2.set(Calendar.MILLISECOND, 0);
        assertEquals(true, DateUtils.isSameLocalTime(cal1, cal2));

        Calendar cal3 = Calendar.getInstance();
        Calendar cal4 = Calendar.getInstance();
        cal3.set(2004, 6, 9, 4,  0, 0);
        cal4.set(2004, 6, 9, 16, 0, 0);
        cal3.set(Calendar.MILLISECOND, 0);
        cal4.set(Calendar.MILLISECOND, 0);
        assertFalse(""LANG-677"", DateUtils.isSameLocalTime(cal3, cal4));
        
        cal2.set(2004, 6, 9, 11, 45, 0);
        assertEquals(false, DateUtils.isSameLocalTime(cal1, cal2));
        try {
            DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);
            fail();
        } catch (IllegalArgumentException ex) {}
    }",junit.framework.AssertionFailedError: LANG-677
Lang_22,/222043010/omniapr/defects4j/Lang_22_buggy/src/test/java/org/apache/commons/lang3/math/FractionTest.java,testReducedFactory_int_int,"    public void testReducedFactory_int_int() {
        Fraction f = null;
        
        // zero
        f = Fraction.getReducedFraction(0, 1);
        assertEquals(0, f.getNumerator());
        assertEquals(1, f.getDenominator());
        
        // normal
        f = Fraction.getReducedFraction(1, 1);
        assertEquals(1, f.getNumerator());
        assertEquals(1, f.getDenominator());
        
        f = Fraction.getReducedFraction(2, 1);
        assertEquals(2, f.getNumerator());
        assertEquals(1, f.getDenominator());
        
        // improper
        f = Fraction.getReducedFraction(22, 7);
        assertEquals(22, f.getNumerator());
        assertEquals(7, f.getDenominator());
        
        // negatives
        f = Fraction.getReducedFraction(-6, 10);
        assertEquals(-3, f.getNumerator());
        assertEquals(5, f.getDenominator());
        
        f = Fraction.getReducedFraction(6, -10);
        assertEquals(-3, f.getNumerator());
        assertEquals(5, f.getDenominator());
        
        f = Fraction.getReducedFraction(-6, -10);
        assertEquals(3, f.getNumerator());
        assertEquals(5, f.getDenominator());
        
        // zero denominator
        try {
            f = Fraction.getReducedFraction(1, 0);
            fail(""expecting ArithmeticException"");
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(2, 0);
            fail(""expecting ArithmeticException"");
        } catch (ArithmeticException ex) {}
        
        try {
            f = Fraction.getReducedFraction(-3, 0);
            fail(""expecting ArithmeticException"");
        } catch (ArithmeticException ex) {}

        // reduced        
        f = Fraction.getReducedFraction(0, 2);
        assertEquals(0, f.getNumerator());
        assertEquals(1, f.getDenominator());
        
        f = Fraction.getReducedFraction(2, 2);
        assertEquals(1, f.getNumerator());
        assertEquals(1, f.getDenominator());
        
        f = Fraction.getReducedFraction(2, 4);
        assertEquals(1, f.getNumerator());
        assertEquals(2, f.getDenominator());
        
        f = Fraction.getReducedFraction(15, 10);
        assertEquals(3, f.getNumerator());
        assertEquals(2, f.getDenominator());
        
        f = Fraction.getReducedFraction(121, 22);
        assertEquals(11, f.getNumerator());
        assertEquals(2, f.getDenominator());
        
        // Extreme values 
        // OK, can reduce before negating
        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);
        assertEquals(1, f.getNumerator());
        assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());
        
        // Can't reduce, negation will throw
        try { 
            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  
            fail(""Expecting ArithmeticException"");
        } catch (ArithmeticException ex) {}      

        // LANG-662
        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
        assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());
        assertEquals(1, f.getDenominator());
    }",junit.framework.AssertionFailedError: expected:<-1073741824> but was:<-2147483648>
Lang_22,/222043010/omniapr/defects4j/Lang_22_buggy/src/test/java/org/apache/commons/lang3/math/FractionTest.java,testReduce,"    public void testReduce() {
        Fraction f = null;
        
        f = Fraction.getFraction(50, 75);
        Fraction result = f.reduce();
        assertEquals(2, result.getNumerator());
        assertEquals(3, result.getDenominator());

        f = Fraction.getFraction(-2, -3);
        result = f.reduce();
        assertEquals(2, result.getNumerator());
        assertEquals(3, result.getDenominator());

        f = Fraction.getFraction(2, -3);
        result = f.reduce();
        assertEquals(-2, result.getNumerator());
        assertEquals(3, result.getDenominator());

        f = Fraction.getFraction(-2, 3);
        result = f.reduce();
        assertEquals(-2, result.getNumerator());
        assertEquals(3, result.getDenominator());
        assertSame(f, result);

        f = Fraction.getFraction(2, 3);
        result = f.reduce();
        assertEquals(2, result.getNumerator());
        assertEquals(3, result.getDenominator());
        assertSame(f, result);

        f = Fraction.getFraction(0, 1);
        result = f.reduce();
        assertEquals(0, result.getNumerator());
        assertEquals(1, result.getDenominator());
        assertSame(f, result);

        f = Fraction.getFraction(0, 100);
        result = f.reduce();
        assertEquals(0, result.getNumerator());
        assertEquals(1, result.getDenominator());
        assertSame(result, Fraction.ZERO);

        f = Fraction.getFraction(Integer.MIN_VALUE, 2);
        result = f.reduce();
        assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());
        assertEquals(1, result.getDenominator());
    }",junit.framework.AssertionFailedError: expected:<-1073741824> but was:<-2147483648>
Lang_23,/222043010/omniapr/defects4j/Lang_23_buggy/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java,testEqualsHashcode,"    public void testEqualsHashcode() {
        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(""testfmt"", new LowerCaseFormatFactory());
        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(""testfmt"", new UpperCaseFormatFactory());

        String pattern = ""Pattern: {0,testfmt}"";
        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);

        ExtendedMessageFormat other = null;

        // Same object
        assertTrue(""same, equals()"",   emf.equals(emf));
        assertTrue(""same, hashcode()"", emf.hashCode() == emf.hashCode());

        // Equal Object
        other = new ExtendedMessageFormat(pattern, Locale.US, registry);
        assertTrue(""equal, equals()"",   emf.equals(other));
        assertTrue(""equal, hashcode()"", emf.hashCode() == other.hashCode());

        // Different Class
        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);
        assertFalse(""class, equals()"",  emf.equals(other));
        assertTrue(""class, hashcode()"", emf.hashCode() == other.hashCode()); // same hashcode
        
        // Different pattern
        other = new ExtendedMessageFormat(""X"" + pattern, Locale.US, registry);
        assertFalse(""pattern, equals()"",   emf.equals(other));
        assertFalse(""pattern, hashcode()"", emf.hashCode() == other.hashCode());

        // Different registry
        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);
        assertFalse(""registry, equals()"",   emf.equals(other));
        assertFalse(""registry, hashcode()"", emf.hashCode() == other.hashCode());

        // Different Locale
        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);
        assertFalse(""locale, equals()"",  emf.equals(other));
        assertTrue(""locale, hashcode()"", emf.hashCode() == other.hashCode()); // same hashcode
    }","junit.framework.AssertionFailedError: registry, hashcode()"
Lang_24,/222043010/omniapr/defects4j/Lang_24_buggy/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,testIsNumber,"    public void testIsNumber() {
        String val = ""12345"";
        assertTrue(""isNumber(String) 1 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 1 failed"", checkCreateNumber(val));
        val = ""1234.5"";
        assertTrue(""isNumber(String) 2 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 2 failed"", checkCreateNumber(val));
        val = "".12345"";
        assertTrue(""isNumber(String) 3 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 3 failed"", checkCreateNumber(val));
        val = ""1234E5"";
        assertTrue(""isNumber(String) 4 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 4 failed"", checkCreateNumber(val));
        val = ""1234E+5"";
        assertTrue(""isNumber(String) 5 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 5 failed"", checkCreateNumber(val));
        val = ""1234E-5"";
        assertTrue(""isNumber(String) 6 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 6 failed"", checkCreateNumber(val));
        val = ""123.4E5"";
        assertTrue(""isNumber(String) 7 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 7 failed"", checkCreateNumber(val));
        val = ""-1234"";
        assertTrue(""isNumber(String) 8 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 8 failed"", checkCreateNumber(val));
        val = ""-1234.5"";
        assertTrue(""isNumber(String) 9 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 9 failed"", checkCreateNumber(val));
        val = ""-.12345"";
        assertTrue(""isNumber(String) 10 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 10 failed"", checkCreateNumber(val));
        val = ""-1234E5"";
        assertTrue(""isNumber(String) 11 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 11 failed"", checkCreateNumber(val));
        val = ""0"";
        assertTrue(""isNumber(String) 12 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 12 failed"", checkCreateNumber(val));
        val = ""-0"";
        assertTrue(""isNumber(String) 13 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 13 failed"", checkCreateNumber(val));
        val = ""01234"";
        assertTrue(""isNumber(String) 14 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 14 failed"", checkCreateNumber(val));
        val = ""-01234"";
        assertTrue(""isNumber(String) 15 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 15 failed"", checkCreateNumber(val));
        val = ""0xABC123"";
        assertTrue(""isNumber(String) 16 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 16 failed"", checkCreateNumber(val));
        val = ""0x0"";
        assertTrue(""isNumber(String) 17 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 17 failed"", checkCreateNumber(val));
        val = ""123.4E21D"";
        assertTrue(""isNumber(String) 19 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 19 failed"", checkCreateNumber(val));
        val = ""-221.23F"";
        assertTrue(""isNumber(String) 20 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 20 failed"", checkCreateNumber(val));
        val = ""22338L"";
        assertTrue(""isNumber(String) 21 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 21 failed"", checkCreateNumber(val));
        val = null;
        assertTrue(""isNumber(String) 1 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 1 Neg failed"", !checkCreateNumber(val));
        val = """";
        assertTrue(""isNumber(String) 2 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 2 Neg failed"", !checkCreateNumber(val));
        val = ""--2.3"";
        assertTrue(""isNumber(String) 3 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 3 Neg failed"", !checkCreateNumber(val));
        val = "".12.3"";
        assertTrue(""isNumber(String) 4 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 4 Neg failed"", !checkCreateNumber(val));
        val = ""-123E"";
        assertTrue(""isNumber(String) 5 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 5 Neg failed"", !checkCreateNumber(val));
        val = ""-123E+-212"";
        assertTrue(""isNumber(String) 6 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 6 Neg failed"", !checkCreateNumber(val));
        val = ""-123E2.12"";
        assertTrue(""isNumber(String) 7 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 7 Neg failed"", !checkCreateNumber(val));
        val = ""0xGF"";
        assertTrue(""isNumber(String) 8 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 8 Neg failed"", !checkCreateNumber(val));
        val = ""0xFAE-1"";
        assertTrue(""isNumber(String) 9 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 9 Neg failed"", !checkCreateNumber(val));
        val = ""."";
        assertTrue(""isNumber(String) 10 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 10 Neg failed"", !checkCreateNumber(val));
        val = ""-0ABC123"";
        assertTrue(""isNumber(String) 11 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 11 Neg failed"", !checkCreateNumber(val));
        val = ""123.4E-D"";
        assertTrue(""isNumber(String) 12 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 12 Neg failed"", !checkCreateNumber(val));
        val = ""123.4ED"";
        assertTrue(""isNumber(String) 13 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 13 Neg failed"", !checkCreateNumber(val));
        val = ""1234E5l"";
        assertTrue(""isNumber(String) 14 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 14 Neg failed"", !checkCreateNumber(val));
        val = ""11a"";
        assertTrue(""isNumber(String) 15 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 15 Neg failed"", !checkCreateNumber(val)); 
        val = ""1a"";
        assertTrue(""isNumber(String) 16 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 16 Neg failed"", !checkCreateNumber(val)); 
        val = ""a"";
        assertTrue(""isNumber(String) 17 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 17 Neg failed"", !checkCreateNumber(val)); 
        val = ""11g"";
        assertTrue(""isNumber(String) 18 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 18 Neg failed"", !checkCreateNumber(val)); 
        val = ""11z"";
        assertTrue(""isNumber(String) 19 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 19 Neg failed"", !checkCreateNumber(val)); 
        val = ""11def"";
        assertTrue(""isNumber(String) 20 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 20 Neg failed"", !checkCreateNumber(val)); 
        val = ""11d11"";
        assertTrue(""isNumber(String) 21 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 21 Neg failed"", !checkCreateNumber(val)); 
        val = ""11 11"";
        assertTrue(""isNumber(String) 22 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 22 Neg failed"", !checkCreateNumber(val));
        val = "" 1111"";
        assertTrue(""isNumber(String) 23 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 23 Neg failed"", !checkCreateNumber(val));
        val = ""1111 "";
        assertTrue(""isNumber(String) 24 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 24 Neg failed"", !checkCreateNumber(val));

        // LANG-521
        val = ""2."";
        assertTrue(""isNumber(String) LANG-521 failed"", NumberUtils.isNumber(val));

        // LANG-664
        val = ""1.1L"";
        assertFalse(""isNumber(String) LANG-664 failed"", NumberUtils.isNumber(val));
    }",junit.framework.AssertionFailedError: isNumber(String) LANG-664 failed
Lang_25,/222043010/omniapr/defects4j/Lang_25_buggy/src/test/java/org/apache/commons/lang3/text/translate/EntityArraysTest.java,testISO8859_1_ESCAPE,"    public void testISO8859_1_ESCAPE(){
        Set<String> col0 = new HashSet<String>();
        Set<String> col1 = new HashSet<String>();
        String [][] sa = EntityArrays.ISO8859_1_ESCAPE();
        boolean success = true;
        for(int i =0; i <sa.length; i++){
            boolean add0 = col0.add(sa[i][0]);
            boolean add1 = col1.add(sa[i][1]);
            if (!add0) { 
                success = false;
                System.out.println(""Already added entry 0: ""+i+"" ""+sa[i][0]+"" ""+sa[i][1]);
            }
            if (!add1) {
                success = false;
                System.out.println(""Already added entry 1: ""+i+"" ""+sa[i][0]+"" ""+sa[i][1]);
            }
        }
        assertTrue(""One or more errors detected"",success);
    }",junit.framework.AssertionFailedError: One or more errors detected
Lang_26,/222043010/omniapr/defects4j/Lang_26_buggy/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java,testLang645,"    public void testLang645() {
        Locale locale = new Locale(""sv"", ""SE"");

        Calendar cal = Calendar.getInstance();
        cal.set(2010, 0, 1, 12, 0, 0);
        Date d = cal.getTime();

        FastDateFormat fdf = FastDateFormat.getInstance(""EEEE', week 'ww"", locale);

        assertEquals(""fredag, week 53"", fdf.format(d));
    }","junit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>"
Lang_27,/222043010/omniapr/defects4j/Lang_27_buggy/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java,testCreateNumber,"    public void testCreateNumber() {
        // a lot of things can go wrong
        assertEquals(""createNumber(String) 1 failed"", new Float(""1234.5""), NumberUtils.createNumber(""1234.5""));
        assertEquals(""createNumber(String) 2 failed"", new Integer(""12345""), NumberUtils.createNumber(""12345""));
        assertEquals(""createNumber(String) 3 failed"", new Double(""1234.5""), NumberUtils.createNumber(""1234.5D""));
        assertEquals(""createNumber(String) 3 failed"", new Double(""1234.5""), NumberUtils.createNumber(""1234.5d""));
        assertEquals(""createNumber(String) 4 failed"", new Float(""1234.5""), NumberUtils.createNumber(""1234.5F""));
        assertEquals(""createNumber(String) 4 failed"", new Float(""1234.5""), NumberUtils.createNumber(""1234.5f""));
        assertEquals(""createNumber(String) 5 failed"", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""""
            + (Integer.MAX_VALUE + 1L)));
        assertEquals(""createNumber(String) 6 failed"", new Long(12345), NumberUtils.createNumber(""12345L""));
        assertEquals(""createNumber(String) 6 failed"", new Long(12345), NumberUtils.createNumber(""12345l""));
        assertEquals(""createNumber(String) 7 failed"", new Float(""-1234.5""), NumberUtils.createNumber(""-1234.5""));
        assertEquals(""createNumber(String) 8 failed"", new Integer(""-12345""), NumberUtils.createNumber(""-12345""));
        assertTrue(""createNumber(String) 9 failed"", 0xFADE == NumberUtils.createNumber(""0xFADE"").intValue());
        assertTrue(""createNumber(String) 10 failed"", -0xFADE == NumberUtils.createNumber(""-0xFADE"").intValue());
        assertEquals(""createNumber(String) 11 failed"", new Double(""1.1E200""), NumberUtils.createNumber(""1.1E200""));
        assertEquals(""createNumber(String) 12 failed"", new Float(""1.1E20""), NumberUtils.createNumber(""1.1E20""));
        assertEquals(""createNumber(String) 13 failed"", new Double(""-1.1E200""), NumberUtils.createNumber(""-1.1E200""));
        assertEquals(""createNumber(String) 14 failed"", new Double(""1.1E-200""), NumberUtils.createNumber(""1.1E-200""));
        assertEquals(""createNumber(null) failed"", null, NumberUtils.createNumber(null));
        assertEquals(""createNumber(String) failed"", new BigInteger(""12345678901234567890""), NumberUtils
                .createNumber(""12345678901234567890L""));

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            assertEquals(""createNumber(String) 15 failed"", new BigDecimal(""1.1E-700""), NumberUtils
                    .createNumber(""1.1E-700F""));
        }
        assertEquals(""createNumber(String) 16 failed"", new Long(""10"" + Integer.MAX_VALUE), NumberUtils
                .createNumber(""10"" + Integer.MAX_VALUE + ""L""));
        assertEquals(""createNumber(String) 17 failed"", new Long(""10"" + Integer.MAX_VALUE), NumberUtils
                .createNumber(""10"" + Integer.MAX_VALUE));
        assertEquals(""createNumber(String) 18 failed"", new BigInteger(""10"" + Long.MAX_VALUE), NumberUtils
                .createNumber(""10"" + Long.MAX_VALUE));

        // LANG-521
        assertEquals(""createNumber(String) LANG-521 failed"", new Float(""2.""), NumberUtils.createNumber(""2.""));

        // LANG-638
        assertFalse(""createNumber(String) succeeded"", checkCreateNumber(""1eE""));
    }",java.lang.StringIndexOutOfBoundsException: String index out of range: 4
Lang_28,/222043010/omniapr/defects4j/Lang_28_buggy/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java,testSupplementaryUnescaping,"    public void testSupplementaryUnescaping() {
        NumericEntityUnescaper neu = new NumericEntityUnescaper();
        String input = ""&#68642;"";
        String expected = ""\uD803\uDC22"";

        String result = neu.translate(input);
        assertEquals(""Failed to unescape numeric entities supplementary characters"", expected, result);
    }",junit.framework.ComparisonFailure: Failed to unescape numeric entities supplementary characters expected:<[𐰢]> but was:<[ఢ]>
Lang_29,/222043010/omniapr/defects4j/Lang_29_buggy/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java,testJavaVersionAsInt,"    public void testJavaVersionAsInt() {
        assertEquals(0, SystemUtils.toJavaVersionInt(null));
        assertEquals(0, SystemUtils.toJavaVersionInt(""""));
        assertEquals(0, SystemUtils.toJavaVersionInt(""0""));
        assertEquals(110, SystemUtils.toJavaVersionInt(""1.1""));
        assertEquals(120, SystemUtils.toJavaVersionInt(""1.2""));
        assertEquals(130, SystemUtils.toJavaVersionInt(""1.3.0""));
        assertEquals(131, SystemUtils.toJavaVersionInt(""1.3.1""));
        assertEquals(140, SystemUtils.toJavaVersionInt(""1.4.0""));
        assertEquals(141, SystemUtils.toJavaVersionInt(""1.4.1""));
        assertEquals(142, SystemUtils.toJavaVersionInt(""1.4.2""));
        assertEquals(150, SystemUtils.toJavaVersionInt(""1.5.0""));
        assertEquals(160, SystemUtils.toJavaVersionInt(""1.6.0""));
        assertEquals(131, SystemUtils.toJavaVersionInt(""JavaVM-1.3.1""));
        assertEquals(131, SystemUtils.toJavaVersionInt(""1.3.1 subset""));
        // This used to return 0f in [lang] version 2.5:
        assertEquals(130, SystemUtils.toJavaVersionInt(""XXX-1.3.x""));
    }",junit.framework.AssertionFailedError: expected:<0> but was:<0.0>
Lang_30,/222043010/omniapr/defects4j/Lang_30_buggy/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,testContainsNone_CharArrayWithSupplementaryChars,"    public void testContainsNone_CharArrayWithSupplementaryChars() {
        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));
        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));
        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));
        // Sanity check:
        assertEquals(-1, CharU20000.indexOf(CharU20001));
        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
        // Test:
        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));
        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));
    }",junit.framework.AssertionFailedError: expected:<true> but was:<false>
Lang_30,/222043010/omniapr/defects4j/Lang_30_buggy/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,testContainsNone_StringWithSupplementaryChars,"    public void testContainsNone_StringWithSupplementaryChars() {
        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));
        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));
        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));
        // Sanity check:
        assertEquals(-1, CharU20000.indexOf(CharU20001));
        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
        // Test:
        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));
        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));
    }",junit.framework.AssertionFailedError: expected:<true> but was:<false>
Lang_30,/222043010/omniapr/defects4j/Lang_30_buggy/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,testContainsAny_StringCharArrayWithBadSupplementaryChars,"    public void testContainsAny_StringCharArrayWithBadSupplementaryChars() {
        // Test edge case: 1/2 of a (broken) supplementary char
        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));
        assertEquals(false, StringUtils.containsAny(""abc"" + CharUSuppCharHigh + ""xyz"", CharU20001.toCharArray()));
        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));
        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));
        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));
    }",junit.framework.AssertionFailedError: expected:<true> but was:<false>
Lang_30,/222043010/omniapr/defects4j/Lang_30_buggy/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,testIndexOfAnyBut_StringStringWithSupplementaryChars,"    public void testIndexOfAnyBut_StringStringWithSupplementaryChars() {
        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));
        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));
        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));
        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));        
    }",junit.framework.AssertionFailedError: expected:<true> but was:<false>
Lang_30,/222043010/omniapr/defects4j/Lang_30_buggy/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,testContainsAny_StringWithBadSupplementaryChars,"    public void testContainsAny_StringWithBadSupplementaryChars() {
        // Test edge case: 1/2 of a (broken) supplementary char
        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));
        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));
        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));
        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));
    }",junit.framework.AssertionFailedError: expected:<true> but was:<false>
Lang_30,/222043010/omniapr/defects4j/Lang_30_buggy/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,testIndexOfAny_StringCharArrayWithSupplementaryChars,"    public void testIndexOfAny_StringCharArrayWithSupplementaryChars() {
        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));
        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));
        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));
        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));    
    }",junit.framework.AssertionFailedError: expected:<true> but was:<false>
Lang_30,/222043010/omniapr/defects4j/Lang_30_buggy/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,testIndexOfAnyBut_StringCharArrayWithSupplementaryChars,"    public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() {
        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));
        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));
        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));
        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));        
    }",junit.framework.AssertionFailedError: expected:<true> but was:<false>
Lang_30,/222043010/omniapr/defects4j/Lang_30_buggy/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,testContainsNone_StringWithBadSupplementaryChars,"    public void testContainsNone_StringWithBadSupplementaryChars() {
        // Test edge case: 1/2 of a (broken) supplementary char
        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));
        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
        assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));
        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));
        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));
        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));        
    }",junit.framework.AssertionFailedError: expected:<true> but was:<false>
Lang_30,/222043010/omniapr/defects4j/Lang_30_buggy/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,testIndexOfAny_StringStringWithSupplementaryChars,"    public void testIndexOfAny_StringStringWithSupplementaryChars() {
        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));
        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));
        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));
        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));    
    }",junit.framework.AssertionFailedError: expected:<true> but was:<false>
Lang_30,/222043010/omniapr/defects4j/Lang_30_buggy/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,testContainsNone_CharArrayWithBadSupplementaryChars,"    public void testContainsNone_CharArrayWithBadSupplementaryChars() {
        // Test edge case: 1/2 of a (broken) supplementary char
        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));
        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
        assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));
        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));
        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));
        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));
    }",junit.framework.AssertionFailedError: expected:<true> but was:<false>
Lang_31,/222043010/omniapr/defects4j/Lang_31_buggy/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,testContainsAnyCharArrayWithSupplementaryChars,"	public void testContainsAnyCharArrayWithSupplementaryChars() {
		assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));
		assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));
		assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));
		// Sanity check:
		assertEquals(-1, CharU20000.indexOf(CharU20001));
		assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
		assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
		// Test:
		assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));
		assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));
	}",junit.framework.AssertionFailedError: expected:<false> but was:<true>
Lang_31,/222043010/omniapr/defects4j/Lang_31_buggy/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java,testContainsAnyStringWithSupplementaryChars,"	public void testContainsAnyStringWithSupplementaryChars() {
		assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));
		assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));
		assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));
		// Sanity check:
		assertEquals(-1, CharU20000.indexOf(CharU20001));
		assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
		assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
		// Test:
		assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));
		assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));
	}",junit.framework.AssertionFailedError: expected:<false> but was:<true>
Lang_32,/222043010/omniapr/defects4j/Lang_32_buggy/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java,testReflectionObjectCycle,"    public void testReflectionObjectCycle() {
        ReflectionTestCycleA a = new ReflectionTestCycleA();
        ReflectionTestCycleB b = new ReflectionTestCycleB();
        a.b = b;
        b.a = a;
        
        // Used to caused:
        // java.lang.StackOverflowError
        // at java.lang.ClassLoader.getCallerClassLoader(Native Method)
        // at java.lang.Class.getDeclaredFields(Class.java:992)
        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:373)
        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
        // at
        // org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)
        // at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)
        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)
        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)
        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)
        // at
        // org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)
        // at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)

        a.hashCode();
        assertNull(HashCodeBuilder.getRegistry());
        b.hashCode();
        assertNull(HashCodeBuilder.getRegistry());
    }",junit.framework.AssertionFailedError: Expected: <null> but was: []
Lang_33,/222043010/omniapr/defects4j/Lang_33_buggy/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java,testToClass_object,"    public void testToClass_object() {
        assertNull(ClassUtils.toClass(null));

        assertSame(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass(ArrayUtils.EMPTY_OBJECT_ARRAY));

        assertTrue(Arrays.equals(new Class[] { String.class, Integer.class, Double.class },
                ClassUtils.toClass(new Object[] { ""Test"", 1, 99d })));

        assertTrue(Arrays.equals(new Class[] { String.class, null, Double.class },
                ClassUtils.toClass(new Object[] { ""Test"", null, 99d })));
    }",java.lang.NullPointerException
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testObjectCycle,"    public void testObjectCycle() {
        ObjectCycle a = new ObjectCycle();
        ObjectCycle b = new ObjectCycle();
        a.obj = b;
        b.obj = a;

        String expected = toBaseString(a) + ""["" + toBaseString(b) + ""["" + toBaseString(a) + ""]]"";
        assertEquals(expected, a.toString());
        validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionHierarchy,"    public void testReflectionHierarchy() {
        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();
        String baseStr = this.toBaseString(baseA);
        assertEquals(baseStr + ""[a=a]"", ToStringBuilder.reflectionToString(baseA));
        assertEquals(baseStr + ""[a=a]"", ToStringBuilder.reflectionToString(baseA, null));
        assertEquals(baseStr + ""[a=a]"", ToStringBuilder.reflectionToString(baseA, null, false));
        assertEquals(baseStr + ""[a=a,transientA=t]"", ToStringBuilder.reflectionToString(baseA, null, true));
        assertEquals(baseStr + ""[a=a]"", ToStringBuilder.reflectionToString(baseA, null, false, null));
        assertEquals(baseStr + ""[a=a]"", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));
        assertEquals(baseStr + ""[a=a]"", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));

        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();
        baseStr = this.toBaseString(baseB);
        assertEquals(baseStr + ""[b=b,a=a]"", ToStringBuilder.reflectionToString(baseB));
        assertEquals(baseStr + ""[b=b,a=a]"", ToStringBuilder.reflectionToString(baseB));
        assertEquals(baseStr + ""[b=b,a=a]"", ToStringBuilder.reflectionToString(baseB, null));
        assertEquals(baseStr + ""[b=b,a=a]"", ToStringBuilder.reflectionToString(baseB, null, false));
        assertEquals(baseStr + ""[b=b,transientB=t,a=a,transientA=t]"", ToStringBuilder.reflectionToString(baseB, null, true));
        assertEquals(baseStr + ""[b=b,a=a]"", ToStringBuilder.reflectionToString(baseB, null, false, null));
        assertEquals(baseStr + ""[b=b,a=a]"", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));
        assertEquals(baseStr + ""[b=b,a=a]"", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));
        assertEquals(baseStr + ""[b=b]"", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testSelfInstanceTwoVarsReflectionObjectCycle,"    public void testSelfInstanceTwoVarsReflectionObjectCycle() throws Exception {
        SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture();
        assertEquals(this.toBaseString(test) + ""[typeIsSelf="" + this.toBaseString(test) + "",otherType="" + test.getOtherType().toString() + ""]"", test.toString());
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionArrayCycle,"    public void testReflectionArrayCycle() throws Exception {
        Object[] objects = new Object[1];
        objects[0] = objects;
        assertEquals(
            this.toBaseString(objects) + ""[{"" + this.toBaseString(objects) + ""}]"",
            ToStringBuilder.reflectionToString(objects));
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionLongArrayArray,"    public void testReflectionLongArrayArray() {
        long[][] array = new long[][] { { 1, 2 }, null, { 5 } };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + ""[{{1,2},<null>,{5}}]"", ToStringBuilder.reflectionToString(array));
        array = null;
        assertReflectionArray(""<null>"", array);
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionArrayArrayCycle,"    public void testReflectionArrayArrayCycle() throws Exception {
        Object[][] objects = new Object[2][2];
        objects[0][0] = objects;
        objects[0][1] = objects;
        objects[1][0] = objects;
        objects[1][1] = objects;
        String basicToString = this.toBaseString(objects);
        assertEquals(
            basicToString
                + ""[{{""
                + basicToString
                + "",""
                + basicToString
                + ""},{""
                + basicToString
                + "",""
                + basicToString
                + ""}}]"",
            ToStringBuilder.reflectionToString(objects));
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionFloatArray,"    public void testReflectionFloatArray() {
        float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + ""[{1.0,2.9876,-3.00001,4.3}]"", ToStringBuilder.reflectionToString(array));
        array = null;
        assertReflectionArray(""<null>"", array);
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionDoubleArrayArray,"    public void testReflectionDoubleArrayArray() {
        double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + ""[{{1.0,2.29686},<null>,{NaN}}]"", ToStringBuilder.reflectionToString(array));
        array = null;
        assertReflectionArray(""<null>"", array);
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionBooleanArray,"    public void testReflectionBooleanArray() {
        boolean[] array = new boolean[] { true, false, false };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + ""[{true,false,false}]"", ToStringBuilder.reflectionToString(array));
        array = null;
        assertReflectionArray(""<null>"", array);
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionyteArray,"    public void testReflectionyteArray() {
        byte[] array = new byte[] { 1, 2, -3, 4 };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + ""[{1,2,-3,4}]"", ToStringBuilder.reflectionToString(array));
        array = null;
        assertReflectionArray(""<null>"", array);
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionDoubleArray,"    public void testReflectionDoubleArray() {
        double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + ""[{1.0,2.9876,-3.00001,4.3}]"", ToStringBuilder.reflectionToString(array));
        array = null;
        assertReflectionArray(""<null>"", array);
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionIntArrayArray,"    public void testReflectionIntArrayArray() {
        int[][] array = new int[][] { { 1, 2 }, null, { 5 } };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + ""[{{1,2},<null>,{5}}]"", ToStringBuilder.reflectionToString(array));
        array = null;
        assertReflectionArray(""<null>"", array);
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionLongArray,"    public void testReflectionLongArray() {
        long[] array = new long[] { 1, 2, -3, 4 };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + ""[{1,2,-3,4}]"", ToStringBuilder.reflectionToString(array));
        array = null;
        assertReflectionArray(""<null>"", array);
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionhortArrayArray,"    public void testReflectionhortArrayArray() {
        short[][] array = new short[][] { { 1, 2 }, null, { 5 } };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + ""[{{1,2},<null>,{5}}]"", ToStringBuilder.reflectionToString(array));
        array = null;
        assertReflectionArray(""<null>"", array);
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionObjectArray,"    public void testReflectionObjectArray() {
        Object[] array = new Object[] { null, base, new int[] { 3, 6 } };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + ""[{<null>,5,{3,6}}]"", ToStringBuilder.reflectionToString(array));
        array = null;
        assertReflectionArray(""<null>"", array);
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionObjectCycle,"    public void testReflectionObjectCycle() throws Exception {
        ReflectionTestCycleA a = new ReflectionTestCycleA();
        ReflectionTestCycleB b = new ReflectionTestCycleB();
        a.b = b;
        b.a = a;
        assertEquals(
            this.toBaseString(a) + ""[b="" + this.toBaseString(b) + ""[a="" + this.toBaseString(a) + ""]]"",
            a.toString());
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionBooleanArrayArray,"    public void testReflectionBooleanArrayArray() {
        boolean[][] array = new boolean[][] { { true, false }, null, { false } };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + ""[{{true,false},<null>,{false}}]"", ToStringBuilder.reflectionToString(array));
        assertEquals(baseStr + ""[{{true,false},<null>,{false}}]"", ToStringBuilder.reflectionToString(array));
        array = null;
        assertReflectionArray(""<null>"", array);
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testSimpleReflectionObjectCycle,"    public void testSimpleReflectionObjectCycle() throws Exception {
        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture();
        simple.o = simple;
        assertEquals(this.toBaseString(simple) + ""[o="" + this.toBaseString(simple) + ""]"", simple.toString());
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionByteArrayArray,"    public void testReflectionByteArrayArray() {
        byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + ""[{{1,2},<null>,{5}}]"", ToStringBuilder.reflectionToString(array));
        array = null;
        assertReflectionArray(""<null>"", array);
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionArrayCycleLevel2,"    public void testReflectionArrayCycleLevel2() throws Exception {
        Object[] objects = new Object[1];
        Object[] objectsLevel2 = new Object[1];
        objects[0] = objectsLevel2;
        objectsLevel2[0] = objects;
        assertEquals(
            this.toBaseString(objects) + ""[{{"" + this.toBaseString(objects) + ""}}]"",
            ToStringBuilder.reflectionToString(objects));
        assertEquals(
            this.toBaseString(objectsLevel2) + ""[{{"" + this.toBaseString(objectsLevel2) + ""}}]"",
            ToStringBuilder.reflectionToString(objectsLevel2));
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionArrayAndObjectCycle,"    public void testReflectionArrayAndObjectCycle() throws Exception {
        Object[] objects = new Object[1];
        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);
        objects[0] = simple;
        assertEquals(
            this.toBaseString(objects)
                + ""[{""
                + this.toBaseString(simple)
                + ""[o=""
                + this.toBaseString(objects)
                + ""]""
                + ""}]"",
            ToStringBuilder.reflectionToString(objects));
        assertEquals(
            this.toBaseString(simple)
                + ""[o={""
                + this.toBaseString(simple)
                + ""}]"",
            ToStringBuilder.reflectionToString(simple));
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionCharArrayArray,"    public void testReflectionCharArrayArray() {
        char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + ""[{{A,B},<null>,{p}}]"", ToStringBuilder.reflectionToString(array));
        array = null;
        assertReflectionArray(""<null>"", array);
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionShortArray,"    public void testReflectionShortArray() {
        short[] array = new short[] { 1, 2, -3, 4 };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + ""[{1,2,-3,4}]"", ToStringBuilder.reflectionToString(array));
        array = null;
        assertReflectionArray(""<null>"", array);
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testSelfInstanceVarReflectionObjectCycle,"    public void testSelfInstanceVarReflectionObjectCycle() throws Exception {
        SelfInstanceVarReflectionTestFixture test = new SelfInstanceVarReflectionTestFixture();
        assertEquals(this.toBaseString(test) + ""[typeIsSelf="" + this.toBaseString(test) + ""]"", test.toString());
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionIntArray,"    public void testReflectionIntArray() {
        int[] array = new int[] { 1, 2, -3, 4 };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + ""[{1,2,-3,4}]"", ToStringBuilder.reflectionToString(array));
        array = null;
        assertReflectionArray(""<null>"", array);
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionCharArray,"    public void testReflectionCharArray() {
        char[] array = new char[] { 'A', '2', '_', 'D' };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + ""[{A,2,_,D}]"", ToStringBuilder.reflectionToString(array));
        array = null;
        assertReflectionArray(""<null>"", array);
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_34,/222043010/omniapr/defects4j/Lang_34_buggy/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java,testReflectionFloatArrayArray,"    public void testReflectionFloatArrayArray() {
        float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } };
        String baseStr = this.toBaseString(array);
        assertEquals(baseStr + ""[{{1.0,2.29686},<null>,{NaN}}]"", ToStringBuilder.reflectionToString(array));
        array = null;
        assertReflectionArray(""<null>"", array);
        this.validateNullToStringStyleRegistry();
    }",junit.framework.AssertionFailedError: Expected: <null> but was: {}
Lang_35,/222043010/omniapr/defects4j/Lang_35_buggy/src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java,testLANG571,"    public void testLANG571(){
        String[] stringArray=null;
        String aString=null;
        try {
            @SuppressWarnings(""unused"")
            String[] sa = ArrayUtils.add(stringArray, aString);
            fail(""Should have caused IllegalArgumentException"");
        } catch (IllegalArgumentException iae){
            //expected
        }
        try {
            @SuppressWarnings(""unused"")
            String[] sa = ArrayUtils.add(stringArray, 0, aString);
            fail(""Should have caused IllegalArgumentException"");
        } catch (IllegalArgumentException iae){
            //expected
        }
    }",java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Ljava.lang.String;
Lang_36,/222043010/omniapr/defects4j/Lang_36_buggy/src/test/org/apache/commons/lang3/math/NumberUtilsTest.java,testCreateNumber,"    public void testCreateNumber() {
        // a lot of things can go wrong
        assertEquals(""createNumber(String) 1 failed"", new Float(""1234.5""), NumberUtils.createNumber(""1234.5""));
        assertEquals(""createNumber(String) 2 failed"", new Integer(""12345""), NumberUtils.createNumber(""12345""));
        assertEquals(""createNumber(String) 3 failed"", new Double(""1234.5""), NumberUtils.createNumber(""1234.5D""));
        assertEquals(""createNumber(String) 3 failed"", new Double(""1234.5""), NumberUtils.createNumber(""1234.5d""));
        assertEquals(""createNumber(String) 4 failed"", new Float(""1234.5""), NumberUtils.createNumber(""1234.5F""));
        assertEquals(""createNumber(String) 4 failed"", new Float(""1234.5""), NumberUtils.createNumber(""1234.5f""));
        assertEquals(""createNumber(String) 5 failed"", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""""
            + (Integer.MAX_VALUE + 1L)));
        assertEquals(""createNumber(String) 6 failed"", new Long(12345), NumberUtils.createNumber(""12345L""));
        assertEquals(""createNumber(String) 6 failed"", new Long(12345), NumberUtils.createNumber(""12345l""));
        assertEquals(""createNumber(String) 7 failed"", new Float(""-1234.5""), NumberUtils.createNumber(""-1234.5""));
        assertEquals(""createNumber(String) 8 failed"", new Integer(""-12345""), NumberUtils.createNumber(""-12345""));
        assertTrue(""createNumber(String) 9 failed"", 0xFADE == NumberUtils.createNumber(""0xFADE"").intValue());
        assertTrue(""createNumber(String) 10 failed"", -0xFADE == NumberUtils.createNumber(""-0xFADE"").intValue());
        assertEquals(""createNumber(String) 11 failed"", new Double(""1.1E200""), NumberUtils.createNumber(""1.1E200""));
        assertEquals(""createNumber(String) 12 failed"", new Float(""1.1E20""), NumberUtils.createNumber(""1.1E20""));
        assertEquals(""createNumber(String) 13 failed"", new Double(""-1.1E200""), NumberUtils.createNumber(""-1.1E200""));
        assertEquals(""createNumber(String) 14 failed"", new Double(""1.1E-200""), NumberUtils.createNumber(""1.1E-200""));
        assertEquals(""createNumber(null) failed"", null, NumberUtils.createNumber(null));
        assertEquals(""createNumber(String) failed"", new BigInteger(""12345678901234567890""), NumberUtils
                .createNumber(""12345678901234567890L""));

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            assertEquals(""createNumber(String) 15 failed"", new BigDecimal(""1.1E-700""), NumberUtils
                    .createNumber(""1.1E-700F""));
        }
        assertEquals(""createNumber(String) 16 failed"", new Long(""10"" + Integer.MAX_VALUE), NumberUtils
                .createNumber(""10"" + Integer.MAX_VALUE + ""L""));
        assertEquals(""createNumber(String) 17 failed"", new Long(""10"" + Integer.MAX_VALUE), NumberUtils
                .createNumber(""10"" + Integer.MAX_VALUE));
        assertEquals(""createNumber(String) 18 failed"", new BigInteger(""10"" + Long.MAX_VALUE), NumberUtils
                .createNumber(""10"" + Long.MAX_VALUE));

        // LANG-521
        assertEquals(""createNumber(String) LANG-521 failed"", new Float(""2.""), NumberUtils.createNumber(""2.""));
    }",java.lang.NumberFormatException: 2. is not a valid number.
Lang_36,/222043010/omniapr/defects4j/Lang_36_buggy/src/test/org/apache/commons/lang3/math/NumberUtilsTest.java,testIsNumber,"    public void testIsNumber() {
        String val = ""12345"";
        assertTrue(""isNumber(String) 1 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 1 failed"", checkCreateNumber(val));
        val = ""1234.5"";
        assertTrue(""isNumber(String) 2 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 2 failed"", checkCreateNumber(val));
        val = "".12345"";
        assertTrue(""isNumber(String) 3 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 3 failed"", checkCreateNumber(val));
        val = ""1234E5"";
        assertTrue(""isNumber(String) 4 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 4 failed"", checkCreateNumber(val));
        val = ""1234E+5"";
        assertTrue(""isNumber(String) 5 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 5 failed"", checkCreateNumber(val));
        val = ""1234E-5"";
        assertTrue(""isNumber(String) 6 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 6 failed"", checkCreateNumber(val));
        val = ""123.4E5"";
        assertTrue(""isNumber(String) 7 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 7 failed"", checkCreateNumber(val));
        val = ""-1234"";
        assertTrue(""isNumber(String) 8 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 8 failed"", checkCreateNumber(val));
        val = ""-1234.5"";
        assertTrue(""isNumber(String) 9 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 9 failed"", checkCreateNumber(val));
        val = ""-.12345"";
        assertTrue(""isNumber(String) 10 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 10 failed"", checkCreateNumber(val));
        val = ""-1234E5"";
        assertTrue(""isNumber(String) 11 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 11 failed"", checkCreateNumber(val));
        val = ""0"";
        assertTrue(""isNumber(String) 12 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 12 failed"", checkCreateNumber(val));
        val = ""-0"";
        assertTrue(""isNumber(String) 13 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 13 failed"", checkCreateNumber(val));
        val = ""01234"";
        assertTrue(""isNumber(String) 14 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 14 failed"", checkCreateNumber(val));
        val = ""-01234"";
        assertTrue(""isNumber(String) 15 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 15 failed"", checkCreateNumber(val));
        val = ""0xABC123"";
        assertTrue(""isNumber(String) 16 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 16 failed"", checkCreateNumber(val));
        val = ""0x0"";
        assertTrue(""isNumber(String) 17 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 17 failed"", checkCreateNumber(val));
        val = ""123.4E21D"";
        assertTrue(""isNumber(String) 19 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 19 failed"", checkCreateNumber(val));
        val = ""-221.23F"";
        assertTrue(""isNumber(String) 20 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 20 failed"", checkCreateNumber(val));
        val = ""22338L"";
        assertTrue(""isNumber(String) 21 failed"", NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 21 failed"", checkCreateNumber(val));
        val = null;
        assertTrue(""isNumber(String) 1 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 1 Neg failed"", !checkCreateNumber(val));
        val = """";
        assertTrue(""isNumber(String) 2 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 2 Neg failed"", !checkCreateNumber(val));
        val = ""--2.3"";
        assertTrue(""isNumber(String) 3 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 3 Neg failed"", !checkCreateNumber(val));
        val = "".12.3"";
        assertTrue(""isNumber(String) 4 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 4 Neg failed"", !checkCreateNumber(val));
        val = ""-123E"";
        assertTrue(""isNumber(String) 5 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 5 Neg failed"", !checkCreateNumber(val));
        val = ""-123E+-212"";
        assertTrue(""isNumber(String) 6 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 6 Neg failed"", !checkCreateNumber(val));
        val = ""-123E2.12"";
        assertTrue(""isNumber(String) 7 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 7 Neg failed"", !checkCreateNumber(val));
        val = ""0xGF"";
        assertTrue(""isNumber(String) 8 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 8 Neg failed"", !checkCreateNumber(val));
        val = ""0xFAE-1"";
        assertTrue(""isNumber(String) 9 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 9 Neg failed"", !checkCreateNumber(val));
        val = ""."";
        assertTrue(""isNumber(String) 10 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 10 Neg failed"", !checkCreateNumber(val));
        val = ""-0ABC123"";
        assertTrue(""isNumber(String) 11 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 11 Neg failed"", !checkCreateNumber(val));
        val = ""123.4E-D"";
        assertTrue(""isNumber(String) 12 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 12 Neg failed"", !checkCreateNumber(val));
        val = ""123.4ED"";
        assertTrue(""isNumber(String) 13 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 13 Neg failed"", !checkCreateNumber(val));
        val = ""1234E5l"";
        assertTrue(""isNumber(String) 14 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 14 Neg failed"", !checkCreateNumber(val));
        val = ""11a"";
        assertTrue(""isNumber(String) 15 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 15 Neg failed"", !checkCreateNumber(val)); 
        val = ""1a"";
        assertTrue(""isNumber(String) 16 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 16 Neg failed"", !checkCreateNumber(val)); 
        val = ""a"";
        assertTrue(""isNumber(String) 17 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 17 Neg failed"", !checkCreateNumber(val)); 
        val = ""11g"";
        assertTrue(""isNumber(String) 18 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 18 Neg failed"", !checkCreateNumber(val)); 
        val = ""11z"";
        assertTrue(""isNumber(String) 19 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 19 Neg failed"", !checkCreateNumber(val)); 
        val = ""11def"";
        assertTrue(""isNumber(String) 20 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 20 Neg failed"", !checkCreateNumber(val)); 
        val = ""11d11"";
        assertTrue(""isNumber(String) 21 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 21 Neg failed"", !checkCreateNumber(val)); 
        val = ""11 11"";
        assertTrue(""isNumber(String) 22 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 22 Neg failed"", !checkCreateNumber(val));
        val = "" 1111"";
        assertTrue(""isNumber(String) 23 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 23 Neg failed"", !checkCreateNumber(val));
        val = ""1111 "";
        assertTrue(""isNumber(String) 24 Neg failed"", !NumberUtils.isNumber(val));
        assertTrue(""isNumber(String)/createNumber(String) 24 Neg failed"", !checkCreateNumber(val));

        // LANG-521
        val = ""2."";
        assertTrue(""isNumber(String) LANG-521 failed"", NumberUtils.isNumber(val));
    }",java.lang.NumberFormatException: 2. is not a valid number.
Lang_37,/222043010/omniapr/defects4j/Lang_37_buggy/src/test/org/apache/commons/lang3/ArrayUtilsAddTest.java,testJira567,"    public void testJira567(){
        Number[] n;
        // Valid array construction
        n = ArrayUtils.addAll(new Number[]{Integer.valueOf(1)}, new Long[]{Long.valueOf(2)});
        assertEquals(2,n.length);
        assertEquals(Number.class,n.getClass().getComponentType());
        try {
            // Invalid - can't store Long in Integer array
               n = ArrayUtils.addAll(new Integer[]{Integer.valueOf(1)}, new Long[]{Long.valueOf(2)});
               fail(""Should have generated IllegalArgumentException"");
        } catch (IllegalArgumentException expected) {
        }
    }",java.lang.ArrayStoreException
Lang_38,/222043010/omniapr/defects4j/Lang_38_buggy/src/test/org/apache/commons/lang3/time/FastDateFormatTest.java,testLang538,"    public void testLang538() {
        final String dateTime = ""2009-10-16T16:42:16.000Z"";

        // more commonly constructed with: cal = new GregorianCalendar(2009, 9, 16, 8, 42, 16)
        // for the unit test to work in any time zone, constructing with GMT-8 rather than default locale time zone
        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(""GMT-8""));
        cal.clear();
        cal.set(2009, 9, 16, 8, 42, 16);

        FastDateFormat format = FastDateFormat.getInstance(""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"", TimeZone.getTimeZone(""GMT""));
        assertEquals(""dateTime"", dateTime, format.format(cal));
    }",junit.framework.ComparisonFailure: dateTime expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>
Lang_39,/222043010/omniapr/defects4j/Lang_39_buggy/src/test/org/apache/commons/lang3/StringUtilsTest.java,testReplace_StringStringArrayStringArray,"    public void testReplace_StringStringArrayStringArray() {

        
        //JAVADOC TESTS START
        assertNull(StringUtils.replaceEach(null, new String[]{""a""}, new String[]{""b""}));
        assertEquals(StringUtils.replaceEach("""", new String[]{""a""}, new String[]{""b""}),"""");
        assertEquals(StringUtils.replaceEach(""aba"", null, null),""aba"");
        assertEquals(StringUtils.replaceEach(""aba"", new String[0], null),""aba"");
        assertEquals(StringUtils.replaceEach(""aba"", null, new String[0]),""aba"");
        assertEquals(StringUtils.replaceEach(""aba"", new String[]{""a""}, null),""aba"");

        assertEquals(StringUtils.replaceEach(""aba"", new String[]{""a""}, new String[]{""""}),""b"");
        assertEquals(StringUtils.replaceEach(""aba"", new String[]{null}, new String[]{""a""}),""aba"");
        assertEquals(StringUtils.replaceEach(""abcde"", new String[]{""ab"", ""d""}, new String[]{""w"", ""t""}),""wcte"");
        assertEquals(StringUtils.replaceEach(""abcde"", new String[]{""ab"", ""d""}, new String[]{""d"", ""t""}),""dcte"");
        //JAVADOC TESTS END

        assertEquals(""bcc"", StringUtils.replaceEach(""abc"", new String[]{""a"", ""b""}, new String[]{""b"", ""c""}));
        assertEquals(""q651.506bera"", StringUtils.replaceEach(""d216.102oren"",
            new String[]{""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""n"", 
                ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"", ""y"", ""z"", ""A"", ""B"", ""C"", ""D"", 
                ""E"", ""F"", ""G"", ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""N"", ""O"", ""P"", ""Q"", ""R"", ""S"", ""T"", 
                ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9""},
            new String[]{""n"", ""o"", ""p"", ""q"", ""r"", ""s"", ""t"", ""u"", ""v"", ""w"", ""x"", ""y"", ""z"", ""a"", 
                ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", ""i"", ""j"", ""k"", ""l"", ""m"", ""N"", ""O"", ""P"", ""Q"", 
                ""R"", ""S"", ""T"", ""U"", ""V"", ""W"", ""X"", ""Y"", ""Z"", ""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", 
                ""H"", ""I"", ""J"", ""K"", ""L"", ""M"", ""5"", ""6"", ""7"", ""8"", ""9"", ""1"", ""2"", ""3"", ""4""}));

        // Test null safety inside arrays - LANG-552
        assertEquals(StringUtils.replaceEach(""aba"", new String[]{""a""}, new String[]{null}),""aba"");
        assertEquals(StringUtils.replaceEach(""aba"", new String[]{""a"", ""b""}, new String[]{""c"", null}),""cbc"");
    }",java.lang.NullPointerException
Lang_40,/222043010/omniapr/defects4j/Lang_40_buggy/src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java,testContainsIgnoreCase_LocaleIndependence,"    public void testContainsIgnoreCase_LocaleIndependence() {
        Locale orig = Locale.getDefault();

        Locale[] locales = { Locale.ENGLISH, new Locale(""tr""), Locale.getDefault() };

        String[][] tdata = { 
            { ""i"", ""I"" },
            { ""I"", ""i"" },
            { ""\u03C2"", ""\u03C3"" },
            { ""\u03A3"", ""\u03C2"" },
            { ""\u03A3"", ""\u03C3"" },
        };

        String[][] fdata = { 
            { ""\u00DF"", ""SS"" },
        };

        try {
            for (int i = 0; i < locales.length; i++) {
                Locale.setDefault(locales[i]);
                for (int j = 0; j < tdata.length; j++) {
                    assertTrue(Locale.getDefault() + "": "" + j + "" "" + tdata[j][0] + "" "" + tdata[j][1], StringUtils
                            .containsIgnoreCase(tdata[j][0], tdata[j][1]));
                }
                for (int j = 0; j < fdata.length; j++) {
                    assertFalse(Locale.getDefault() + "": "" + j + "" "" + fdata[j][0] + "" "" + fdata[j][1], StringUtils
                            .containsIgnoreCase(fdata[j][0], fdata[j][1]));
                }
            }
        } finally {
            Locale.setDefault(orig);
        }
    }",junit.framework.AssertionFailedError: en: 0 ß SS
Lang_41,/222043010/omniapr/defects4j/Lang_41_buggy/src/test/org/apache/commons/lang/ClassUtilsTest.java,test_getShortClassName_Class,"    public void test_getShortClassName_Class() {
        assertEquals(""ClassUtils"", ClassUtils.getShortClassName(ClassUtils.class));
        assertEquals(""Map.Entry"", ClassUtils.getShortClassName(Map.Entry.class));
        assertEquals("""", ClassUtils.getShortClassName((Class) null));

        // LANG-535
        assertEquals(""String[]"", ClassUtils.getShortClassName(String[].class));
        assertEquals(""Map.Entry[]"", ClassUtils.getShortClassName(Map.Entry[].class));

        // Primitives
        assertEquals(""boolean"", ClassUtils.getShortClassName(boolean.class));
        assertEquals(""byte"", ClassUtils.getShortClassName(byte.class));
        assertEquals(""char"", ClassUtils.getShortClassName(char.class));
        assertEquals(""short"", ClassUtils.getShortClassName(short.class));
        assertEquals(""int"", ClassUtils.getShortClassName(int.class));
        assertEquals(""long"", ClassUtils.getShortClassName(long.class));
        assertEquals(""float"", ClassUtils.getShortClassName(float.class));
        assertEquals(""double"", ClassUtils.getShortClassName(double.class));

        // Primitive Arrays
        assertEquals(""boolean[]"", ClassUtils.getShortClassName(boolean[].class));
        assertEquals(""byte[]"", ClassUtils.getShortClassName(byte[].class));
        assertEquals(""char[]"", ClassUtils.getShortClassName(char[].class));
        assertEquals(""short[]"", ClassUtils.getShortClassName(short[].class));
        assertEquals(""int[]"", ClassUtils.getShortClassName(int[].class));
        assertEquals(""long[]"", ClassUtils.getShortClassName(long[].class));
        assertEquals(""float[]"", ClassUtils.getShortClassName(float[].class));
        assertEquals(""double[]"", ClassUtils.getShortClassName(double[].class));

        // Arrays of arrays of ...
        assertEquals(""String[][]"", ClassUtils.getShortClassName(String[][].class));
        assertEquals(""String[][][]"", ClassUtils.getShortClassName(String[][][].class));
        assertEquals(""String[][][][]"", ClassUtils.getShortClassName(String[][][][].class));
    }",junit.framework.ComparisonFailure: expected:<String[[]]> but was:<String[;]>
Lang_41,/222043010/omniapr/defects4j/Lang_41_buggy/src/test/org/apache/commons/lang/ClassUtilsTest.java,test_getPackageName_Class,"    public void test_getPackageName_Class() {
        assertEquals(""java.lang"", ClassUtils.getPackageName(String.class));
        assertEquals(""java.util"", ClassUtils.getPackageName(Map.Entry.class));
        assertEquals("""", ClassUtils.getPackageName((Class)null));

        // LANG-535
        assertEquals(""java.lang"", ClassUtils.getPackageName(String[].class));

        // Primitive Arrays
        assertEquals("""", ClassUtils.getPackageName(boolean[].class));
        assertEquals("""", ClassUtils.getPackageName(byte[].class));
        assertEquals("""", ClassUtils.getPackageName(char[].class));
        assertEquals("""", ClassUtils.getPackageName(short[].class));
        assertEquals("""", ClassUtils.getPackageName(int[].class));
        assertEquals("""", ClassUtils.getPackageName(long[].class));
        assertEquals("""", ClassUtils.getPackageName(float[].class));
        assertEquals("""", ClassUtils.getPackageName(double[].class));

        // Arrays of arrays of ...
        assertEquals(""java.lang"", ClassUtils.getPackageName(String[][].class));
        assertEquals(""java.lang"", ClassUtils.getPackageName(String[][][].class));
        assertEquals(""java.lang"", ClassUtils.getPackageName(String[][][][].class));
    }",junit.framework.ComparisonFailure: expected:<String[[]]> but was:<String[;]>
Lang_42,/222043010/omniapr/defects4j/Lang_42_buggy/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,testEscapeHtmlHighUnicode,"    public void testEscapeHtmlHighUnicode() throws java.io.UnsupportedEncodingException {
        // this is the utf8 representation of the character:
        // COUNTING ROD UNIT DIGIT THREE
        // in unicode
        // codepoint: U+1D362
        byte[] data = new byte[] { (byte)0xF0, (byte)0x9D, (byte)0x8D, (byte)0xA2 };

        String escaped = StringEscapeUtils.escapeHtml( new String(data, ""UTF8"") );
        String unescaped = StringEscapeUtils.unescapeHtml( escaped );

        assertEquals( ""High unicode was not escaped correctly"", ""&#119650;"", escaped);
    }",junit.framework.ComparisonFailure: High unicode was not escaped correctly expected:<&#[119650];> but was:<&#[55348;&#57186];>
Lang_43,/222043010/omniapr/defects4j/Lang_43_buggy/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java,testEscapedQuote_LANG_477,"    public void testEscapedQuote_LANG_477() {
        String pattern = ""it''s a {0,lower} 'test'!"";
        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);
        assertEquals(""it's a dummy test!"", emf.format(new Object[] {""DUMMY""}));
    }",java.lang.OutOfMemoryError: Requested array size exceeds VM limit
Lang_44,/222043010/omniapr/defects4j/Lang_44_buggy/src/test/org/apache/commons/lang/NumberUtilsTest.java,testLang457,"    public void testLang457() {
        String[] badInputs = new String[] { ""l"", ""L"", ""f"", ""F"", ""junk"", ""bobL""};
        for(int i=0; i<badInputs.length; i++) {
            try {
                NumberUtils.createNumber(badInputs[i]);
                fail(""NumberFormatException was expected for "" + badInputs[i]);
            } catch (NumberFormatException e) {
                return; // expected
            }
        }
    }",java.lang.StringIndexOutOfBoundsException: String index out of range: 0
Lang_45,/222043010/omniapr/defects4j/Lang_45_buggy/src/test/org/apache/commons/lang/WordUtilsTest.java,testAbbreviate,"    public void testAbbreviate() {
        // check null and empty are returned respectively
        assertNull(WordUtils.abbreviate(null, 1,-1,""""));
        assertEquals(StringUtils.EMPTY, WordUtils.abbreviate("""", 1,-1,""""));

        // test upper limit
        assertEquals(""01234"", WordUtils.abbreviate(""0123456789"", 0,5,""""));
        assertEquals(""01234"", WordUtils.abbreviate(""0123456789"", 5, 2,""""));
        assertEquals(""012"", WordUtils.abbreviate(""012 3456789"", 2, 5,""""));
        assertEquals(""012 3"", WordUtils.abbreviate(""012 3456789"", 5, 2,""""));
        assertEquals(""0123456789"", WordUtils.abbreviate(""0123456789"", 0,-1,""""));

        // test upper limit + append string
        assertEquals(""01234-"", WordUtils.abbreviate(""0123456789"", 0,5,""-""));
        assertEquals(""01234-"", WordUtils.abbreviate(""0123456789"", 5, 2,""-""));
        assertEquals(""012"", WordUtils.abbreviate(""012 3456789"", 2, 5, null));
        assertEquals(""012 3"", WordUtils.abbreviate(""012 3456789"", 5, 2,""""));
        assertEquals(""0123456789"", WordUtils.abbreviate(""0123456789"", 0,-1,""""));

        // test lower value
        assertEquals(""012"", WordUtils.abbreviate(""012 3456789"", 0,5, null));
        assertEquals(""01234"", WordUtils.abbreviate(""01234 56789"", 5, 10, null));
        assertEquals(""01 23 45 67"", WordUtils.abbreviate(""01 23 45 67 89"", 9, -1, null));
        assertEquals(""01 23 45 6"", WordUtils.abbreviate(""01 23 45 67 89"", 9, 10, null));
        assertEquals(""0123456789"", WordUtils.abbreviate(""0123456789"", 15, 20, null));

        // test lower value + append
        assertEquals(""012"", WordUtils.abbreviate(""012 3456789"", 0,5, null));
        assertEquals(""01234-"", WordUtils.abbreviate(""01234 56789"", 5, 10, ""-""));
        assertEquals(""01 23 45 67abc"", WordUtils.abbreviate(""01 23 45 67 89"", 9, -1, ""abc""));
        assertEquals(""01 23 45 6"", WordUtils.abbreviate(""01 23 45 67 89"", 9, 10, """"));

        // others
        assertEquals("""", WordUtils.abbreviate(""0123456790"", 0,0,""""));
        assertEquals("""", WordUtils.abbreviate("" 0123456790"", 0,-1,""""));
    }",java.lang.StringIndexOutOfBoundsException: String index out of range: 15
Lang_46,/222043010/omniapr/defects4j/Lang_46_buggy/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,testEscapeJavaWithSlash,"    public void testEscapeJavaWithSlash() {
        final String input = ""String with a slash (/) in it"";

        final String expected = input;
        final String actual = StringEscapeUtils.escapeJava(input);

        /**
         * In 2.4 StringEscapeUtils.escapeJava(String) escapes '/' characters, which are not a valid character to escape
         * in a Java string.
         */
        assertEquals(expected, actual);
    }",junit.framework.ComparisonFailure: expected:<...tring with a slash ([]/) in it> but was:<...tring with a slash ([\]/) in it>
Lang_47,/222043010/omniapr/defects4j/Lang_47_buggy/src/test/org/apache/commons/lang/text/StrBuilderTest.java,testLang412Left,"    public void testLang412Left() {
        StrBuilder sb = new StrBuilder();
        sb.appendFixedWidthPadLeft(null, 10, '*');
        assertEquals( ""Failed to invoke appendFixedWidthPadLeft correctly"", ""**********"", sb.toString());
    }",java.lang.NullPointerException
Lang_47,/222043010/omniapr/defects4j/Lang_47_buggy/src/test/org/apache/commons/lang/text/StrBuilderTest.java,testLang412Right,"    public void testLang412Right() {
        StrBuilder sb = new StrBuilder();
        sb.appendFixedWidthPadRight(null, 10, '*');
        assertEquals( ""Failed to invoke appendFixedWidthPadRight correctly"", ""**********"", sb.toString());
    }",java.lang.NullPointerException
Lang_48,/222043010/omniapr/defects4j/Lang_48_buggy/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java,testBigDecimal,"    public void testBigDecimal() {
        BigDecimal o1 = new BigDecimal(""2.0"");
        BigDecimal o2 = new BigDecimal(""2.00"");
        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());
        assertTrue(new EqualsBuilder().append(o1, o2).isEquals());
    }",junit.framework.AssertionFailedError
Lang_49,/222043010/omniapr/defects4j/Lang_49_buggy/src/test/org/apache/commons/lang/math/FractionTest.java,testReduce,"    public void testReduce() {
        Fraction f = null;
        
        f = Fraction.getFraction(50, 75);
        Fraction result = f.reduce();
        assertEquals(2, result.getNumerator());
        assertEquals(3, result.getDenominator());

        f = Fraction.getFraction(-2, -3);
        result = f.reduce();
        assertEquals(2, result.getNumerator());
        assertEquals(3, result.getDenominator());

        f = Fraction.getFraction(2, -3);
        result = f.reduce();
        assertEquals(-2, result.getNumerator());
        assertEquals(3, result.getDenominator());

        f = Fraction.getFraction(-2, 3);
        result = f.reduce();
        assertEquals(-2, result.getNumerator());
        assertEquals(3, result.getDenominator());
        assertSame(f, result);

        f = Fraction.getFraction(2, 3);
        result = f.reduce();
        assertEquals(2, result.getNumerator());
        assertEquals(3, result.getDenominator());
        assertSame(f, result);

        f = Fraction.getFraction(0, 1);
        result = f.reduce();
        assertEquals(0, result.getNumerator());
        assertEquals(1, result.getDenominator());
        assertSame(f, result);

        f = Fraction.getFraction(0, 100);
        result = f.reduce();
        assertEquals(0, result.getNumerator());
        assertEquals(1, result.getDenominator());
        assertSame(result, Fraction.ZERO);
    }",junit.framework.AssertionFailedError: expected:<1> but was:<100>
Lang_50,/222043010/omniapr/defects4j/Lang_50_buggy/src/test/org/apache/commons/lang/time/FastDateFormatTest.java,test_changeDefault_Locale_DateInstance,"    public void test_changeDefault_Locale_DateInstance() {
        Locale realDefaultLocale = Locale.getDefault();
        try {
            Locale.setDefault(Locale.US);
            FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY);
            FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL);
            Locale.setDefault(Locale.GERMANY);
            FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL);

            assertSame(Locale.GERMANY, format1.getLocale());
            assertSame(Locale.US, format2.getLocale());
            assertSame(Locale.GERMANY, format3.getLocale());
            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);
            assertTrue(format2 != format3);

        } finally {
            Locale.setDefault(realDefaultLocale);
        }
    }",junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
Lang_50,/222043010/omniapr/defects4j/Lang_50_buggy/src/test/org/apache/commons/lang/time/FastDateFormatTest.java,test_changeDefault_Locale_DateTimeInstance,"    public void test_changeDefault_Locale_DateTimeInstance() {
        Locale realDefaultLocale = Locale.getDefault();
        try {
            Locale.setDefault(Locale.US);
            FastDateFormat format1 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL, Locale.GERMANY);
            FastDateFormat format2 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);
            Locale.setDefault(Locale.GERMANY);
            FastDateFormat format3 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);

            assertSame(Locale.GERMANY, format1.getLocale());
            assertSame(Locale.US, format2.getLocale());
            assertSame(Locale.GERMANY, format3.getLocale());
            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);
            assertTrue(format2 != format3);

        } finally {
            Locale.setDefault(realDefaultLocale);
        }
    }",junit.framework.AssertionFailedError: expected same:<de_DE> was not:<en_US>
Lang_51,/222043010/omniapr/defects4j/Lang_51_buggy/src/test/org/apache/commons/lang/BooleanUtilsTest.java,test_toBoolean_String,"    public void test_toBoolean_String() {
        assertEquals(false, BooleanUtils.toBoolean((String) null));
        assertEquals(false, BooleanUtils.toBoolean(""""));
        assertEquals(false, BooleanUtils.toBoolean(""off""));
        assertEquals(false, BooleanUtils.toBoolean(""oof""));
        assertEquals(false, BooleanUtils.toBoolean(""yep""));
        assertEquals(false, BooleanUtils.toBoolean(""trux""));
        assertEquals(false, BooleanUtils.toBoolean(""false""));
        assertEquals(false, BooleanUtils.toBoolean(""a""));
        assertEquals(true, BooleanUtils.toBoolean(""true"")); // interned handled differently
        assertEquals(true, BooleanUtils.toBoolean(new StringBuffer(""tr"").append(""ue"").toString()));
        assertEquals(true, BooleanUtils.toBoolean(""truE""));
        assertEquals(true, BooleanUtils.toBoolean(""trUe""));
        assertEquals(true, BooleanUtils.toBoolean(""trUE""));
        assertEquals(true, BooleanUtils.toBoolean(""tRue""));
        assertEquals(true, BooleanUtils.toBoolean(""tRuE""));
        assertEquals(true, BooleanUtils.toBoolean(""tRUe""));
        assertEquals(true, BooleanUtils.toBoolean(""tRUE""));
        assertEquals(true, BooleanUtils.toBoolean(""TRUE""));
        assertEquals(true, BooleanUtils.toBoolean(""TRUe""));
        assertEquals(true, BooleanUtils.toBoolean(""TRuE""));
        assertEquals(true, BooleanUtils.toBoolean(""TRue""));
        assertEquals(true, BooleanUtils.toBoolean(""TrUE""));
        assertEquals(true, BooleanUtils.toBoolean(""TrUe""));
        assertEquals(true, BooleanUtils.toBoolean(""TruE""));
        assertEquals(true, BooleanUtils.toBoolean(""True""));
        assertEquals(true, BooleanUtils.toBoolean(""on""));
        assertEquals(true, BooleanUtils.toBoolean(""oN""));
        assertEquals(true, BooleanUtils.toBoolean(""On""));
        assertEquals(true, BooleanUtils.toBoolean(""ON""));
        assertEquals(true, BooleanUtils.toBoolean(""yes""));
        assertEquals(true, BooleanUtils.toBoolean(""yeS""));
        assertEquals(true, BooleanUtils.toBoolean(""yEs""));
        assertEquals(true, BooleanUtils.toBoolean(""yES""));
        assertEquals(true, BooleanUtils.toBoolean(""Yes""));
        assertEquals(true, BooleanUtils.toBoolean(""YeS""));
        assertEquals(true, BooleanUtils.toBoolean(""YEs""));
        assertEquals(true, BooleanUtils.toBoolean(""YES""));
        assertEquals(false, BooleanUtils.toBoolean(""yes?""));
        assertEquals(false, BooleanUtils.toBoolean(""tru""));
    }",java.lang.StringIndexOutOfBoundsException: String index out of range: 3
Lang_52,/222043010/omniapr/defects4j/Lang_52_buggy/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java,testEscapeJavaScript,"    public void testEscapeJavaScript() {
        assertEquals(null, StringEscapeUtils.escapeJavaScript(null));
        try {
            StringEscapeUtils.escapeJavaScript(null, null);
            fail();
        } catch (IOException ex) {
            fail();
        } catch (IllegalArgumentException ex) {
        }
        try {
            StringEscapeUtils.escapeJavaScript(null, """");
            fail();
        } catch (IOException ex) {
            fail();
        } catch (IllegalArgumentException ex) {
        }
        
        assertEquals(""He didn\\'t say, \\\""stop!\\\"""", StringEscapeUtils.escapeJavaScript(""He didn't say, \""stop!\""""));
        assertEquals(""document.getElementById(\\\""test\\\"").value = \\'<script>alert(\\'aaa\\');<\\/script>\\';"", 
                StringEscapeUtils.escapeJavaScript(""document.getElementById(\""test\"").value = '<script>alert('aaa');</script>';""));
    }",junit.framework.ComparisonFailure: expected:<...ipt>alert(\'aaa\');<[\]/script>\';> but was:<...ipt>alert(\'aaa\');<[]/script>\';>
Lang_53,/222043010/omniapr/defects4j/Lang_53_buggy/src/test/org/apache/commons/lang/time/DateUtilsTest.java,testRoundLang346,"    public void testRoundLang346() throws Exception
    {
        TimeZone.setDefault(defaultZone);
        dateTimeParser.setTimeZone(defaultZone);
        Calendar testCalendar = Calendar.getInstance();
        testCalendar.set(2007, 6, 2, 8, 8, 50);
        Date date = testCalendar.getTime();
        assertEquals(""Minute Round Up Failed"",
                     dateTimeParser.parse(""July 2, 2007 08:09:00.000""),
                     DateUtils.round(date, Calendar.MINUTE));

        testCalendar.set(2007, 6, 2, 8, 8, 20);
        date = testCalendar.getTime();
        assertEquals(""Minute No Round Failed"",
                     dateTimeParser.parse(""July 2, 2007 08:08:00.000""),
                     DateUtils.round(date, Calendar.MINUTE));

        testCalendar.set(2007, 6, 2, 8, 8, 50);
        testCalendar.set(Calendar.MILLISECOND, 600);
        date = testCalendar.getTime();

        assertEquals(""Second Round Up with 600 Milli Seconds Failed"",
                     dateTimeParser.parse(""July 2, 2007 08:08:51.000""),
                     DateUtils.round(date, Calendar.SECOND));

        testCalendar.set(2007, 6, 2, 8, 8, 50);
        testCalendar.set(Calendar.MILLISECOND, 200);
        date = testCalendar.getTime();
        assertEquals(""Second Round Down with 200 Milli Seconds Failed"",
                     dateTimeParser.parse(""July 2, 2007 08:08:50.000""),
                     DateUtils.round(date, Calendar.SECOND));

        testCalendar.set(2007, 6, 2, 8, 8, 20);
        testCalendar.set(Calendar.MILLISECOND, 600);
        date = testCalendar.getTime();
        assertEquals(""Second Round Up with 200 Milli Seconds Failed"",
                     dateTimeParser.parse(""July 2, 2007 08:08:21.000""),
                     DateUtils.round(date, Calendar.SECOND));

        testCalendar.set(2007, 6, 2, 8, 8, 20);
        testCalendar.set(Calendar.MILLISECOND, 200);
        date = testCalendar.getTime();
        assertEquals(""Second Round Down with 200 Milli Seconds Failed"",
                     dateTimeParser.parse(""July 2, 2007 08:08:20.000""),
                     DateUtils.round(date, Calendar.SECOND));

        testCalendar.set(2007, 6, 2, 8, 8, 50);
        date = testCalendar.getTime();
        assertEquals(""Hour Round Down Failed"",
                     dateTimeParser.parse(""July 2, 2007 08:00:00.000""),
                     DateUtils.round(date, Calendar.HOUR));

        testCalendar.set(2007, 6, 2, 8, 31, 50);
        date = testCalendar.getTime();
        assertEquals(""Hour Round Up Failed"",
                     dateTimeParser.parse(""July 2, 2007 09:00:00.000""),
                     DateUtils.round(date, Calendar.HOUR));
    }",junit.framework.AssertionFailedError: Minute Round Up Failed expected:<Mon Jul 02 08:09:00 PDT 2007> but was:<Mon Jul 02 08:01:00 PDT 2007>
Lang_54,/222043010/omniapr/defects4j/Lang_54_buggy/src/test/org/apache/commons/lang/LocaleUtilsTest.java,testLang328,"    public void testLang328() {
        assertValidToLocale(""fr__POSIX"", ""fr"", """", ""POSIX"");
    }",java.lang.IllegalArgumentException: Invalid locale format: fr__POSIX
Lang_55,/222043010/omniapr/defects4j/Lang_55_buggy/src/test/org/apache/commons/lang/time/StopWatchTest.java,testLang315,"    public void testLang315() {
        StopWatch watch = new StopWatch();
        watch.start();
            try {Thread.sleep(200);} catch (InterruptedException ex) {}
        watch.suspend();
        long suspendTime = watch.getTime();
            try {Thread.sleep(200);} catch (InterruptedException ex) {}
        watch.stop();
        long totalTime = watch.getTime();
        assertTrue( suspendTime == totalTime );
    }",junit.framework.AssertionFailedError
Lang_56,/222043010/omniapr/defects4j/Lang_56_buggy/src/test/org/apache/commons/lang/time/FastDateFormatTest.java,testLang303,"    public void testLang303() {
        FastDateFormat format = FastDateFormat.getInstance(""yyyy/MM/dd"");
        format = (FastDateFormat) SerializationUtils.deserialize( SerializationUtils.serialize( format ) );
    }",org.apache.commons.lang.SerializationException: java.io.NotSerializableException: org.apache.commons.lang.time.FastDateFormat$PaddedNumberField
Lang_57,/222043010/omniapr/defects4j/Lang_57_buggy/src/test/org/apache/commons/lang/LocaleUtilsTest.java,testAvailableLocaleSet,"    public void testAvailableLocaleSet() {
        Set set = LocaleUtils.availableLocaleSet();
        Set set2 = LocaleUtils.availableLocaleSet();
        assertNotNull(set);
        assertSame(set, set2);
        assertUnmodifiableCollection(set);
        
        Locale[] jdkLocaleArray = Locale.getAvailableLocales();
        List jdkLocaleList = Arrays.asList(jdkLocaleArray);
        Set jdkLocaleSet = new HashSet(jdkLocaleList);
        assertEquals(jdkLocaleSet, set);
    }",java.lang.NullPointerException
Lang_57,/222043010/omniapr/defects4j/Lang_57_buggy/src/test/org/apache/commons/lang/LocaleUtilsTest.java,testIsAvailableLocale,"    public void testIsAvailableLocale() {
        Set set = LocaleUtils.availableLocaleSet();
        assertEquals(set.contains(LOCALE_EN), LocaleUtils.isAvailableLocale(LOCALE_EN));
        assertEquals(set.contains(LOCALE_EN_US), LocaleUtils.isAvailableLocale(LOCALE_EN_US));
        assertEquals(set.contains(LOCALE_EN_US_ZZZZ), LocaleUtils.isAvailableLocale(LOCALE_EN_US_ZZZZ));
        assertEquals(set.contains(LOCALE_FR), LocaleUtils.isAvailableLocale(LOCALE_FR));
        assertEquals(set.contains(LOCALE_FR_CA), LocaleUtils.isAvailableLocale(LOCALE_FR_CA));
        assertEquals(set.contains(LOCALE_QQ), LocaleUtils.isAvailableLocale(LOCALE_QQ));
        assertEquals(set.contains(LOCALE_QQ_ZZ), LocaleUtils.isAvailableLocale(LOCALE_QQ_ZZ));
    }",java.lang.NullPointerException
Lang_57,/222043010/omniapr/defects4j/Lang_57_buggy/src/test/org/apache/commons/lang/LocaleUtilsTest.java,testAvailableLocaleList,"    public void testAvailableLocaleList() {
        List list = LocaleUtils.availableLocaleList();
        List list2 = LocaleUtils.availableLocaleList();
        assertNotNull(list);
        assertSame(list, list2);
        assertUnmodifiableCollection(list);
        
        Locale[] jdkLocaleArray = Locale.getAvailableLocales();
        List jdkLocaleList = Arrays.asList(jdkLocaleArray);
        assertEquals(jdkLocaleList, list);
    }",java.lang.NullPointerException
Lang_57,/222043010/omniapr/defects4j/Lang_57_buggy/src/test/org/apache/commons/lang/LocaleUtilsTest.java,testCountriesByLanguage,    public void testCountriesByLanguage() {},java.lang.NullPointerException
Lang_57,/222043010/omniapr/defects4j/Lang_57_buggy/src/test/org/apache/commons/lang/LocaleUtilsTest.java,testLocaleLookupList_LocaleLocale,"    public void testLocaleLookupList_LocaleLocale() {
        assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ, 
                new Locale[]{LOCALE_QQ});
        assertLocaleLookupList(LOCALE_EN, LOCALE_EN, 
                new Locale[]{LOCALE_EN});
        
        assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US, 
            new Locale[]{
                LOCALE_EN_US,
                LOCALE_EN});
        assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ,
            new Locale[] {
                LOCALE_EN_US,
                LOCALE_EN,
                LOCALE_QQ});
        assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ,
            new Locale[] {
                LOCALE_EN_US,
                LOCALE_EN,
                LOCALE_QQ_ZZ});
        
        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,
            new Locale[] {
                LOCALE_EN_US_ZZZZ,
                LOCALE_EN_US,
                LOCALE_EN});
        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ,
            new Locale[] {
                LOCALE_EN_US_ZZZZ,
                LOCALE_EN_US,
                LOCALE_EN});
        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ,
            new Locale[] {
                LOCALE_EN_US_ZZZZ,
                LOCALE_EN_US,
                LOCALE_EN,
                LOCALE_QQ});
        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ,
            new Locale[] {
                LOCALE_EN_US_ZZZZ,
                LOCALE_EN_US,
                LOCALE_EN,
                LOCALE_QQ_ZZ});
        assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN,
            new Locale[] {
                LOCALE_FR_CA,
                LOCALE_FR,
                LOCALE_EN});
    }",java.lang.NullPointerException
Lang_57,/222043010/omniapr/defects4j/Lang_57_buggy/src/test/org/apache/commons/lang/LocaleUtilsTest.java,testLanguagesByCountry,"    public void testLanguagesByCountry() {
        assertLanguageByCountry(null, new String[0]);
        assertLanguageByCountry(""GB"", new String[]{""en""});
        assertLanguageByCountry(""ZZ"", new String[0]);
        assertLanguageByCountry(""CH"", new String[]{""fr"", ""de"", ""it""});
    }",java.lang.NullPointerException
Lang_57,/222043010/omniapr/defects4j/Lang_57_buggy/src/test/org/apache/commons/lang/LocaleUtilsTest.java,testToLocale_1Part,"    public void testToLocale_1Part() {
        assertEquals(null, LocaleUtils.toLocale((String) null));
        
        assertValidToLocale(""us"");
        assertValidToLocale(""fr"");
        assertValidToLocale(""de"");
        assertValidToLocale(""zh"");
        // Valid format but lang doesnt exist, should make instance anyway
        assertValidToLocale(""qq"");
        
        try {
            LocaleUtils.toLocale(""Us"");
            fail(""Should fail if not lowercase"");
        } catch (IllegalArgumentException iae) {}
        try {
            LocaleUtils.toLocale(""US"");
            fail(""Should fail if not lowercase"");
        } catch (IllegalArgumentException iae) {}
        try {
            LocaleUtils.toLocale(""uS"");
            fail(""Should fail if not lowercase"");
        } catch (IllegalArgumentException iae) {}
        try {
            LocaleUtils.toLocale(""u#"");
            fail(""Should fail if not lowercase"");
        } catch (IllegalArgumentException iae) {}
        
        try {
            LocaleUtils.toLocale(""u"");
            fail(""Must be 2 chars if less than 5"");
        } catch (IllegalArgumentException iae) {}
       
        try {
            LocaleUtils.toLocale(""uuu"");
            fail(""Must be 2 chars if less than 5"");
        } catch (IllegalArgumentException iae) {}

        try {
            LocaleUtils.toLocale(""uu_U"");
            fail(""Must be 2 chars if less than 5"");
        } catch (IllegalArgumentException iae) {}
    }",java.lang.NullPointerException
Lang_57,/222043010/omniapr/defects4j/Lang_57_buggy/src/test/org/apache/commons/lang/LocaleUtilsTest.java,testToLocale_2Part,"    public void testToLocale_2Part() {
        assertValidToLocale(""us_EN"", ""us"", ""EN"");
        //valid though doesnt exist
        assertValidToLocale(""us_ZH"", ""us"", ""ZH"");
        
        try {
            LocaleUtils.toLocale(""us-EN"");
            fail(""Should fail as not underscore"");
        } catch (IllegalArgumentException iae) {}
        try {
            LocaleUtils.toLocale(""us_En"");
            fail(""Should fail second part not uppercase"");
        } catch (IllegalArgumentException iae) {}
        try {
            LocaleUtils.toLocale(""us_en"");
            fail(""Should fail second part not uppercase"");
        } catch (IllegalArgumentException iae) {}
        try {
            LocaleUtils.toLocale(""us_eN"");
            fail(""Should fail second part not uppercase"");
        } catch (IllegalArgumentException iae) {}
        try {
            LocaleUtils.toLocale(""uS_EN"");
            fail(""Should fail first part not lowercase"");
        } catch (IllegalArgumentException iae) {}
        try {
            LocaleUtils.toLocale(""us_E3"");
            fail(""Should fail second part not uppercase"");
        } catch (IllegalArgumentException iae) {}
    }",java.lang.NullPointerException
Lang_57,/222043010/omniapr/defects4j/Lang_57_buggy/src/test/org/apache/commons/lang/LocaleUtilsTest.java,testToLocale_3Part,"    public void testToLocale_3Part() {
        assertValidToLocale(""us_EN_A"", ""us"", ""EN"", ""A"");
        // this isn't pretty, but was caused by a jdk bug it seems
        // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4210525
        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {
            assertValidToLocale(""us_EN_a"", ""us"", ""EN"", ""a"");
            assertValidToLocale(""us_EN_SFsafdFDsdfF"", ""us"", ""EN"", ""SFsafdFDsdfF"");
        } else {
            assertValidToLocale(""us_EN_a"", ""us"", ""EN"", ""A"");
            assertValidToLocale(""us_EN_SFsafdFDsdfF"", ""us"", ""EN"", ""SFSAFDFDSDFF"");
        }
        
        try {
            LocaleUtils.toLocale(""us_EN-a"");
            fail(""Should fail as not underscore"");
        } catch (IllegalArgumentException iae) {}
        try {
            LocaleUtils.toLocale(""uu_UU_"");
            fail(""Must be 3, 5 or 7+ in length"");
        } catch (IllegalArgumentException iae) {}
    }",java.lang.NullPointerException
Lang_57,/222043010/omniapr/defects4j/Lang_57_buggy/src/test/org/apache/commons/lang/LocaleUtilsTest.java,testLocaleLookupList_Locale,"    public void testLocaleLookupList_Locale() {
        assertLocaleLookupList(null, null, new Locale[0]);
        assertLocaleLookupList(LOCALE_QQ, null, new Locale[]{LOCALE_QQ});
        assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});
        assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});
        assertLocaleLookupList(LOCALE_EN_US, null,
            new Locale[] {
                LOCALE_EN_US,
                LOCALE_EN});
        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,
            new Locale[] {
                LOCALE_EN_US_ZZZZ,
                LOCALE_EN_US,
                LOCALE_EN});
    }",java.lang.NullPointerException
Lang_57,/222043010/omniapr/defects4j/Lang_57_buggy/src/test/org/apache/commons/lang/LocaleUtilsTest.java,testConstructor,"    public void testConstructor() {
        assertNotNull(new LocaleUtils());
        Constructor[] cons = LocaleUtils.class.getDeclaredConstructors();
        assertEquals(1, cons.length);
        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));
        assertEquals(true, Modifier.isPublic(LocaleUtils.class.getModifiers()));
        assertEquals(false, Modifier.isFinal(LocaleUtils.class.getModifiers()));
    }",java.lang.NullPointerException
Lang_58,/222043010/omniapr/defects4j/Lang_58_buggy/src/test/org/apache/commons/lang/math/NumberUtilsTest.java,testLang300,"    public void testLang300() {
        NumberUtils.createNumber(""-1l"");
        NumberUtils.createNumber(""01l"");
        NumberUtils.createNumber(""1l"");
    }",java.lang.NumberFormatException: 1l is not a valid number.
Lang_59,/222043010/omniapr/defects4j/Lang_59_buggy/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java,testLang299,"    public void testLang299() {
        StrBuilder sb = new StrBuilder(1);
        sb.appendFixedWidthPadRight(""foo"", 1, '-');
        assertEquals(""f"", sb.toString());
    }",java.lang.ArrayIndexOutOfBoundsException
Lang_60,/222043010/omniapr/defects4j/Lang_60_buggy/src/test/org/apache/commons/lang/text/StrBuilderTest.java,testLang295,"    public void testLang295() {
        StrBuilder sb = new StrBuilder(""onetwothree"");
        sb.deleteFirst(""three"");
        assertFalse( ""The contains(char) method is looking beyond the end of the string"", sb.contains('h'));
        assertEquals( ""The indexOf(char) method is looking beyond the end of the string"", -1, sb.indexOf('h'));
    }",junit.framework.AssertionFailedError: The contains(char) method is looking beyond the end of the string
Lang_61,/222043010/omniapr/defects4j/Lang_61_buggy/src/test/org/apache/commons/lang/text/StrBuilderTest.java,testIndexOfLang294,"    public void testIndexOfLang294() {
        StrBuilder sb = new StrBuilder(""onetwothree"");
        sb.deleteFirst(""three"");
        assertEquals(-1, sb.indexOf(""three""));
    }",junit.framework.AssertionFailedError: expected:<-1> but was:<6>
Lang_61,/222043010/omniapr/defects4j/Lang_61_buggy/src/test/org/apache/commons/lang/text/StrBuilderTest.java,testLang294,"    public void testLang294() {
        StrBuilder sb = new StrBuilder(""\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n"");
        sb.deleteAll(""\n%BLAH%"");
        assertEquals(""\nDo more stuff\neven more stuff\n"", sb.toString()); 
    }",junit.framework.AssertionFailedError: expected:<-1> but was:<6>
Lang_62,/222043010/omniapr/defects4j/Lang_62_buggy/src/test/org/apache/commons/lang/EntitiesTest.java,testNumberOverflow,"    public void testNumberOverflow() throws Exception {
        doTestUnescapeEntity(""&#12345678;"", ""&#12345678;"");
        doTestUnescapeEntity(""x&#12345678;y"", ""x&#12345678;y"");
        doTestUnescapeEntity(""&#x12345678;"", ""&#x12345678;"");
        doTestUnescapeEntity(""x&#x12345678;y"", ""x&#x12345678;y"");
    }",junit.framework.ComparisonFailure: expected:<[&#12345678;]> but was:<[慎]>
Lang_63,/222043010/omniapr/defects4j/Lang_63_buggy/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java,testJiraLang281,"    public void testJiraLang281() {
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.MONTH, Calendar.DECEMBER);
        cal.set(Calendar.DAY_OF_MONTH, 31);
        cal.set(Calendar.YEAR, 2005);
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        cal.set(Calendar.MILLISECOND, 0);

        Calendar cal2 = Calendar.getInstance();
        cal2.set(Calendar.MONTH, Calendar.OCTOBER);
        cal2.set(Calendar.DAY_OF_MONTH, 6);
        cal2.set(Calendar.YEAR, 2006);
        cal2.set(Calendar.HOUR_OF_DAY, 0);
        cal2.set(Calendar.MINUTE, 0);
        cal2.set(Calendar.SECOND, 0);
        cal2.set(Calendar.MILLISECOND, 0);
        String result = DurationFormatUtils.formatPeriod(cal.getTime().getTime(), cal2.getTime().getTime(), ""MM"");
        assertEquals(""09"", result);
    }",junit.framework.ComparisonFailure: expected:<[09]> but was:<[-2]>
Lang_64,/222043010/omniapr/defects4j/Lang_64_buggy/src/test/org/apache/commons/lang/enums/ValuedEnumTest.java,testCompareTo_otherEnumType,"    public void testCompareTo_otherEnumType() {
        try {
            ValuedColorEnum.BLUE.compareTo(ValuedLanguageEnum.ENGLISH);
            fail();
        } catch (ClassCastException ex) {
            // expected
        }
    }",junit.framework.AssertionFailedError
Cli_2,/222043010/omniapr/defects4j/Cli_2_buggy/src/test/org/apache/commons/cli/bug/BugCLI51Test.java,test,"    public void test() throws Exception
    {
        Options options = buildCommandLineOptions();
        CommandLineParser parser = new PosixParser();
        String[] args = new String[] {""-t"", ""-something"" };
        CommandLine commandLine;
        commandLine = parser.parse( options, args );
        assertEquals(""-something"", commandLine.getOptionValue( 't'));
    }",org.apache.commons.cli.UnrecognizedOptionException: Unrecognized option: -o
Cli_3,/222043010/omniapr/defects4j/Cli_3_buggy/src/test/org/apache/commons/cli/PatternOptionBuilderTest.java,testSimplePattern,"   public void testSimplePattern()
   {
       try {
           Options options = PatternOptionBuilder.parsePattern(""a:b@cde>f+n%t/"");
           String[] args = new String[] { ""-c"", ""-a"", ""foo"", ""-b"", ""java.util.Vector"", ""-e"", ""build.xml"", ""-f"", ""java.util.Calendar"", ""-n"", ""4.5"", ""-t"", ""http://jakarta.apache.org/"" };
      
           CommandLineParser parser = new PosixParser();
           CommandLine line = parser.parse(options,args);

           // tests the char methods of CommandLine that delegate to
           // the String methods
           assertEquals(""flag a"", ""foo"", line.getOptionValue(""a""));
           assertEquals(""flag a"", ""foo"", line.getOptionValue('a'));
           assertEquals(""string flag a"", ""foo"", line.getOptionObject(""a""));
           assertEquals(""string flag a"", ""foo"", line.getOptionObject('a'));
           assertEquals(""object flag b"", new java.util.Vector(), line.getOptionObject(""b""));
           assertEquals(""object flag b"", new java.util.Vector(), line.getOptionObject('b'));
           assertEquals(""boolean true flag c"", true, line.hasOption(""c""));
           assertEquals(""boolean true flag c"", true, line.hasOption('c'));
           assertEquals(""boolean false flag d"", false, line.hasOption(""d""));
           assertEquals(""boolean false flag d"", false, line.hasOption('d'));
           assertEquals(""file flag e"", new java.io.File(""build.xml""), line.getOptionObject(""e""));
           assertEquals(""file flag e"", new java.io.File(""build.xml""), line.getOptionObject('e'));
           assertEquals(""class flag f"", java.util.Calendar.class, line.getOptionObject(""f""));
           assertEquals(""class flag f"", java.util.Calendar.class, line.getOptionObject('f'));
           assertEquals(""number flag n"", new Double(4.5), line.getOptionObject(""n""));
           assertEquals(""number flag n"", new Double(4.5), line.getOptionObject('n'));
           assertEquals(""url flag t"", new java.net.URL(""http://jakarta.apache.org/""), line.getOptionObject(""t""));
           assertEquals(""url flag t"", new java.net.URL(""http://jakarta.apache.org/""), line.getOptionObject('t'));
           /// DATES NOT SUPPORTED YET.
           //      assertEquals(""number flag t"", new java.util.Date(1023400137276L), line.getOptionObject('z'));
           //     input is:  ""Thu Jun 06 17:48:57 EDT 2002""
       }
       catch( ParseException exp ) {
           fail( exp.getMessage() );
       }
       catch( java.net.MalformedURLException exp ) {
           fail( exp.getMessage() );
       }
   }",junit.framework.AssertionFailedError: number flag n expected:<4.5> but was:<4.5>
Cli_4,/222043010/omniapr/defects4j/Cli_4_buggy/src/test/org/apache/commons/cli/OptionsTest.java,testMissingOptionsException,"    public void testMissingOptionsException() throws ParseException {
        Options options = new Options();
        options.addOption(OptionBuilder.isRequired().create(""f""));
        options.addOption(OptionBuilder.isRequired().create(""x""));
        try {
            new PosixParser().parse(options, new String[0]);
            fail(""Expected MissingOptionException to be thrown"");
        } catch (MissingOptionException e) {
            assertEquals(""Missing required options: fx"", e.getMessage());
        }
    }",junit.framework.ComparisonFailure: expected:<[Missing required options: ]fx> but was:<[]fx>
Cli_4,/222043010/omniapr/defects4j/Cli_4_buggy/src/test/org/apache/commons/cli/OptionsTest.java,testMissingOptionException,"    public void testMissingOptionException() throws ParseException {
        Options options = new Options();
        options.addOption(OptionBuilder.isRequired().create(""f""));
        try {
            new PosixParser().parse(options, new String[0]);
            fail(""Expected MissingOptionException to be thrown"");
        } catch (MissingOptionException e) {
            assertEquals(""Missing required option: f"", e.getMessage());
        }
    }",junit.framework.ComparisonFailure: expected:<[Missing required options: ]fx> but was:<[]fx>
Cli_5,/222043010/omniapr/defects4j/Cli_5_buggy/src/test/org/apache/commons/cli/UtilTest.java,testStripLeadingHyphens,"    public void testStripLeadingHyphens() {
        assertEquals(""f"", Util.stripLeadingHyphens(""-f""));
        assertEquals(""foo"", Util.stripLeadingHyphens(""--foo""));
        assertNull(Util.stripLeadingHyphens(null));
    }",java.lang.NullPointerException
Cli_5,/222043010/omniapr/defects4j/Cli_5_buggy/src/test/org/apache/commons/cli/bug/BugCLI133Test.java,testOrder,"    public void testOrder() throws ParseException {
        Option optionA = new Option(""a"", ""first"");
        Options opts = new Options();
        opts.addOption(optionA);
        PosixParser posixParser = new PosixParser();
        CommandLine line = posixParser.parse(opts, null);
        assertFalse(line.hasOption(null));
    }",java.lang.NullPointerException
Cli_7,/222043010/omniapr/defects4j/Cli_7_buggy/src/test/org/apache/commons/cli2/bug/Bug27575Test.java,testRequiredOptions,"	public void testRequiredOptions(){
		PatternBuilder builder = new PatternBuilder();
		builder.withPattern(""hc!<"");
		Option option = builder.create();
		assertTrue(option instanceof GroupImpl);
		
		GroupImpl group = (GroupImpl)option;
		Iterator i = group.getOptions().iterator();
		assertEquals(""[-h]"",i.next().toString());
		assertEquals(""-c <arg>"",i.next().toString());
		assertFalse(i.hasNext());
	}",junit.framework.ComparisonFailure: expected:<[[-h]]> but was:<[-c <arg>]>
Cli_7,/222043010/omniapr/defects4j/Cli_7_buggy/src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,testValidate_WritableFile,"    public void testValidate_WritableFile() {
        // make file readonly
        File file = new File(""src/test/data/readable.txt"");
        file.setReadOnly();

        final Object[] array = new Object[] { ""src/test/data/writable.txt"",
                ""src/test/data/readable.txt"" };
        final List list = Arrays.asList(array);
        final FileValidator validator = FileValidator.getExistingFileInstance();
        validator.setWritable(true);

        assertFalse(""is not a directory validator"", validator.isDirectory());
        assertTrue(""is a file validator"", validator.isFile());
        assertTrue(""is an existing file validator"", validator.isExisting());
        assertFalse(""is not a hidden file validator"", validator.isHidden());
        assertFalse(""is not a readable file validator"", validator.isReadable());
        assertTrue(""is a writable file validator"", validator.isWritable());

        try {
            validator.validate(list);
            fail(""InvalidArgumentException"");
        } catch (InvalidArgumentException e) {
            assertEquals(""src/test/data/readable.txt"", e.getMessage());
        }
    }",junit.framework.AssertionFailedError: InvalidArgumentException
Cli_8,/222043010/omniapr/defects4j/Cli_8_buggy/src/test/org/apache/commons/cli/HelpFormatterTest.java,testPrintWrapped,"   public void testPrintWrapped()
      throws Exception
   {
      StringBuffer sb = new StringBuffer();
      HelpFormatter hf = new HelpFormatter();

      String text = ""This is a test."";
      String expected;

      expected = ""This is a"" + hf.getNewLine() + ""test."";
      hf.renderWrappedText(sb, 12, 0, text);
      assertEquals(""single line text"", expected, sb.toString());

      sb.setLength(0);
      expected = ""This is a"" + hf.getNewLine() + ""    test."";
      hf.renderWrappedText(sb, 12, 4, text);
      assertEquals(""single line padded text"", expected, sb.toString());

      text = ""  -p,--period <PERIOD>  PERIOD is time duration of form "" +
          ""DATE[-DATE] where DATE has form YYYY[MM[DD]]"";

      sb.setLength(0);
      expected = ""  -p,--period <PERIOD>  PERIOD is time duration of"" +
                 hf.getNewLine() +
                 ""                        form DATE[-DATE] where DATE"" +
                 hf.getNewLine() +
                 ""                        has form YYYY[MM[DD]]"";
      hf.renderWrappedText(sb, 53, 24, text);
      assertEquals(""single line padded text 2"", expected, sb.toString());

      text =
         ""aaaa aaaa aaaa"" + hf.getNewLine() +
         ""aaaaaa"" + hf.getNewLine() +
         ""aaaaa"";

      expected = text;
      sb.setLength(0);
      hf.renderWrappedText(sb, 16, 0, text);
      assertEquals(""multi line text"", expected, sb.toString());

      expected =
         ""aaaa aaaa aaaa"" + hf.getNewLine() +
         ""    aaaaaa"" + hf.getNewLine() +
         ""    aaaaa"";
      sb.setLength(0);
      hf.renderWrappedText(sb, 16, 4, text);
      assertEquals(""multi-line padded text"", expected, sb.toString());
   }",junit.framework.ComparisonFailure: single line padded text 2 expected:<...TE[-DATE] where DATE[
Cli_9,/222043010/omniapr/defects4j/Cli_9_buggy/src/test/org/apache/commons/cli/OptionsTest.java,testMissingOptionsException,"    public void testMissingOptionsException() throws ParseException {
        Options options = new Options();
        options.addOption(OptionBuilder.isRequired().create(""f""));
        options.addOption(OptionBuilder.isRequired().create(""x""));
        try {
            new PosixParser().parse(options, new String[0]);
            fail(""Expected MissingOptionException to be thrown"");
        } catch (MissingOptionException e) {
            assertEquals(""Missing required options: f, x"", e.getMessage());
        }
    }","junit.framework.ComparisonFailure: expected:<... required options: f[, ]x> but was:<... required options: f[]x>"
Cli_9,/222043010/omniapr/defects4j/Cli_9_buggy/src/test/org/apache/commons/cli/ParseRequiredTest.java,testMissingRequiredOptions,"    public void testMissingRequiredOptions()
    {
        String[] args = new String[] { ""-a"" };

        _options.addOption( OptionBuilder.withLongOpt( ""cfile"" )
                                     .hasArg()
                                     .isRequired()
                                     .withDescription( ""set the value of [c]"" )
                                     .create( 'c' ) );

        try
        {
            CommandLine cl = parser.parse(_options,args);
            fail( ""exception should have been thrown"" );
        }
        catch (MissingOptionException e)
        {
            assertEquals( ""Incorrect exception message"", ""Missing required options: b, c"", e.getMessage() );
        }
        catch (ParseException e)
        {
            fail( ""expected to catch MissingOptionException"" );
        }
    }","junit.framework.ComparisonFailure: Incorrect exception message expected:<... required options: b[, ]c> but was:<... required options: b[]c>"
Cli_10,/222043010/omniapr/defects4j/Cli_10_buggy/src/test/org/apache/commons/cli/ParseRequiredTest.java,testReuseOptionsTwice,"    public void testReuseOptionsTwice() throws Exception
    {
        Options opts = new Options();
		opts.addOption(OptionBuilder.isRequired().create('v'));

		GnuParser parser = new GnuParser();

        // first parsing
        parser.parse(opts, new String[] { ""-v"" });

        try
        {
            // second parsing, with the same Options instance and an invalid command line
            parser.parse(opts, new String[0]);
            fail(""MissingOptionException not thrown"");
        }
        catch (MissingOptionException e)
        {
            // expected
        }
    }",junit.framework.AssertionFailedError: MissingOptionException not thrown
Cli_11,/222043010/omniapr/defects4j/Cli_11_buggy/src/test/org/apache/commons/cli/HelpFormatterTest.java,testPrintOptionWithEmptyArgNameUsage,"    public void testPrintOptionWithEmptyArgNameUsage() {
        Option option = new Option(""f"", true, null);
        option.setArgName("""");
        option.setRequired(true);

        Options options = new Options();
        options.addOption(option);

        StringWriter out = new StringWriter();

        HelpFormatter formatter = new HelpFormatter();
        formatter.printUsage(new PrintWriter(out), 80, ""app"", options);

        assertEquals(""usage: app -f"" + EOL, out.toString());
    }",junit.framework.ComparisonFailure: expected:<usage: app -f[]
Cli_12,/222043010/omniapr/defects4j/Cli_12_buggy/src/test/org/apache/commons/cli/GnuParserTest.java,testShortWithEqual,"    public void testShortWithEqual() throws Exception
    {
        String[] args = new String[] { ""-f=bar"" };

        Options options = new Options();
        options.addOption(OptionBuilder.withLongOpt(""foo"").hasArg().create('f'));

        Parser parser = new GnuParser();
        CommandLine cl = parser.parse(options, args);

        assertEquals(""bar"", cl.getOptionValue(""foo""));
    }",junit.framework.ComparisonFailure: expected:<[]bar> but was:<[=]bar>
Cli_12,/222043010/omniapr/defects4j/Cli_12_buggy/src/test/org/apache/commons/cli/GnuParserTest.java,testLongWithEqualSingleDash,"    public void testLongWithEqualSingleDash() throws Exception
    {
        String[] args = new String[] { ""-foo=bar"" };

        Options options = new Options();
        options.addOption(OptionBuilder.withLongOpt(""foo"").hasArg().create('f'));

        Parser parser = new GnuParser();
        CommandLine cl = parser.parse(options, args);

        assertEquals(""bar"", cl.getOptionValue(""foo""));
    }",junit.framework.ComparisonFailure: expected:<[]bar> but was:<[=]bar>
Cli_12,/222043010/omniapr/defects4j/Cli_12_buggy/src/test/org/apache/commons/cli/GnuParserTest.java,testLongWithEqual,"    public void testLongWithEqual() throws Exception
    {
        String[] args = new String[] { ""--foo=bar"" };

        Options options = new Options();
        options.addOption(OptionBuilder.withLongOpt(""foo"").hasArg().create('f'));

        Parser parser = new GnuParser();
        CommandLine cl = parser.parse(options, args);

        assertEquals(""bar"", cl.getOptionValue(""foo""));
    }",junit.framework.ComparisonFailure: expected:<[]bar> but was:<[=]bar>
Cli_13,/222043010/omniapr/defects4j/Cli_13_buggy/src/test/org/apache/commons/cli2/bug/BugLoopingOptionLookAlikeTest.java,testLoopingOptionLookAlike2,"    public void testLoopingOptionLookAlike2() {
        final ArgumentBuilder abuilder = new ArgumentBuilder();
        final GroupBuilder gbuilder = new GroupBuilder();
        final Argument inputfile_opt = abuilder.withName(""input"").withMinimum(1).withMaximum(1).create();
        final Argument outputfile_opt = abuilder.withName(""output"").withMinimum(1).withMaximum(1).create();
        final Argument targets = new SourceDestArgument(inputfile_opt, outputfile_opt);
        final Group options = gbuilder.withOption(targets).create();
        final Parser parser = new Parser();
        parser.setGroup(options);
        try {
            parser.parse(new String[] { ""testfile.txt"", ""testfile.txt"", ""testfile.txt"", ""testfile.txt"" });
            fail(""OptionException"");
        } catch (OptionException e) {
            assertEquals(""Unexpected testfile.txt while processing "", e.getMessage());
        }
    }","junit.framework.ComparisonFailure: expected:<Unexpected [testfile.txt while processing ]> but was:<Unexpected [value ""testfile.txt"" found while processing  input]>"
Cli_13,/222043010/omniapr/defects4j/Cli_13_buggy/src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,testValidate_WritableFile,"    public void testValidate_WritableFile() {
        // make file readonly
        File file = new File(""src/test/data/readable.txt"");
        file.setReadOnly();

        final Object[] array = new Object[] { ""src/test/data/writable.txt"",
                ""src/test/data/readable.txt"" };
        final List list = Arrays.asList(array);
        final FileValidator validator = FileValidator.getExistingFileInstance();
        validator.setWritable(true);

        assertFalse(""is not a directory validator"", validator.isDirectory());
        assertTrue(""is a file validator"", validator.isFile());
        assertTrue(""is an existing file validator"", validator.isExisting());
        assertFalse(""is not a hidden file validator"", validator.isHidden());
        assertFalse(""is not a readable file validator"", validator.isReadable());
        assertTrue(""is a writable file validator"", validator.isWritable());

        try {
            validator.validate(list);
            fail(""InvalidArgumentException"");
        } catch (InvalidArgumentException e) {
            assertEquals(""src/test/data/readable.txt"", e.getMessage());
        }
    }",junit.framework.AssertionFailedError: InvalidArgumentException
Cli_14,/222043010/omniapr/defects4j/Cli_14_buggy/src/test/org/apache/commons/cli2/bug/BugCLI144Test.java,testFileValidator,"	public void testFileValidator() {
		final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
        final ArgumentBuilder abuilder = new ArgumentBuilder();
        final GroupBuilder gbuilder = new GroupBuilder();
        DefaultOption fileNameOption = obuilder.withShortName(""f"")
                .withLongName(""file-name"").withRequired(true).withDescription(
                        ""name of an existing file"").withArgument(
                        abuilder.withName(""file-name"").withValidator(
                                FileValidator.getExistingFileInstance())
                                .create()).create();
        Group options = gbuilder.withName(""options"").withOption(fileNameOption)
                .create();
        Parser parser = new Parser();
        parser.setHelpTrigger(""--help"");
        parser.setGroup(options);

        final String fileName = ""src/test/org/apache/commons/cli2/bug/BugCLI144Test.java"";
        CommandLine cl = parser
                .parseAndHelp(new String[] { ""--file-name"", fileName });
        assertNotNull(cl);
        assertEquals(""Wrong file"", new File(fileName), cl.getValue(fileNameOption));
	}",java.lang.ClassCastException: java.io.File cannot be cast to java.lang.String
Cli_14,/222043010/omniapr/defects4j/Cli_14_buggy/src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,testValidate_WritableFile,"    public void testValidate_WritableFile() {
        // make file readonly
        File file = new File(""src/test/data/readable.txt"");
        file.setReadOnly();

        final Object[] array = new Object[] { ""src/test/data/writable.txt"",
                ""src/test/data/readable.txt"" };
        final List list = Arrays.asList(array);
        final FileValidator validator = FileValidator.getExistingFileInstance();
        validator.setWritable(true);

        assertFalse(""is not a directory validator"", validator.isDirectory());
        assertTrue(""is a file validator"", validator.isFile());
        assertTrue(""is an existing file validator"", validator.isExisting());
        assertFalse(""is not a hidden file validator"", validator.isHidden());
        assertFalse(""is not a readable file validator"", validator.isReadable());
        assertTrue(""is a writable file validator"", validator.isWritable());

        try {
            validator.validate(list);
            fail(""InvalidArgumentException"");
        } catch (InvalidArgumentException e) {
            assertEquals(""src/test/data/readable.txt"", e.getMessage());
        }
    }",junit.framework.AssertionFailedError: InvalidArgumentException
Cli_15,/222043010/omniapr/defects4j/Cli_15_buggy/src/test/org/apache/commons/cli2/bug/BugCLI158Test.java,testSingleOptionSingleArgument,"    public void testSingleOptionSingleArgument() throws Exception {
        Parser parser = createDefaultValueParser(new String[]{""100"", ""1000""});
        String enteredValue1 = ""1"";
        String[] args = new String[]{""-b"", enteredValue1};
        CommandLine cl = parser.parse(args);
        CommandLine cmd = cl;
        assertNotNull(cmd);
        List b = cmd.getValues(""-b"");
        assertEquals(""["" + enteredValue1 + "", 1000]"", b + """");
    }","junit.framework.ComparisonFailure: expected:<[1[, 1000]]> but was:<[1[]]>"
Cli_15,/222043010/omniapr/defects4j/Cli_15_buggy/src/test/org/apache/commons/cli2/bug/BugCLI158Test.java,testSingleOptionMaximumNumberOfArgument,"    public void testSingleOptionMaximumNumberOfArgument() throws Exception {
        String[] args = new String[]{""-b"", ""1"", ""2""};
        final ArgumentBuilder abuilder = new ArgumentBuilder();
        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
        final GroupBuilder gbuilder = new GroupBuilder();

        DefaultOption bOption = obuilder.withShortName(""b"")
                .withLongName(""b"")
                .withArgument(abuilder.withName(""b"")
                        .withMinimum(2)
                        .withMaximum(4)
                        .withDefault(""100"")
                        .withDefault(""1000"")
                        .withDefault(""10000"")
                        .create())
                .create();

        Group options = gbuilder
                .withName(""options"")
                .withOption(bOption)
                .create();

        Parser parser = new Parser();
        parser.setHelpTrigger(""--help"");
        parser.setGroup(options);
        CommandLine cl = parser.parse(args);
        CommandLine cmd = cl;
        assertNotNull(cmd);
        List b = cmd.getValues(""-b"");
        assertEquals(""[1, 2, 10000]"", b + """");
    }","junit.framework.ComparisonFailure: expected:<[1[, 1000]]> but was:<[1[]]>"
Cli_15,/222043010/omniapr/defects4j/Cli_15_buggy/src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,testValidate_WritableFile,"    public void testValidate_WritableFile() {
        // make file readonly
        File file = new File(""src/test/data/readable.txt"");
        file.setReadOnly();

        final Object[] array = new Object[] { ""src/test/data/writable.txt"",
                ""src/test/data/readable.txt"" };
        final List list = Arrays.asList(array);
        final FileValidator validator = FileValidator.getExistingFileInstance();
        validator.setWritable(true);

        assertFalse(""is not a directory validator"", validator.isDirectory());
        assertTrue(""is a file validator"", validator.isFile());
        assertTrue(""is an existing file validator"", validator.isExisting());
        assertFalse(""is not a hidden file validator"", validator.isHidden());
        assertFalse(""is not a readable file validator"", validator.isReadable());
        assertTrue(""is a writable file validator"", validator.isWritable());

        try {
            validator.validate(list);
            fail(""InvalidArgumentException"");
        } catch (InvalidArgumentException e) {
            assertEquals(""src/test/data/readable.txt"", e.getMessage());
        }
    }",junit.framework.AssertionFailedError: InvalidArgumentException
Cli_16,/222043010/omniapr/defects4j/Cli_16_buggy/src/test/org/apache/commons/cli2/bug/BugCLI123Test.java,testMultipleChildOptions,"    public void testMultipleChildOptions() throws OptionException {
        CommandLine cl = parser.parse(new String[] { ""--child"", ""test"",
                ""--sub"", ""anotherTest"" });
        assertTrue(""Child option not found"", cl.hasOption(childOption1));
        assertEquals(""Wrong value for option"", ""test"", cl
                .getValue(childOption1));
        assertTrue(""Sub option not found"", cl.hasOption(childOption2));
        assertEquals(""Wrong value for sub option"", ""anotherTest"", cl
                .getValue(childOption2));
        assertTrue(""Child group not found"", cl.hasOption(childGroup));
    }",org.apache.commons.cli2.OptionException: Missing option parentOptions
Cli_16,/222043010/omniapr/defects4j/Cli_16_buggy/src/test/org/apache/commons/cli2/bug/BugCLI123Test.java,testParentOptionAndChildOption,"    public void testParentOptionAndChildOption() throws OptionException {
        try {
            parser.parse(new String[] { ""--parent"", ""error"", ""--child"",
                    ""exception"" });
            fail(""Maximum restriction for parent not verified!"");
        } catch (OptionException oex) {
            // ok
        }
    }",org.apache.commons.cli2.OptionException: Missing option parentOptions
Cli_16,/222043010/omniapr/defects4j/Cli_16_buggy/src/test/org/apache/commons/cli2/bug/BugCLI123Test.java,testSingleChildOption,"    public void testSingleChildOption() throws OptionException {
        CommandLine cl = parser.parse(new String[] { ""--child"", ""test"" });
        assertTrue(""Child option not found"", cl.hasOption(childOption1));
        assertEquals(""Wrong value for option"", ""test"", cl
                .getValue(childOption1));
        assertTrue(""Child group not found"", cl.hasOption(childGroup));
    }",org.apache.commons.cli2.OptionException: Missing option parentOptions
Cli_16,/222043010/omniapr/defects4j/Cli_16_buggy/src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,testValidate_WritableFile,"    public void testValidate_WritableFile() {
        // make file readonly
        File file = new File(""src/test/data/readable.txt"");
        file.setReadOnly();

        final Object[] array = new Object[] { ""src/test/data/writable.txt"",
                ""src/test/data/readable.txt"" };
        final List list = Arrays.asList(array);
        final FileValidator validator = FileValidator.getExistingFileInstance();
        validator.setWritable(true);

        assertFalse(""is not a directory validator"", validator.isDirectory());
        assertTrue(""is a file validator"", validator.isFile());
        assertTrue(""is an existing file validator"", validator.isExisting());
        assertFalse(""is not a hidden file validator"", validator.isHidden());
        assertFalse(""is not a readable file validator"", validator.isReadable());
        assertTrue(""is a writable file validator"", validator.isWritable());

        try {
            validator.validate(list);
            fail(""InvalidArgumentException"");
        } catch (InvalidArgumentException e) {
            assertEquals(""src/test/data/readable.txt"", e.getMessage());
        }
    }",junit.framework.AssertionFailedError: InvalidArgumentException
Cli_17,/222043010/omniapr/defects4j/Cli_17_buggy/src/test/org/apache/commons/cli/PosixParserTest.java,testStopBursting,"    public void testStopBursting() throws Exception
    {
        String[] args = new String[] { ""-azc"" };

        CommandLine cl = parser.parse(options, args, true);
        assertTrue( ""Confirm -a is set"", cl.hasOption(""a"") );
        assertFalse( ""Confirm -c is not set"", cl.hasOption(""c"") );

        assertTrue( ""Confirm  1 extra arg: "" + cl.getArgList().size(), cl.getArgList().size() == 1);
        assertTrue(cl.getArgList().contains(""zc""));
    }",junit.framework.AssertionFailedError: Confirm  1 extra arg: 2
Cli_18,/222043010/omniapr/defects4j/Cli_18_buggy/src/test/org/apache/commons/cli/PosixParserTest.java,testStop2,"    public void testStop2() throws Exception
    {
        String[] args = new String[]{""-z"",
                                     ""-a"",
                                     ""-btoast""};

        CommandLine cl = parser.parse(options, args, true);
        assertFalse(""Confirm -a is not set"", cl.hasOption(""a""));
        assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(), cl.getArgList().size() == 3);
    }",junit.framework.AssertionFailedError: Confirm -a is not set
Cli_19,/222043010/omniapr/defects4j/Cli_19_buggy/src/test/org/apache/commons/cli/PosixParserTest.java,testUnrecognizedOption2,"    public void testUnrecognizedOption2() throws Exception
    {
        String[] args = new String[] { ""-z"", ""-abtoast"", ""foo"", ""bar"" };

        try
        {
            parser.parse(options, args);
            fail(""UnrecognizedOptionException wasn't thrown"");
        }
        catch (UnrecognizedOptionException e)
        {
            assertEquals(""-z"", e.getOption());
        }
    }",junit.framework.AssertionFailedError: UnrecognizedOptionException wasn't thrown
Cli_20,/222043010/omniapr/defects4j/Cli_20_buggy/src/test/org/apache/commons/cli/PosixParserTest.java,testStop3,"    public void testStop3() throws Exception
    {
        String[] args = new String[]{""--zop==1"",
                                     ""-abtoast"",
                                     ""--b=bar""};

        CommandLine cl = parser.parse(options, args, true);

        assertFalse(""Confirm -a is not set"", cl.hasOption(""a""));
        assertFalse(""Confirm -b is not set"", cl.hasOption(""b""));
        assertTrue(""Confirm  3 extra args: "" + cl.getArgList().size(), cl.getArgList().size() == 3);
    }",junit.framework.AssertionFailedError: Confirm  3 extra args: 7
Cli_21,/222043010/omniapr/defects4j/Cli_21_buggy/src/test/org/apache/commons/cli2/bug/BugCLI150Test.java,testNegativeNumber,"    public void testNegativeNumber() throws OptionException
    {
        final DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
        final ArgumentBuilder aBuilder = new ArgumentBuilder();
        final GroupBuilder gBuilder = new GroupBuilder();

        final Argument numArg = aBuilder.withValidator(
                NumberValidator.getNumberInstance()).withMinimum(1)
                .withMaximum(1).create();
        final Option numOpt = oBuilder.withLongName(""num"").withArgument(numArg)
                .create();
        final Group options = gBuilder.withOption(numOpt).create();

        final Parser parser = new Parser();
        parser.setGroup(options);

        CommandLine cl = parser.parse(new String[] {
                ""--num"", ""-42""
        });
        Number num = (Number) cl.getValue(numOpt);
        assertEquals(""Wrong option value"", -42, num.intValue());
    }",org.apache.commons.cli2.OptionException: Unexpected -42 while processing --num
Cli_21,/222043010/omniapr/defects4j/Cli_21_buggy/src/test/org/apache/commons/cli2/validation/FileValidatorTest.java,testValidate_WritableFile,"    public void testValidate_WritableFile() {
        // make file readonly
        File file = new File(""src/test/data/readable.txt"");
        file.setReadOnly();

        final Object[] array = new Object[] { ""src/test/data/writable.txt"",
                ""src/test/data/readable.txt"" };
        final List list = Arrays.asList(array);
        final FileValidator validator = FileValidator.getExistingFileInstance();
        validator.setWritable(true);

        assertFalse(""is not a directory validator"", validator.isDirectory());
        assertTrue(""is a file validator"", validator.isFile());
        assertTrue(""is an existing file validator"", validator.isExisting());
        assertFalse(""is not a hidden file validator"", validator.isHidden());
        assertFalse(""is not a readable file validator"", validator.isReadable());
        assertTrue(""is a writable file validator"", validator.isWritable());

        try {
            validator.validate(list);
            fail(""InvalidArgumentException"");
        } catch (InvalidArgumentException e) {
            assertEquals(""src/test/data/readable.txt"", e.getMessage());
        }
    }",junit.framework.AssertionFailedError: InvalidArgumentException
Cli_22,/222043010/omniapr/defects4j/Cli_22_buggy/src/test/org/apache/commons/cli/ApplicationTest.java,testGroovy,"    public void testGroovy() throws Exception {
        Options options = new Options();

        options.addOption(
            OptionBuilder.withLongOpt(""define"").
                withDescription(""define a system property"").
                hasArg(true).
                withArgName(""name=value"").
                create('D'));
        options.addOption(
            OptionBuilder.hasArg(false)
            .withDescription(""usage information"")
            .withLongOpt(""help"")
            .create('h'));
        options.addOption(
            OptionBuilder.hasArg(false)
            .withDescription(""debug mode will print out full stack traces"")
            .withLongOpt(""debug"")
            .create('d'));
        options.addOption(
            OptionBuilder.hasArg(false)
            .withDescription(""display the Groovy and JVM versions"")
            .withLongOpt(""version"")
            .create('v'));
        options.addOption(
            OptionBuilder.withArgName(""charset"")
            .hasArg()
            .withDescription(""specify the encoding of the files"")
            .withLongOpt(""encoding"")
            .create('c'));
        options.addOption(
            OptionBuilder.withArgName(""script"")
            .hasArg()
            .withDescription(""specify a command line script"")
            .create('e'));
        options.addOption(
            OptionBuilder.withArgName(""extension"")
            .hasOptionalArg()
            .withDescription(""modify files in place; create backup if extension is given (e.g. \'.bak\')"")
            .create('i'));
        options.addOption(
            OptionBuilder.hasArg(false)
            .withDescription(""process files line by line using implicit 'line' variable"")
            .create('n'));
        options.addOption(
            OptionBuilder.hasArg(false)
            .withDescription(""process files line by line and print result (see also -n)"")
            .create('p'));
        options.addOption(
            OptionBuilder.withArgName(""port"")
            .hasOptionalArg()
            .withDescription(""listen on a port and process inbound lines"")
            .create('l'));
        options.addOption(
            OptionBuilder.withArgName(""splitPattern"")
            .hasOptionalArg()
            .withDescription(""split lines using splitPattern (default '\\s') using implicit 'split' variable"")
            .withLongOpt(""autosplit"")
            .create('a'));

        Parser parser = new PosixParser();
        CommandLine line = parser.parse(options, new String[] { ""-e"", ""println 'hello'"" }, true);

        assertTrue(line.hasOption('e'));
        assertEquals(""println 'hello'"", line.getOptionValue('e'));
    }",junit.framework.ComparisonFailure: expected:<[println 'hello']> but was:<[--]>
Cli_23,/222043010/omniapr/defects4j/Cli_23_buggy/src/test/org/apache/commons/cli/bug/BugCLI162Test.java,testInfiniteLoop,"    public void testInfiniteLoop() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.setWidth(20);
        formatter.printHelp(""app"", options); // used to hang & crash
    }",java.lang.RuntimeException: Text too long for line - throwing exception to avoid infinite loop [CLI-162]:              looooong description
Cli_23,/222043010/omniapr/defects4j/Cli_23_buggy/src/test/org/apache/commons/cli/bug/BugCLI162Test.java,testPrintHelpLongLines,"    public void testPrintHelpLongLines() throws ParseException, IOException {
        // Constants used for options
        final String OPT = ""-"";

        final String OPT_COLUMN_NAMES = ""l"";

        final String OPT_CONNECTION = ""c"";

        final String OPT_DESCRIPTION = ""e"";

        final String OPT_DRIVER = ""d"";

        final String OPT_DRIVER_INFO = ""n"";

        final String OPT_FILE_BINDING = ""b"";

        final String OPT_FILE_JDBC = ""j"";

        final String OPT_FILE_SFMD = ""f"";

        final String OPT_HELP = ""h"";

        final String OPT_HELP_ = ""help"";

        final String OPT_INTERACTIVE = ""i"";

        final String OPT_JDBC_TO_SFMD = ""2"";

        final String OPT_JDBC_TO_SFMD_L = ""jdbc2sfmd"";

        final String OPT_METADATA = ""m"";

        final String OPT_PARAM_MODES_INT = ""o"";

        final String OPT_PARAM_MODES_NAME = ""O"";

        final String OPT_PARAM_NAMES = ""a"";

        final String OPT_PARAM_TYPES_INT = ""y"";

        final String OPT_PARAM_TYPES_NAME = ""Y"";

        final String OPT_PASSWORD = ""p"";

        final String OPT_PASSWORD_L = ""password"";

        final String OPT_SQL = ""s"";

        final String OPT_SQL_L = ""sql"";

        final String OPT_SQL_SPLIT_DEFAULT = ""###"";

        final String OPT_SQL_SPLIT_L = ""splitSql"";

        final String OPT_STACK_TRACE = ""t"";

        final String OPT_TIMING = ""g"";

        final String OPT_TRIM_L = ""trim"";

        final String OPT_USER = ""u"";

        final String OPT_WRITE_TO_FILE = ""w"";
        
        final String _PMODE_IN = ""IN"";

        final String _PMODE_INOUT = ""INOUT"";

        final String _PMODE_OUT = ""OUT"";
        
        final String _PMODE_UNK = ""Unknown"";
        
        final String PMODES = _PMODE_IN + "", "" + _PMODE_INOUT + "", "" + _PMODE_OUT + "", "" + _PMODE_UNK;
        
        // Options build
        Options commandLineOptions;
        commandLineOptions = new Options();
        commandLineOptions.addOption(OPT_HELP, OPT_HELP_, false, ""Prints help and quits"");
        commandLineOptions.addOption(OPT_DRIVER, ""driver"", true, ""JDBC driver class name"");
        commandLineOptions.addOption(OPT_DRIVER_INFO, ""info"", false, ""Prints driver information and properties. If ""
            + OPT
            + OPT_CONNECTION
            + "" is not specified, all drivers on the classpath are displayed."");
        commandLineOptions.addOption(OPT_CONNECTION, ""url"", true, ""Connection URL"");
        commandLineOptions.addOption(OPT_USER, ""user"", true, ""A database user name"");
        commandLineOptions
                .addOption(
                        OPT_PASSWORD,
                        OPT_PASSWORD_L,
                        true,
                        ""The database password for the user specified with the ""
                            + OPT
                            + OPT_USER
                            + "" option. You can obfuscate the password with org.mortbay.jetty.security.Password, see http://docs.codehaus.org/display/JETTY/Securing+Passwords"");
        commandLineOptions.addOption(OPT_SQL, OPT_SQL_L, true, ""Runs SQL or {call stored_procedure(?, ?)} or {?=call function(?, ?)}"");
        commandLineOptions.addOption(OPT_FILE_SFMD, ""sfmd"", true, ""Writes a SFMD file for the given SQL"");
        commandLineOptions.addOption(OPT_FILE_BINDING, ""jdbc"", true, ""Writes a JDBC binding node file for the given SQL"");
        commandLineOptions.addOption(OPT_FILE_JDBC, ""node"", true, ""Writes a JDBC node file for the given SQL (internal debugging)"");
        commandLineOptions.addOption(OPT_WRITE_TO_FILE, ""outfile"", true, ""Writes the SQL output to the given file"");
        commandLineOptions.addOption(OPT_DESCRIPTION, ""description"", true,
                ""SFMD description. A default description is used if omited. Example: "" + OPT + OPT_DESCRIPTION + "" \""Runs such and such\"""");
        commandLineOptions.addOption(OPT_INTERACTIVE, ""interactive"", false,
                ""Runs in interactive mode, reading and writing from the console, 'go' or '/' sends a statement"");
        commandLineOptions.addOption(OPT_TIMING, ""printTiming"", false, ""Prints timing information"");
        commandLineOptions.addOption(OPT_METADATA, ""printMetaData"", false, ""Prints metadata information"");
        commandLineOptions.addOption(OPT_STACK_TRACE, ""printStack"", false, ""Prints stack traces on errors"");
        Option option = new Option(OPT_COLUMN_NAMES, ""columnNames"", true, ""Column XML names; default names column labels. Example: ""
            + OPT
            + OPT_COLUMN_NAMES
            + "" \""cname1 cname2\"""");
        commandLineOptions.addOption(option);
        option = new Option(OPT_PARAM_NAMES, ""paramNames"", true, ""Parameter XML names; default names are param1, param2, etc. Example: ""
            + OPT
            + OPT_PARAM_NAMES
            + "" \""pname1 pname2\"""");
        commandLineOptions.addOption(option);
        //
        OptionGroup pOutTypesOptionGroup = new OptionGroup();
        String pOutTypesOptionGroupDoc = OPT + OPT_PARAM_TYPES_INT + "" and "" + OPT + OPT_PARAM_TYPES_NAME + "" are mutually exclusive."";
        final String typesClassName = Types.class.getName();
        option = new Option(OPT_PARAM_TYPES_INT, ""paramTypes"", true, ""Parameter types from ""
            + typesClassName
            + "". ""
            + pOutTypesOptionGroupDoc
            + "" Example: ""
            + OPT
            + OPT_PARAM_TYPES_INT
            + "" \""-10 12\"""");
        commandLineOptions.addOption(option);
        option = new Option(OPT_PARAM_TYPES_NAME, ""paramTypeNames"", true, ""Parameter ""
            + typesClassName
            + "" names. ""
            + pOutTypesOptionGroupDoc
            + "" Example: ""
            + OPT
            + OPT_PARAM_TYPES_NAME
            + "" \""CURSOR VARCHAR\"""");
        commandLineOptions.addOption(option);
        commandLineOptions.addOptionGroup(pOutTypesOptionGroup);
        //
        OptionGroup modesOptionGroup = new OptionGroup();
        String modesOptionGroupDoc = OPT + OPT_PARAM_MODES_INT + "" and "" + OPT + OPT_PARAM_MODES_NAME + "" are mutually exclusive."";
        option = new Option(OPT_PARAM_MODES_INT, ""paramModes"", true, ""Parameters modes (""
            + ParameterMetaData.parameterModeIn
            + ""=IN, ""
            + ParameterMetaData.parameterModeInOut
            + ""=INOUT, ""
            + ParameterMetaData.parameterModeOut
            + ""=OUT, ""
            + ParameterMetaData.parameterModeUnknown
            + ""=Unknown""
            + ""). ""
            + modesOptionGroupDoc
            + "" Example for 2 parameters, OUT and IN: ""
            + OPT
            + OPT_PARAM_MODES_INT
            + "" \""""
            + ParameterMetaData.parameterModeOut
            + "" ""
            + ParameterMetaData.parameterModeIn
            + ""\"""");
        modesOptionGroup.addOption(option);
        option = new Option(OPT_PARAM_MODES_NAME, ""paramModeNames"", true, ""Parameters mode names (""
            + PMODES
            + ""). ""
            + modesOptionGroupDoc
            + "" Example for 2 parameters, OUT and IN: ""
            + OPT
            + OPT_PARAM_MODES_NAME
            + "" \""""
            + _PMODE_OUT
            + "" ""
            + _PMODE_IN
            + ""\"""");
        modesOptionGroup.addOption(option);
        commandLineOptions.addOptionGroup(modesOptionGroup);
        option = new Option(null, OPT_TRIM_L, true,
                ""Trims leading and trailing spaces from all column values. Column XML names can be optionally specified to set which columns to trim."");
        option.setOptionalArg(true);
        commandLineOptions.addOption(option);
        option = new Option(OPT_JDBC_TO_SFMD, OPT_JDBC_TO_SFMD_L, true,
                ""Converts the JDBC file in the first argument to an SMFD file specified in the second argument."");
        option.setArgs(2);
        commandLineOptions.addOption(option);
        this.testPrintHelp(commandLineOptions);
    }",java.lang.RuntimeException: Text too long for line - throwing exception to avoid infinite loop [CLI-162]:              looooong description
Cli_24,/222043010/omniapr/defects4j/Cli_24_buggy/src/test/org/apache/commons/cli/bug/BugCLI162Test.java,testLongLineChunkingIndentIgnored,"    public void testLongLineChunkingIndentIgnored() throws ParseException, IOException {
        Options options = new Options();
        options.addOption(""x"", ""extralongarg"", false, ""This description is Long."" );
        HelpFormatter formatter = new HelpFormatter();
        StringWriter sw = new StringWriter();
        formatter.printHelp(new PrintWriter(sw), 22, this.getClass().getName(), ""Header"", options, 0, 5, ""Footer"");
        String expected = ""usage:\n"" +
                          ""       org.apache.comm\n"" +
                          ""       ons.cli.bug.Bug\n"" +
                          ""       CLI162Test\n"" +
                          ""Header\n"" +
                          ""-x,--extralongarg\n"" +
                          ""                     T\n"" +
                          ""                     h\n"" +
                          ""                     i\n"" +
                          ""                     s\n"" +
                          ""                     d\n"" +
                          ""                     e\n"" +
                          ""                     s\n"" +
                          ""                     c\n"" +
                          ""                     r\n"" +
                          ""                     i\n"" +
                          ""                     p\n"" +
                          ""                     t\n"" +
                          ""                     i\n"" +
                          ""                     o\n"" +
                          ""                     n\n"" +
                          ""                     i\n"" +
                          ""                     s\n"" +
                          ""                     L\n"" +
                          ""                     o\n"" +
                          ""                     n\n"" +
                          ""                     g\n"" +
                          ""                     .\n"" +
                          ""Footer\n"";
        assertEquals( ""Long arguments did not split as expected"", expected, sw.toString() );
    }",java.lang.IllegalStateException: Total width is less than the width of the argument and indent - no room for the description
Cli_25,/222043010/omniapr/defects4j/Cli_25_buggy/src/test/org/apache/commons/cli/bug/BugCLI162Test.java,testLongLineChunkingIndentIgnored,"    public void testLongLineChunkingIndentIgnored() throws ParseException, IOException {
        Options options = new Options();
        options.addOption(""x"", ""extralongarg"", false, ""This description is Long."" );
        HelpFormatter formatter = new HelpFormatter();
        StringWriter sw = new StringWriter();
        formatter.printHelp(new PrintWriter(sw), 22, this.getClass().getName(), ""Header"", options, 0, 5, ""Footer"");
        System.err.println(sw.toString());
        String expected = ""usage:\n"" +
                          ""       org.apache.comm\n"" +
                          ""       ons.cli.bug.Bug\n"" +
                          ""       CLI162Test\n"" +
                          ""Header\n"" +
                          ""-x,--extralongarg\n"" +
                          "" This description is\n"" +
                          "" Long.\n"" +
                          ""Footer\n"";
        assertEquals( ""Long arguments did not split as expected"", expected, sw.toString() );
    }",junit.framework.ComparisonFailure: Long arguments did not split as expected expected:<...
Cli_26,/222043010/omniapr/defects4j/Cli_26_buggy/src/test/org/apache/commons/cli/OptionBuilderTest.java,testBuilderIsResettedAlways,"    public void testBuilderIsResettedAlways() {
        try
        {
            OptionBuilder.withDescription(""JUnit"").create('""');
            fail(""IllegalArgumentException expected"");
        }
        catch (IllegalArgumentException e)
        {
            // expected
        }
        assertNull(""we inherited a description"", OptionBuilder.create('x').getDescription());

        try
        {
            OptionBuilder.withDescription(""JUnit"").create();
            fail(""IllegalArgumentException expected"");
        }
        catch (IllegalArgumentException e)
        {
            // expected
        }
        assertNull(""we inherited a description"", OptionBuilder.create('x').getDescription());
    }",junit.framework.AssertionFailedError: we inherited a description
Cli_28,/222043010/omniapr/defects4j/Cli_28_buggy/src/test/org/apache/commons/cli/ValueTest.java,testPropertyOptionFlags,"    public void testPropertyOptionFlags() throws Exception
    {
        Properties properties = new Properties();
        properties.setProperty( ""a"", ""true"" );
        properties.setProperty( ""c"", ""yes"" );
        properties.setProperty( ""e"", ""1"" );

        Parser parser = new PosixParser();

        CommandLine cmd = parser.parse(opts, null, properties);
        assertTrue( cmd.hasOption(""a"") );
        assertTrue( cmd.hasOption(""c"") );
        assertTrue( cmd.hasOption(""e"") );


        properties = new Properties();
        properties.setProperty( ""a"", ""false"" );
        properties.setProperty( ""c"", ""no"" );
        properties.setProperty( ""e"", ""0"" );

        cmd = parser.parse(opts, null, properties);
        assertTrue( !cmd.hasOption(""a"") );
        assertTrue( !cmd.hasOption(""c"") );
        assertTrue( cmd.hasOption(""e"") ); // this option accepts as argument


        properties = new Properties();
        properties.setProperty( ""a"", ""TRUE"" );
        properties.setProperty( ""c"", ""nO"" );
        properties.setProperty( ""e"", ""TrUe"" );

        cmd = parser.parse(opts, null, properties);
        assertTrue( cmd.hasOption(""a"") );
        assertTrue( !cmd.hasOption(""c"") );
        assertTrue( cmd.hasOption(""e"") );

        
        properties = new Properties();
        properties.setProperty( ""a"", ""just a string"" );
        properties.setProperty( ""e"", """" );

        cmd = parser.parse(opts, null, properties);
        assertTrue( !cmd.hasOption(""a"") );
        assertTrue( !cmd.hasOption(""c"") );
        assertTrue( cmd.hasOption(""e"") );
    }",junit.framework.AssertionFailedError
Cli_29,/222043010/omniapr/defects4j/Cli_29_buggy/src/test/org/apache/commons/cli/UtilTest.java,testStripLeadingAndTrailingQuotes,"    public void testStripLeadingAndTrailingQuotes()
    {
        assertEquals(""foo"", Util.stripLeadingAndTrailingQuotes(""\""foo\""""));
        assertEquals(""foo \""bar\"""", Util.stripLeadingAndTrailingQuotes(""foo \""bar\""""));
        assertEquals(""\""foo\"" bar"", Util.stripLeadingAndTrailingQuotes(""\""foo\"" bar""));
        assertEquals(""\""foo\"" and \""bar\"""", Util.stripLeadingAndTrailingQuotes(""\""foo\"" and \""bar\""""));
        assertEquals(""\"""", Util.stripLeadingAndTrailingQuotes(""\""""));
    }","junit.framework.ComparisonFailure: expected:<foo ""bar[""]> but was:<foo ""bar[]>"
Cli_30,/222043010/omniapr/defects4j/Cli_30_buggy/src/test/java/org/apache/commons/cli/OptionGroupTest.java,testTwoOptionsFromGroupWithProperties,"    public void testTwoOptionsFromGroupWithProperties() throws Exception
    {
        String[] args = new String[] { ""-f"" };
        
        Properties properties = new Properties();
        properties.put(""d"", ""true"");
        
        CommandLine cl = parser.parse( _options, args, properties);
        assertTrue(cl.hasOption(""f""));
        assertTrue(!cl.hasOption(""d""));
    }",org.apache.commons.cli.AlreadySelectedException: The option 'd' was specified but an option from this group has already been selected: 'f'
Cli_31,/222043010/omniapr/defects4j/Cli_31_buggy/src/test/java/org/apache/commons/cli/HelpFormatterTest.java,testDefaultArgName,"    public void testDefaultArgName()
    {
        Option option = OptionBuilder.hasArg().isRequired().create(""f"");
        
        Options options = new Options();
        options.addOption(option);
        
        StringWriter out = new StringWriter();

        HelpFormatter formatter = new HelpFormatter();
        formatter.setArgName(""argument"");
        formatter.printUsage(new PrintWriter(out), 80, ""app"", options);

        assertEquals(""usage: app -f <argument>"" + EOL, out.toString());
    }",junit.framework.ComparisonFailure: expected:<usage: app -f <arg[ument]>
Cli_32,/222043010/omniapr/defects4j/Cli_32_buggy/src/test/java/org/apache/commons/cli/HelpFormatterTest.java,testRenderWrappedTextWordCut,"    public void testRenderWrappedTextWordCut()
    {
        int width = 7;
        int padding = 0;
        String text = ""Thisisatest."";
        String expected = ""Thisisa"" + EOL + 
                          ""test."";
        
        StringBuffer sb = new StringBuffer();
        new HelpFormatter().renderWrappedText(sb, width, padding, text);
        assertEquals(""cut and wrap"", expected, sb.toString());
    }",java.lang.StringIndexOutOfBoundsException: String index out of range: 12
Cli_32,/222043010/omniapr/defects4j/Cli_32_buggy/src/test/java/org/apache/commons/cli/HelpFormatterTest.java,testFindWrapPos,"    public void testFindWrapPos() throws Exception
    {
        HelpFormatter hf = new HelpFormatter();

        String text = ""This is a test."";
        // text width should be max 8; the wrap position is 7
        assertEquals(""wrap position"", 7, hf.findWrapPos(text, 8, 0));
        
        // starting from 8 must give -1 - the wrap pos is after end
        assertEquals(""wrap position 2"", -1, hf.findWrapPos(text, 8, 8));
        
        // words longer than the width are cut
        text = ""aaaa aa"";
        assertEquals(""wrap position 3"", 3, hf.findWrapPos(text, 3, 0));
        
        // last word length is equal to the width
        text = ""aaaaaa aaaaaa"";
        assertEquals(""wrap position 4"", 6, hf.findWrapPos(text, 6, 0));
        assertEquals(""wrap position 4"", -1, hf.findWrapPos(text, 6, 7));
    }",java.lang.StringIndexOutOfBoundsException: String index out of range: 12
Cli_33,/222043010/omniapr/defects4j/Cli_33_buggy/src/test/java/org/apache/commons/cli/HelpFormatterTest.java,testIndentedHeaderAndFooter,"    public void testIndentedHeaderAndFooter()
    {
        // related to CLI-207
        Options options = new Options();
        HelpFormatter formatter = new HelpFormatter();
        String header = ""  Header1\n  Header2"";
        String footer = ""  Footer1\n  Footer2"";
        StringWriter out = new StringWriter();
        formatter.printHelp(new PrintWriter(out), 80, ""foobar"", header, options, 2, 2, footer, true);

        assertEquals(
                ""usage: foobar"" + EOL +
                ""  Header1"" + EOL +
                ""  Header2"" + EOL +
                """" + EOL +
                ""  Footer1"" + EOL +
                ""  Footer2"" + EOL
                , out.toString());
    }",junit.framework.ComparisonFailure: expected:<...e: foobar
Cli_34,/222043010/omniapr/defects4j/Cli_34_buggy/src/test/java/org/apache/commons/cli/CommandLineTest.java,testGetParsedOptionValue,"    public void testGetParsedOptionValue() throws Exception {
        Options options = new Options();
        options.addOption(OptionBuilder.hasArg().withType(Number.class).create(""i""));
        options.addOption(OptionBuilder.hasArg().create(""f""));
        
        CommandLineParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(options, new String[] { ""-i"", ""123"", ""-f"", ""foo"" });
        
        assertEquals(123, ((Number) cmd.getParsedOptionValue(""i"")).intValue());
        assertEquals(""foo"", cmd.getParsedOptionValue(""f""));
    }",junit.framework.AssertionFailedError: expected:<foo> but was:<null>
Cli_34,/222043010/omniapr/defects4j/Cli_34_buggy/src/test/java/org/apache/commons/cli/OptionBuilderTest.java,testTwoCompleteOptions,"    public void testTwoCompleteOptions( ) {
        Option simple = OptionBuilder.withLongOpt( ""simple option"")
                                     .hasArg( )
                                     .isRequired( )
                                     .hasArgs( )
                                     .withType( Float.class )
                                     .withDescription( ""this is a simple option"" )
                                     .create( 's' );

        assertEquals( ""s"", simple.getOpt() );
        assertEquals( ""simple option"", simple.getLongOpt() );
        assertEquals( ""this is a simple option"", simple.getDescription() );
        assertEquals( simple.getType(), Float.class );
        assertTrue( simple.hasArg() );
        assertTrue( simple.isRequired() );
        assertTrue( simple.hasArgs() );

        simple = OptionBuilder.withLongOpt( ""dimple option"")
                              .hasArg( )
                              .withDescription( ""this is a dimple option"" )
                              .create( 'd' );

        assertEquals( ""d"", simple.getOpt() );
        assertEquals( ""dimple option"", simple.getLongOpt() );
        assertEquals( ""this is a dimple option"", simple.getDescription() );
        assertEquals( String.class, simple.getType() );
        assertTrue( simple.hasArg() );
        assertTrue( !simple.isRequired() );
        assertTrue( !simple.hasArgs() );
    }",junit.framework.AssertionFailedError: expected:<class java.lang.String> but was:<null>
Cli_35,/222043010/omniapr/defects4j/Cli_35_buggy/src/test/java/org/apache/commons/cli/bug/BugCLI252Test.java,testExactOptionNameMatch,"    public void testExactOptionNameMatch() throws ParseException {
        new DefaultParser().parse(getOptions(), new String[]{""--prefix""});
    }","org.apache.commons.cli.AmbiguousOptionException: Ambiguous option: '--prefix'  (could be: 'prefix', 'prefixplusplus')"
Cli_36,/222043010/omniapr/defects4j/Cli_36_buggy/src/test/java/org/apache/commons/cli/bug/BugCLI266Test.java,testOptionComparatorInsertedOrder,"    public void testOptionComparatorInsertedOrder() throws ParseException {
        Collection<Option> options = getOptions().getOptions();
        int i = 0;
        for(Option o: options) {
            Assert.assertEquals(o.getOpt(), insertedOrder.get(i));
            i++;
        }
    }",junit.framework.AssertionFailedError: expected:<[p]> but was:<[x]>
Cli_37,/222043010/omniapr/defects4j/Cli_37_buggy/src/test/java/org/apache/commons/cli/bug/BugCLI265Test.java,shouldParseShortOptionWithoutValue,"    public void shouldParseShortOptionWithoutValue() throws Exception {
        String[] twoShortOptions = new String[]{""-t1"", ""-last""};

        final CommandLine commandLine = parser.parse(options, twoShortOptions);

        assertTrue(commandLine.hasOption(""t1""));
        assertNotEquals(""Second option has been used as value for first option"", ""-last"", commandLine.getOptionValue(""t1""));
        assertTrue(""Second option has not been detected"", commandLine.hasOption(""last""));
    }",junit.framework.AssertionFailedError: Second option has been used as value for first option. Actual: -last
Cli_38,/222043010/omniapr/defects4j/Cli_38_buggy/src/test/java/org/apache/commons/cli/bug/BugCLI265Test.java,shouldParseConcatenatedShortOptions,"    public void shouldParseConcatenatedShortOptions() throws Exception {
        String[] concatenatedShortOptions = new String[] { ""-t1"", ""-ab"" };

        final CommandLine commandLine = parser.parse(options, concatenatedShortOptions);

        assertTrue(commandLine.hasOption(""t1""));
        assertNull(commandLine.getOptionValue(""t1""));
        assertTrue(commandLine.hasOption(""a""));
        assertTrue(commandLine.hasOption(""b""));
        assertFalse(commandLine.hasOption(""last""));
    }","junit.framework.AssertionFailedError: expected null, but was:<-ab>"
Cli_39,/222043010/omniapr/defects4j/Cli_39_buggy/src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java,testExistingFilePattern,"    public void testExistingFilePattern() throws Exception
    {
        final Options options = PatternOptionBuilder.parsePattern(""g<"");
        final CommandLineParser parser = new PosixParser();
        final CommandLine line = parser.parse(options, new String[] { ""-g"", ""src/test/resources/existing-readable.file"" });

        final Object parsedReadableFileStream = line.getOptionObject(""g"");

        assertNotNull(""option g not parsed"", parsedReadableFileStream);
        assertTrue(""option g not FileInputStream"", parsedReadableFileStream instanceof FileInputStream);
    }",junit.framework.AssertionFailedError: option g not FileInputStream
Cli_39,/222043010/omniapr/defects4j/Cli_39_buggy/src/test/java/org/apache/commons/cli/PatternOptionBuilderTest.java,testExistingFilePatternFileNotExist,"    public void testExistingFilePatternFileNotExist() throws Exception {
        final Options options = PatternOptionBuilder.parsePattern(""f<"");
        final CommandLineParser parser = new PosixParser();
        final CommandLine line = parser.parse(options, new String[] { ""-f"", ""non-existing.file"" });

        assertNull(""option f parsed"", line.getOptionObject(""f""));
    }",junit.framework.AssertionFailedError: option g not FileInputStream
Cli_40,/222043010/omniapr/defects4j/Cli_40_buggy/src/test/java/org/apache/commons/cli/TypeHandlerTest.java,testCreateValueInteger_failure,"    public void testCreateValueInteger_failure()
            throws Exception
    {
        TypeHandler.createValue(""just-a-string"", Integer.class);
    }",junit.framework.AssertionFailedError: Expected exception: org.apache.commons.cli.ParseException
Closure_1,/222043010/omniapr/defects4j/Closure_1_buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java,testSimpleModeLeavesUnusedParams,"  public void testSimpleModeLeavesUnusedParams() {
    args.add(""--compilation_level=SIMPLE_OPTIMIZATIONS"");
    testSame(""window.f = function(a) {};"");
  }",junit.framework.AssertionFailedError: 
Closure_1,/222043010/omniapr/defects4j/Closure_1_buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java,testForwardDeclareDroppedTypes,"  public void testForwardDeclareDroppedTypes() {
    args.add(""--manage_closure_dependencies=true"");

    args.add(""--warning_level=VERBOSE"");
    test(new String[] {
          ""goog.require('beer');"",
          ""goog.provide('beer'); /** @param {Scotch} x */ function f(x) {}"",
          ""goog.provide('Scotch'); var x = 3;""
         },
         new String[] {
           ""var beer = {}; function f(a) {}"",
           """"
         });

    test(new String[] {
          ""goog.require('beer');"",
          ""goog.provide('beer'); /** @param {Scotch} x */ function f(x) {}""
         },
         new String[] {
           ""var beer = {}; function f(a) {}"",
           """"
         },
         RhinoErrorReporter.TYPE_PARSE_ERROR);
  }",junit.framework.AssertionFailedError: 
Closure_1,/222043010/omniapr/defects4j/Closure_1_buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java,testDebugFlag1,"  public void testDebugFlag1() {
    args.add(""--compilation_level=SIMPLE_OPTIMIZATIONS"");
    args.add(""--debug=false"");
    test(""function foo(a) {}"",
         ""function foo(a) {}"");
  }",junit.framework.AssertionFailedError: 
Closure_1,/222043010/omniapr/defects4j/Closure_1_buggy/test/com/google/javascript/jscomp/IntegrationTest.java,testIssue787,"  public void testIssue787() {
    CompilerOptions options = createCompilerOptions();
    CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS;
    level.setOptionsForCompilationLevel(options);
    WarningLevel warnings = WarningLevel.DEFAULT;
    warnings.setOptionsForWarningLevel(options);

    String code = """" +
        ""function some_function() {\n"" +
        ""  var fn1;\n"" +
        ""  var fn2;\n"" +
        ""\n"" +
        ""  if (any_expression) {\n"" +
        ""    fn2 = external_ref;\n"" +
        ""    fn1 = function (content) {\n"" +
        ""      return fn2();\n"" +
        ""    }\n"" +
        ""  }\n"" +
        ""\n"" +
        ""  return {\n"" +
        ""    method1: function () {\n"" +
        ""      if (fn1) fn1();\n"" +
        ""      return true;\n"" +
        ""    },\n"" +
        ""    method2: function () {\n"" +
        ""      return false;\n"" +
        ""    }\n"" +
        ""  }\n"" +
        ""}"";

    String result = """" +
        ""function some_function() {\n"" +
        ""  var a, b;\n"" +
        ""  any_expression && (b = external_ref, a = function(a) {\n"" +
        ""    return b()\n"" +
        ""  });\n"" +
        ""  return{method1:function() {\n"" +
        ""    a && a();\n"" +
        ""    return !0\n"" +
        ""  }, method2:function() {\n"" +
        ""    return !1\n"" +
        ""  }}\n"" +
        ""}\n"" +
        """";

    test(options, code, result);
  }",junit.framework.AssertionFailedError: 
Closure_1,/222043010/omniapr/defects4j/Closure_1_buggy/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,testRemoveGlobal1,"  public void testRemoveGlobal1() {
    removeGlobal = false;
    testSame(""var x=1"");
    test(""var y=function(x){var z;}"", ""var y=function(x){}"");
  }",junit.framework.AssertionFailedError: 
Closure_1,/222043010/omniapr/defects4j/Closure_1_buggy/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,testRemoveGlobal2,"  public void testRemoveGlobal2() {
    removeGlobal = false;
    testSame(""var x=1"");
    test(""function y(x){var z;}"", ""function y(x){}"");
  }",junit.framework.AssertionFailedError: 
Closure_1,/222043010/omniapr/defects4j/Closure_1_buggy/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,testRemoveGlobal3,"  public void testRemoveGlobal3() {
    removeGlobal = false;
    testSame(""var x=1"");
    test(""function x(){function y(x){var z;}y()}"",
         ""function x(){function y(x){}y()}"");
  }",junit.framework.AssertionFailedError: 
Closure_1,/222043010/omniapr/defects4j/Closure_1_buggy/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,testIssue168b,"  public void testIssue168b() {
    removeGlobal = false;
    test(""function a(){"" +
         ""  (function(x){ b(); })(1);"" +
         ""}"" +
         ""function b(){"" +
         ""  a();"" +
         ""}"",
         ""function a(){(function(x){b()})(1)}"" +
         ""function b(){a()}"");
  }",junit.framework.AssertionFailedError: 
Closure_2,/222043010/omniapr/defects4j/Closure_2_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testBadInterfaceExtendsNonExistentInterfaces,"  public void testBadInterfaceExtendsNonExistentInterfaces() throws Exception {
    String js = ""/** @interface \n"" +
        "" * @extends {nonExistent1} \n"" +
        "" * @extends {nonExistent2} \n"" +
        "" */function A() {}"";
    String[] expectedWarnings = {
      ""Bad type annotation. Unknown type nonExistent1"",
      ""Bad type annotation. Unknown type nonExistent2""
    };
    testTypes(js, expectedWarnings);
  }",java.lang.NullPointerException
Closure_3,/222043010/omniapr/defects4j/Closure_3_buggy/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,testDoNotInlineCatchExpression1a,"  public void testDoNotInlineCatchExpression1a() {
    noInline(
        ""var a;\n"" +
        ""try {\n"" +
        ""  throw Error(\""\"");\n"" +
        ""}catch(err) {"" +
        ""   a = err + 1;\n"" +
        ""}\n"" +
        ""return a.stack\n"");
  }",junit.framework.AssertionFailedError: 
Closure_3,/222043010/omniapr/defects4j/Closure_3_buggy/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,testDoNotInlineCatchExpression1,"  public void testDoNotInlineCatchExpression1() {
    noInline(
        ""var a;\n"" +
        ""try {\n"" +
        ""  throw Error(\""\"");\n"" +
        ""}catch(err) {"" +
        ""   a = err;\n"" +
        ""}\n"" +
        ""return a.stack\n"");
  }",junit.framework.AssertionFailedError: 
Closure_3,/222043010/omniapr/defects4j/Closure_3_buggy/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,testDoNotInlineCatchExpression3,"  public void testDoNotInlineCatchExpression3() {
    noInline(
        ""var a;\n"" +
        ""try {\n"" +
        ""  throw Error(\""\"");\n"" +
        ""} catch(err) {"" +
        ""  err = x;\n"" +
        ""  a = err;\n"" +
        ""}\n"" +
        ""return a.stack\n"");
  }",junit.framework.AssertionFailedError: 
Closure_4,/222043010/omniapr/defects4j/Closure_4_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testImplementsExtendsLoop,"  public void testImplementsExtendsLoop() throws Exception {
    testClosureTypesMultipleWarnings(
        suppressMissingProperty(""foo"") +
            ""/** @constructor \n * @implements {F} */var G = function() {};"" +
            ""/** @constructor \n * @extends {G} */var F = function() {};"" +
        ""alert((new F).foo);"",
        Lists.newArrayList(
            ""Parse error. Cycle detected in inheritance chain of type F""));
  }","junit.framework.AssertionFailedError: unexpected warning(s) : JSC_IMPLEMENTS_NON_INTERFACE. can only implement interfaces at [testcode] line 2 : 29, JSC_IMPLEMENTS_NON_INTERFACE. can only implement interfaces at [testcode] line 3 : 26 expected:<1> but was:<2>"
Closure_4,/222043010/omniapr/defects4j/Closure_4_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testImplementsLoop,"  public void testImplementsLoop() throws Exception {
    testClosureTypesMultipleWarnings(
        suppressMissingProperty(""foo"") +
        ""/** @constructor \n * @implements {T} */var T = function() {};"" +
        ""alert((new T).foo);"",
        Lists.newArrayList(
            ""Parse error. Cycle detected in inheritance chain of type T""));
  }","junit.framework.AssertionFailedError: unexpected warning(s) : JSC_IMPLEMENTS_NON_INTERFACE. can only implement interfaces at [testcode] line 2 : 29, JSC_IMPLEMENTS_NON_INTERFACE. can only implement interfaces at [testcode] line 3 : 26 expected:<1> but was:<2>"
Closure_4,/222043010/omniapr/defects4j/Closure_4_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testConversionFromInterfaceToRecursiveConstructor,"  public void testConversionFromInterfaceToRecursiveConstructor()
      throws Exception {
    testClosureTypesMultipleWarnings(
        suppressMissingProperty(""foo"") +
            ""/** @interface */ var OtherType = function() {}\n"" +
            ""/** @implements {MyType} \n * @constructor */\n"" +
            ""var MyType = function() {}\n"" +
            ""/** @type {MyType} */\n"" +
            ""var x = /** @type {!OtherType} */ (new Object());"",
        Lists.newArrayList(
            ""Parse error. Cycle detected in inheritance chain of type MyType"",
            ""initializing variable\n"" +
            ""found   : OtherType\n"" +
            ""required: (MyType|null)""));
  }","junit.framework.AssertionFailedError: unexpected warning(s) : JSC_IMPLEMENTS_NON_INTERFACE. can only implement interfaces at [testcode] line 2 : 29, JSC_IMPLEMENTS_NON_INTERFACE. can only implement interfaces at [testcode] line 3 : 26 expected:<1> but was:<2>"
Closure_5,/222043010/omniapr/defects4j/Closure_5_buggy/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,testNoInlineDeletedProperties,"  public void testNoInlineDeletedProperties() {
    testSameLocal(
        ""var foo = {bar:1};"" +
        ""delete foo.bar;"" +
        ""return foo.bar;"");
  }",junit.framework.AssertionFailedError: 
Closure_6,/222043010/omniapr/defects4j/Closure_6_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testTypeRedefinition,"  public void testTypeRedefinition() throws Exception {
    testClosureTypesMultipleWarnings(
        ""a={};/**@enum {string}*/ a.A = {ZOR:'b'};""
        + ""/** @constructor */ a.A = function() {}"",
        Lists.newArrayList(
            ""variable a.A redefined with type function (new:a.A): undefined, "" +
            ""original definition at [testcode]:1 with type enum{a.A}"",
            ""assignment to property A of a\n"" +
            ""found   : function (new:a.A): undefined\n"" +
            ""required: enum{a.A}""));
  }",junit.framework.AssertionFailedError: expected:<2> but was:<1>
Closure_6,/222043010/omniapr/defects4j/Closure_6_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testIssue635b,"  public void testIssue635b() throws Exception {
    testTypes(
        ""/** @constructor */"" +
        ""function F() {}"" +
        ""/** @constructor */"" +
        ""function G() {}"" +
        ""/** @type {function(new:G)} */ var x = F;"",
        ""initializing variable\n"" +
        ""found   : function (new:F): undefined\n"" +
        ""required: function (new:G): ?"");
  }",junit.framework.AssertionFailedError: expected a warning
Closure_6,/222043010/omniapr/defects4j/Closure_6_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testTypeRedefinition,"  public void testTypeRedefinition() throws Exception {
    testClosureTypesMultipleWarnings(""a={};/**@enum {string}*/ a.A = {ZOR:'b'};""
        + ""/** @constructor */ a.A = function() {}"",
        Lists.newArrayList(
            ""variable a.A redefined with type function (new:a.A): undefined, "" +
            ""original definition at [testcode]:1 with type enum{a.A}"",
            ""assignment to property A of a\n"" +
            ""found   : function (new:a.A): undefined\n"" +
            ""required: enum{a.A}""));
  }",junit.framework.AssertionFailedError: expected a warning
Closure_7,/222043010/omniapr/defects4j/Closure_7_buggy/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,testGoogIsFunction2,"  public void testGoogIsFunction2() throws Exception {
    testClosureFunction(""goog.isFunction"",
        OBJECT_NUMBER_STRING_BOOLEAN,
        U2U_CONSTRUCTOR_TYPE,
        OBJECT_NUMBER_STRING_BOOLEAN);
  }",junit.framework.AssertionFailedError: Expected: (Object|boolean|number|string)
Closure_7,/222043010/omniapr/defects4j/Closure_7_buggy/test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,testTypeof3,"  public void testTypeof3() {
    FlowScope blind = newScope();
    testBinop(blind,
        Token.EQ,
        new Node(Token.TYPEOF, createVar(
            blind, ""a"", OBJECT_NUMBER_STRING_BOOLEAN)),
        Node.newString(""function""),
        Sets.newHashSet(
            new TypedName(""a"", U2U_CONSTRUCTOR_TYPE)),
        Sets.newHashSet(
            new TypedName(""a"", OBJECT_NUMBER_STRING_BOOLEAN)));
  }",junit.framework.AssertionFailedError: Expected: (Object|boolean|number|string)
Closure_8,/222043010/omniapr/defects4j/Closure_8_buggy/test/com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java,testIssue820,"  public void testIssue820() throws Exception {
    // Don't redeclare function parameters, this is incompatible with
    // strict mode.
    testSame(""function f(a){ var b=1; a=2; var c; }"");
  }",junit.framework.AssertionFailedError: 
Closure_9,/222043010/omniapr/defects4j/Closure_9_buggy/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java,testGuessModuleName,"  public void testGuessModuleName() {
    ProcessCommonJSModules pass = new ProcessCommonJSModules(null, ""foo"");
    assertEquals(""module$baz"",
        pass.guessCJSModuleName(""foo/baz.js""));
    assertEquals(""module$baz"",
        pass.guessCJSModuleName(""foo\\baz.js""));
    assertEquals(""module$bar$baz"",
        pass.guessCJSModuleName(""foo\\bar\\baz.js""));
  }",junit.framework.ComparisonFailure: expected:<module$[]baz> but was:<module$[foo\]baz>
Closure_10,/222043010/omniapr/defects4j/Closure_10_buggy/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,testIssue821,"  public void testIssue821() {
    foldSame(""var a =(Math.random()>0.5? '1' : 2 ) + 3 + 4;"");
    foldSame(""var a = ((Math.random() ? 0 : 1) ||"" +
             ""(Math.random()>0.5? '1' : 2 )) + 3 + 4;"");
  }",junit.framework.AssertionFailedError: 
Closure_11,/222043010/omniapr/defects4j/Closure_11_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testGetprop4,"  public void testGetprop4() throws Exception {
    testTypes(""var x = null; x.prop = 3;"",
        ""No properties on this expression\n"" +
        ""found   : null\n"" +
        ""required: Object"");
  }",junit.framework.AssertionFailedError: expected a warning
Closure_11,/222043010/omniapr/defects4j/Closure_11_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testIssue810,"  public void testIssue810() throws Exception {
    testTypes(
        ""/** @constructor */"" +
        ""var Type = function () {"" +
        ""};"" +
        ""Type.prototype.doIt = function(obj) {"" +
        ""  this.prop = obj.unknownProp;"" +
        ""};"",
        ""Property unknownProp never defined on obj"");
  }",junit.framework.AssertionFailedError: expected a warning
Closure_12,/222043010/omniapr/defects4j/Closure_12_buggy/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,testIssue794b,"  public void testIssue794b() {
    noInline(
        ""var x = 1; "" +
        ""try { x = x + someFunction(); } catch (e) {}"" +
        ""x = x + 1;"" +
        ""try { x = x + someFunction(); } catch (e) {}"" +
        ""return x;"");
  }",junit.framework.AssertionFailedError: 
Closure_13,/222043010/omniapr/defects4j/Closure_13_buggy/test/com/google/javascript/jscomp/IntegrationTest.java,testIssue787,"  public void testIssue787() {
    CompilerOptions options = createCompilerOptions();
    CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS;
    level.setOptionsForCompilationLevel(options);
    WarningLevel warnings = WarningLevel.DEFAULT;
    warnings.setOptionsForWarningLevel(options);

    String code = """" +
        ""function some_function() {\n"" +
        ""  var fn1;\n"" +
        ""  var fn2;\n"" +
        ""\n"" +
        ""  if (any_expression) {\n"" +
        ""    fn2 = external_ref;\n"" +
        ""    fn1 = function (content) {\n"" +
        ""      return fn2();\n"" +
        ""    }\n"" +
        ""  }\n"" +
        ""\n"" +
        ""  return {\n"" +
        ""    method1: function () {\n"" +
        ""      if (fn1) fn1();\n"" +
        ""      return true;\n"" +
        ""    },\n"" +
        ""    method2: function () {\n"" +
        ""      return false;\n"" +
        ""    }\n"" +
        ""  }\n"" +
        ""}"";

    String result = """" +
        ""function some_function() {\n"" +
        ""  var a, b;\n"" +
        ""  any_expression && (b = external_ref, a = function() {\n"" +
        ""    return b()\n"" +
        ""  });\n"" +
        ""  return{method1:function() {\n"" +
        ""    a && a();\n"" +
        ""    return !0\n"" +
        ""  }, method2:function() {\n"" +
        ""    return !1\n"" +
        ""  }}\n"" +
        ""}\n"" +
        """";

    test(options, code, result);
  }",junit.framework.AssertionFailedError: 
Closure_14,/222043010/omniapr/defects4j/Closure_14_buggy/test/com/google/javascript/jscomp/CheckMissingReturnTest.java,testIssue779,"  public void testIssue779() {
    testNotMissing(
        ""var a = f(); try { alert(); if (a > 0) return 1; }"" +
        ""finally { a = 5; } return 2;"");
  }",junit.framework.AssertionFailedError: Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>
Closure_14,/222043010/omniapr/defects4j/Closure_14_buggy/test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java,testDeepNestedFinally,"  public void testDeepNestedFinally() {
    String src = ""try{try{try{throw 1}"" +
        ""finally{1;var a}}finally{2;if(a);}}finally{3;a()}"";
    ControlFlowGraph<Node> cfg = createCfg(src);
    assertCrossEdge(cfg, Token.THROW, Token.BLOCK, Branch.ON_EX);
    assertCrossEdge(cfg, Token.VAR, Token.BLOCK, Branch.UNCOND);
    assertCrossEdge(cfg, Token.IF, Token.BLOCK, Branch.ON_EX);
  }",junit.framework.AssertionFailedError: No cross edges found
Closure_14,/222043010/omniapr/defects4j/Closure_14_buggy/test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java,testDeepNestedBreakwithFinally,"  public void testDeepNestedBreakwithFinally() {
    String src = ""X:while(1){try{while(2){try{var a;break X;}"" +
        ""finally{}}}finally{}}"";
    ControlFlowGraph<Node> cfg = createCfg(src);
    assertDownEdge(cfg, Token.WHILE, Token.BLOCK, Branch.ON_TRUE);
    assertDownEdge(cfg, Token.BLOCK, Token.TRY, Branch.UNCOND);
    assertDownEdge(cfg, Token.BLOCK, Token.VAR, Branch.UNCOND);
    // BREAK to FINALLY.
    assertCrossEdge(cfg, Token.BREAK, Token.BLOCK, Branch.UNCOND);
    // FINALLY to FINALLY.
    assertCrossEdge(cfg, Token.BLOCK, Token.BLOCK, Branch.ON_EX);
    assertCrossEdge(cfg, Token.WHILE, Token.BLOCK, Branch.ON_FALSE);
    assertReturnEdge(cfg, Token.BLOCK);
  }",junit.framework.AssertionFailedError: No cross edges found
Closure_15,/222043010/omniapr/defects4j/Closure_15_buggy/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,testSimpleForIn,"  public void testSimpleForIn() {
    inline(""var a,b,x = a in b; x"",
           ""var a,b,x; a in b"");
    noInline(""var a, b; var x = a in b; print(1); x"");
    noInline(""var a,b,x = a in b; delete a[b]; x"");
  }",junit.framework.AssertionFailedError: 
Closure_16,/222043010/omniapr/defects4j/Closure_16_buggy/test/com/google/javascript/jscomp/IntegrationTest.java,testIssue772,"  public void testIssue772() throws Exception {
    CompilerOptions options = createCompilerOptions();
    options.closurePass = true;
    options.checkTypes = true;
    test(
        options,
        ""/** @const */ var a = {};"" +
        ""/** @const */ a.b = {};"" +
        ""/** @const */ a.b.c = {};"" +
        ""goog.scope(function() {"" +
        ""  var b = a.b;"" +
        ""  var c = b.c;"" +
        ""  /** @typedef {string} */"" +
        ""  c.MyType;"" +
        ""  /** @param {c.MyType} x The variable. */"" +
        ""  c.myFunc = function(x) {};"" +
        ""});"",
        ""/** @const */ var a = {};"" +
        ""/** @const */ a.b = {};"" +
        ""/** @const */ a.b.c = {};"" +
        ""a.b.c.MyType;"" +
        ""a.b.c.myFunc = function(x) {};"");
  }",junit.framework.AssertionFailedError: Expected no warnings or errors
Closure_16,/222043010/omniapr/defects4j/Closure_16_buggy/test/com/google/javascript/jscomp/ScopedAliasesTest.java,testIssue772,"  public void testIssue772() {
    testTypes(
        ""var b = a.b;"" +
        ""var c = b.c;"",
        ""/** @param {c.MyType} x */ types.actual;"" +
        ""/** @param {a.b.c.MyType} x */ types.expected;"");
  }",junit.framework.AssertionFailedError: Expected: <null> but was: Node tree inequality:
Closure_17,/222043010/omniapr/defects4j/Closure_17_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testIssue688,"  public void testIssue688() throws Exception {
    testTypes(
        ""/** @const */ var SOME_DEFAULT =\n"" +
        ""    /** @type {TwoNumbers} */ ({first: 1, second: 2});\n"" +
        ""/**\n"" +
        ""* Class defining an interface with two numbers.\n"" +
        ""* @interface\n"" +
        ""*/\n"" +
        ""function TwoNumbers() {}\n"" +
        ""/** @type number */\n"" +
        ""TwoNumbers.prototype.first;\n"" +
        ""/** @type number */\n"" +
        ""TwoNumbers.prototype.second;\n"" +
        ""/** @return {number} */ function f() { return SOME_DEFAULT; }"",
        ""inconsistent return type\n"" +
        ""found   : (TwoNumbers|null)\n"" +
        ""required: number"");
  }",junit.framework.ComparisonFailure: expected:<in[consistent return type
Closure_18,/222043010/omniapr/defects4j/Closure_18_buggy/test/com/google/javascript/jscomp/IntegrationTest.java,testDependencySorting,"  public void testDependencySorting() throws Exception {
    CompilerOptions options = createCompilerOptions();
    options.setDependencyOptions(
        new DependencyOptions()
        .setDependencySorting(true));
    test(
        options,
        new String[] {
          ""goog.require('x');"",
          ""goog.provide('x');"",
        },
        new String[] {
          ""goog.provide('x');"",
          ""goog.require('x');"",

          // For complicated reasons involving modules,
          // the compiler creates a synthetic source file.
          """",
        });
  }",junit.framework.AssertionFailedError: 
Closure_19,/222043010/omniapr/defects4j/Closure_19_buggy/test/com/google/javascript/jscomp/TypeInferenceTest.java,testNoThisInference,"  public void testNoThisInference() {
    JSType thisType = createNullableType(OBJECT_TYPE);
    assumingThisType(thisType);
    inFunction(""var out = 3; if (goog.isNull(this)) out = this;"");
    verify(""out"", createUnionType(OBJECT_TYPE, NUMBER_TYPE));
  }",java.lang.IllegalArgumentException: Node cannot be refined. 
Closure_20,/222043010/omniapr/defects4j/Closure_20_buggy/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,testSimpleFunctionCall,"  public void testSimpleFunctionCall() {
    test(""var a = String(23)"", ""var a = '' + 23"");
    test(""var a = String('hello')"", ""var a = '' + 'hello'"");
    testSame(""var a = String('hello', bar());"");
    testSame(""var a = String({valueOf: function() { return 1; }});"");
  }",junit.framework.AssertionFailedError: 
Closure_21,/222043010/omniapr/defects4j/Closure_21_buggy/test/com/google/javascript/jscomp/CheckSideEffectsTest.java,testUselessCode,"  public void testUselessCode() {
    test(""function f(x) { if(x) return; }"", ok);
    test(""function f(x) { if(x); }"", ""function f(x) { if(x); }"", e);

    test(""if(x) x = y;"", ok);
    test(""if(x) x == bar();"", ""if(x) JSCOMPILER_PRESERVE(x == bar());"", e);

    test(""x = 3;"", ok);
    test(""x == 3;"", ""JSCOMPILER_PRESERVE(x == 3);"", e);

    test(""var x = 'test'"", ok);
    test(""var x = 'test'\n'str'"",
         ""var x = 'test'\nJSCOMPILER_PRESERVE('str')"", e);

    test("""", ok);
    test(""foo();;;;bar();;;;"", ok);

    test(""var a, b; a = 5, b = 6"", ok);
    test(""var a, b; a = 5, b == 6"",
         ""var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)"", e);
    test(""var a, b; a = (5, 6)"",
         ""var a, b; a = (JSCOMPILER_PRESERVE(5), 6)"", e);
    test(""var a, b; a = (bar(), 6, 7)"",
         ""var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)"", e);
    test(""var a, b; a = (bar(), bar(), 7, 8)"",
         ""var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)"", e);
    test(""var a, b; a = (b = 7, 6)"", ok);
    test(""function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));"", ok);
    test(""function x(){}\nfunction f(a, b){}\nf(1,(2, 3));"",
         ""function x(){}\nfunction f(a, b){}\n"" +
         ""f(1,(JSCOMPILER_PRESERVE(2), 3));"", e);
  }","junit.framework.AssertionFailedError: There should be one warning, repeated 1 time(s). expected:<1> but was:<0>"
Closure_22,/222043010/omniapr/defects4j/Closure_22_buggy/test/com/google/javascript/jscomp/CheckSideEffectsTest.java,testUselessCode,"  public void testUselessCode() {
    test(""function f(x) { if(x) return; }"", ok);
    test(""function f(x) { if(x); }"", ""function f(x) { if(x); }"", e);

    test(""if(x) x = y;"", ok);
    test(""if(x) x == bar();"", ""if(x) JSCOMPILER_PRESERVE(x == bar());"", e);

    test(""x = 3;"", ok);
    test(""x == 3;"", ""JSCOMPILER_PRESERVE(x == 3);"", e);

    test(""var x = 'test'"", ok);
    test(""var x = 'test'\n'str'"",
         ""var x = 'test'\nJSCOMPILER_PRESERVE('str')"", e);

    test("""", ok);
    test(""foo();;;;bar();;;;"", ok);

    test(""var a, b; a = 5, b = 6"", ok);
    test(""var a, b; a = 5, b == 6"",
         ""var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)"", e);
    test(""var a, b; a = (5, 6)"",
         ""var a, b; a = (JSCOMPILER_PRESERVE(5), 6)"", e);
    test(""var a, b; a = (bar(), 6, 7)"",
         ""var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)"", e);
    test(""var a, b; a = (bar(), bar(), 7, 8)"",
         ""var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)"", e);
    test(""var a, b; a = (b = 7, 6)"", ok);
    test(""function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));"", ok);
    test(""function x(){}\nfunction f(a, b){}\nf(1,(2, 3));"",
         ""function x(){}\nfunction f(a, b){}\n"" +
         ""f(1,(JSCOMPILER_PRESERVE(2), 3));"", e);
  }","junit.framework.AssertionFailedError: There should be one warning, repeated 1 time(s). expected:<1> but was:<0>"
Closure_23,/222043010/omniapr/defects4j/Closure_23_buggy/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,testFoldGetElem,"  public void testFoldGetElem() {
    fold(""x = [,10][0]"", ""x = void 0"");
    fold(""x = [10, 20][0]"", ""x = 10"");
    fold(""x = [10, 20][1]"", ""x = 20"");
    fold(""x = [10, 20][0.5]"", """",
        PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR);
    fold(""x = [10, 20][-1]"",    """",
        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);
    fold(""x = [10, 20][2]"",     """",
        PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR);

    foldSame(""x = [foo(), 0][1]"");
    fold(""x = [0, foo()][1]"", ""x = foo()"");
    foldSame(""x = [0, foo()][0]"");
  }",junit.framework.AssertionFailedError: Unexpected error(s): JSC_INDEX_OUT_OF_BOUNDS_ERROR. Array index out of bounds: NUMBER 0.0 1 [source_file: testcode] at testcode line 1 : 10 expected:<0> but was:<1>
Closure_24,/222043010/omniapr/defects4j/Closure_24_buggy/test/com/google/javascript/jscomp/ScopedAliasesTest.java,testNonAliasLocal,"  public void testNonAliasLocal() {
    testScopedFailure(""var x = 10"", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);
    testScopedFailure(""var x = goog.dom + 10"",
        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);
    testScopedFailure(""var x = goog['dom']"",
        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);
    testScopedFailure(""var x = goog.dom, y = 10"",
        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);
    testScopedFailure(""function f() {}"",
        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);
  }",junit.framework.AssertionFailedError: There should be one error.  expected:<1> but was:<0>
Closure_25,/222043010/omniapr/defects4j/Closure_25_buggy/test/com/google/javascript/jscomp/TypeInferenceTest.java,testBackwardsInferenceNew,"  public void testBackwardsInferenceNew() {
    inFunction(
        ""/**\n"" +
        "" * @constructor\n"" +
        "" * @param {{foo: (number|undefined)}} x\n"" +
        "" */"" +
        ""function F(x) {}"" +
        ""var y = {};"" +
        ""new F(y);"");

    assertEquals(""{foo: (number|undefined)}"", getType(""y"").toString());
  }",junit.framework.ComparisonFailure: expected:<{[foo: (number|undefined)]}> but was:<{[]}>
Closure_26,/222043010/omniapr/defects4j/Closure_26_buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java,testTransformAMDAndProcessCJS,"  public void testTransformAMDAndProcessCJS() {
    args.add(""--transform_amd_modules"");
    args.add(""--process_common_js_modules"");
    args.add(""--common_js_entry_module=foo/bar"");
    setFilename(0, ""foo/bar.js"");
    test(""define({foo: 1})"",
        ""var module$foo$bar={}, module$foo$bar={foo:1};"");
  }",junit.framework.AssertionFailedError: 
Closure_26,/222043010/omniapr/defects4j/Closure_26_buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java,testProcessCJS,"  public void testProcessCJS() {
    args.add(""--process_common_js_modules"");
    args.add(""--common_js_entry_module=foo/bar"");
    setFilename(0, ""foo/bar.js"");
    test(""exports.test = 1"",
        ""var module$foo$bar={test:1};"");
  }",junit.framework.AssertionFailedError: 
Closure_26,/222043010/omniapr/defects4j/Closure_26_buggy/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java,testExports,"  public void testExports() {
    setFilename(""test"");
    test(
        ""var name = require('name');"" +
        ""exports.foo = 1;"",
        ""goog.provide('module$test');"" +
        ""var module$test = {};"" +
        ""goog.require('module$name');"" +
        ""var name$$module$test = module$name;"" +
        ""module$test.foo = 1;"");
    test(
        ""var name = require('name');"" +
        ""module.exports = function() {};"",
        ""goog.provide('module$test');"" +
        ""var module$test = {};"" +
        ""goog.require('module$name');"" +
        ""var name$$module$test = module$name;"" +
        ""module$test.module$exports = function() {};"" +
        ""if(module$test.module$exports)"" +
        ""module$test=module$test.module$exports"");
  }",junit.framework.AssertionFailedError: 
Closure_26,/222043010/omniapr/defects4j/Closure_26_buggy/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java,testModuleName,"  public void testModuleName() {
    assertEquals(""module$foo$baz"",
        ProcessCommonJSModules.toModuleName(""./baz.js"", ""foo/bar.js""));
    assertEquals(""module$foo$baz_bar"",
        ProcessCommonJSModules.toModuleName(""./baz-bar.js"", ""foo/bar.js""));
    assertEquals(""module$baz"",
        ProcessCommonJSModules.toModuleName(""../baz.js"", ""foo/bar.js""));
    assertEquals(""module$baz"",
        ProcessCommonJSModules.toModuleName(""../../baz.js"", ""foo/bar/abc.js""));
    assertEquals(""module$baz"", ProcessCommonJSModules.toModuleName(
        ""../../../baz.js"", ""foo/bar/abc/xyz.js""));
    setFilename(""foo/bar"");
    test(
        ""var name = require('name');"",
        ""goog.provide('module$foo$bar'); var module$foo$bar = {};"" +
        ""goog.require('module$name');"" +
        ""var name$$module$foo$bar = module$name;"");
    test(
        ""var name = require('./name');"",
        ""goog.provide('module$foo$bar');"" +
        ""var module$foo$bar = {};"" +
        ""goog.require('module$foo$name');"" +
        ""var name$$module$foo$bar = module$foo$name;"");

  }",junit.framework.AssertionFailedError: 
Closure_26,/222043010/omniapr/defects4j/Closure_26_buggy/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java,testDash,"  public void testDash() {
    setFilename(""test-test"");
    test(
        ""var name = require('name'); exports.foo = 1;"",
        ""goog.provide('module$test_test');"" +
        ""var module$test_test = {};"" +
        ""goog.require('module$name');"" +
        ""var name$$module$test_test = module$name;"" +
        ""module$test_test.foo = 1;"");
  }",junit.framework.AssertionFailedError: 
Closure_26,/222043010/omniapr/defects4j/Closure_26_buggy/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java,testVarRenaming,"  public void testVarRenaming() {
    setFilename(""test"");
    test(
        ""var a = 1, b = 2;"" +
        ""(function() { var a; b = 4})()"",
        ""goog.provide('module$test');"" +
        ""var module$test = {};"" +
        ""var a$$module$test = 1, b$$module$test = 2;"" +
        ""(function() { var a; b$$module$test = 4})();"");
  }",junit.framework.AssertionFailedError: 
Closure_26,/222043010/omniapr/defects4j/Closure_26_buggy/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java,testWithoutExports,"  public void testWithoutExports() {
    setFilename(""test"");
    test(
        ""var name = require('name');"" +
        ""name()"",
        ""goog.provide('module$test');"" +
        ""var module$test = {};"" +
        ""goog.require('module$name');"" +
        ""var name$$module$test = module$name;"" +
        ""name$$module$test();"");
    setFilename(""test/sub"");
    test(
        ""var name = require('mod/name');"" +
        ""(function() { name(); })();"",
        ""goog.provide('module$test$sub');"" +
        ""var module$test$sub = {};"" +
        ""goog.require('module$mod$name');"" +
        ""var name$$module$test$sub = module$mod$name;"" +
        ""(function() { name$$module$test$sub(); })();"");
  }",junit.framework.AssertionFailedError: 
Closure_27,/222043010/omniapr/defects4j/Closure_27_buggy/test/com/google/javascript/rhino/IRTest.java,testIssue727_1,"  public void testIssue727_1() {
    testIR(
        IR.tryFinally(
            IR.block(),
            IR.block()),
        ""TRY\n"" +
        ""    BLOCK\n"" +
        ""    BLOCK\n"" +
        ""    BLOCK\n"");
  }",java.lang.IllegalStateException
Closure_27,/222043010/omniapr/defects4j/Closure_27_buggy/test/com/google/javascript/rhino/IRTest.java,testIssue727_2,"  public void testIssue727_2() {
    testIR(
        IR.tryCatch(
            IR.block(),
            IR.catchNode(
                IR.name(""e""),
                IR.block())),
        ""TRY\n"" +
        ""    BLOCK\n"" +
        ""    BLOCK\n"" +
        ""        CATCH\n"" +
        ""            NAME e\n"" +
        ""            BLOCK\n"");
  }",java.lang.IllegalStateException
Closure_27,/222043010/omniapr/defects4j/Closure_27_buggy/test/com/google/javascript/rhino/IRTest.java,testIssue727_3,"  public void testIssue727_3() {
    testIR(
        IR.tryCatchFinally(
            IR.block(),
            IR.catchNode(IR.name(""e""), IR.block()),
            IR.block()),
        ""TRY\n"" +
        ""    BLOCK\n"" +
        ""    BLOCK\n"" +
        ""        CATCH\n"" +
        ""            NAME e\n"" +
        ""            BLOCK\n"" +
        ""    BLOCK\n"");
  }",java.lang.IllegalStateException
Closure_28,/222043010/omniapr/defects4j/Closure_28_buggy/test/com/google/javascript/jscomp/InlineCostEstimatorTest.java,testCost,"  public void testCost() {
    checkCost(""1"", ""1"");
    checkCost(""true"", ""1"");
    checkCost(""false"", ""1"");
    checkCost(""a"", ""xx"");
    checkCost(""a + b"", ""xx+xx"");
    checkCost(""foo()"", ""xx()"");
    checkCost(""foo(a,b)"", ""xx(xx,xx)"");
    checkCost(""10 + foo(a,b)"", ""0+xx(xx,xx)"");
    checkCost(""1 + foo(a,b)"", ""1+xx(xx,xx)"");
    checkCost(""a ? 1 : 0"", ""xx?1:0"");
    checkCost(""a.b"", ""xx.xx"");
    checkCost(""new Obj()"", ""new xx"");
    checkCost(""function a() {return \""monkey\""}"",
              ""function xx(){return\""monkey\""}"");
  }",junit.framework.AssertionFailedError: expected:<1> but was:<4>
Closure_28,/222043010/omniapr/defects4j/Closure_28_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testIssue728,"  public void testIssue728() {
    String f = ""var f = function() { return false; };"";
    StringBuilder calls = new StringBuilder();
    StringBuilder folded = new StringBuilder();
    for (int i = 0; i < 30; i++) {
      calls.append(""if (!f()) alert('x');"");
      folded.append(""if (!false) alert('x');"");
    }

    test(f + calls, folded.toString());
  }",junit.framework.AssertionFailedError: 
Closure_29,/222043010/omniapr/defects4j/Closure_29_buggy/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,testObject10,"  public void testObject10() {
    testLocal(""var x; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b);"",
         ""var JSCompiler_object_inline_a_0;"" +
         ""var JSCompiler_object_inline_b_1;"" +
         ""var b = f();"" +
         ""JSCompiler_object_inline_a_0=a,JSCompiler_object_inline_b_1=b,true;"" +
         ""if(JSCompiler_object_inline_a_0) g(JSCompiler_object_inline_b_1)"");
    testLocal(""var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c"",
         ""var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c"");
    testLocal(""var x; var b = f(); x = {a:a, b:b}; x.c = c; if(x.a) g(x.b) + x.c"",
         ""var JSCompiler_object_inline_a_0;"" +
         ""var JSCompiler_object_inline_b_1;"" +
         ""var JSCompiler_object_inline_c_2;"" +
         ""var b = f();"" +
         ""JSCompiler_object_inline_a_0 = a,JSCompiler_object_inline_b_1 = b, "" +
         ""  JSCompiler_object_inline_c_2=void 0,true;"" +
         ""JSCompiler_object_inline_c_2 = c;"" +
         ""if (JSCompiler_object_inline_a_0)"" +
         ""  g(JSCompiler_object_inline_b_1) + JSCompiler_object_inline_c_2;"");
    testLocal(""var x = {a:a}; if (b) x={b:b}; f(x.a||x.b);"",
         ""var JSCompiler_object_inline_a_0 = a;"" +
         ""var JSCompiler_object_inline_b_1;"" +
         ""if(b) JSCompiler_object_inline_b_1 = b,"" +
         ""      JSCompiler_object_inline_a_0 = void 0,"" +
         ""      true;"" +
         ""f(JSCompiler_object_inline_a_0 || JSCompiler_object_inline_b_1)"");
    testLocal(""var x; var y = 5; x = {a:a, b:b, c:c}; if (b) x={b:b}; f(x.a||x.b);"",
         ""var JSCompiler_object_inline_a_0;"" +
         ""var JSCompiler_object_inline_b_1;"" +
         ""var JSCompiler_object_inline_c_2;"" +
         ""var y=5;"" +
         ""JSCompiler_object_inline_a_0=a,"" +
         ""JSCompiler_object_inline_b_1=b,"" +
         ""JSCompiler_object_inline_c_2=c,"" +
         ""true;"" +
         ""if (b) JSCompiler_object_inline_b_1=b,"" +
         ""       JSCompiler_object_inline_a_0=void 0,"" +
         ""       JSCompiler_object_inline_c_2=void 0,"" +
         ""       true;"" +
         ""f(JSCompiler_object_inline_a_0||JSCompiler_object_inline_b_1)"");
  }",junit.framework.AssertionFailedError: 
Closure_29,/222043010/omniapr/defects4j/Closure_29_buggy/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,testObject12,"  public void testObject12() {
    testLocal(""var a; a = {x:1, y:2}; f(a.x, a.y2);"",
        ""var a; a = {x:1, y:2}; f(a.x, a.y2);"");
  }",junit.framework.AssertionFailedError: 
Closure_29,/222043010/omniapr/defects4j/Closure_29_buggy/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,testObject22,"  public void testObject22() {
    testLocal(""while(1) { var a = {y:1}; if (b) a.x = 2; f(a.y, a.x);}"",
      ""for(;1;){"" +
      "" var JSCompiler_object_inline_y_0=1;"" +
      "" var JSCompiler_object_inline_x_1;"" +
      "" if(b) JSCompiler_object_inline_x_1=2;"" +
      "" f(JSCompiler_object_inline_y_0,JSCompiler_object_inline_x_1)"" +
      ""}"");

    testLocal(""var a; while (1) { f(a.x, a.y); a = {x:1, y:1};}"",
        ""var a; while (1) { f(a.x, a.y); a = {x:1, y:1};}"");
  }",junit.framework.AssertionFailedError: 
Closure_29,/222043010/omniapr/defects4j/Closure_29_buggy/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,testIssue724,"  public void testIssue724() {
    testSameLocal(
        ""var getType; getType = {};"" +
        ""return functionToCheck && "" +
        ""   getType.toString.apply(functionToCheck) === "" +
        ""   '[object Function]';"");
  }",junit.framework.AssertionFailedError: 
Closure_29,/222043010/omniapr/defects4j/Closure_29_buggy/test/com/google/javascript/jscomp/IntegrationTest.java,testIssue724,"  public void testIssue724() {
    CompilerOptions options = createCompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS
        .setOptionsForCompilationLevel(options);
    String code =
        ""isFunction = function(functionToCheck) {"" +
        ""  var getType = {};"" +
        ""  return functionToCheck && "" +
        ""      getType.toString.apply(functionToCheck) === "" +
        ""     '[object Function]';"" +
        ""};"";
    String result =
        ""isFunction=function(a){var b={};"" +
        ""return a&&\""[object Function]\""===b.b.a(a)}"";

    test(options, code, result);
  }",junit.framework.AssertionFailedError: 
Closure_30,/222043010/omniapr/defects4j/Closure_30_buggy/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,testInlineAcrossSideEffect1,"  public void testInlineAcrossSideEffect1() {
    // This can't be inlined because print() has side-effects and might change
    // the definition of noSFX.
    //
    // noSFX must be both const and pure in order to inline it.
    noInline(""var y; var x = noSFX(y); print(x)"");
    //inline(""var y; var x = noSFX(y); print(x)"", ""var y;var x;print(noSFX(y))"");
  }",junit.framework.AssertionFailedError: 
Closure_30,/222043010/omniapr/defects4j/Closure_30_buggy/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,testCanInlineAcrossNoSideEffect,"  public void testCanInlineAcrossNoSideEffect() {
    // This can't be inlined because print() has side-effects and might change
    // the definition of noSFX. We should be able to mark noSFX as const
    // in some way.
    noInline(
        ""var y; var x = noSFX(y), z = noSFX(); noSFX(); noSFX(), print(x)"");
    //inline(
    //    ""var y; var x = noSFX(y), z = noSFX(); noSFX(); noSFX(), print(x)"",
    //    ""var y; var x, z = noSFX(); noSFX(); noSFX(), print(noSFX(y))"");
  }",junit.framework.AssertionFailedError: 
Closure_30,/222043010/omniapr/defects4j/Closure_30_buggy/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,testIssue698,"  public void testIssue698() {
    // Most of the flow algorithms operate on Vars. We want to make
    // sure the algorithm bails out appropriately if it sees
    // a var that it doesn't know about.
    inline(
        ""var x = ''; ""
        + ""unknown.length < 2 && (unknown='0' + unknown);""
        + ""x = x + unknown; ""
        + ""unknown.length < 3 && (unknown='0' + unknown);""
        + ""x = x + unknown; ""
        + ""return x;"",
        ""var x; ""
        + ""unknown.length < 2 && (unknown='0' + unknown);""
        + ""x = '' + unknown; ""
        + ""unknown.length < 3 && (unknown='0' + unknown);""
        + ""x = x + unknown; ""
        + ""return x;"");
  }",junit.framework.AssertionFailedError: 
Closure_31,/222043010/omniapr/defects4j/Closure_31_buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java,testDependencySortingWhitespaceMode,"  public void testDependencySortingWhitespaceMode() {
    args.add(""--manage_closure_dependencies"");
    args.add(""--compilation_level=WHITESPACE_ONLY"");
    test(new String[] {
          ""goog.require('beer');"",
          ""goog.provide('beer');\ngoog.require('hops');"",
          ""goog.provide('hops');"",
         },
         new String[] {
          ""goog.provide('hops');"",
          ""goog.provide('beer');\ngoog.require('hops');"",
          ""goog.require('beer');""
         });
  }",junit.framework.AssertionFailedError: 
Closure_32,/222043010/omniapr/defects4j/Closure_32_buggy/test/com/google/javascript/jscomp/IntegrationTest.java,testIssue701,"  public void testIssue701() {
    // Check ASCII art in license comments.
    String ascii = ""/**\n"" +
        "" * @preserve\n"" +
        ""   This\n"" +
        ""     is\n"" +
        ""       ASCII    ART\n"" +
        ""*/"";
    String result = ""/*\n\n"" +
        ""   This\n"" +
        ""     is\n"" +
        ""       ASCII    ART\n"" +
        ""*/\n"";
    testSame(createCompilerOptions(), ascii);
    assertEquals(result, lastCompiler.toSource());
  }",junit.framework.ComparisonFailure: expected:</*
Closure_32,/222043010/omniapr/defects4j/Closure_32_buggy/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,testParseLicense,"  public void testParseLicense() throws Exception {
    Node node = new Node(1);
    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
    String comment = ""@license Foo\nBar\n\nBaz*/"";
    parse(comment);
    assertEquals("" Foo\nBar\n\nBaz"", node.getJSDocInfo().getLicense());
  }",junit.framework.ComparisonFailure: expected:< Foo
Closure_32,/222043010/omniapr/defects4j/Closure_32_buggy/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,testParsePreserve,"  public void testParsePreserve() throws Exception {
    Node node = new Node(1);
    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
    String comment = ""@preserve Foo\nBar\n\nBaz*/"";
    parse(comment);
    assertEquals("" Foo\nBar\n\nBaz"", node.getJSDocInfo().getLicense());
  }",junit.framework.ComparisonFailure: expected:< Foo
Closure_32,/222043010/omniapr/defects4j/Closure_32_buggy/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,testParseLicenseAscii,"  public void testParseLicenseAscii() throws Exception {
    Node node = new Node(1);
    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
    String comment = ""@license Foo\n *   Bar\n\n  Baz*/"";
    parse(comment);
    assertEquals("" Foo\n   Bar\n\n  Baz"", node.getJSDocInfo().getLicense());
  }",junit.framework.ComparisonFailure: expected:< Foo
Closure_33,/222043010/omniapr/defects4j/Closure_33_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testIssue700,"  public void testIssue700() throws Exception {
    testTypes(
        ""/**\n"" +
        "" * @param {{text: string}} opt_data\n"" +
        "" * @return {string}\n"" +
        "" */\n"" +
        ""function temp1(opt_data) {\n"" +
        ""  return opt_data.text;\n"" +
        ""}\n"" +
        ""\n"" +
        ""/**\n"" +
        "" * @param {{activity: (boolean|number|string|null|Object)}} opt_data\n"" +
        "" * @return {string}\n"" +
        "" */\n"" +
        ""function temp2(opt_data) {\n"" +
        ""  /** @notypecheck */\n"" +
        ""  function __inner() {\n"" +
        ""    return temp1(opt_data.activity);\n"" +
        ""  }\n"" +
        ""  return __inner();\n"" +
        ""}\n"" +
        ""\n"" +
        ""/**\n"" +
        "" * @param {{n: number, text: string, b: boolean}} opt_data\n"" +
        "" * @return {string}\n"" +
        "" */\n"" +
        ""function temp3(opt_data) {\n"" +
        ""  return 'n: ' + opt_data.n + ', t: ' + opt_data.text + '.';\n"" +
        ""}\n"" +
        ""\n"" +
        ""function callee() {\n"" +
        ""  var output = temp3({\n"" +
        ""    n: 0,\n"" +
        ""    text: 'a string',\n"" +
        ""    b: true\n"" +
        ""  })\n"" +
        ""  alert(output);\n"" +
        ""}\n"" +
        ""\n"" +
        ""callee();"");
  }",junit.framework.AssertionFailedError: unexpected warnings(s):
Closure_34,/222043010/omniapr/defects4j/Closure_34_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testManyAdds,"  public void testManyAdds() {
    int numAdds = 10000;
    List<String> numbers = Lists.newArrayList(""0"", ""1"");
    Node current = new Node(Token.ADD, Node.newNumber(0), Node.newNumber(1));
    for (int i = 2; i < numAdds; i++) {
      current = new Node(Token.ADD, current);

      // 1000 is printed as 1E3, and screws up our test.
      int num = i % 1000;
      numbers.add(String.valueOf(num));
      current.addChildToBack(Node.newNumber(num));
    }

    String expected = Joiner.on(""+"").join(numbers);
    String actual = printNode(current).replace(""\n"", """");
    assertEquals(expected, actual);
  }",java.lang.StackOverflowError
Closure_35,/222043010/omniapr/defects4j/Closure_35_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testIssue669,"  public void testIssue669() throws Exception {
    testTypes(
        ""/** @return {{prop1: (Object|undefined)}} */"" +
         ""function f(a) {"" +
         ""  var results;"" +
         ""  if (a) {"" +
         ""    results = {};"" +
         ""    results.prop1 = {a: 3};"" +
         ""  } else {"" +
         ""    results = {prop2: 3};"" +
         ""  }"" +
         ""  return results;"" +
         ""}"");
  }",junit.framework.AssertionFailedError: unexpected warnings(s):
Closure_36,/222043010/omniapr/defects4j/Closure_36_buggy/test/com/google/javascript/jscomp/IntegrationTest.java,testSingletonGetter1,"  public void testSingletonGetter1() {
    CompilerOptions options = createCompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS
        .setOptionsForCompilationLevel(options);
    options.setCodingConvention(new ClosureCodingConvention());
    test(options,
        ""/** @const */\n"" +
        ""var goog = goog || {};\n"" +
        ""goog.addSingletonGetter = function(ctor) {\n"" +
        ""  ctor.getInstance = function() {\n"" +
        ""    return ctor.instance_ || (ctor.instance_ = new ctor());\n"" +
        ""  };\n"" +
        ""};"" +
        ""function Foo() {}\n"" +
        ""goog.addSingletonGetter(Foo);"" +
        ""Foo.prototype.bar = 1;"" +
        ""function Bar() {}\n"" +
        ""goog.addSingletonGetter(Bar);"" +
        ""Bar.prototype.bar = 1;"",
        """");
  }",junit.framework.AssertionFailedError: 
Closure_37,/222043010/omniapr/defects4j/Closure_37_buggy/test/com/google/javascript/jscomp/IntegrationTest.java,testIncompleteFunction,"  public void testIncompleteFunction() {
    CompilerOptions options = createCompilerOptions();
    options.ideMode = true;
    DiagnosticType[] warnings = new DiagnosticType[]{
        RhinoErrorReporter.PARSE_ERROR,
        RhinoErrorReporter.PARSE_ERROR,
        RhinoErrorReporter.PARSE_ERROR,
        RhinoErrorReporter.PARSE_ERROR};
    test(options,
        new String[] { ""var foo = {bar: function(e) }"" },
        new String[] { ""var foo = {bar: function(e){}};"" },
        warnings
    );
  }",java.lang.RuntimeException: java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Closure_38,/222043010/omniapr/defects4j/Closure_38_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testMinusNegativeZero,"  public void testMinusNegativeZero() {
    // Negative zero is weird, because we have to be able to distinguish
    // it from positive zero (there are some subtle differences in behavior).
    assertPrint(""x- -0"", ""x- -0.0"");
  }",junit.framework.ComparisonFailure: expected:<x-[ ]-0.0> but was:<x-[]-0.0>
Closure_39,/222043010/omniapr/defects4j/Closure_39_buggy/test/com/google/javascript/rhino/jstype/RecordTypeTest.java,testRecursiveRecord,"  public void testRecursiveRecord() {
    ProxyObjectType loop = new ProxyObjectType(registry, NUMBER_TYPE);
    JSType record = new RecordTypeBuilder(registry)
        .addProperty(""loop"", loop, null)
        .addProperty(""number"", NUMBER_TYPE, null)
        .addProperty(""string"", STRING_TYPE, null)
        .build();
    assertEquals(""{loop: number, number: number, string: string}"",
        record.toString());

    loop.setReferencedType(record);
    assertEquals(""{loop: {...}, number: number, string: string}"",
        record.toString());
    assertEquals(""{loop: ?, number: number, string: string}"",
        record.toAnnotationString());

    Asserts.assertEquivalenceOperations(record, loop);
  }","junit.framework.ComparisonFailure: expected:<{loop: [?], number: number, st...> but was:<{loop: [{...}], number: number, st...>"
Closure_39,/222043010/omniapr/defects4j/Closure_39_buggy/test/com/google/javascript/rhino/jstype/RecordTypeTest.java,testLongToString,"  public void testLongToString() {
    JSType record = new RecordTypeBuilder(registry)
        .addProperty(""a1"", NUMBER_TYPE, null)
        .addProperty(""a2"", NUMBER_TYPE, null)
        .addProperty(""a3"", NUMBER_TYPE, null)
        .addProperty(""a4"", NUMBER_TYPE, null)
        .addProperty(""a5"", NUMBER_TYPE, null)
        .addProperty(""a6"", NUMBER_TYPE, null)
        .build();
    assertEquals(""{a1: number, a2: number, a3: number, a4: number, ...}"",
        record.toString());
    assertEquals(
        ""{a1: number, a2: number, a3: number, a4: number,"" +
        "" a5: number, a6: number}"",
        record.toAnnotationString());
  }","junit.framework.ComparisonFailure: expected:<{loop: [?], number: number, st...> but was:<{loop: [{...}], number: number, st...>"
Closure_40,/222043010/omniapr/defects4j/Closure_40_buggy/test/com/google/javascript/jscomp/IntegrationTest.java,testIssue284,"  public void testIssue284() {
    CompilerOptions options = createCompilerOptions();
    options.smartNameRemoval = true;
    test(options,
        ""var goog = {};"" +
        ""goog.inherits = function(x, y) {};"" +
        ""var ns = {};"" +
        ""/** @constructor */"" +
        ""ns.PageSelectionModel = function() {};"" +
        ""/** @constructor */"" +
        ""ns.PageSelectionModel.FooEvent = function() {};"" +
        ""/** @constructor */"" +
        ""ns.PageSelectionModel.SelectEvent = function() {};"" +
        ""goog.inherits(ns.PageSelectionModel.ChangeEvent,"" +
        ""    ns.PageSelectionModel.FooEvent);"",
        """");
  }",java.lang.RuntimeException: java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Closure_40,/222043010/omniapr/defects4j/Closure_40_buggy/test/com/google/javascript/jscomp/NameAnalyzerTest.java,testIssue284,"  public void testIssue284() {
    test(
        ""var goog = {};"" +
        ""goog.inherits = function(x, y) {};"" +
        ""var ns = {};"" +
        ""/** @constructor */"" +
        ""ns.PageSelectionModel = function() {};"" +
        ""/** @constructor */"" +
        ""ns.PageSelectionModel.FooEvent = function() {};"" +
        ""/** @constructor */"" +
        ""ns.PageSelectionModel.SelectEvent = function() {};"" +
        ""goog.inherits(ns.PageSelectionModel.ChangeEvent,"" +
        ""    ns.PageSelectionModel.FooEvent);"",
        """");
  }",junit.framework.AssertionFailedError: 
Closure_41,/222043010/omniapr/defects4j/Closure_41_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testMethodInference6,"  public void testMethodInference6() throws Exception {
    testTypes(
        ""/** @constructor */ function F() {}"" +
        ""/** @param {number} x */ F.prototype.foo = function(x) { };"" +
        ""/** @constructor \n * @extends {F} */ "" +
        ""function G() {}"" +
        ""/** @override */ G.prototype.foo = function() { };"" +
        ""(new G()).foo(1);"");
  }",junit.framework.AssertionFailedError: unexpected warnings(s):
Closure_41,/222043010/omniapr/defects4j/Closure_41_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testIssue368,"  public void testIssue368() throws Exception {
    testTypes(
        ""/** @constructor */ function Foo(){}"" +
        ""/**\n"" +
        "" * @param {number} one\n"" +
        "" * @param {string} two\n"" +
        "" */\n"" +
        ""Foo.prototype.add = function(one, two) {};"" +
        ""/**\n"" +
        "" * @constructor\n"" +
        "" * @extends {Foo}\n"" +
        "" */\n"" +
        ""function Bar(){}"" +
        ""/** @override */\n"" +
        ""Bar.prototype.add = function(ignored) {};"" +
        ""(new Bar()).add(1, 2);"",
        ""actual parameter 2 of Bar.prototype.add does not match formal parameter\n"" +
        ""found   : number\n"" +
        ""required: string"");
  }",junit.framework.ComparisonFailure: expected:<[actual parameter 2 of Bar.prototype.add does not match formal parameter
Closure_41,/222043010/omniapr/defects4j/Closure_41_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testMethodInference6,"  public void testMethodInference6() throws Exception {
    testTypes(
        ""/** @constructor */ function F() {}"" +
        ""/** @param {number} x */ F.prototype.foo = function(x) { };"" +
        ""/** @constructor \n * @extends {F} */ "" +
        ""function G() {}"" +
        ""/** @override */ G.prototype.foo = function() { };"" +
        ""(new G()).foo(1);"");
  }",junit.framework.ComparisonFailure: expected:<[actual parameter 2 of Bar.prototype.add does not match formal parameter
Closure_42,/222043010/omniapr/defects4j/Closure_42_buggy/test/com/google/javascript/jscomp/parsing/ParserTest.java,testForEach,"  public void testForEach() {
    parseError(
        ""function f(stamp, status) {\n"" +
        ""  for each ( var curTiming in this.timeLog.timings ) {\n"" +
        ""    if ( curTiming.callId == stamp ) {\n"" +
        ""      curTiming.flag = status;\n"" +
        ""      break;\n"" +
        ""    }\n"" +
        ""  }\n"" +
        ""};"",
        ""unsupported language extension: for each"");
  }",junit.framework.AssertionFailedError
Closure_43,/222043010/omniapr/defects4j/Closure_43_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testLends10,"  public void testLends10() throws Exception {
    testTypes(
        ""function defineClass(x) { return function() {}; } "" +
        ""/** @constructor */"" +
        ""var Foo = defineClass("" +
        ""    /** @lends {Foo.prototype} */ ({/** @type {number} */ bar: 1}));"" +
        ""/** @return {string} */ function f() { return (new Foo()).bar; }"",
        ""inconsistent return type\n"" +
        ""found   : number\n"" +
        ""required: string"");
  }",junit.framework.ComparisonFailure: expected:<[inconsistent return type
Closure_43,/222043010/omniapr/defects4j/Closure_43_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testLends11,"  public void testLends11() throws Exception {
    testTypes(
        ""function defineClass(x, y) { return function() {}; } "" +
        ""/** @constructor */"" +
        ""var Foo = function() {};"" +
        ""/** @return {*} */ Foo.prototype.bar = function() { return 3; };"" +
        ""/**\n"" +
        "" * @constructor\n"" +
        "" * @extends {Foo}\n"" +
        "" */\n"" +
        ""var SubFoo = defineClass(Foo, "" +
        ""    /** @lends {SubFoo.prototype} */ ({\n"" +
        ""      /** @return {number} */ bar: function() { return 3; }}));"" +
        ""/** @return {string} */ function f() { return (new SubFoo()).bar(); }"",
        ""inconsistent return type\n"" +
        ""found   : number\n"" +
        ""required: string"");
  }",junit.framework.ComparisonFailure: expected:<[inconsistent return type
Closure_44,/222043010/omniapr/defects4j/Closure_44_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testIssue620,"  public void testIssue620() {
    assertPrint(""alert(/ / / / /);"", ""alert(/ // / /)"");
    assertPrint(""alert(/ // / /);"", ""alert(/ // / /)"");
  }",junit.framework.ComparisonFailure: expected:<alert(/ //[ ]/ /)> but was:<alert(/ //[]/ /)>
Closure_45,/222043010/omniapr/defects4j/Closure_45_buggy/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java,testIssue618_1,"  public void testIssue618_1() {
    this.removeGlobal = false;
    testSame(
        ""function f() {\n"" +
        ""  var a = [], b;\n"" +
        ""  a.push(b = []);\n"" +
        ""  b[0] = 1;\n"" +
        ""  return a;\n"" +
        ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_46,/222043010/omniapr/defects4j/Closure_46_buggy/test/com/google/javascript/rhino/jstype/JSTypeTest.java,testRecordTypeLeastSuperType2,"  public void testRecordTypeLeastSuperType2() {
    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
    builder.addProperty(""e"", NUMBER_TYPE, null);
    builder.addProperty(""b"", STRING_TYPE, null);
    builder.addProperty(""c"", STRING_TYPE, null);
    JSType otherRecordType = builder.build();

    assertTypeEquals(
        registry.createUnionType(recordType, otherRecordType),
        recordType.getLeastSupertype(otherRecordType));
  }","junit.framework.AssertionFailedError: Expected: ({a: number, b: string}|{b: string, c: string, e: number})"
Closure_46,/222043010/omniapr/defects4j/Closure_46_buggy/test/com/google/javascript/rhino/jstype/JSTypeTest.java,testRecordTypeLeastSuperType3,"  public void testRecordTypeLeastSuperType3() {
    RecordTypeBuilder builder = new RecordTypeBuilder(registry);
    builder.addProperty(""d"", NUMBER_TYPE, null);
    builder.addProperty(""e"", STRING_TYPE, null);
    builder.addProperty(""f"", STRING_TYPE, null);
    JSType otherRecordType = builder.build();

    assertTypeEquals(
        registry.createUnionType(recordType, otherRecordType),
        recordType.getLeastSupertype(otherRecordType));
  }","junit.framework.AssertionFailedError: Expected: ({a: number, b: string}|{b: string, c: string, e: number})"
Closure_46,/222043010/omniapr/defects4j/Closure_46_buggy/test/com/google/javascript/rhino/jstype/RecordTypeTest.java,testSupAndInf,"  public void testSupAndInf() {
    JSType recordA = new RecordTypeBuilder(registry)
        .addProperty(""a"", NUMBER_TYPE, null)
        .addProperty(""b"", NUMBER_TYPE, null)
        .build();
    JSType recordC = new RecordTypeBuilder(registry)
        .addProperty(""b"", NUMBER_TYPE, null)
        .addProperty(""c"", NUMBER_TYPE, null)
        .build();
    ProxyObjectType proxyRecordA = new ProxyObjectType(registry, recordA);
    ProxyObjectType proxyRecordC = new ProxyObjectType(registry, recordC);

    JSType aInfC = new RecordTypeBuilder(registry)
        .addProperty(""a"", NUMBER_TYPE, null)
        .addProperty(""b"", NUMBER_TYPE, null)
        .addProperty(""c"", NUMBER_TYPE, null)
        .build();

    JSType aSupC = registry.createUnionType(recordA, recordC);

    Asserts.assertTypeEquals(
        aInfC, recordA.getGreatestSubtype(recordC));
    Asserts.assertTypeEquals(
        aSupC, recordA.getLeastSupertype(recordC));

    Asserts.assertTypeEquals(
        aInfC, proxyRecordA.getGreatestSubtype(proxyRecordC));
    Asserts.assertTypeEquals(
        aSupC, proxyRecordA.getLeastSupertype(proxyRecordC));
  }","junit.framework.AssertionFailedError: Expected: ({a: number, b: number}|{b: number, c: number})"
Closure_47,/222043010/omniapr/defects4j/Closure_47_buggy/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java,testParseSourceMetaMap,"  public void testParseSourceMetaMap() throws Exception {
    final String INPUT1 = ""file1"";
    final String INPUT2 = ""file2"";
    LinkedHashMap<String, String> inputs = Maps.newLinkedHashMap();
    inputs.put(INPUT1, ""var __FOO__ = 1;"");
    inputs.put(INPUT2, ""var __BAR__ = 2;"");
    RunResult result1 = compile(inputs.get(INPUT1), INPUT1);
    RunResult result2 = compile(inputs.get(INPUT2), INPUT2);

    final String MAP1 = ""map1"";
    final String MAP2 = ""map2"";
    final LinkedHashMap<String, String> maps = Maps.newLinkedHashMap();
    maps.put(MAP1, result1.sourceMapFileContent);
    maps.put(MAP2, result2.sourceMapFileContent);

    List<SourceMapSection> sections = Lists.newArrayList();

    StringBuilder output = new StringBuilder();
    FilePosition offset = appendAndCount(output, result1.generatedSource);
    sections.add(SourceMapSection.forURL(MAP1, 0, 0));
    output.append(result2.generatedSource);
    sections.add(
        SourceMapSection.forURL(MAP2, offset.getLine(), offset.getColumn()));

    SourceMapGeneratorV3 generator = new SourceMapGeneratorV3();
    StringBuilder mapContents = new StringBuilder();
    generator.appendIndexMapTo(mapContents, ""out.js"", sections);

    check(inputs, output.toString(), mapContents.toString(),
      new SourceMapSupplier() {
        @Override
        public String getSourceMap(String url){
          return maps.get(url);
      }});
  }",junit.framework.AssertionFailedError: expected:<5> but was:<4>
Closure_47,/222043010/omniapr/defects4j/Closure_47_buggy/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java,testGoldenOutput0a,"  public void testGoldenOutput0a() throws Exception {
    // Empty source map test
    checkSourceMap(""a;"",

                   ""{\n"" +
                   ""\""version\"":3,\n"" +
                   ""\""file\"":\""testcode\"",\n"" +
                   ""\""lineCount\"":1,\n"" +
                   ""\""mappings\"":\""AAAAA;\"",\n"" +
                   ""\""sources\"":[\""testcode\""],\n"" +
                   ""\""names\"":[\""a\""]\n"" +
                   ""}\n"");
  }",junit.framework.AssertionFailedError: expected:<5> but was:<4>
Closure_47,/222043010/omniapr/defects4j/Closure_47_buggy/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java,testMultilineMapping,"  public void testMultilineMapping() throws Exception {
    compileAndCheck(""function __BASIC__(__PARAM1__, __PARAM2__) {\n"" +
                    ""var __VAR__ = '__STR__';\n"" +
                    ""var __ANO__ = \""__STR2__\"";\n"" +
                    ""}"");
  }",junit.framework.AssertionFailedError: expected:<5> but was:<4>
Closure_47,/222043010/omniapr/defects4j/Closure_47_buggy/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java,testMultiFunctionMapping,"  public void testMultiFunctionMapping() throws Exception {
    compileAndCheck(""function __BASIC__(__PARAM1__, __PARAM2__) {\n"" +
                    ""var __VAR__ = '__STR__';\n"" +
                    ""var __ANO__ = \""__STR2__\"";\n"" +
                    ""}\n"" +

                    ""function __BASIC2__(__PARAM3__, __PARAM4__) {\n"" +
                    ""var __VAR2__ = '__STR2__';\n"" +
                    ""var __ANO2__ = \""__STR3__\"";\n"" +
                    ""}\n"");
  }",junit.framework.AssertionFailedError: expected:<5> but was:<4>
Closure_47,/222043010/omniapr/defects4j/Closure_47_buggy/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java,testLiteralMappingsGoldenOutput,"  public void testLiteralMappingsGoldenOutput() throws Exception {
    // Empty source map test
    checkSourceMap(""function __BASIC__(__PARAM1__, __PARAM2__) { "" +
                   ""var __VAR__ = '__STR__'; }"",

                   ""{\n"" +
                   ""\""version\"":3,\n"" +
                   ""\""file\"":\""testcode\"",\n"" +
                   ""\""lineCount\"":1,\n"" +
                   ""\""mappings\"":\""AAAAA,QAASA,UAAS,CAACC,UAAD,CAAaC,UAAb,"" +
                       ""CAAyB,CAAE,IAAIC,QAAU,SAAhB;\"",\n"" +
                   ""\""sources\"":[\""testcode\""],\n"" +
                   ""\""names\"":[\""__BASIC__\"",\""__PARAM1__\"",\""__PARAM2__\"","" +
                       ""\""__VAR__\""]\n"" +
                   ""}\n"");
  }",junit.framework.AssertionFailedError: expected:<5> but was:<4>
Closure_47,/222043010/omniapr/defects4j/Closure_47_buggy/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java,testMultilineMapping2,"  public void testMultilineMapping2() throws Exception {
    compileAndCheck(""function __BASIC__(__PARAM1__, __PARAM2__) {\n"" +
                    ""var __VAR__ = 1;\n"" +
                    ""var __ANO__ = 2;\n"" +
                    ""}"");
  }",junit.framework.AssertionFailedError: expected:<5> but was:<4>
Closure_47,/222043010/omniapr/defects4j/Closure_47_buggy/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java,testBasicMappingGoldenOutput,"  public void testBasicMappingGoldenOutput() throws Exception {
    // Empty source map test
    checkSourceMap(""function __BASIC__() { }"",

                   ""{\n"" +
                   ""\""version\"":3,\n"" +
                   ""\""file\"":\""testcode\"",\n"" +
                   ""\""lineCount\"":1,\n"" +
                   ""\""mappings\"":\""AAAAA,QAASA,UAAS,EAAG;\"",\n"" +
                   ""\""sources\"":[\""testcode\""],\n"" +
                   ""\""names\"":[\""__BASIC__\""]\n"" +
                   ""}\n"");
  }",junit.framework.AssertionFailedError: expected:<5> but was:<4>
Closure_47,/222043010/omniapr/defects4j/Closure_47_buggy/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java,testSourceMapMerging,"  public void testSourceMapMerging() throws Exception {
    final String INPUT1 = ""file1"";
    final String INPUT2 = ""file2"";
    LinkedHashMap<String, String> inputs = Maps.newLinkedHashMap();
    inputs.put(INPUT1, ""var __FOO__ = 1;"");
    inputs.put(INPUT2, ""var __BAR__ = 2;"");
    RunResult result1 = compile(inputs.get(INPUT1), INPUT1);
    RunResult result2 = compile(inputs.get(INPUT2), INPUT2);

    StringBuilder output = new StringBuilder();
    FilePosition offset = appendAndCount(output, result1.generatedSource);
    output.append(result2.generatedSource);

    SourceMapGeneratorV3 generator = new SourceMapGeneratorV3();

    generator.mergeMapSection(0, 0, result1.sourceMapFileContent);
    generator.mergeMapSection(offset.getLine(), offset.getColumn(),
        result2.sourceMapFileContent);

    StringBuilder mapContents = new StringBuilder();
    generator.appendTo(mapContents, ""out.js"");

    check(inputs, output.toString(), mapContents.toString());
  }",junit.framework.AssertionFailedError: expected:<5> but was:<4>
Closure_47,/222043010/omniapr/defects4j/Closure_47_buggy/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java,testLiteralMappings,"  public void testLiteralMappings() throws Exception {
    compileAndCheck(""function __BASIC__(__PARAM1__, __PARAM2__) { "" +
                    ""var __VAR__ = '__STR__'; }"");
  }",junit.framework.AssertionFailedError: expected:<5> but was:<4>
Closure_47,/222043010/omniapr/defects4j/Closure_47_buggy/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java,testBasicMapping1,"  public void testBasicMapping1() throws Exception {
    compileAndCheck(""function __BASIC__() { }"");
  }",junit.framework.AssertionFailedError: expected:<5> but was:<4>
Closure_47,/222043010/omniapr/defects4j/Closure_47_buggy/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java,testBasicMapping2,"  public void testBasicMapping2() throws Exception {
    compileAndCheck(""function __BASIC__(__PARAM1__) {}"");
  }",junit.framework.AssertionFailedError: expected:<5> but was:<4>
Closure_47,/222043010/omniapr/defects4j/Closure_47_buggy/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java,testGoldenOutput1,"  public void testGoldenOutput1() throws Exception {
    detailLevel = SourceMap.DetailLevel.ALL;

    checkSourceMap(""function f(foo, bar) { foo = foo + bar + 2; return foo; }"",

                   ""{\n"" +
                   ""\""version\"":3,\n"" +
                   ""\""file\"":\""testcode\"",\n"" +
                   ""\""lineCount\"":1,\n"" +
                   ""\""mappings\"":\""AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN,"" +
                       ""CAAW,CAAED,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkB,CAAG,"" +
                       ""OAAOD,IAA9B;\"",\n"" +
                   ""\""sources\"":[\""testcode\""],\n"" +
                   ""\""names\"":[\""f\"",\""foo\"",\""bar\""]\n"" +
                   ""}\n"");

    detailLevel = SourceMap.DetailLevel.SYMBOLS;

    checkSourceMap(""function f(foo, bar) { foo = foo + bar + 2; return foo; }"",

                   ""{\n"" +
                   ""\""version\"":3,\n"" +
                   ""\""file\"":\""testcode\"",\n"" +
                   ""\""lineCount\"":1,\n"" +
                   ""\""mappings\"":\""AAAAA,QAASA,EAATA,CAAWC,GAAXD,CAAgBE,"" +
                       ""GAAhBF,EAAuBC,GAAvBD,CAA6BC,GAA7BD,CAAmCE,GAAnCF,"" +
                       ""SAAmDC,IAAnDD;\"",\n"" +
                   ""\""sources\"":[\""testcode\""],\n"" +
                   ""\""names\"":[\""f\"",\""foo\"",\""bar\""]\n"" +
                   ""}\n"");
  }",junit.framework.AssertionFailedError: expected:<5> but was:<4>
Closure_47,/222043010/omniapr/defects4j/Closure_47_buggy/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java,testGoldenOutput2,"  public void testGoldenOutput2() throws Exception {
    checkSourceMap(""function f(foo, bar) {\r\n\n\n\nfoo = foo + bar + foo;"" +
                   ""\nreturn foo;\n}"",

                   ""{\n"" +
                   ""\""version\"":3,\n"" +
                   ""\""file\"":\""testcode\"",\n"" +
                   ""\""lineCount\"":1,\n"" +
                   ""\""mappings\"":\""AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN,"" +
                       ""CAAW,CAIrBD,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkBD,"" +
                       ""GAClB,OAAOA,IALc;\"",\n"" +
                   ""\""sources\"":[\""testcode\""],\n"" +
                   ""\""names\"":[\""f\"",\""foo\"",\""bar\""]\n"" +
                   ""}\n"");
  }",junit.framework.AssertionFailedError: expected:<5> but was:<4>
Closure_47,/222043010/omniapr/defects4j/Closure_47_buggy/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java,testGoldenOutput3,"  public void testGoldenOutput3() throws Exception {
    checkSourceMap(""c:\\myfile.js"",
                   ""foo;"",

                   ""{\n"" +
                   ""\""version\"":3,\n"" +
                   ""\""file\"":\""testcode\"",\n"" +
                   ""\""lineCount\"":1,\n"" +
                   ""\""mappings\"":\""AAAAA;\"",\n"" +
                   ""\""sources\"":[\""c:\\\\myfile.js\""],\n"" +
                   ""\""names\"":[\""foo\""]\n"" +
                   ""}\n"");
  }",junit.framework.AssertionFailedError: expected:<5> but was:<4>
Closure_47,/222043010/omniapr/defects4j/Closure_47_buggy/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java,testGoldenOutput4,"  public void testGoldenOutput4() throws Exception {
    checkSourceMap(""c:\\myfile.js"",
                   ""foo;   boo;   goo;"",

                   ""{\n"" +
                   ""\""version\"":3,\n"" +
                   ""\""file\"":\""testcode\"",\n"" +
                   ""\""lineCount\"":1,\n"" +
                   ""\""mappings\"":\""AAAAA,GAAOC,IAAOC;\"",\n"" +
                   ""\""sources\"":[\""c:\\\\myfile.js\""],\n"" +
                   ""\""names\"":[\""foo\"",\""boo\"",\""goo\""]\n"" +
                   ""}\n"");
  }",junit.framework.AssertionFailedError: expected:<5> but was:<4>
Closure_47,/222043010/omniapr/defects4j/Closure_47_buggy/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java,testGoldenOutput5,"  public void testGoldenOutput5() throws Exception {
    detailLevel = SourceMap.DetailLevel.ALL;

    checkSourceMap(
        ""c:\\myfile.js"",
        ""/** @preserve\n"" +
        "" * this is a test.\n"" +
        "" */\n"" +
        ""var foo=a + 'this is a really long line that will force the""
        + "" mapping to span multiple lines 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + ""' + c + d + e;"",

        ""{\n"" +
        ""\""version\"":3,\n"" +
        ""\""file\"":\""testcode\"",\n"" +
        ""\""lineCount\"":6,\n"" +
        ""\""mappings\"":\""A;;;;AAGA,IAAIA,IAAIC,CAAJD,CAAQ,mxCAARA;AAA8xCE,"" +
            ""CAA9xCF,CAAkyCG,CAAlyCH,CAAsyCI;\"",\n"" +
        ""\""sources\"":[\""c:\\\\myfile.js\""],\n"" +
        ""\""names\"":[\""foo\"",\""a\"",\""c\"",\""d\"",\""e\""]\n"" +
        ""}\n"");

    detailLevel = SourceMap.DetailLevel.SYMBOLS;

    checkSourceMap(""c:\\myfile.js"",
        ""/** @preserve\n"" +
        "" * this is a test.\n"" +
        "" */\n"" +
        ""var foo=a + 'this is a really long line that will force the""
        + "" mapping to span multiple lines 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + "" 123456789 123456789 123456789 123456789 123456789""
        + ""' + c + d + e;"",

        ""{\n"" +
        ""\""version\"":3,\n"" +
        ""\""file\"":\""testcode\"",\n"" +
        ""\""lineCount\"":6,\n"" +
        ""\""mappings\"":\""A;;;;IAGIA,IAAIC,CAAJD;AAA8xCE,CAA9xCF,CAAkyCG,"" +
            ""CAAlyCH,CAAsyCI;\"",\n"" +
        ""\""sources\"":[\""c:\\\\myfile.js\""],\n"" +
        ""\""names\"":[\""foo\"",\""a\"",\""c\"",\""d\"",\""e\""]\n"" +
        ""}\n"");
  }",junit.framework.AssertionFailedError: expected:<5> but was:<4>
Closure_48,/222043010/omniapr/defects4j/Closure_48_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testIssue586,"  public void testIssue586() throws Exception {
    testTypes(
        ""/** @constructor */"" +
        ""var MyClass = function() {};"" +
        ""/** @param {boolean} success */"" +
        ""MyClass.prototype.fn = function(success) {};"" +
        ""MyClass.prototype.test = function() {"" +
        ""  this.fn();"" +
        ""  this.fn = function() {};"" +
        ""};"",
        ""Function MyClass.prototype.fn: called with 0 argument(s). "" +
        ""Function requires at least 1 argument(s) "" +
        ""and no more than 1 argument(s)."");
  }",junit.framework.AssertionFailedError: expected a warning
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/FunctionInjectorTest.java,testInline19b,"  public void testInline19b() {
    helperInlineReferenceToFunction(
        ""var x = 1; var y = 2;"" +
        ""function foo(a,b){y = a; x = b;}; "" +
        ""function bar() { foo(x,y); }"",
        ""var x = 1; var y = 2;"" +
        ""function foo(a,b){y = a; x = b;}; "" +
        ""function bar() {"" +
           ""{var b$$inline_1=y;"" +
            ""y = x;"" +
            ""x = b$$inline_1;}"" +
        ""}"",
        ""foo"", INLINE_BLOCK);
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/FunctionInjectorTest.java,testInlineIntoLoop,"  public void testInlineIntoLoop() {
    helperInlineReferenceToFunction(
        ""function foo(a){var b;return a;}; "" +
        ""for(;1;){ foo(1); }"",
        ""function foo(a){var b;return a;}; "" +
        ""for(;1;){ {"" +
            ""var b$$inline_1=void 0;1}}"",
        ""foo"", INLINE_BLOCK);

    helperInlineReferenceToFunction(
        ""function foo(a){var b;return a;}; "" +
        ""do{ foo(1); } while(1)"",
        ""function foo(a){var b;return a;}; "" +
        ""do{ {"" +
            ""var b$$inline_1=void 0;1}}while(1)"",
        ""foo"", INLINE_BLOCK);

    helperInlineReferenceToFunction(
        ""function foo(a){for(var b in c)return a;}; "" +
        ""for(;1;){ foo(1); }"",
        ""function foo(a){var b;for(b in c)return a;}; "" +
        ""for(;1;){ {JSCompiler_inline_label_foo_2:{"" +
            ""var b$$inline_1=void 0;for(b$$inline_1 in c){"" +
              ""1;break JSCompiler_inline_label_foo_2"" +
            ""}}}}"",
        ""foo"", INLINE_BLOCK);
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/FunctionInjectorTest.java,testInline13,"  public void testInline13() {
    // Parameter has side-effects.
    helperInlineReferenceToFunction(
        ""function foo(a){return a;}; "" +
        ""function x() { foo(x++); }"",
        ""function foo(a){return a;}; "" +
        ""function x() {{var a$$inline_0=x++;"" +
            ""a$$inline_0}}"",
        ""foo"", INLINE_BLOCK);
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/FunctionInjectorTest.java,testInline14,"  public void testInline14() {
    // Parameter has side-effects.
    helperInlineReferenceToFunction(
        ""function foo(a){return a+a;}; foo(x++);"",
        ""function foo(a){return a+a;}; "" +
            ""{var a$$inline_0=x++;"" +
            "" a$$inline_0+"" +
            ""a$$inline_0;}"",
        ""foo"", INLINE_BLOCK);
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/FunctionInjectorTest.java,testInline15,"  public void testInline15() {
    // Parameter has mutable, references more than once.
    helperInlineReferenceToFunction(
        ""function foo(a){return a+a;}; foo(new Date());"",
        ""function foo(a){return a+a;}; "" +
            ""{var a$$inline_0=new Date();"" +
            "" a$$inline_0+"" +
            ""a$$inline_0;}"",
        ""foo"", INLINE_BLOCK);
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/FunctionInjectorTest.java,testInline16,"  public void testInline16() {
    // Parameter is large, references more than once.
    helperInlineReferenceToFunction(
        ""function foo(a){return a+a;}; foo(function(){});"",
        ""function foo(a){return a+a;}; "" +
            ""{var a$$inline_0=function(){};"" +
            "" a$$inline_0+"" +
            ""a$$inline_0;}"",
        ""foo"", INLINE_BLOCK);
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/FunctionInjectorTest.java,testInline17,"  public void testInline17() {
    // Parameter has side-effects.
    helperInlineReferenceToFunction(
        ""function foo(a){return true;}; foo(goo());"",
        ""function foo(a){return true;};"" +
            ""{var a$$inline_0=goo();true}"",
        ""foo"", INLINE_BLOCK);
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/FunctionInjectorTest.java,testInline18,"  public void testInline18() {
    // This doesn't bring names into the global name space.
    helperInlineReferenceToFunction(
        ""function foo(a){var b;return a;}; "" +
            ""function x() { foo(goo()); }"",
            ""function foo(a){var b;return a;}; "" +
            ""function x() {{var a$$inline_0=goo();"" +
                ""var b$$inline_1;a$$inline_0}}"",
        ""foo"", INLINE_BLOCK);
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/FunctionInjectorTest.java,testInline19,"  public void testInline19() {
    // Properly alias.
    helperInlineReferenceToFunction(
        ""var x = 1; var y = 2;"" +
        ""function foo(a,b){x = b; y = a;}; "" +
        ""function bar() { foo(x,y); }"",
        ""var x = 1; var y = 2;"" +
        ""function foo(a,b){x = b; y = a;}; "" +
        ""function bar() {"" +
           ""{var a$$inline_0=x;"" +
            ""x = y;"" +
            ""y = a$$inline_0;}"" +
        ""}"",
        ""foo"", INLINE_BLOCK);
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/FunctionInjectorTest.java,testBug1897706,"  public void testBug1897706() {
    helperInlineReferenceToFunction(
        ""function foo(a){}; foo(x())"",
        ""function foo(a){}; {var a$$inline_0=x()}"",
        ""foo"", INLINE_BLOCK);

    helperInlineReferenceToFunction(
        ""function foo(a){bar()}; foo(x())"",
        ""function foo(a){bar()}; {var a$$inline_0=x();bar()}"",
        ""foo"", INLINE_BLOCK);

    helperInlineReferenceToFunction(
        ""function foo(a,b){bar()}; foo(x(),y())"",
        ""function foo(a,b){bar()};"" +
        ""{var a$$inline_0=x();var b$$inline_1=y();bar()}"",
        ""foo"", INLINE_BLOCK);
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/FunctionInjectorTest.java,testInlineFunctionWithInnerFunction5,"  public void testInlineFunctionWithInnerFunction5() {
    // Call with inner function statement.
    helperInlineReferenceToFunction(
        ""function foo(){function x() {var a; return true;} return x}; foo();"",
        ""function foo(){function x(){var a;return true}return x};"" +
            ""{var x$$inline_0 = function(){"" +
            ""var a$$inline_1;return true};x$$inline_0}"",
        ""foo"", INLINE_BLOCK);
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,testMutateWithParameters3,"  public void testMutateWithParameters3() {
    // Parameter has side-effects.
    helperMutate(
        ""function foo(a){return a;}; "" +
        ""function x() { foo(x++); }"",
        ""{var a$$inline_0 = x++; a$$inline_0}"",
        ""foo"", null);
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,testMutateCallInLoopVars1,"  public void testMutateCallInLoopVars1() {
    // baseline: outside a loop, the constant remains constant.
    boolean callInLoop = false;
    helperMutate(
        ""function foo(a){var B = bar(); a;}; foo(1);"",
        ""{var B$$inline_1=bar(); 1;}"",
        ""foo"", null, false, callInLoop);
    // ... in a loop, the constant-ness is removed.
    // TODO(johnlenz): update this test to look for the const annotation.
    callInLoop = true;
    helperMutate(
        ""function foo(a){var B = bar(); a;}; foo(1);"",
        ""{var B$$inline_1 = bar(); 1;}"",
        ""foo"", null, false, callInLoop);
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,testMutateInitializeUninitializedVars1,"  public void testMutateInitializeUninitializedVars1() {
    helperMutate(
        ""function foo(a){var b;return a;}; foo(1);"",
        ""{var b$$inline_1=void 0;1}"",
        ""foo"", null, false, true);
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,testMutateInitializeUninitializedVars2,"  public void testMutateInitializeUninitializedVars2() {
    helperMutate(
        ""function foo(a){for(var b in c)return a;}; foo(1);"",
        ""{JSCompiler_inline_label_foo_2:"" +
          ""{"" +
            ""for(var b$$inline_1 in c){"" +
                ""1;break JSCompiler_inline_label_foo_2"" +
             ""}"" +
          ""}"" +
        ""}"",
        ""foo"", null);
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,testMutateFunctionDefinition,"  public void testMutateFunctionDefinition() {
     // function declarations are rewritten as function
     // expressions
     helperMutate(
        ""function foo(a){function g(){}}; foo(1);"",
        ""{var g$$inline_1=function(){};}"",
        ""foo"", null);
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java,testMutate8,"  public void testMutate8() {
    // Parameter has side-effects.
    helperMutate(
        ""function foo(a){return a+a;}; foo(x++);"",
        ""{var a$$inline_0 = x++;"" +
            ""a$$inline_0 + a$$inline_0;}"",
        ""foo"", null);
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testLoopWithFunctionWithFunction,"  public void testLoopWithFunctionWithFunction() {
    assumeMinimumCapture = true;
    test(""function _testLocalVariableInLoop_() {\n"" +
        ""  var result = 0;\n"" +
        ""  function foo() {\n"" +
        ""    var arr = [1, 2, 3, 4, 5];\n"" +
        ""    for (var i = 0, l = arr.length; i < l; i++) {\n"" +
        ""      var j = arr[i];\n"" +
        // don't inline this function, because the correct behavior depends
        // captured values.
        ""      (function() {\n"" +
        ""        var k = j;\n"" +
        ""        setTimeout(function() { result += k; }, 5 * i);\n"" +
        ""      })();\n"" +
        ""    }\n"" +
        ""  }\n"" +
        ""  foo();\n"" +
        ""}"",
        ""function _testLocalVariableInLoop_(){\n"" +
        ""  var result=0;\n"" +
        ""  {"" +
        ""  var arr$$inline_0=[1,2,3,4,5];\n"" +
        ""  var i$$inline_1=0;\n"" +
        ""  var l$$inline_2=arr$$inline_0.length;\n"" +
        ""  for(;i$$inline_1<l$$inline_2;i$$inline_1++){\n"" +
        ""    var j$$inline_3=arr$$inline_0[i$$inline_1];\n"" +
        ""    (function(){\n"" +
        ""       var k$$inline_4=j$$inline_3;\n"" +
        ""       setTimeout(function(){result+=k$$inline_4},5*i$$inline_1)\n"" +
        ""     })()\n"" +
        ""  }\n"" +
        ""  }\n"" +
        ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testShadowVariables16,"  public void testShadowVariables16() {
    assumeMinimumCapture = false;
    // Inline functions defined as a child of the CALL node.
    test(""var a=3;"" +
         ""function foo(){return a}"" +
         ""(function(){var a=5;(function(){foo()})()})()"",
         ""var a=3;"" +
         ""{var a$$inline_0=5;{a}}""
         );

    assumeMinimumCapture = true;
    // Inline functions defined as a child of the CALL node.
    test(""var a=3;"" +
         ""function foo(){return a}"" +
         ""(function(){var a=5;(function(){foo()})()})()"",
         ""var a=3;"" +
         ""{var a$$inline_1=5;{a}}""
         );

  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testShadowVariables18,"  public void testShadowVariables18() {
    test(""var a=0;"" +
        ""function bar(){return a+a}"" +
        ""function foo(){var a=3;return bar()}"" +
        ""function _goo(){var a=2;var x=foo();}"",

        ""var a=0;"" +
        ""function _goo(){var a$$2=2;var x;"" +
        ""{var a$$inline_0=3;x=a+a}}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testCostBasedInlining11,"  public void testCostBasedInlining11() {
    // With block inlining
    test(""function f(a){return a + a;}"" +
         ""var a = f(f(1))"",
         ""var a;"" +
         ""{var a$$inline_0=1+1;"" +
         ""a=a$$inline_0+a$$inline_0}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testMixedModeInliningCosting3,"  public void testMixedModeInliningCosting3() {
    // Do inline here because the function definition can be eliminated.
    test(
        ""function foo(a,b){return a+b+a+b+4+5+6+7+8+9+1+2+3+10}"" +
        ""foo(1,2);"" +
        ""foo(2,3,x())"",

        ""1+2+1+2+4+5+6+7+8+9+1+2+3+10;"" +
        ""{var JSCompiler_inline_anon_param_2=x();"" +
        ""2+3+2+3+4+5+6+7+8+9+1+2+3+10}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testInlineNeverMutateConstants,"  public void testInlineNeverMutateConstants() {
    test(""function f(x){return x=1}f(undefined)"",
         ""{var x$$inline_0=undefined;"" +
         ""x$$inline_0=1}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testInlineWithThis7,"  public void testInlineWithThis7() {
    assumeStrictThis = true;
    // In strict mode, ""this"" is never coerced so we can use the provided value.
    test(""function f(a){a=1;this} f.call();"",
         ""{var a$$inline_0=void 0; a$$inline_0=1; void 0;}"");
    test(""function f(a){a=1;this} f.call(x, x);"",
         ""{var a$$inline_0=x; a$$inline_0=1; x;}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testAnonymous1,"  public void testAnonymous1() {
    assumeMinimumCapture = false;
    test(""(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();"",
         ""{var a$$inline_0=10;"" +
         ""{var b$$inline_1=a$$inline_0;"" +
         ""a$$inline_0++;alert(b$$inline_1)}}"");

    assumeMinimumCapture = true;
    test(""(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();"",
        ""{var a$$inline_2=10;"" +
        ""{var b$$inline_0=a$$inline_2;"" +
        ""a$$inline_2++;alert(b$$inline_0)}}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testAnonymous3,"  public void testAnonymous3() {
    // Introducing a new value into is tricky
    assumeMinimumCapture = false;
    testSame(""(function(){var a=10;(function(){arguments;})()})();"");

    assumeMinimumCapture = true;
    test(""(function(){var a=10;(function(){arguments;})()})();"",
         ""{var a$$inline_0=10;(function(){arguments;})();}"");

    test(""(function(){(function(){arguments;})()})();"",
        ""{(function(){arguments;})()}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testShadowVariables1,"  public void testShadowVariables1() {
    // The Normalize pass now guarantees that that globals are never shadowed
    // by locals.

    // ""foo"" is inlined here as its parameter ""a"" doesn't conflict.
    // ""bar"" is assigned a new name.
    test(""var a=0;"" +
         ""function foo(a){return 3+a}"" +
         ""function bar(){var a=foo(4)}"" +
         ""bar();"",

         ""var a=0;"" +
         ""{var a$$inline_0=3+4}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testShadowVariables3,"  public void testShadowVariables3() {
    // ""foo"" is inlined into exported ""_bar"", aliasing foo's ""a"".
    test(""var a=0;"" +
        ""function foo(){var a=2;return 3+a}"" +
        ""function _bar(){a=foo()}"",

        ""var a=0;"" +
        ""function _bar(){{var a$$inline_0=2;"" +
        ""a=3+a$$inline_0}}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testShadowVariables6,"  public void testShadowVariables6() {
    test(""var a=0;"" +
        ""function foo(){var a=4;return 3+a}"" +
        ""function _bar(a){a=foo(4)}"",

        ""var a=0;function _bar(a$$2){{"" +
        ""var a$$inline_0=4;"" +
        ""a$$2=3+a$$inline_0}}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testShadowVariables7,"  public void testShadowVariables7() {
    assumeMinimumCapture = false;
    test(""var a=3;"" +
         ""function foo(){return a}"" +
         ""(function(){var a=5;(function(){foo()})()})()"",
         ""var a=3;"" +
         ""{var a$$inline_0=5;{a}}""
         );

    assumeMinimumCapture = true;
    test(""var a=3;"" +
         ""function foo(){return a}"" +
         ""(function(){var a=5;(function(){foo()})()})()"",
         ""var a=3;"" +
         ""{var a$$inline_1=5;{a}}""
         );
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testFunctionExpressionCallInlining11b,"  public void testFunctionExpressionCallInlining11b() {
    assumeMinimumCapture = false;
    // Can't inline functions that return inner functions and have local names.
    testSame(""((function(){var a; return function(){foo()}})())();"");

    assumeMinimumCapture = true;
    test(
        ""((function(){var a; return function(){foo()}})())();"",

        ""{var JSCompiler_inline_result$$0;"" +
        ""var a$$inline_1;"" +
        ""JSCompiler_inline_result$$0=function(){foo()};}"" +
        ""JSCompiler_inline_result$$0()"");

  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testComplexInlineNoResultNoParamCall3,"  public void testComplexInlineNoResultNoParamCall3() {
    // We now allow vars in the global space.
    //   Don't inline into vars into global scope.
    //   testSame(""function f(){a();b();var z=1+1}f()"");

    // But do inline into functions
    test(""function f(){a();b();var z=1+1}function _foo(){f()}"",
         ""function _foo(){{a();b();var z$$inline_0=1+1}}"");

  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testCostBasedInlining9,"  public void testCostBasedInlining9() {
    // Here both direct and block inlining is used.  The call to f as a
    // parameter is inlined directly, which the call to f with f as a parameter
    // is inlined using block inlining.
    test(""function f(a){return 1 + a + a;}"" +
         ""var a = f(f(1));"",
         ""var a;"" +
         ""{var a$$inline_0=1+1+1;"" +
         ""a=1+a$$inline_0+a$$inline_0}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testMethodWithFunctionWithFunction,"  public void testMethodWithFunctionWithFunction() {
    assumeMinimumCapture = true;
    test(""function _testLocalVariable_() {\n"" +
        ""  var result = 0;\n"" +
        ""  function foo() {\n"" +
        ""      var j = [i];\n"" +
        ""      (function(j) {\n"" +
        ""        setTimeout(function() { result += j; }, 5 * i);\n"" +
        ""      })(j);\n"" +
        ""      j = null;"" +
        ""  }\n"" +
        ""  foo();\n"" +
        ""}"",
        ""function _testLocalVariable_(){\n"" +
        ""  var result=0;\n"" +
        ""  {\n"" +
        ""  var j$$inline_2=[i];\n"" +
        ""  {\n"" +
        ""  var j$$inline_0=j$$inline_2;\n"" +  // this temp is needed.
        ""  setTimeout(function(){result+=j$$inline_0},5*i);\n"" +
        ""  }\n"" +
        ""  j$$inline_2=null\n"" + // because this value can be modified later.
        ""  }\n"" +
        ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testFunctionExpressionYCombinator,"  public void testFunctionExpressionYCombinator() {
    assumeMinimumCapture = false;
    testSame(
        ""var factorial = ((function(M) {\n"" +
        ""      return ((function(f) {\n"" +
        ""                 return M(function(arg) {\n"" +
        ""                            return (f(f))(arg);\n"" +
        ""                            })\n"" +
        ""               })\n"" +
        ""              (function(f) {\n"" +
        ""                 return M(function(arg) {\n"" +
        ""                            return (f(f))(arg);\n"" +
        ""                           })\n"" +
        ""                 }));\n"" +
        ""     })\n"" +
        ""    (function(f) {\n"" +
        ""       return function(n) {\n"" +
        ""        if (n === 0)\n"" +
        ""          return 1;\n"" +
        ""        else\n"" +
        ""          return n * f(n - 1);\n"" +
        ""       };\n"" +
        ""     }));\n"" +
        ""\n"" +
        ""factorial(5)\n"");

    assumeMinimumCapture = true;
    test(
        ""var factorial = ((function(M) {\n"" +
        ""      return ((function(f) {\n"" +
        ""                 return M(function(arg) {\n"" +
        ""                            return (f(f))(arg);\n"" +
        ""                            })\n"" +
        ""               })\n"" +
        ""              (function(f) {\n"" +
        ""                 return M(function(arg) {\n"" +
        ""                            return (f(f))(arg);\n"" +
        ""                           })\n"" +
        ""                 }));\n"" +
        ""     })\n"" +
        ""    (function(f) {\n"" +
        ""       return function(n) {\n"" +
        ""        if (n === 0)\n"" +
        ""          return 1;\n"" +
        ""        else\n"" +
        ""          return n * f(n - 1);\n"" +
        ""       };\n"" +
        ""     }));\n"" +
        ""\n"" +
        ""factorial(5)\n"",
        ""var factorial;\n"" +
        ""{\n"" +
        ""var M$$inline_4 = function(f$$2) {\n"" +
        ""  return function(n){if(n===0)return 1;else return n*f$$2(n-1)}\n"" +
        ""};\n"" +
        ""{\n"" +
        ""var f$$inline_0=function(f$$inline_7){\n"" +
        ""  return M$$inline_4(\n"" +
        ""    function(arg$$inline_8){\n"" +
        ""      return f$$inline_7(f$$inline_7)(arg$$inline_8)\n"" +
        ""     })\n"" +
        ""};\n"" +
        ""factorial=M$$inline_4(\n"" +
        ""  function(arg$$inline_1){\n"" +
        ""    return f$$inline_0(f$$inline_0)(arg$$inline_1)\n"" +
        ""});\n"" +
        ""}\n"" +
        ""}"" +
        ""factorial(5)"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testComplexInlineVars7,"  public void testComplexInlineVars7() {
    test(""function f(x,y){if (x) return y(); else return true;}"" +
         ""var b=1;var z=f(1,b)"",
         ""var b=1;var z;"" +
         ""{JSCompiler_inline_label_f_2:{if(1){z=b();"" +
         ""break JSCompiler_inline_label_f_2"" +
         ""}else{"" +
         ""z=true;break JSCompiler_inline_label_f_2}z=void 0}}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testComplexFunctionWithFunctionDefinition2a,"  public void testComplexFunctionWithFunctionDefinition2a() {
    assumeMinimumCapture = false;

    // Don't inline if local names might be captured.
    testSame(""(function(){"" +
        ""var f = function(a){call(function(){return a})};f()})()"");

    assumeMinimumCapture = true;

    test(""(function(){"" +
         ""var f = function(a){call(function(){return a})};f()})()"",
         ""{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testComplexInline7,"  public void testComplexInline7() {
    test(""function f(x,y){if (x) return y(); else return true;}"" +
         ""var b=1;z=f(1,b)"",
         ""var b=1;{JSCompiler_inline_label_f_2:{if(1){z=b();"" +
         ""break JSCompiler_inline_label_f_2}else{z=true;"" +
         ""break JSCompiler_inline_label_f_2}z=void 0}}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testFunctionExpressionOmega,"  public void testFunctionExpressionOmega() {
    // ... with unused recursive name.
    test(""(function (f){f(f)})(function(f){f(f)})"",
         ""{var f$$inline_0=function(f$$1){f$$1(f$$1)};"" +
          ""{{f$$inline_0(f$$inline_0)}}}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testInlineFunctions15b,"  public void testInlineFunctions15b() {
    assumeMinimumCapture = false;

    // closure factories: don't inline closure with locals into global scope.
    test(""function foo(){var x;return function(a){return a+1}}"" +
         ""var b=function(){return c};"" +
         ""var d=b()+foo()"",

         ""function foo(){var x;return function(a){return a+1}}"" +
         ""var d=c+foo()"");

    assumeMinimumCapture = true;

    test(""function foo(){var x;return function(a){return a+1}}"" +
         ""var b=function(){return c};"" +
         ""var d=b()+foo()"",

         ""var JSCompiler_temp_const$$0 = c;\n"" +
         ""{\n"" +
         ""var JSCompiler_inline_result$$1;\n"" +
         ""var x$$inline_2;\n"" +
         ""JSCompiler_inline_result$$1 = "" +
         ""    function(a$$inline_3){ return a$$inline_3+1 };\n"" +
         ""}"" +
         ""var d=JSCompiler_temp_const$$0 + JSCompiler_inline_result$$1"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testInlineFunctions15d,"  public void testInlineFunctions15d() {
    assumeMinimumCapture = false;

    // closure factories: don't inline functions with vars.
    test(""function foo(){var x; return function(a){return a+1}}"" +
         ""var b=function(){return c};"" +
         ""function _x(){ var d=b()+foo() }"",

         ""function foo(){var x; return function(a){return a+1}}"" +
         ""function _x(){ var d=c+foo() }"");

    assumeMinimumCapture = true;

    // closure factories: don't inline functions with vars.
    test(""function foo(){var x; return function(a){return a+1}}"" +
         ""var b=function(){return c};"" +
         ""function _x(){ var d=b()+foo() }"",

         ""function _x() { \n"" +
         ""  var JSCompiler_temp_const$$0 = c;\n"" +
         ""  {\n"" +
         ""  var JSCompiler_inline_result$$1;\n"" +
         ""  var x$$inline_2;\n"" +
         ""  JSCompiler_inline_result$$1 = "" +
         ""      function(a$$inline_3) {return a$$inline_3+1};\n"" +
         ""  }\n"" +
         ""  var d = JSCompiler_temp_const$$0+JSCompiler_inline_result$$1\n"" +
         ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testInlineFunctions16a,"  public void testInlineFunctions16a() {
    assumeMinimumCapture = false;

    testSame(""function foo(b){return window.bar(function(){c(b)})}"" +
         ""var d=foo(e)"");

    assumeMinimumCapture = true;

    test(
        ""function foo(b){return window.bar(function(){c(b)})}"" +
        ""var d=foo(e)"",
        ""var d;{var b$$inline_0=e;"" +
        ""d=window.bar(function(){c(b$$inline_0)})}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testBug4944818,"  public void testBug4944818() {
    test(
        ""var getDomServices_ = function(self) {\n"" +
        ""  if (!self.domServices_) {\n"" +
        ""    self.domServices_ = goog$component$DomServices.get("" +
        ""        self.appContext_);\n"" +
        ""  }\n"" +
        ""\n"" +
        ""  return self.domServices_;\n"" +
        ""};\n"" +
        ""\n"" +
        ""var getOwnerWin_ = function(self) {\n"" +
        ""  return getDomServices_(self).getDomHelper().getWindow();\n"" +
        ""};\n"" +
        ""\n"" +
        ""HangoutStarter.prototype.launchHangout = function() {\n"" +
        ""  var self = a.b;\n"" +
        ""  var myUrl = new goog.Uri(getOwnerWin_(self).location.href);\n"" +
        ""};"",
        ""HangoutStarter.prototype.launchHangout = function() { "" +
        ""  var self$$2 = a.b;"" +
        ""  var JSCompiler_temp_const$$0 = goog.Uri;"" +
        ""  {"" +
        ""  var JSCompiler_inline_result$$1;"" +
        ""  var self$$inline_2 = self$$2;"" +
        ""  if (!self$$inline_2.domServices_) {"" +
        ""    self$$inline_2.domServices_ = goog$component$DomServices.get("" +
        ""        self$$inline_2.appContext_);"" +
        ""  }"" +
        ""  JSCompiler_inline_result$$1=self$$inline_2.domServices_;"" +
        ""  }"" +
        ""  var myUrl = new JSCompiler_temp_const$$0("" +
        ""      JSCompiler_inline_result$$1.getDomHelper()."" +
        ""          getWindow().location.href)"" +
        ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testComplexSample,"  public void testComplexSample() {
    String result = """" +
      ""{{"" +
      ""var styleSheet$$inline_2=null;"" +
      ""if(goog$userAgent$IE)"" +
        ""styleSheet$$inline_2=0;"" +
      ""else "" +
        ""var head$$inline_3=0;"" +
      ""{"" +
        ""var element$$inline_4="" +
            ""styleSheet$$inline_2;"" +
        ""var stylesString$$inline_5=a;"" +
        ""if(goog$userAgent$IE)"" +
          ""element$$inline_4.cssText="" +
              ""stylesString$$inline_5;"" +
        ""else "" +
        ""{"" +
          ""var propToSet$$inline_6="" +
              ""\""innerText\"";"" +
          ""element$$inline_4["" +
              ""propToSet$$inline_6]="" +
                  ""stylesString$$inline_5"" +
        ""}"" +
      ""}"" +
      ""styleSheet$$inline_2"" +
      ""}}"";

    test(""var foo = function(stylesString, opt_element) { "" +
        ""var styleSheet = null;"" +
        ""if (goog$userAgent$IE)"" +
          ""styleSheet = 0;"" +
        ""else "" +
          ""var head = 0;"" +
        """" +
        ""goo$zoo(styleSheet, stylesString);"" +
        ""return styleSheet;"" +
     "" };\n "" +

     ""var goo$zoo = function(element, stylesString) {"" +
        ""if (goog$userAgent$IE)"" +
          ""element.cssText = stylesString;"" +
        ""else {"" +
          ""var propToSet = 'innerText';"" +
          ""element[propToSet] = stylesString;"" +
        ""}"" +
      ""};"" +
      ""(function(){foo(a,b);})();"",
     result);
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testNoInlineIfParametersModified1,"  public void testNoInlineIfParametersModified1() {
    // Assignment
    test(""function f(x){return x=1}f(undefined)"",
         ""{var x$$inline_0=undefined;"" +
         ""x$$inline_0=1}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testNoInlineIfParametersModified2,"  public void testNoInlineIfParametersModified2() {
    test(""function f(x){return (x)=1;}f(2)"",
         ""{var x$$inline_0=2;"" +
         ""x$$inline_0=1}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testNoInlineIfParametersModified3,"  public void testNoInlineIfParametersModified3() {
    // Assignment variant.
    test(""function f(x){return x*=2}f(2)"",
         ""{var x$$inline_0=2;"" +
         ""x$$inline_0*=2}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testNoInlineIfParametersModified4,"  public void testNoInlineIfParametersModified4() {
    // Assignment in if.
    test(""function f(x){return x?(x=2):0}f(2)"",
         ""{var x$$inline_0=2;"" +
         ""x$$inline_0?("" +
         ""x$$inline_0=2):0}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testNoInlineIfParametersModified5,"  public void testNoInlineIfParametersModified5() {
    // Assignment in if, multiple params
    test(""function f(x,y){return x?(y=2):0}f(2,undefined)"",
         ""{var y$$inline_1=undefined;2?("" +
         ""y$$inline_1=2):0}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testNoInlineIfParametersModified6,"  public void testNoInlineIfParametersModified6() {
    test(""function f(x,y){return x?(y=2):0}f(2)"",
         ""{var y$$inline_1=void 0;2?("" +
         ""y$$inline_1=2):0}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testNoInlineIfParametersModified7,"  public void testNoInlineIfParametersModified7() {
    // Increment
    test(""function f(a){return++a<++a}f(1)"",
         ""{var a$$inline_0=1;"" +
         ""++a$$inline_0<"" +
         ""++a$$inline_0}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testIssue423,"  public void testIssue423() {
    assumeMinimumCapture = false;
    test(
        ""(function($) {\n"" +
        ""  $.fn.multicheck = function(options) {\n"" +
        ""    initialize.call(this, options);\n"" +
        ""  };\n"" +
        ""\n"" +
        ""  function initialize(options) {\n"" +
        ""    options.checkboxes = $(this).siblings(':checkbox');\n"" +
        ""    preload_check_all.call(this);\n"" +
        ""  }\n"" +
        ""\n"" +
        ""  function preload_check_all() {\n"" +
        ""    $(this).data('checkboxes');\n"" +
        ""  }\n"" +
        ""})(jQuery)"",
        ""(function($){"" +
        ""  $.fn.multicheck=function(options$$1){"" +
        ""    {"" +
        ""     options$$1.checkboxes=$(this).siblings(\"":checkbox\"");"" +
        ""     {"" +
        ""       $(this).data(\""checkboxes\"")"" +
        ""     }"" +
        ""    }"" +
        ""  }"" +
        ""})(jQuery)"");

    assumeMinimumCapture = true;
    test(
        ""(function($) {\n"" +
        ""  $.fn.multicheck = function(options) {\n"" +
        ""    initialize.call(this, options);\n"" +
        ""  };\n"" +
        ""\n"" +
        ""  function initialize(options) {\n"" +
        ""    options.checkboxes = $(this).siblings(':checkbox');\n"" +
        ""    preload_check_all.call(this);\n"" +
        ""  }\n"" +
        ""\n"" +
        ""  function preload_check_all() {\n"" +
        ""    $(this).data('checkboxes');\n"" +
        ""  }\n"" +
        ""})(jQuery)"",
        ""{var $$$inline_0=jQuery;\n"" +
        ""$$$inline_0.fn.multicheck=function(options$$inline_4){\n"" +
        ""  {options$$inline_4.checkboxes="" +
            ""$$$inline_0(this).siblings(\"":checkbox\"");\n"" +
        ""  {$$$inline_0(this).data(\""checkboxes\"")}"" +
        ""  }\n"" +
        ""}\n"" +
        ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testComplexFunctionWithFunctionDefinition2,"  public void testComplexFunctionWithFunctionDefinition2() {
    assumeMinimumCapture = false;

    // Don't inline if local names might be captured.
    testSame(""function f(a){call(function(){return})}f()"");

    assumeMinimumCapture = true;

    test(""(function(){"" +
         ""var f = function(a){call(function(){return a})};f()})()"",
         ""{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testComplexFunctionWithFunctionDefinition3,"  public void testComplexFunctionWithFunctionDefinition3() {
    assumeMinimumCapture = false;

    // Don't inline if local names might need to be captured.
    testSame(""function f(){var a; call(function(){return a})}f()"");

    assumeMinimumCapture = true;

    test(""function f(){var a; call(function(){return a})}f()"",
         ""{var a$$inline_0;call(function(){return a$$inline_0})}"");

  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testDecomposeFunctionExpressionInCall,"  public void testDecomposeFunctionExpressionInCall() {
    test(
        ""(function(map){descriptions_=map})(\n"" +
           ""function(){\n"" +
              ""var ret={};\n"" +
              ""ret[ONE]='a';\n"" +
              ""ret[TWO]='b';\n"" +
              ""return ret\n"" +
           ""}()\n"" +
        "");"",
        ""{"" +
        ""var JSCompiler_inline_result$$0;"" +
        ""var ret$$inline_1={};\n"" +
        ""ret$$inline_1[ONE]='a';\n"" +
        ""ret$$inline_1[TWO]='b';\n"" +
        ""JSCompiler_inline_result$$0 = ret$$inline_1;\n"" +
        ""}"" +
        ""{"" +
        ""descriptions_=JSCompiler_inline_result$$0;"" +
        ""}""
        );
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testInlineNeverOverrideNewValues,"  public void testInlineNeverOverrideNewValues() {
    test(""function f(a){return++a<++a}f(1)"",
        ""{var a$$inline_0=1;"" +
        ""++a$$inline_0<++a$$inline_0}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testInlineBlockMutableArgs1,"  public void testInlineBlockMutableArgs1() {
    test(""function foo(x){x+x}foo([])"",
         ""{var x$$inline_0=[];"" +
         ""x$$inline_0+x$$inline_0}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testInlineBlockMutableArgs2,"  public void testInlineBlockMutableArgs2() {
    test(""function foo(x){x+x}foo(new Date)"",
         ""{var x$$inline_0=new Date;"" +
         ""x$$inline_0+x$$inline_0}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testInlineBlockMutableArgs3,"  public void testInlineBlockMutableArgs3() {
    test(""function foo(x){x+x}foo(true&&new Date)"",
         ""{var x$$inline_0=true&&new Date;"" +
         ""x$$inline_0+x$$inline_0}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testInlineBlockMutableArgs4,"  public void testInlineBlockMutableArgs4() {
    test(""function foo(x){x+x}foo({})"",
         ""{var x$$inline_0={};"" +
         ""x$$inline_0+x$$inline_0}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testInlineFunctions10,"  public void testInlineFunctions10() {
    test(""function INC(x){return x++}"" +
         ""var y=INC(i);y=INC(i)"",
         ""var y;"" +
         ""{var x$$inline_0=i;"" +
         ""y=x$$inline_0++}"" +
         ""{var x$$inline_2=i;"" +
         ""y=x$$inline_2++}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testInlineFunctions13,"  public void testInlineFunctions13() {
    // inline as block if the input parameter has side-effects.
    test(""function f(x){return x}"" +
         ""var y=f(i++)"",
         ""var y;{var x$$inline_0=i++;y=x$$inline_0}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testInlineFunctions22,"  public void testInlineFunctions22() {
    // Another tricky case ... test nested compiler inlines
    test(""function plex(a){if(a) return 0;else return 1;}"" +
         ""function foo(a, b){return bar(a+b)}"" +
         ""function bar(d){return plex(d)}"" +
         ""var d=foo(1,2)"",

         ""var d;{JSCompiler_inline_label_plex_1:{"" +
         ""if(1+2){"" +
         ""d=0;break JSCompiler_inline_label_plex_1}"" +
         ""else{"" +
         ""d=1;break JSCompiler_inline_label_plex_1}d=void 0}}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testInlineFunctions23,"  public void testInlineFunctions23() {
    // Test both orderings again
    test(""function complex(a){if(a) return 0;else return 1;}"" +
         ""function bar(d){return complex(d)}"" +
         ""function foo(a, b){return bar(a+b)}"" +
         ""var d=foo(1,2)"",

         ""var d;{JSCompiler_inline_label_complex_1:{"" +
         ""if(1+2){"" +
         ""d=0;break JSCompiler_inline_label_complex_1"" +
         ""}else{"" +
         ""d=1;break JSCompiler_inline_label_complex_1"" +
         ""}d=void 0}}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testInlineFunctions9,"  public void testInlineFunctions9() {
    // don't inline if the input parameter is modified.
    test(""function INC(x){return x++}"" +
         ""var y=INC(i)"",
         ""var y;{var x$$inline_0=i;"" +
         ""y=x$$inline_0++}"");
  }",junit.framework.AssertionFailedError: 
Closure_49,/222043010/omniapr/defects4j/Closure_49_buggy/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,testMakeLocalNamesUniqueWithContext5,"  public void testMakeLocalNamesUniqueWithContext5() {
    // Set the test type
    this.useDefaultRenamer = true;

    testWithInversion(
        ""function f(){var f; f = 1}"",
        ""function f(){var f$$1; f$$1 = 1}"");
    testWithInversion(
        ""function f(f){f = 1}"",
        ""function f(f$$1){f$$1 = 1}"");
    testWithInversion(
        ""function f(f){var f; f = 1}"",
        ""function f(f$$1){var f$$1; f$$1 = 1}"");

    test(
        ""var fn = function f(){var f; f = 1}"",
        ""var fn = function f(){var f$$1; f$$1 = 1}"");
    test(
        ""var fn = function f(f){f = 1}"",
        ""var fn = function f(f$$1){f$$1 = 1}"");
    test(
        ""var fn = function f(f){var f; f = 1}"",
        ""var fn = function f(f$$1){var f$$1; f$$1 = 1}"");
  }",junit.framework.AssertionFailedError: 
Closure_50,/222043010/omniapr/defects4j/Closure_50_buggy/test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,testStringJoinAdd,"  public void testStringJoinAdd() {
    fold(""x = ['a', 'b', 'c'].join('')"", ""x = \""abc\"""");
    fold(""x = [].join(',')"", ""x = \""\"""");
    fold(""x = ['a'].join(',')"", ""x = \""a\"""");
    fold(""x = ['a', 'b', 'c'].join(',')"", ""x = \""a,b,c\"""");
    fold(""x = ['a', foo, 'b', 'c'].join(',')"",
        ""x = [\""a\"",foo,\""b,c\""].join()"");
    fold(""x = [foo, 'a', 'b', 'c'].join(',')"",
        ""x = [foo,\""a,b,c\""].join()"");
    fold(""x = ['a', 'b', 'c', foo].join(',')"",
        ""x = [\""a,b,c\"",foo].join()"");

    // Works with numbers
    fold(""x = ['a=', 5].join('')"", ""x = \""a=5\"""");
    fold(""x = ['a', '5'].join(7)"", ""x = \""a75\"""");

    // Works on boolean
    fold(""x = ['a=', false].join('')"", ""x = \""a=false\"""");
    fold(""x = ['a', '5'].join(true)"", ""x = \""atrue5\"""");
    fold(""x = ['a', '5'].join(false)"", ""x = \""afalse5\"""");

    // Only optimize if it's a size win.
    fold(""x = ['a', '5', 'c'].join('a very very very long chain')"",
         ""x = [\""a\"",\""5\"",\""c\""].join(\""a very very very long chain\"")"");

    // TODO(user): Its possible to fold this better.
    foldSame(""x = ['', foo].join('-')"");
    foldSame(""x = ['', foo, ''].join()"");

    fold(""x = ['', '', foo, ''].join(',')"",
         ""x = [',', foo, ''].join()"");
    fold(""x = ['', '', foo, '', ''].join(',')"",
         ""x = [',', foo, ','].join()"");

    fold(""x = ['', '', foo, '', '', bar].join(',')"",
         ""x = [',', foo, ',', bar].join()"");

    fold(""x = [1,2,3].join('abcdef')"",
         ""x = '1abcdef2abcdef3'"");

    fold(""x = [1,2].join()"", ""x = '1,2'"");
    fold(""x = [null,undefined,''].join(',')"", ""x = ',,'"");
    fold(""x = [null,undefined,0].join(',')"", ""x = ',,0'"");
    // This can be folded but we don't currently.
    foldSame(""x = [[1,2],[3,4]].join()""); // would like: ""x = '1,2,3,4'""
  }",junit.framework.AssertionFailedError: 
Closure_50,/222043010/omniapr/defects4j/Closure_50_buggy/test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java,testNoStringJoin,"  public void testNoStringJoin() {
    foldSame(""x = [].join(',',2)"");
    foldSame(""x = [].join(f)"");
  }",junit.framework.AssertionFailedError: 
Closure_51,/222043010/omniapr/defects4j/Closure_51_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testIssue582,"  public void testIssue582() {
    assertPrint(""var x = -0.0;"", ""var x=-0.0"");
  }",junit.framework.ComparisonFailure: expected:<var x=[-0.]0> but was:<var x=[]0>
Closure_52,/222043010/omniapr/defects4j/Closure_52_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testNumericKeys,"  public void testNumericKeys() {
    assertPrint(""var x = {010: 1};"", ""var x={8:1}"");
    assertPrint(""var x = {'010': 1};"", ""var x={\""010\"":1}"");

    assertPrint(""var x = {0x10: 1};"", ""var x={16:1}"");
    assertPrint(""var x = {'0x10': 1};"", ""var x={\""0x10\"":1}"");

    // I was surprised at this result too.
    assertPrint(""var x = {.2: 1};"", ""var x={\""0.2\"":1}"");
    assertPrint(""var x = {'.2': 1};"", ""var x={\"".2\"":1}"");

    assertPrint(""var x = {0.2: 1};"", ""var x={\""0.2\"":1}"");
    assertPrint(""var x = {'0.2': 1};"", ""var x={\""0.2\"":1}"");
  }","junit.framework.ComparisonFailure: expected:<var x={[""010""]:1}> but was:<var x={[10]:1}>"
Closure_53,/222043010/omniapr/defects4j/Closure_53_buggy/test/com/google/javascript/jscomp/InlineObjectLiteralsTest.java,testBug545,"  public void testBug545() {
    testLocal(""var a = {}"", """");
    testLocal(""var a; a = {}"", ""true"");
  }",java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Closure_54,/222043010/omniapr/defects4j/Closure_54_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testIssue537a,"  public void testIssue537a() throws Exception {
    testTypes(
        ""/** @constructor */ function Foo() {}"" +
        ""Foo.prototype = {method: function() {}};"" +
        ""/**\n"" +
        "" * @constructor\n"" +
        "" * @extends {Foo}\n"" +
        "" */\n"" +
        ""function Bar() {"" +
        ""  Foo.call(this);"" +
        ""  if (this.baz()) this.method(1);"" +
        ""}"" +
        ""Bar.prototype = {"" +
        ""  baz: function() {"" +
        ""    return true;"" +
        ""  }"" +
        ""};"" +
        ""Bar.prototype.__proto__ = Foo.prototype;"",
        ""Function Foo.prototype.method: called with 1 argument(s). "" +
        ""Function requires at least 0 argument(s) "" +
        ""and no more than 0 argument(s)."");
  }",junit.framework.ComparisonFailure: expected:<[Function Foo.prototype.method: called with 1 argument(s). Function requires at least 0 argument(s) and no more than 0 argument(s).]> but was:<[Property baz never defined on Bar]>
Closure_54,/222043010/omniapr/defects4j/Closure_54_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testIssue537b,"  public void testIssue537b() throws Exception {
    testTypes(
        ""/** @constructor */ function Foo() {}"" +
        ""Foo.prototype = {method: function() {}};"" +
        ""/**\n"" +
        "" * @constructor\n"" +
        "" * @extends {Foo}\n"" +
        "" */\n"" +
        ""function Bar() {"" +
        ""  Foo.call(this);"" +
        ""  if (this.baz(1)) this.method();"" +
        ""}"" +
        ""Bar.prototype = {"" +
        ""  baz: function() {"" +
        ""    return true;"" +
        ""  }"" +
        ""};"" +
        ""Bar.prototype.__proto__ = Foo.prototype;"",
        ""Function Bar.prototype.baz: called with 1 argument(s). "" +
        ""Function requires at least 0 argument(s) "" +
        ""and no more than 0 argument(s)."");
  }",junit.framework.ComparisonFailure: expected:<[Function Foo.prototype.method: called with 1 argument(s). Function requires at least 0 argument(s) and no more than 0 argument(s).]> but was:<[Property baz never defined on Bar]>
Closure_54,/222043010/omniapr/defects4j/Closure_54_buggy/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,testPropertyOnUnknownSuperClass2,"  public void testPropertyOnUnknownSuperClass2() {
    testSame(
        ""var goog = this.foo();"" +
        ""/** @constructor \n * @extends {goog.Unknown} */"" +
        ""function Foo() {}"" +
        ""Foo.prototype = {bar: 1};"" +
        ""var x = new Foo();"",
        RhinoErrorReporter.TYPE_PARSE_ERROR);
    ObjectType x = (ObjectType) findNameType(""x"", globalScope);
    assertEquals(""Foo"", x.toString());
    assertEquals(""Foo.prototype"", x.getImplicitPrototype().toString());
    assertTrue(x.getImplicitPrototype().hasOwnProperty(""bar""));
    assertEquals(""?"", x.getPropertyType(""bar"").toString());
    assertTrue(x.isPropertyTypeInferred(""bar""));
  }",junit.framework.ComparisonFailure: expected:<[?]> but was:<[number]>
Closure_55,/222043010/omniapr/defects4j/Closure_55_buggy/test/com/google/javascript/jscomp/FunctionRewriterTest.java,testIssue538,"  public void testIssue538() {
    checkCompilesToSame(      ""/** @constructor */\n"" +
        ""WebInspector.Setting = function() {}\n"" +
        ""WebInspector.Setting.prototype = {\n"" +
        ""    get name0(){return this._name;},\n"" +
        ""    get name1(){return this._name;},\n"" +
        ""    get name2(){return this._name;},\n"" +
        ""    get name3(){return this._name;},\n"" +
        ""    get name4(){return this._name;},\n"" +
        ""    get name5(){return this._name;},\n"" +
        ""    get name6(){return this._name;},\n"" +
        ""    get name7(){return this._name;},\n"" +
        ""    get name8(){return this._name;},\n"" +
        ""    get name9(){return this._name;},\n"" +
        ""}"", 1);
  }",java.lang.IllegalStateException: Expected function but was call Reference node CALL 4 [free_call: 1] [source_file: testcode]
Closure_56,/222043010/omniapr/defects4j/Closure_56_buggy/test/com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java,testExceptNoNewLine,"  public void testExceptNoNewLine() throws Exception {
    assertEquals(""foo2:first line"", provider.getSourceLine(""foo2"", 1));
    assertEquals(""foo2:second line"", provider.getSourceLine(""foo2"", 2));
    assertEquals(""foo2:third line"", provider.getSourceLine(""foo2"", 3));
    assertEquals(null, provider.getSourceLine(""foo2"", 4));
  }",junit.framework.ComparisonFailure: expected:<foo2:third line> but was:<null>
Closure_56,/222043010/omniapr/defects4j/Closure_56_buggy/test/com/google/javascript/jscomp/JsMessageExtractorTest.java,testSyntaxError1,"  public void testSyntaxError1() {
    try {
      extractMessage(""if (true) {}}"");
      fail(""Expected exception"");
    }",junit.framework.AssertionFailedError
Closure_56,/222043010/omniapr/defects4j/Closure_56_buggy/test/com/google/javascript/jscomp/JsMessageExtractorTest.java,testSyntaxError2,"  public void testSyntaxError2() {
    try {
      extractMessage("""", ""if (true) {}}"");
      fail(""Expected exception"");
    }",junit.framework.AssertionFailedError
Closure_57,/222043010/omniapr/defects4j/Closure_57_buggy/test/com/google/javascript/jscomp/ClosureCodingConventionTest.java,testRequire,"  public void testRequire() {
    assertRequire(""goog.require('foo')"");
    assertNotRequire(""goog.require(foo)"");
    assertNotRequire(""goog.require()"");
    assertNotRequire(""foo()"");
  }",junit.framework.AssertionFailedError: Expected: <null> but was: foo
Closure_58,/222043010/omniapr/defects4j/Closure_58_buggy/test/com/google/javascript/jscomp/LiveVariableAnalysisTest.java,testExpressionInForIn,"  public void testExpressionInForIn() {
    assertLiveBeforeX(""var a = [0]; X:for (a[1] in foo) { }"", ""a"");
  }",java.lang.IllegalStateException
Closure_59,/222043010/omniapr/defects4j/Closure_59_buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java,testCheckGlobalThisOff,"  public void testCheckGlobalThisOff() {
    args.add(""--warning_level=VERBOSE"");
    args.add(""--jscomp_off=globalThis"");
    testSame(""function f() { this.a = 3; }"");
  }",junit.framework.AssertionFailedError: Expected no warnings or errors
Closure_60,/222043010/omniapr/defects4j/Closure_60_buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java,testIssue504,"  public void testIssue504() {
    args.add(""--compilation_level=ADVANCED_OPTIMIZATIONS"");
    test(""void function() { alert('hi'); }();"",
         ""alert('hi');"", CheckSideEffects.USELESS_CODE_ERROR);
  }",junit.framework.AssertionFailedError: 
Closure_60,/222043010/omniapr/defects4j/Closure_60_buggy/test/com/google/javascript/jscomp/NodeUtilTest.java,testGetBooleanValue,"  public void testGetBooleanValue() {
    assertPureBooleanTrue(""true"");
    assertPureBooleanTrue(""10"");
    assertPureBooleanTrue(""'0'"");
    assertPureBooleanTrue(""/a/"");
    assertPureBooleanTrue(""{}"");
    assertPureBooleanTrue(""[]"");
    assertPureBooleanFalse(""false"");
    assertPureBooleanFalse(""null"");
    assertPureBooleanFalse(""0"");
    assertPureBooleanFalse(""''"");
    assertPureBooleanFalse(""undefined"");
    assertPureBooleanFalse(""void 0"");
    assertPureBooleanUnknown(""void foo()"");
    assertPureBooleanUnknown(""b"");
    assertPureBooleanUnknown(""-'0.0'"");

    // Known but getBooleanValue return false for expressions with side-effects
    assertPureBooleanUnknown(""{a:foo()}"");
    assertPureBooleanUnknown(""[foo()]"");
  }",junit.framework.AssertionFailedError: expected:<unknown> but was:<false>
Closure_61,/222043010/omniapr/defects4j/Closure_61_buggy/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,testCall1,"  public void testCall1() {
    test(""Math.sin(0);"", """");
  }",junit.framework.AssertionFailedError: 
Closure_61,/222043010/omniapr/defects4j/Closure_61_buggy/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,testCall2,"  public void testCall2() {
    test(""1 + Math.sin(0);"", """");
  }",junit.framework.AssertionFailedError: 
Closure_61,/222043010/omniapr/defects4j/Closure_61_buggy/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java,testRemoveUselessOps,"  public void testRemoveUselessOps() {
    // There are four place where expression results are discarded:
    //  - a top level expression EXPR_RESULT
    //  - the LHS of a COMMA
    //  - the FOR init expression
    //  - the FOR increment expression


    // Known side-effect free functions calls are removed.
    fold(""Math.random()"", """");
    fold(""Math.random(f() + g())"", ""f(),g();"");
    fold(""Math.random(f(),g(),h())"", ""f(),g(),h();"");

    // Calls to functions with unknown side-effects are are left.
    foldSame(""f();"");
    foldSame(""(function () {})();"");

    // Uncalled function expressions are removed
    fold(""(function () {});"", """");
    fold(""(function f() {});"", """");
    // ... including any code they contain.
    fold(""(function () {foo();});"", """");

    // Useless operators are removed.
    fold(""+f()"", ""f()"");
    fold(""a=(+f(),g())"", ""a=(f(),g())"");
    fold(""a=(true,g())"", ""a=g()"");
    fold(""f(),true"", ""f()"");
    fold(""f() + g()"", ""f(),g()"");

    fold(""for(;;+f()){}"", ""for(;;f()){}"");
    fold(""for(+f();;g()){}"", ""for(f();;g()){}"");
    fold(""for(;;Math.random(f(),g(),h())){}"", ""for(;;f(),g(),h()){}"");

    // The optimization cascades into conditional expressions:
    fold(""g() && +f()"", ""g() && f()"");
    fold(""g() || +f()"", ""g() || f()"");
    fold(""x ? g() : +f()"", ""x ? g() : f()"");

    fold(""+x()"", ""x()"");
    fold(""+x() * 2"", ""x()"");
    fold(""-(+x() * 2)"", ""x()"");
    fold(""2 -(+x() * 2)"", ""x()"");
    fold(""x().foo"", ""x()"");
    foldSame(""x().foo()"");

    foldSame(""x++"");
    foldSame(""++x"");
    foldSame(""x--"");
    foldSame(""--x"");
    foldSame(""x = 2"");
    foldSame(""x *= 2"");

    // Sanity check, other expression are left alone.
    foldSame(""function f() {}"");
    foldSame(""var x;"");
  }",junit.framework.AssertionFailedError: 
Closure_62,/222043010/omniapr/defects4j/Closure_62_buggy/test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,testFormatErrorSpaceEndOfLine1,"  public void testFormatErrorSpaceEndOfLine1() throws Exception {
    JSError error = JSError.make(""javascript/complex.js"",
        1, 10, FOO_TYPE);
    LightweightMessageFormatter formatter = formatter(""assert (1;"");
    assertEquals(""javascript/complex.js:1: ERROR - error description here\n"" +
        ""assert (1;\n"" +
        ""          ^\n"", formatter.formatError(error));
  }",junit.framework.ComparisonFailure: expected:<...ion here
Closure_62,/222043010/omniapr/defects4j/Closure_62_buggy/test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java,testFormatErrorSpaceEndOfLine2,"  public void testFormatErrorSpaceEndOfLine2() throws Exception {
    JSError error = JSError.make(""javascript/complex.js"",
        6, 7, FOO_TYPE);
    LightweightMessageFormatter formatter = formatter(""if (foo"");
    assertEquals(""javascript/complex.js:6: ERROR - error description here\n"" +
        ""if (foo\n"" +
        ""       ^\n"", formatter.formatError(error));
  }",junit.framework.ComparisonFailure: expected:<...ion here
Closure_64,/222043010/omniapr/defects4j/Closure_64_buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java,testES5StrictUseStrictMultipleInputs,"  public void testES5StrictUseStrictMultipleInputs() {
    args.add(""--language_in=ECMASCRIPT5_STRICT"");
    Compiler compiler = compile(new String[] {""var x = f.function"",
        ""var y = f.function"", ""var z = f.function""});
    String outputSource = compiler.toSource();
    assertEquals(""'use strict'"", outputSource.substring(0, 12));
    assertEquals(outputSource.substring(13).indexOf(""'use strict'""), -1);
  }",junit.framework.AssertionFailedError: expected:<17> but was:<-1>
Closure_65,/222043010/omniapr/defects4j/Closure_65_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testZero,"  public void testZero() {
    assertPrint(""var x ='\\0';"", ""var x=\""\\000\"""");
    assertPrint(""var x ='\\x00';"", ""var x=\""\\000\"""");
    assertPrint(""var x ='\\u0000';"", ""var x=\""\\000\"""");
    assertPrint(""var x ='\\u00003';"", ""var x=\""\\0003\"""");
  }","junit.framework.ComparisonFailure: expected:<var x=""\0[00]""> but was:<var x=""\0[]"">"
Closure_66,/222043010/omniapr/defects4j/Closure_66_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testGetTypedPercent5,"  public void testGetTypedPercent5() throws Exception {
    String js = ""/** @enum {number} */ keys = {A: 1,B: 2,C: 3};"";
    assertEquals(100.0, getTypedPercent(js), 0.1);
  }",junit.framework.AssertionFailedError: expected:<100.0> but was:<62.5>
Closure_66,/222043010/omniapr/defects4j/Closure_66_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testGetTypedPercent6,"  public void testGetTypedPercent6() throws Exception {
    String js = ""a = {TRUE: 1, FALSE: 0};"";
    assertEquals(100.0, getTypedPercent(js), 0.1);
  }",junit.framework.AssertionFailedError: expected:<100.0> but was:<62.5>
Closure_67,/222043010/omniapr/defects4j/Closure_67_buggy/test/com/google/javascript/jscomp/RemoveUnusedPrototypePropertiesTest.java,testAliasing7,"  public void testAliasing7() {
    // An exported alias must preserved any referenced values in the
    // referenced function.
    testSame(""function e(){}"" +
           ""e.prototype['alias1'] = e.prototype.method1 = "" +
               ""function(){this.method2()};"" +
           ""e.prototype.method2 = function(){};"");
  }",junit.framework.AssertionFailedError: 
Closure_68,/222043010/omniapr/defects4j/Closure_68_buggy/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,testIssue477,"  public void testIssue477() throws Exception {
    parse(""@type function */"",
        ""Bad type annotation. missing opening ("");
  }",junit.framework.AssertionFailedError: extra warning: Unexpected end of file
Closure_69,/222043010/omniapr/defects4j/Closure_69_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testThisTypeOfFunction2,"  public void testThisTypeOfFunction2() throws Exception {
    testTypes(
        ""/** @constructor */ function F() {}"" +
        ""/** @type {function(this:F)} */ function f() {}"" +
        ""f();"",
        ""\""function (this:F): ?\"" must be called with a \""this\"" type"");
  }",junit.framework.AssertionFailedError: expected a warning
Closure_69,/222043010/omniapr/defects4j/Closure_69_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testThisTypeOfFunction3,"  public void testThisTypeOfFunction3() throws Exception {
    testTypes(
        ""/** @constructor */ function F() {}"" +
        ""F.prototype.bar = function() {};"" +
        ""var f = (new F()).bar; f();"",
        ""\""function (this:F): undefined\"" must be called with a \""this\"" type"");
  }",junit.framework.AssertionFailedError: expected a warning
Closure_69,/222043010/omniapr/defects4j/Closure_69_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testThisTypeOfFunction4,"  public void testThisTypeOfFunction4() throws Exception {
    testTypes(
        ""/** @constructor */ function F() {}"" +
        ""F.prototype.moveTo = function(x, y) {};"" +
        ""F.prototype.lineTo = function(x, y) {};"" +
        ""function demo() {"" +
        ""  var path = new F();"" +
        ""  var points = [[1,1], [2,2]];"" +
        ""  for (var i = 0; i < points.length; i++) {"" +
        ""    (i == 0 ? path.moveTo : path.lineTo)("" +
        ""       points[i][0], points[i][1]);"" +
        ""  }"" +
        ""}"",
        ""\""function (this:F, ?, ?): undefined\"" "" +
        ""must be called with a \""this\"" type"");
  }",junit.framework.AssertionFailedError: expected a warning
Closure_70,/222043010/omniapr/defects4j/Closure_70_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testDuplicateLocalVarDecl,"  public void testDuplicateLocalVarDecl() throws Exception {
    testClosureTypesMultipleWarnings(
        ""/** @param {number} x */\n"" +
        ""function f(x) { /** @type {string} */ var x = ''; }"",
        Lists.newArrayList(
            ""variable x redefined with type string, original definition"" +
            "" at  [testcode] :2 with type number"",
            ""initializing variable\n"" +
            ""found   : string\n"" +
            ""required: number""));
  }",junit.framework.AssertionFailedError: expected:<2> but was:<1>
Closure_70,/222043010/omniapr/defects4j/Closure_70_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testFunctionArguments13,"  public void testFunctionArguments13() throws Exception {
    // verifying that the argument type have non-inferrable types
    testTypes(
        ""/** @return {boolean} */ function u() { return true; }"" +
        ""/** @param {boolean} b\n@return {?boolean} */"" +
        ""function f(b) { if (u()) { b = null; } return b; }"",
        ""assignment\n"" +
        ""found   : null\n"" +
        ""required: boolean"");
  }",junit.framework.AssertionFailedError: expected:<2> but was:<1>
Closure_70,/222043010/omniapr/defects4j/Closure_70_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testScoping12,"  public void testScoping12() throws Exception {
    testTypes(
        ""/** @constructor */ function F() {}"" +
        ""/** @type {number} */ F.prototype.bar = 3;"" +
        ""/** @param {!F} f */ function g(f) {"" +
        ""  /** @return {string} */"" +
        ""  function h() {"" +
        ""    return f.bar;"" +
        ""  }"" +
        ""}"",
        ""inconsistent return type\n"" +
        ""found   : number\n"" +
        ""required: string"");
  }",junit.framework.AssertionFailedError: expected a warning
Closure_70,/222043010/omniapr/defects4j/Closure_70_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testDuplicateLocalVarDecl,"  public void testDuplicateLocalVarDecl() throws Exception {
    testClosureTypesMultipleWarnings(
        ""/** @param {number} x */\n"" +
        ""function f(x) { /** @type {string} */ var x = ''; }"",
        Lists.newArrayList(
            ""variable x redefined with type string, original definition"" +
            "" at  [testcode] :2 with type number"",
            ""initializing variable\n"" +
            ""found   : string\n"" +
            ""required: number""));
  }",junit.framework.AssertionFailedError: expected a warning
Closure_70,/222043010/omniapr/defects4j/Closure_70_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testFunctionArguments13,"  public void testFunctionArguments13() throws Exception {
    // verifying that the argument type have non-inferrable types
    testTypes(
        ""/** @return {boolean} */ function u() { return true; }"" +
        ""/** @param {boolean} b\n@return {?boolean} */"" +
        ""function f(b) { if (u()) { b = null; } return b; }"",
        ""assignment\n"" +
        ""found   : null\n"" +
        ""required: boolean"");
  }",junit.framework.AssertionFailedError: expected a warning
Closure_71,/222043010/omniapr/defects4j/Closure_71_buggy/test/com/google/javascript/jscomp/CheckAccessControlsTest.java,testNoPrivateAccessForProperties6,"  public void testNoPrivateAccessForProperties6() {
    // Overriding a private property with a non-private property
    // in a different file causes problems.
    test(new String[] {
      ""/** @constructor */ function Foo() {} "" +
      ""/** @private */ Foo.prototype.bar_ = function() {};"",
      ""/** @constructor \n * @extends {Foo} */ "" +
      ""function SubFoo() {};"" +
      ""SubFoo.prototype.bar_ = function() {};""
    }, null, BAD_PRIVATE_PROPERTY_ACCESS);
  }",junit.framework.AssertionFailedError: Overriding private property of Foo.prototype.
Closure_71,/222043010/omniapr/defects4j/Closure_71_buggy/test/com/google/javascript/jscomp/CheckAccessControlsTest.java,testNoPrivateAccessForProperties8,"  public void testNoPrivateAccessForProperties8() {
    test(new String[] {
      ""/** @constructor */ function Foo() { /** @private */ this.bar_ = 3; }"",
      ""/** @constructor \n * @extends {Foo} */ "" +
      ""function SubFoo() { /** @private */ this.bar_ = 3; };""
    }, null, PRIVATE_OVERRIDE);
  }",junit.framework.AssertionFailedError: Overriding private property of Foo.prototype.
Closure_72,/222043010/omniapr/defects4j/Closure_72_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testInlineFunctions31,"  public void testInlineFunctions31() {
    // Don't introduce a duplicate label in the same scope
    test(""function foo(){ lab:{4;} }"" +
        ""lab:{foo();}"",
        ""lab:{{JSCompiler_inline_label_0:{4}}}"");
  }",junit.framework.AssertionFailedError: 
Closure_73,/222043010/omniapr/defects4j/Closure_73_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testUnicode,"  public void testUnicode() {
    assertPrint(""var x ='\\x0f';"", ""var x=\""\\u000f\"""");
    assertPrint(""var x ='\\x68';"", ""var x=\""h\"""");
    assertPrint(""var x ='\\x7f';"", ""var x=\""\\u007f\"""");
  }","junit.framework.ComparisonFailure: expected:<var x=""[\u007f]""> but was:<var x=""[]"">"
Closure_74,/222043010/omniapr/defects4j/Closure_74_buggy/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,testFoldComparison3,"  public void testFoldComparison3() {
    fold(""x = !1 == !0"", ""x = false"");

    fold(""x = !0 == !0"", ""x = true"");
    fold(""x = !1 == !1"", ""x = true"");
    fold(""x = !1 == null"", ""x = false"");
    fold(""x = !1 == !0"", ""x = false"");
    fold(""x = !0 == null"", ""x = false"");

    fold(""!0 == !0"", ""true"");
    fold(""!1 == null"", ""false"");
    fold(""!1 == !0"", ""false"");
    fold(""!0 == null"", ""false"");

    fold(""x = !0 === !0"", ""x = true"");
    fold(""x = !1 === !1"", ""x = true"");
    fold(""x = !1 === null"", ""x = false"");
    fold(""x = !1 === !0"", ""x = false"");
    fold(""x = !0 === null"", ""x = false"");

    fold(""!0 === !0"", ""true"");
    fold(""!1 === null"", ""false"");
    fold(""!1 === !0"", ""false"");
    fold(""!0 === null"", ""false"");
  }",junit.framework.AssertionFailedError: 
Closure_74,/222043010/omniapr/defects4j/Closure_74_buggy/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,testInvertibleOperators,"  public void testInvertibleOperators() {
    Map<String, String> inverses = ImmutableMap.<String, String>builder()
        .put(""=="", ""!="")
        .put(""==="", ""!=="")
        .put(""<="", "">"")
        .put(""<"", "">="")
        .put("">="", ""<"")
        .put("">"", ""<="")
        .put(""!="", ""=="")
        .put(""!=="", ""==="")
        .build();
    Set<String> comparators = ImmutableSet.of(""<="", ""<"", "">="", "">"");
    Set<String> equalitors = ImmutableSet.of(""=="", ""==="");
    Set<String> uncomparables = ImmutableSet.of(""undefined"", ""void 0"");
    List<String> operators = ImmutableList.copyOf(inverses.values());
    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {
      for (int iOperandB = 0;
           iOperandB < LITERAL_OPERANDS.size();
           iOperandB++) {
        for (int iOp = 0; iOp < operators.size(); iOp++) {
          String a = LITERAL_OPERANDS.get(iOperandA);
          String b = LITERAL_OPERANDS.get(iOperandB);
          String op = operators.get(iOp);
          String inverse = inverses.get(op);

          // Test invertability.
          if (comparators.contains(op) &&
              (uncomparables.contains(a) || uncomparables.contains(b))) {
            assertSameResults(join(a, op, b), ""false"");
            assertSameResults(join(a, inverse, b), ""false"");
          } else if (a.equals(b) && equalitors.contains(op)) {
            if (a.equals(""NaN"") || a.equals(""Infinity"")) {
              foldSame(join(a, op, b));
              foldSame(join(a, inverse, b));
            } else {
              assertSameResults(join(a, op, b), ""true"");
              assertSameResults(join(a, inverse, b), ""false"");
            }
          } else {
            assertNotSameResults(join(a, op, b), join(a, inverse, b));
          }
        }
      }
    }
  }",junit.framework.AssertionFailedError: 
Closure_74,/222043010/omniapr/defects4j/Closure_74_buggy/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,testCommutativeOperators,"  public void testCommutativeOperators() {
    List<String> operators =
        ImmutableList.of(
            ""=="",
            ""!="",
            ""==="",
            ""!=="",
            ""*"",
            ""|"",
            ""&"",
            ""^"");
    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {
      for (int iOperandB = iOperandA;
           iOperandB < LITERAL_OPERANDS.size();
           iOperandB++) {
        for (int iOp = 0; iOp < operators.size(); iOp++) {
          String a = LITERAL_OPERANDS.get(iOperandA);
          String b = LITERAL_OPERANDS.get(iOperandB);
          String op = operators.get(iOp);

          // Test commutativity.
          // TODO(nicksantos): Eventually, all cases should be collapsed.
          assertSameResultsOrUncollapsed(join(a, op, b), join(b, op, a));
        }
      }
    }
  }",junit.framework.AssertionFailedError: 
Closure_75,/222043010/omniapr/defects4j/Closure_75_buggy/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,testIEString,"  public void testIEString() {
    testSame(""!+'\\v1'"");
  }",junit.framework.AssertionFailedError: 
Closure_76,/222043010/omniapr/defects4j/Closure_76_buggy/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java,testInExpression2,"  public void testInExpression2() {
    // This can be improved.  ""a = 1"" is dead but ""a"" is read in the following
    // expression.
    inFunction(
        ""var a; a = 1; if ((a = 2) || (a = 3) || (a)) {}"",
        ""var a; a = 1; if ((    2) || (a = 3) || (a)) {}"");

    inFunction(
        ""var a; (a = 1) || (a = 2)"",
        ""var a; 1 || 2"");

    inFunction(""var a; (a = 1) || (a = 2); return a"");

    inFunction(
        ""var a; a = 1; a ? a = 2 : a;"",
        ""var a; a = 1; a ?     2 : a;"");

    inFunction(""var a; a = 1; a ? a = 2 : a; return a"");

    inFunction(
        ""var a; a = 1; a ? a : a = 2;"",
        ""var a; a = 1; a ? a : 2;"");

    inFunction(""var a; a = 1; a ? a : a =2; return a"");

    inFunction(
        ""var a; (a = 1) ? a = 2 : a = 3;"",
        ""var a;      1  ?     2 :     3;"");

    // This can be improved.  ""a = 1"" is dead but ""a"" is read in the following
    // expression.
    inFunction(""var a; (a = 1) ? a = 2 : a = 3; return a"");
  }",junit.framework.AssertionFailedError: 
Closure_76,/222043010/omniapr/defects4j/Closure_76_buggy/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java,testIssue384b,"  public void testIssue384b() {
    inFunction(
            "" var a, b;\n"" +
            "" (f(b = true) || f(b = false)) ? (a = b) : (a = null);\n"" +
            "" return a;"");
  }",junit.framework.AssertionFailedError: 
Closure_76,/222043010/omniapr/defects4j/Closure_76_buggy/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java,testIssue384c,"  public void testIssue384c() {
    inFunction(
            "" var a, b;\n"" +
            "" (a ? f(b = true) : f(b = false)) && (a = b);\n"" +
            "" return a;"");
  }",junit.framework.AssertionFailedError: 
Closure_76,/222043010/omniapr/defects4j/Closure_76_buggy/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java,testIssue384d,"  public void testIssue384d() {
    inFunction(
            "" var a, b;\n"" +
            "" (f(b = true) || f(b = false)) && (a = b);\n"" +
            "" return a;"");
  }",junit.framework.AssertionFailedError: 
Closure_77,/222043010/omniapr/defects4j/Closure_77_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testZero,"  public void testZero() {
    assertPrint(""var x ='\\0';"", ""var x=\""\\0\"""");
    assertPrint(""var x ='\\x00';"", ""var x=\""\\0\"""");
    assertPrint(""var x ='\\u0000';"", ""var x=\""\\0\"""");
  }","junit.framework.ComparisonFailure: expected:<var x=""\[]0""> but was:<var x=""\[u000]0"">"
Closure_78,/222043010/omniapr/defects4j/Closure_78_buggy/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,testFoldArithmetic,"  public void testFoldArithmetic() {
    fold(""x = 10 + 20"", ""x = 30"");
    fold(""x = 2 / 4"", ""x = 0.5"");
    fold(""x = 2.25 * 3"", ""x = 6.75"");
    fold(""z = x * y"", ""z = x * y"");
    fold(""x = y * 5"", ""x = y * 5"");
    fold(""x = 1 / 0"", ""x = 1 / 0"");
    fold(""x = 3 % 2"", ""x = 1"");
    fold(""x = 3 % -2"", ""x = 1"");
    fold(""x = -1 % 3"", ""x = -1"");
    fold(""x = 1 % 0"", ""x = 1 % 0"");
  }",junit.framework.AssertionFailedError: Unexpected error(s): JSC_DIVIDE_BY_0_ERROR. Divide by 0 at testcode line 1 : 8 expected:<0> but was:<1>
Closure_79,/222043010/omniapr/defects4j/Closure_79_buggy/test/com/google/javascript/jscomp/NormalizeTest.java,testIssue,"  public void testIssue() {
    super.allowExternsChanges(true);
    test(""var a,b,c; var a,b"", ""a(), b()"", ""a(), b()"", null, null);
  }",java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Closure_79,/222043010/omniapr/defects4j/Closure_79_buggy/test/com/google/javascript/jscomp/VarCheckTest.java,testPropReferenceInExterns1,"  public void testPropReferenceInExterns1() {
    testSame(""asdf.foo;"", ""var asdf;"",
        VarCheck.UNDEFINED_EXTERN_VAR_ERROR);
  }",junit.framework.AssertionFailedError: compiler.reportCodeChange() should have been called
Closure_79,/222043010/omniapr/defects4j/Closure_79_buggy/test/com/google/javascript/jscomp/VarCheckTest.java,testPropReferenceInExterns3,"  public void testPropReferenceInExterns3() {
    testSame(""asdf.foo;"", ""var asdf;"",
        VarCheck.UNDEFINED_EXTERN_VAR_ERROR);

    externValidationErrorLevel = CheckLevel.ERROR;
    test(
        ""asdf.foo;"", ""var asdf;"", """",
         VarCheck.UNDEFINED_EXTERN_VAR_ERROR, null);

    externValidationErrorLevel = CheckLevel.OFF;
    test(""asdf.foo;"", ""var asdf;"", ""var asdf;"", null, null);
  }",junit.framework.AssertionFailedError: compiler.reportCodeChange() should have been called
Closure_79,/222043010/omniapr/defects4j/Closure_79_buggy/test/com/google/javascript/jscomp/VarCheckTest.java,testVarReferenceInExterns,"  public void testVarReferenceInExterns() {
    testSame(""asdf;"", ""var asdf;"",
        VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR);
  }",junit.framework.AssertionFailedError: compiler.reportCodeChange() should have been called
Closure_79,/222043010/omniapr/defects4j/Closure_79_buggy/test/com/google/javascript/jscomp/VarCheckTest.java,testCallInExterns,"  public void testCallInExterns() {
    testSame(""yz();"", ""function yz() {}"",
        VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR);
  }",junit.framework.AssertionFailedError: compiler.reportCodeChange() should have been called
Closure_80,/222043010/omniapr/defects4j/Closure_80_buggy/test/com/google/javascript/jscomp/NodeUtilTest.java,testIsBooleanResult,"  public void testIsBooleanResult() {
    assertFalse(NodeUtil.isBooleanResult(getNode(""1"")));
    assertTrue(NodeUtil.isBooleanResult(getNode(""true"")));
    assertFalse(NodeUtil.isBooleanResult(getNode(""+true"")));
    assertFalse(NodeUtil.isBooleanResult(getNode(""+1"")));
    assertFalse(NodeUtil.isBooleanResult(getNode(""-1"")));
    assertFalse(NodeUtil.isBooleanResult(getNode(""-Infinity"")));
    assertFalse(NodeUtil.isBooleanResult(getNode(""Infinity"")));
    assertFalse(NodeUtil.isBooleanResult(getNode(""NaN"")));
    assertFalse(NodeUtil.isBooleanResult(getNode(""undefined"")));
    assertFalse(NodeUtil.isBooleanResult(getNode(""void 0"")));

    assertFalse(NodeUtil.isBooleanResult(getNode(""a << b"")));
    assertFalse(NodeUtil.isBooleanResult(getNode(""a >> b"")));
    assertFalse(NodeUtil.isBooleanResult(getNode(""a >>> b"")));

    assertTrue(NodeUtil.isBooleanResult(getNode(""a == b"")));
    assertTrue(NodeUtil.isBooleanResult(getNode(""a != b"")));
    assertTrue(NodeUtil.isBooleanResult(getNode(""a === b"")));
    assertTrue(NodeUtil.isBooleanResult(getNode(""a !== b"")));
    assertTrue(NodeUtil.isBooleanResult(getNode(""a < b"")));
    assertTrue(NodeUtil.isBooleanResult(getNode(""a > b"")));
    assertTrue(NodeUtil.isBooleanResult(getNode(""a <= b"")));
    assertTrue(NodeUtil.isBooleanResult(getNode(""a >= b"")));
    assertTrue(NodeUtil.isBooleanResult(getNode(""a in b"")));
    assertTrue(NodeUtil.isBooleanResult(getNode(""a instanceof b"")));

    assertFalse(NodeUtil.isBooleanResult(getNode(""'a'"")));
    assertFalse(NodeUtil.isBooleanResult(getNode(""'a'+b"")));
    assertFalse(NodeUtil.isBooleanResult(getNode(""a+'b'"")));
    assertFalse(NodeUtil.isBooleanResult(getNode(""a+b"")));
    assertFalse(NodeUtil.isBooleanResult(getNode(""a()"")));
    assertFalse(NodeUtil.isBooleanResult(getNode(""''.a"")));
    assertFalse(NodeUtil.isBooleanResult(getNode(""a.b"")));
    assertFalse(NodeUtil.isBooleanResult(getNode(""a.b()"")));
    assertFalse(NodeUtil.isBooleanResult(getNode(""a().b()"")));
    assertFalse(NodeUtil.isBooleanResult(getNode(""new a()"")));
    assertTrue(NodeUtil.isBooleanResult(getNode(""delete a"")));

    // Definitely not boolean
    assertFalse(NodeUtil.isBooleanResult(getNode(""([true,false])"")));
    assertFalse(NodeUtil.isBooleanResult(getNode(""({a:true})"")));

    // These are boolean but aren't handled yet, ""false"" here means ""unknown"".
    assertTrue(NodeUtil.isBooleanResult(getNode(""true && false"")));
    assertTrue(NodeUtil.isBooleanResult(getNode(""true || false"")));
    assertTrue(NodeUtil.isBooleanResult(getNode(""a ? true : false"")));
    assertTrue(NodeUtil.isBooleanResult(getNode(""a,true"")));
    assertTrue(NodeUtil.isBooleanResult(getNode(""a=true"")));
    assertFalse(NodeUtil.isBooleanResult(getNode(""a=1"")));
  }",junit.framework.AssertionFailedError
Closure_80,/222043010/omniapr/defects4j/Closure_80_buggy/test/com/google/javascript/jscomp/NodeUtilTest.java,testLocalValue1,"  public void testLocalValue1() throws Exception {
    // Names are not known to be local.
    assertFalse(testLocalValue(""x""));
    assertFalse(testLocalValue(""x()""));
    assertFalse(testLocalValue(""this""));
    assertFalse(testLocalValue(""arguments""));

    // We can't know if new objects are local unless we know
    // that they don't alias themselves.
    assertFalse(testLocalValue(""new x()""));

    // property references are assume to be non-local
    assertFalse(testLocalValue(""(new x()).y""));
    assertFalse(testLocalValue(""(new x())['y']""));

    // Primitive values are local
    assertTrue(testLocalValue(""null""));
    assertTrue(testLocalValue(""undefined""));
    assertTrue(testLocalValue(""Infinity""));
    assertTrue(testLocalValue(""NaN""));
    assertTrue(testLocalValue(""1""));
    assertTrue(testLocalValue(""'a'""));
    assertTrue(testLocalValue(""true""));
    assertTrue(testLocalValue(""false""));
    assertTrue(testLocalValue(""[]""));
    assertTrue(testLocalValue(""{}""));

    // The contents of arrays and objects don't matter
    assertTrue(testLocalValue(""[x]""));
    assertTrue(testLocalValue(""{'a':x}""));

    // Pre-increment results in primitive number
    assertTrue(testLocalValue(""++x""));
    assertTrue(testLocalValue(""--x""));

    // Post-increment, the previous value matters.
    assertFalse(testLocalValue(""x++""));
    assertFalse(testLocalValue(""x--""));

    // The left side of an only assign matters if it is an alias or mutable.
    assertTrue(testLocalValue(""x=1""));
    assertFalse(testLocalValue(""x=[]""));
    assertFalse(testLocalValue(""x=y""));
    // The right hand side of assignment opts don't matter, as they force
    // a local result.
    assertTrue(testLocalValue(""x+=y""));
    assertTrue(testLocalValue(""x*=y""));
    // Comparisons always result in locals, as they force a local boolean
    // result.
    assertTrue(testLocalValue(""x==y""));
    assertTrue(testLocalValue(""x!=y""));
    assertTrue(testLocalValue(""x>y""));
    // Only the right side of a comma matters
    assertTrue(testLocalValue(""(1,2)""));
    assertTrue(testLocalValue(""(x,1)""));
    assertFalse(testLocalValue(""(x,y)""));

    // Both the operands of OR matter
    assertTrue(testLocalValue(""1||2""));
    assertFalse(testLocalValue(""x||1""));
    assertFalse(testLocalValue(""x||y""));
    assertFalse(testLocalValue(""1||y""));

    // Both the operands of AND matter
    assertTrue(testLocalValue(""1&&2""));
    assertFalse(testLocalValue(""x&&1""));
    assertFalse(testLocalValue(""x&&y""));
    assertFalse(testLocalValue(""1&&y""));

    // Only the results of HOOK matter
    assertTrue(testLocalValue(""x?1:2""));
    assertFalse(testLocalValue(""x?x:2""));
    assertFalse(testLocalValue(""x?1:x""));
    assertFalse(testLocalValue(""x?x:y""));

    // Results of ops are local values
    assertTrue(testLocalValue(""!y""));
    assertTrue(testLocalValue(""~y""));
    assertTrue(testLocalValue(""y + 1""));
    assertTrue(testLocalValue(""y + z""));
    assertTrue(testLocalValue(""y * z""));

    assertTrue(testLocalValue(""'a' in x""));
    assertTrue(testLocalValue(""typeof x""));
    assertTrue(testLocalValue(""x instanceof y""));

    assertTrue(testLocalValue(""void x""));
    assertTrue(testLocalValue(""void 0""));

    assertFalse(testLocalValue(""{}.x""));

    assertTrue(testLocalValue(""{}.toString()""));
    assertTrue(testLocalValue(""o.toString()""));

    assertFalse(testLocalValue(""o.valueOf()""));

    assertTrue(testLocalValue(""delete a.b""));
  }",junit.framework.AssertionFailedError
Closure_81,/222043010/omniapr/defects4j/Closure_81_buggy/test/com/google/javascript/jscomp/parsing/ParserTest.java,testUnnamedFunctionStatement,"  public void testUnnamedFunctionStatement() {
    // Statements
    parseError(""function() {};"", ""unnamed function statement"");
    parseError(""if (true) { function() {}; }"", ""unnamed function statement"");
    parse(""function f() {};"");
    // Expressions
    parse(""(function f() {});"");
    parse(""(function () {});"");
  }",junit.framework.AssertionFailedError
Closure_82,/222043010/omniapr/defects4j/Closure_82_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testIssue301,"  public void testIssue301() throws Exception {
    testTypes(
        ""Array.indexOf = function() {};"" +
        ""var s = 'hello';"" +
        ""alert(s.toLowerCase.indexOf('1'));"",
        ""Property indexOf never defined on String.prototype.toLowerCase"");
  }",junit.framework.AssertionFailedError: expected a warning
Closure_82,/222043010/omniapr/defects4j/Closure_82_buggy/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,testEmptyFunctionTypes,"  public void testEmptyFunctionTypes() {
    assertTrue(LEAST_FUNCTION_TYPE.isEmptyType());
    assertFalse(GREATEST_FUNCTION_TYPE.isEmptyType());
  }",junit.framework.AssertionFailedError
Closure_83,/222043010/omniapr/defects4j/Closure_83_buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java,testVersionFlag2,"  public void testVersionFlag2() {
    lastArg = ""--version"";
    testSame("""");
    assertEquals(
        0,
        new String(errReader.toByteArray()).indexOf(
            ""Closure Compiler (http://code.google.com/closure/compiler)\n"" +
            ""Version: ""));
  }",junit.framework.AssertionFailedError
Closure_84,/222043010/omniapr/defects4j/Closure_84_buggy/test/com/google/javascript/jscomp/parsing/ParserTest.java,testDestructuringAssignForbidden4,"  public void testDestructuringAssignForbidden4() {
    parseError(""[x, y] = foo();"",
        ""destructuring assignment forbidden"",
        ""invalid assignment target"");
  }",junit.framework.AssertionFailedError
Closure_85,/222043010/omniapr/defects4j/Closure_85_buggy/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,testCascadedRemovalOfUnlessUnconditonalJumps,"  public void testCascadedRemovalOfUnlessUnconditonalJumps() {
    test(""switch (a) { case 'a': break; case 'b': break; case 'c': break }"",
         ""switch (a) { case 'a': break; case 'b': case 'c': }"");
    // Only one break removed per pass.
    test(""switch (a) { case 'a': break; case 'b': case 'c': }"",
         ""switch (a) { case 'a': case 'b': case 'c': }"");

    test(""function foo() {"" +
      ""  switch (a) { case 'a':return; case 'b':return; case 'c':return }}"",
      ""function foo() { switch (a) { case 'a':return; case 'b': case 'c': }}"");
    test(""function foo() {"" +
      ""  switch (a) { case 'a':return; case 'b': case 'c': }}"",
      ""function foo() { switch (a) { case 'a': case 'b': case 'c': }}"");

    testSame(""function foo() {"" +
             ""switch (a) { case 'a':return 2; case 'b':return 1}}"");
  }",junit.framework.AssertionFailedError: 
Closure_85,/222043010/omniapr/defects4j/Closure_85_buggy/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,testIssue311,"  public void testIssue311() {
    test(""function a(b) {\n"" +
         ""  switch (b.v) {\n"" +
         ""    case 'SWITCH':\n"" +
         ""      if (b.i >= 0) {\n"" +
         ""        return b.o;\n"" +
         ""      } else {\n"" +
         ""        return;\n"" +
         ""      }\n"" +
         ""      break;\n"" +
         ""  }\n"" +
         ""}"",
         ""function a(b) {\n"" +
         ""  switch (b.v) {\n"" +
         ""    case 'SWITCH':\n"" +
         ""      if (b.i >= 0) {\n"" +
         ""        return b.o;\n"" +
         ""      } else {\n"" +
         ""      }\n"" +
         ""  }\n"" +
         ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_86,/222043010/omniapr/defects4j/Closure_86_buggy/test/com/google/javascript/jscomp/NodeUtilTest.java,testLocalValue1,"  public void testLocalValue1() throws Exception {
    // Names are not known to be local.
    assertFalse(testLocalValue(""x""));
    assertFalse(testLocalValue(""x()""));
    assertFalse(testLocalValue(""this""));
    assertFalse(testLocalValue(""arguments""));

    // We can't know if new objects are local unless we know
    // that they don't alias themselves.
    assertFalse(testLocalValue(""new x()""));

    // property references are assume to be non-local
    assertFalse(testLocalValue(""(new x()).y""));
    assertFalse(testLocalValue(""(new x())['y']""));

    // Primitive values are local
    assertTrue(testLocalValue(""null""));
    assertTrue(testLocalValue(""undefined""));
    assertTrue(testLocalValue(""Infinity""));
    assertTrue(testLocalValue(""NaN""));
    assertTrue(testLocalValue(""1""));
    assertTrue(testLocalValue(""'a'""));
    assertTrue(testLocalValue(""true""));
    assertTrue(testLocalValue(""false""));
    assertTrue(testLocalValue(""[]""));
    assertTrue(testLocalValue(""{}""));

    // The contents of arrays and objects don't matter
    assertTrue(testLocalValue(""[x]""));
    assertTrue(testLocalValue(""{'a':x}""));

    // Pre-increment results in primitive number
    assertTrue(testLocalValue(""++x""));
    assertTrue(testLocalValue(""--x""));

    // Post-increment, the previous value matters.
    assertFalse(testLocalValue(""x++""));
    assertFalse(testLocalValue(""x--""));

    // The left side of an only assign matters if it is an alias or mutable.
    assertTrue(testLocalValue(""x=1""));
    assertFalse(testLocalValue(""x=[]""));
    assertFalse(testLocalValue(""x=y""));
    // The right hand side of assignment opts don't matter, as they force
    // a local result.
    assertTrue(testLocalValue(""x+=y""));
    assertTrue(testLocalValue(""x*=y""));
    // Comparisons always result in locals, as they force a local boolean
    // result.
    assertTrue(testLocalValue(""x==y""));
    assertTrue(testLocalValue(""x!=y""));
    assertTrue(testLocalValue(""x>y""));
    // Only the right side of a comma matters
    assertTrue(testLocalValue(""(1,2)""));
    assertTrue(testLocalValue(""(x,1)""));
    assertFalse(testLocalValue(""(x,y)""));

    // Both the operands of OR matter
    assertTrue(testLocalValue(""1||2""));
    assertFalse(testLocalValue(""x||1""));
    assertFalse(testLocalValue(""x||y""));
    assertFalse(testLocalValue(""1||y""));

    // Both the operands of AND matter
    assertTrue(testLocalValue(""1&&2""));
    assertFalse(testLocalValue(""x&&1""));
    assertFalse(testLocalValue(""x&&y""));
    assertFalse(testLocalValue(""1&&y""));

    // Only the results of HOOK matter
    assertTrue(testLocalValue(""x?1:2""));
    assertFalse(testLocalValue(""x?x:2""));
    assertFalse(testLocalValue(""x?1:x""));
    assertFalse(testLocalValue(""x?x:y""));

    // Results of ops are local values
    assertTrue(testLocalValue(""!y""));
    assertTrue(testLocalValue(""~y""));
    assertTrue(testLocalValue(""y + 1""));
    assertTrue(testLocalValue(""y + z""));
    assertTrue(testLocalValue(""y * z""));

    assertTrue(testLocalValue(""'a' in x""));
    assertTrue(testLocalValue(""typeof x""));
    assertTrue(testLocalValue(""x instanceof y""));

    assertTrue(testLocalValue(""void x""));
    assertTrue(testLocalValue(""void 0""));

    assertFalse(testLocalValue(""{}.x""));

    assertTrue(testLocalValue(""{}.toString()""));
    assertTrue(testLocalValue(""o.toString()""));

    assertFalse(testLocalValue(""o.valueOf()""));
  }",junit.framework.AssertionFailedError
Closure_86,/222043010/omniapr/defects4j/Closure_86_buggy/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,testLocalizedSideEffects8,"  public void testLocalizedSideEffects8() throws Exception {
    // Returning a local object that has been modified
    // is not a global side-effect.
    checkMarkedCalls(""/** @constructor A */ function A() {};"" +
                     ""function f() {"" +
                     ""  var a = new A; a.foo = 1; return a;"" +
                     ""}"" +
                     ""f()"",
                     BROKEN_NEW ?
                         ImmutableList.<String>of(""A"") :
                         ImmutableList.<String>of(""A"", ""f""));
  }","junit.framework.AssertionFailedError: expected:<[A]> but was:<[A, f]>"
Closure_86,/222043010/omniapr/defects4j/Closure_86_buggy/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,testLocalizedSideEffects9,"  public void testLocalizedSideEffects9() throws Exception {
    // Returning a local object that has been modified
    // is not a global side-effect.
    checkMarkedCalls(""/** @constructor A */ function A() {this.x = 1};"" +
                     ""function f() {"" +
                     ""  var a = new A; a.foo = 1; return a;"" +
                     ""}"" +
                     ""f()"",
                     BROKEN_NEW ?
                         ImmutableList.<String>of(""A"") :
                         ImmutableList.<String>of(""A"", ""f""));
  }","junit.framework.AssertionFailedError: expected:<[A]> but was:<[A, f]>"
Closure_86,/222043010/omniapr/defects4j/Closure_86_buggy/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,testAnnotationInExterns_new4,"  public void testAnnotationInExterns_new4() throws Exception {
    // The entire expression containing ""externObjSEThisMethod"" is considered
    // side-effect free in this context.

    checkMarkedCalls(""new externObjSEThis().externObjSEThisMethod('')"",
        BROKEN_NEW ?
            ImmutableList.<String>of(
               ""externObjSEThis"") :
            ImmutableList.<String>of(
               ""externObjSEThis"", ""NEW STRING externObjSEThisMethod""));
  }","junit.framework.AssertionFailedError: expected:<[A]> but was:<[A, f]>"
Closure_86,/222043010/omniapr/defects4j/Closure_86_buggy/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,testAnnotationInExterns_new6,"  public void testAnnotationInExterns_new6() throws Exception {
    // While ""externObjSEThisMethod"" has modifies ""this""
    // it does not have global side-effects with ""this"" is
    // a known local value.
    checkMarkedCalls(
        ""function f() {"" +
        ""  new externObjSEThis().externObjSEThisMethod('') "" +
        ""};"" +
        ""f();"",
        BROKEN_NEW ?
            ImmutableList.<String>of(
                ""externObjSEThis"") :
           ImmutableList.<String>of(
               ""externObjSEThis"", ""NEW STRING externObjSEThisMethod"", ""f""));
  }","junit.framework.AssertionFailedError: expected:<[A]> but was:<[A, f]>"
Closure_86,/222043010/omniapr/defects4j/Closure_86_buggy/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,testIssue303b,"  public void testIssue303b() throws Exception {
    checkMarkedCalls(
        ""/** @constructor */ function F() {"" +
        ""  var self = this;"" +
        ""  window.setTimeout(function() {"" +
        ""    window.location = self.location;"" +
        ""  }, 0);"" +
        ""}"" +
        ""F.prototype.setLocation = function(x) {"" +
        ""  this.location = x;"" +
        ""};"" +
        ""function x() {"" +
        ""  (new F()).setLocation('http://www.google.com/');"" +
        ""} window['x'] = x;"",
        ImmutableList.<String>of());
  }","junit.framework.AssertionFailedError: expected:<[A]> but was:<[A, f]>"
Closure_86,/222043010/omniapr/defects4j/Closure_86_buggy/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,testIssue303,"  public void testIssue303() throws Exception {
    checkMarkedCalls(
        ""/** @constructor */ function F() {"" +
        ""  var self = this;"" +
        ""  window.setTimeout(function() {"" +
        ""    window.location = self.location;"" +
        ""  }, 0);"" +
        ""}"" +
        ""F.prototype.setLocation = function(x) {"" +
        ""  this.location = x;"" +
        ""};"" +
        ""(new F()).setLocation('http://www.google.com/');"",
        ImmutableList.<String>of());
  }","junit.framework.AssertionFailedError: expected:<[A]> but was:<[A, f]>"
Closure_87,/222043010/omniapr/defects4j/Closure_87_buggy/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,testIssue291,"  public void testIssue291() {
    fold(""if (true) { f.onchange(); }"", ""if (1) f.onchange();"");
    foldSame(""if (f) { f.onchange(); }"");
    foldSame(""if (f) { f.bar(); } else { f.onchange(); }"");
    fold(""if (f) { f.bonchange(); }"", ""f && f.bonchange();"");
    foldSame(""if (f) { f['x'](); }"");
  }",junit.framework.AssertionFailedError: 
Closure_88,/222043010/omniapr/defects4j/Closure_88_buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java,testIssue297,"  public void testIssue297() {
    args.add(""--compilation_level=SIMPLE_OPTIMIZATIONS"");
    test(""function f(p) {"" +
         "" var x;"" +
         "" return ((x=p.id) && (x=parseInt(x.substr(1))) && x>0);"" +
         ""}"",
         ""function f(b) {"" +
         "" var a;"" +
         "" return ((a=b.id) && (a=parseInt(a.substr(1))) && a>0);"" +
         ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_88,/222043010/omniapr/defects4j/Closure_88_buggy/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java,testIssue297a,"  public void testIssue297a() {
    testSame(""function f(p) {"" +
         "" var x;"" +
         "" return ((x=p.id) && (x=parseInt(x.substr(1))) && x>0);"" +
         ""}; f('');"");
  }",junit.framework.AssertionFailedError: 
Closure_88,/222043010/omniapr/defects4j/Closure_88_buggy/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java,testIssue297b,"  public void testIssue297b() {
    test(""function f() {"" +
         "" var x;"" +
         "" return (x='') && (x = x.substr(1));"" +
         ""};"",
         ""function f() {"" +
         "" var x;"" +
         "" return (x='') && (x.substr(1));"" +
         ""};"");
  }",junit.framework.AssertionFailedError: 
Closure_88,/222043010/omniapr/defects4j/Closure_88_buggy/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java,testIssue297c,"  public void testIssue297c() {
    test(""function f() {"" +
         "" var x;"" +
         "" return (x=1) && (x = f(x));"" +
         ""};"",
         ""function f() {"" +
         "" var x;"" +
         "" return (x=1) && f(x);"" +
         ""};"");
  }",junit.framework.AssertionFailedError: 
Closure_88,/222043010/omniapr/defects4j/Closure_88_buggy/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java,testIssue297d,"  public void testIssue297d() {
    test(""function f(a) {"" +
         "" return (a=1) && (a = f(a));"" +
         ""};"",
         ""function f(a) {"" +
         "" return (a=1) && (f(a));"" +
         ""};"");
  }",junit.framework.AssertionFailedError: 
Closure_88,/222043010/omniapr/defects4j/Closure_88_buggy/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java,testIssue297e,"  public void testIssue297e() {
    test(""function f(a) {"" +
         "" return (a=1) - (a = g(a));"" +
         ""};"",
         ""function f(a) {"" +
         "" return (a=1) - (g(a));"" +
         ""};"");
  }",junit.framework.AssertionFailedError: 
Closure_88,/222043010/omniapr/defects4j/Closure_88_buggy/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java,testIssue297f,"  public void testIssue297f() {
    test(""function f(a) {"" +
         "" h((a=1) - (a = g(a)));"" +
         ""};"",
         ""function f(a) {"" +
         "" h((a=1) - (g(a)));"" +
         ""};"");
  }",junit.framework.AssertionFailedError: 
Closure_89,/222043010/omniapr/defects4j/Closure_89_buggy/test/com/google/javascript/jscomp/CollapsePropertiesTest.java,testAddPropertyToChildOfUncollapsibleFunctionInLocalScope,"  public void testAddPropertyToChildOfUncollapsibleFunctionInLocalScope() {
    testSame(
        ""function a() {} a.b = {x: 0}; var c = a;"" +
        ""(function() {a.b.y = 0;})(); a.b.y;"");
  }",junit.framework.AssertionFailedError: 
Closure_89,/222043010/omniapr/defects4j/Closure_89_buggy/test/com/google/javascript/jscomp/CollapsePropertiesTest.java,testAliasCreatedForFunctionDepth1_1,"  public void testAliasCreatedForFunctionDepth1_1() {
    testSame(""var a = function(){}; a.b = 1; var c = a; c.b = 2; a.b != c.b;"");
  }",junit.framework.AssertionFailedError: 
Closure_89,/222043010/omniapr/defects4j/Closure_89_buggy/test/com/google/javascript/jscomp/CollapsePropertiesTest.java,testAliasCreatedForFunctionDepth1_2,"  public void testAliasCreatedForFunctionDepth1_2() {
    testSame(""var a = function(){}; a.b = 1; f(a); a.b;"");
  }",junit.framework.AssertionFailedError: 
Closure_89,/222043010/omniapr/defects4j/Closure_89_buggy/test/com/google/javascript/jscomp/CollapsePropertiesTest.java,testAliasCreatedForFunctionDepth1_3,"  public void testAliasCreatedForFunctionDepth1_3() {
    testSame(""var a = function(){}; a.b = 1; new f(a); a.b;"");
  }",junit.framework.AssertionFailedError: 
Closure_89,/222043010/omniapr/defects4j/Closure_89_buggy/test/com/google/javascript/jscomp/CollapsePropertiesTest.java,testAddPropertyToUncollapsibleNamedCtorInLocalScopeDepth1,"  public void testAddPropertyToUncollapsibleNamedCtorInLocalScopeDepth1() {
    // This technically should be collapsed, according to the rules.
    // We don't collapse named constructors for legacy reasons
    // (this pass has been around too long, and we don't know who's
    // depending on this behavior).
    testSame(
          ""/** @constructor */ function a() {} var c = a; "" +
          ""(function() {a.b = 0;})(); a.b;"");
  }",junit.framework.AssertionFailedError: 
Closure_89,/222043010/omniapr/defects4j/Closure_89_buggy/test/com/google/javascript/jscomp/CollapsePropertiesTest.java,testAddPropertyToUncollapsibleFunctionInLocalScopeDepth1,"  public void testAddPropertyToUncollapsibleFunctionInLocalScopeDepth1() {
    testSame(""function a() {} var c = a; (function() {a.b = 0;})(); a.b;"");
  }",junit.framework.AssertionFailedError: 
Closure_89,/222043010/omniapr/defects4j/Closure_89_buggy/test/com/google/javascript/jscomp/CollapsePropertiesTest.java,testAddPropertyToUncollapsibleFunctionInLocalScopeDepth2,"  public void testAddPropertyToUncollapsibleFunctionInLocalScopeDepth2() {
    test(""var a = {}; a.b = function (){}; var d = a.b;"" +
         ""(function() {a.b.c = 0;})(); a.b.c;"",
         ""var a$b = function (){}; var d = a$b;"" +
         ""(function() {a$b.c = 0;})(); a$b.c;"");
  }",junit.framework.AssertionFailedError: 
Closure_89,/222043010/omniapr/defects4j/Closure_89_buggy/test/com/google/javascript/jscomp/CollapsePropertiesTest.java,testAliasCreatedForFunctionDepth2,"  public void testAliasCreatedForFunctionDepth2() {
    test(
        ""var a = {}; a.b = function() {}; a.b.c = 1; var d = a.b;"" +
        ""a.b.c != d.c;"",
        ""var a$b = function() {}; a$b.c = 1; var d = a$b;"" +
        ""a$b.c != d.c;"");
  }",junit.framework.AssertionFailedError: 
Closure_90,/222043010/omniapr/defects4j/Closure_90_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testBackwardsTypedefUse8,"  public void testBackwardsTypedefUse8() throws Exception {
    // Tehnically, this isn't quite right, because the JS runtime
    // will coerce null -> the global object. But we'll punt on that for now.
    testTypes(
        ""/** @param {!Array} x */ function g(x) {}"" +
        ""/** @this {goog.MyTypedef} */ function f() { g(this); }"" +
        ""var goog = {};"" +
        ""/** @typedef {(Array|null|undefined)} */ goog.MyTypedef;"");
  }",junit.framework.AssertionFailedError: unexpected warnings(s):
Closure_90,/222043010/omniapr/defects4j/Closure_90_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testBackwardsTypedefUse9,"  public void testBackwardsTypedefUse9() throws Exception {
    testTypes(
        ""/** @param {!Array} x */ function g(x) {}"" +
        ""/** @this {goog.MyTypedef} */ function f() { g(this); }"" +
        ""var goog = {};"" +
        ""/** @typedef {(Error|null|undefined)} */ goog.MyTypedef;"",
        ""actual parameter 1 of g does not match formal parameter\n"" +
        ""found   : Error\n"" +
        ""required: Array"");
  }",junit.framework.AssertionFailedError: unexpected warnings(s):
Closure_91,/222043010/omniapr/defects4j/Closure_91_buggy/test/com/google/javascript/jscomp/CheckGlobalThisTest.java,testLendsAnnotation3,"  public void testLendsAnnotation3() {
    testSame(""/** @constructor */ function F() {}"" +
        ""dojo.declare(F, /** @lends {F.prototype} */ ("" +
        ""    {foo: function() { return this.foo; }}));"");
  }",junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 110 expected:<0> but was:<1>
Closure_92,/222043010/omniapr/defects4j/Closure_92_buggy/test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java,testProvideInIndependentModules4,"  public void testProvideInIndependentModules4() {
    // Regression test for bug 261:
    // http://code.google.com/p/closure-compiler/issues/detail?id=261
    test(
        createModuleStar(
            ""goog.provide('apps');"",
            ""goog.provide('apps.foo.bar.B');"",
            ""goog.provide('apps.foo.bar.C');""),
        new String[] {
            ""var apps = {};apps.foo = {};apps.foo.bar = {}"",
            ""apps.foo.bar.B = {};"",
            ""apps.foo.bar.C = {};"",
        });
  }",junit.framework.AssertionFailedError: 
Closure_94,/222043010/omniapr/defects4j/Closure_94_buggy/test/com/google/javascript/jscomp/NodeUtilTest.java,testValidDefine,"  public void testValidDefine() {
    assertTrue(testValidDefineValue(""1""));
    assertTrue(testValidDefineValue(""-3""));
    assertTrue(testValidDefineValue(""true""));
    assertTrue(testValidDefineValue(""false""));
    assertTrue(testValidDefineValue(""'foo'""));
    
    assertFalse(testValidDefineValue(""x""));
    assertFalse(testValidDefineValue(""null""));
    assertFalse(testValidDefineValue(""undefined""));
    assertFalse(testValidDefineValue(""NaN""));
    
    assertTrue(testValidDefineValue(""!true""));
    assertTrue(testValidDefineValue(""-true""));
    assertTrue(testValidDefineValue(""1 & 8""));
    assertTrue(testValidDefineValue(""1 + 8""));
    assertTrue(testValidDefineValue(""'a' + 'b'""));

    assertFalse(testValidDefineValue(""1 & foo""));
  }",junit.framework.AssertionFailedError
Closure_94,/222043010/omniapr/defects4j/Closure_94_buggy/test/com/google/javascript/jscomp/ProcessDefinesTest.java,testOverridingString1,"  public void testOverridingString1() {
    test(
        ""/** @define {string} */ var DEF_OVERRIDE_STRING = 'x' + 'y';"",
        ""var DEF_OVERRIDE_STRING=\""x\"" + \""y\"""");
  }",junit.framework.AssertionFailedError: Unexpected error(s): JSC_INVALID_DEFINE_INIT_ERROR. illegal initialization of @define variable DEF_OVERRIDE_STRING at testcode line 1 : 54 expected:<0> but was:<1>
Closure_94,/222043010/omniapr/defects4j/Closure_94_buggy/test/com/google/javascript/jscomp/ProcessDefinesTest.java,testOverridingString3,"  public void testOverridingString3() {
    overrides.put(""DEF_OVERRIDE_STRING"", Node.newString(""foo""));
    test(
        ""/** @define {string} */ var DEF_OVERRIDE_STRING = 'x' + 'y';"",
        ""var DEF_OVERRIDE_STRING=\""foo\"""");
  }",junit.framework.AssertionFailedError: Unexpected error(s): JSC_INVALID_DEFINE_INIT_ERROR. illegal initialization of @define variable DEF_OVERRIDE_STRING at testcode line 1 : 54 expected:<0> but was:<1>
Closure_95,/222043010/omniapr/defects4j/Closure_95_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testQualifiedNameInference5,"  public void testQualifiedNameInference5() throws Exception {
    testTypes(
        ""var ns = {}; "" +
        ""(function() { "" +
        ""    /** @param {number} x */ ns.foo = function(x) {}; })();"" +
        ""(function() { ns.foo(true); })();"",
        ""actual parameter 1 of ns.foo does not match formal parameter\n"" +
        ""found   : boolean\n"" +
        ""required: number"");
  }",junit.framework.AssertionFailedError: expected a warning
Closure_95,/222043010/omniapr/defects4j/Closure_95_buggy/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,testGlobalQualifiedNameInLocalScope,"  public void testGlobalQualifiedNameInLocalScope() {
    testSame(
        ""var ns = {}; "" +
        ""(function() { "" +
        ""    /** @param {number} x */ ns.foo = function(x) {}; })();"" +
        ""(function() { ns.foo(3); })();"");
    assertNotNull(globalScope.getVar(""ns.foo""));
    assertEquals(
        ""function (number): undefined"",
        globalScope.getVar(""ns.foo"").getType().toString());
  }",junit.framework.AssertionFailedError
Closure_96,/222043010/omniapr/defects4j/Closure_96_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testFunctionArguments16,"  public void testFunctionArguments16() throws Exception {
    testTypes(
        ""/** @param {...number} var_args */"" +
        ""function g(var_args) {} g(1, true);"",
        ""actual parameter 2 of g does not match formal parameter\n"" +
        ""found   : boolean\n"" +
        ""required: (number|undefined)"");
  }",junit.framework.AssertionFailedError: expected a warning
Closure_97,/222043010/omniapr/defects4j/Closure_97_buggy/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,testFoldBitShifts,"  public void testFoldBitShifts() {
    fold(""x = 1 << 0"", ""x = 1"");
    fold(""x = -1 << 0"", ""x = -1"");
    fold(""x = 1 << 1"", ""x = 2"");
    fold(""x = 3 << 1"", ""x = 6"");
    fold(""x = 1 << 8"", ""x = 256"");

    fold(""x = 1 >> 0"", ""x = 1"");
    fold(""x = -1 >> 0"", ""x = -1"");
    fold(""x = 1 >> 1"", ""x = 0"");
    fold(""x = 2 >> 1"", ""x = 1"");
    fold(""x = 5 >> 1"", ""x = 2"");
    fold(""x = 127 >> 3"", ""x = 15"");
    fold(""x = 3 >> 1"", ""x = 1"");
    fold(""x = 3 >> 2"", ""x = 0"");
    fold(""x = 10 >> 1"", ""x = 5"");
    fold(""x = 10 >> 2"", ""x = 2"");
    fold(""x = 10 >> 5"", ""x = 0"");

    fold(""x = 10 >>> 1"", ""x = 5"");
    fold(""x = 10 >>> 2"", ""x = 2"");
    fold(""x = 10 >>> 5"", ""x = 0"");
    fold(""x = -1 >>> 1"", ""x = 2147483647""); // 0x7fffffff
    fold(""x = -1 >>> 0"", ""x = 4294967295""); // 0xffffffff
    fold(""x = -2 >>> 0"", ""x = 4294967294""); // 0xfffffffe

    fold(""3000000000 << 1"", ""3000000000<<1"",
         PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);
    fold(""1 << 32"", ""1<<32"",
        PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);
    fold(""1 << -1"", ""1<<32"",
        PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);
    fold(""3000000000 >> 1"", ""3000000000>>1"",
        PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);
    fold(""1 >> 32"", ""1>>32"",
        PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);
    fold(""1.5 << 0"",  ""1.5<<0"",
        PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
    fold(""1 << .5"",   ""1.5<<0"",
        PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
    fold(""1.5 >>> 0"", ""1.5>>>0"",
        PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
    fold(""1 >>> .5"",  ""1.5>>>0"",
        PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
    fold(""1.5 >> 0"",  ""1.5>>0"",
        PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
    fold(""1 >> .5"",   ""1.5>>0"",
        PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
  }",junit.framework.AssertionFailedError: 
Closure_98,/222043010/omniapr/defects4j/Closure_98_buggy/test/com/google/javascript/jscomp/InlineVariablesTest.java,testNoInlineAliasesInLoop,"  public void testNoInlineAliasesInLoop() {
    testSame(
        ""function f() { "" +
        ""  for (var i = 0; i < 5; i++) {"" +
        ""    var x = extern();"" +
        ""    (function() {"" +
        ""       var y = x; window.setTimeout(function() { extern(y); }, 0);"" +
        ""     })();"" +
        ""  }"" +
        ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_99,/222043010/omniapr/defects4j/Closure_99_buggy/test/com/google/javascript/jscomp/CheckGlobalThisTest.java,testPropertyOfMethod,"  public void testPropertyOfMethod() {
    testFailure(""a.protoype.b = {}; "" +
        ""a.prototype.b.c = function() { this.foo = 3; };"");
  }",junit.framework.AssertionFailedError: There should be one error.  expected:<1> but was:<0>
Closure_99,/222043010/omniapr/defects4j/Closure_99_buggy/test/com/google/javascript/jscomp/CheckGlobalThisTest.java,testMethod4,"  public void testMethod4() {
    testSame(""a.prototype['x' + 'y'] =  function() { this.foo = 3; };"");
  }",junit.framework.AssertionFailedError: There should be one error.  expected:<1> but was:<0>
Closure_99,/222043010/omniapr/defects4j/Closure_99_buggy/test/com/google/javascript/jscomp/CheckGlobalThisTest.java,testInterface1,"  public void testInterface1() {
    testSame(
        ""/** @interface */function A() { /** @type {string} */ this.m2; }"");
  }",junit.framework.AssertionFailedError: There should be one error.  expected:<1> but was:<0>
Closure_100,/222043010/omniapr/defects4j/Closure_100_buggy/test/com/google/javascript/jscomp/CheckGlobalThisTest.java,testStaticFunction6,"  public void testStaticFunction6() {
    testSame(""function a() { return function() { this = 8; } }"");
  }",junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 35 expected:<0> but was:<1>
Closure_100,/222043010/omniapr/defects4j/Closure_100_buggy/test/com/google/javascript/jscomp/CheckGlobalThisTest.java,testStaticFunction7,"  public void testStaticFunction7() {
    testSame(""var a = function() { return function() { this = 8; } }"");
  }",junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 35 expected:<0> but was:<1>
Closure_100,/222043010/omniapr/defects4j/Closure_100_buggy/test/com/google/javascript/jscomp/CheckGlobalThisTest.java,testStaticFunction8,"  public void testStaticFunction8() {
    testFailure(""var a = function() { return this.foo; };"");
  }",junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 35 expected:<0> but was:<1>
Closure_100,/222043010/omniapr/defects4j/Closure_100_buggy/test/com/google/javascript/jscomp/CheckGlobalThisTest.java,testGlobalThis7,"  public void testGlobalThis7() {
    testFailure(""var a = this.foo;"");
  }",junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 35 expected:<0> but was:<1>
Closure_100,/222043010/omniapr/defects4j/Closure_100_buggy/test/com/google/javascript/jscomp/CheckGlobalThisTest.java,testStaticMethod2,"  public void testStaticMethod2() {
    testSame(""a.b = function() { return function() { this.m2 = 5; } }"");
  }",junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 35 expected:<0> but was:<1>
Closure_100,/222043010/omniapr/defects4j/Closure_100_buggy/test/com/google/javascript/jscomp/CheckGlobalThisTest.java,testStaticMethod3,"  public void testStaticMethod3() {
    testSame(""a.b.c = function() { return function() { this.m2 = 5; } }"");
  }",junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 35 expected:<0> but was:<1>
Closure_100,/222043010/omniapr/defects4j/Closure_100_buggy/test/com/google/javascript/jscomp/CheckGlobalThisTest.java,testInnerFunction1,"  public void testInnerFunction1() {
    testFailure(""function f() { function g() { return this.x; } }"");
  }",junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 35 expected:<0> but was:<1>
Closure_100,/222043010/omniapr/defects4j/Closure_100_buggy/test/com/google/javascript/jscomp/CheckGlobalThisTest.java,testInnerFunction2,"  public void testInnerFunction2() {
    testFailure(""function f() { var g = function() { return this.x; } }"");
  }",junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 35 expected:<0> but was:<1>
Closure_100,/222043010/omniapr/defects4j/Closure_100_buggy/test/com/google/javascript/jscomp/CheckGlobalThisTest.java,testInnerFunction3,"  public void testInnerFunction3() {
    testFailure(
        ""function f() { var x = {}; x.y = function() { return this.x; } }"");
  }",junit.framework.AssertionFailedError: Unexpected error(s): JSC_USED_GLOBAL_THIS. dangerous use of the global this object at testcode line 1 : 35 expected:<0> but was:<1>
Closure_101,/222043010/omniapr/defects4j/Closure_101_buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java,testProcessClosurePrimitives,"  public void testProcessClosurePrimitives() {
    test(""var goog = {}; goog.provide('goog.dom');"",
         ""var goog = {}; goog.dom = {};"");
    args.add(""--process_closure_primitives=false"");
    testSame(""var goog = {}; goog.provide('goog.dom');"");
  }",junit.framework.AssertionFailedError: 
Closure_102,/222043010/omniapr/defects4j/Closure_102_buggy/test/com/google/javascript/jscomp/CompilerRunnerTest.java,testIssue115,"  public void testIssue115() {
    CompilerRunner.FLAG_compilation_level.setForTest(
        CompilationLevel.SIMPLE_OPTIMIZATIONS);
    CompilerRunner.FLAG_warning_level.setForTest(
        WarningLevel.VERBOSE);
    test(""function f() { "" +
         ""  var arguments = Array.prototype.slice.call(arguments, 0);"" +
         ""  return arguments[0]; "" +
         ""}"",
         ""function f() { "" +
         ""  arguments = Array.prototype.slice.call(arguments, 0);"" +
         ""  return arguments[0]; "" +
         ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_103,/222043010/omniapr/defects4j/Closure_103_buggy/test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java,testInstanceOfThrowsException,"  public void testInstanceOfThrowsException() {
    testSame(""function f() {try { if (value instanceof type) return true; } "" +
             ""catch (e) { }}"");
  }",junit.framework.AssertionFailedError: Unexpected error(s): JSC_UNREACHABLE_CODE. unreachable code at testcode line 1 expected:<0> but was:<1>
Closure_103,/222043010/omniapr/defects4j/Closure_103_buggy/test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java,testInstanceOf,"  public void testInstanceOf() {
    String src = ""try { x instanceof 'x' } catch (e) { }"";
    ControlFlowGraph<Node> cfg = createCfg(src, true);
    assertCrossEdge(cfg, Token.EXPR_RESULT, Token.BLOCK, Branch.ON_EX);
  }",junit.framework.AssertionFailedError: No cross edges found
Closure_103,/222043010/omniapr/defects4j/Closure_103_buggy/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,testSupertypeReferenceOfSubtypeProperty,"  public void testSupertypeReferenceOfSubtypeProperty() {
    String externs = """"
        + ""/** @constructor */ function Ext() {}""
        + ""Ext.prototype.a;"";
    String js = """"
        + ""/** @constructor */ function Foo() {}\n""
        + ""/** @constructor \n@extends Foo*/ function Bar() {}\n""
        + ""Bar.prototype.a;\n""
        + ""/** @param {Foo} foo */""
        + ""function foo(foo) {\n""
        + ""  var x = foo.a;\n""
        + ""}\n"";
    String result = """"
        + ""function Foo() {}\n""
        + ""function Bar() {}\n""
        + ""Bar.prototype.Bar_prototype$a;\n""
        + ""function foo(foo) {\n""
        + ""  var x = foo.Bar_prototype$a;\n""
        + ""}\n"";
    testSets(false, externs, js, result, ""{a=[[Bar.prototype]]}"");
  }",junit.framework.AssertionFailedError: 
Closure_104,/222043010/omniapr/defects4j/Closure_104_buggy/test/com/google/javascript/rhino/jstype/UnionTypeTest.java,testGreatestSubtypeUnionTypes5,"  public void testGreatestSubtypeUnionTypes5() throws Exception {
    JSType errUnion = createUnionType(EVAL_ERROR_TYPE, URI_ERROR_TYPE);
    assertEquals(NO_OBJECT_TYPE,
        errUnion.getGreatestSubtype(STRING_OBJECT_TYPE));
  }",junit.framework.AssertionFailedError: expected:<NoObject> but was:<None>
Closure_105,/222043010/omniapr/defects4j/Closure_105_buggy/test/com/google/javascript/jscomp/FoldConstantsTest.java,testStringJoinAdd,"  public void testStringJoinAdd() {
    fold(""x = ['a', 'b', 'c'].join('')"", ""x = \""abc\"""");
    fold(""x = [].join(',')"", ""x = \""\"""");
    fold(""x = ['a'].join(',')"", ""x = \""a\"""");
    fold(""x = ['a', 'b', 'c'].join(',')"", ""x = \""a,b,c\"""");
    fold(""x = ['a', foo, 'b', 'c'].join(',')"", ""x = [\""a\"",foo,\""b,c\""].join(\"",\"")"");
    fold(""x = [foo, 'a', 'b', 'c'].join(',')"", ""x = [foo,\""a,b,c\""].join(\"",\"")"");
    fold(""x = ['a', 'b', 'c', foo].join(',')"", ""x = [\""a,b,c\"",foo].join(\"",\"")"");

    // Works with numbers
    fold(""x = ['a=', 5].join('')"", ""x = \""a=5\"""");
    fold(""x = ['a', '5'].join(7)"", ""x = \""a75\"""");

    // Works on boolean
    fold(""x = ['a=', false].join('')"", ""x = \""a=false\"""");
    fold(""x = ['a', '5'].join(true)"", ""x = \""atrue5\"""");
    fold(""x = ['a', '5'].join(false)"", ""x = \""afalse5\"""");

    // Only optimize if it's a size win.
    fold(""x = ['a', '5', 'c'].join('a very very very long chain')"",
         ""x = [\""a\"",\""5\"",\""c\""].join(\""a very very very long chain\"")"");
    
    // TODO(user): Its possible to fold this better.
    foldSame(""x = ['', foo].join(',')"");
    foldSame(""x = ['', foo, ''].join(',')"");
    
    fold(""x = ['', '', foo, ''].join(',')"", ""x = [',', foo, ''].join(',')"");
    fold(""x = ['', '', foo, '', ''].join(',')"",
         ""x = [',', foo, ','].join(',')"");
    
    fold(""x = ['', '', foo, '', '', bar].join(',')"",
         ""x = [',', foo, ',', bar].join(',')"");
    
    fold(""x = [1,2,3].join('abcdef')"",
         ""x = '1abcdef2abcdef3'"");
  }",junit.framework.AssertionFailedError: 
Closure_106,/222043010/omniapr/defects4j/Closure_106_buggy/test/com/google/javascript/jscomp/CheckSideEffectsTest.java,testJSDocComments,"  public void testJSDocComments() {
    test(""function A() { /** This is a jsdoc comment */ this.foo; }"", ok);
    test(""function A() { /* This is a normal comment */ this.foo; }"", e);
  }",junit.framework.AssertionFailedError: Unexpected error(s): JSC_USELESS_CODE. Suspicious code. This code lacks side-effects. Is there a bug? at testcode line 1 expected:<0> but was:<1>
Closure_106,/222043010/omniapr/defects4j/Closure_106_buggy/test/com/google/javascript/jscomp/CollapsePropertiesTest.java,testTwinReferenceCancelsChildCollapsing,"  public void testTwinReferenceCancelsChildCollapsing() {
    test(""var a = {}; if (a.b = function() {}) { a.b.c = 3; a.b(a.b.c); }"",
         ""var a$b; if (a$b = function() {}) { a$b.c = 3; a$b(a$b.c); }"");
  }",junit.framework.AssertionFailedError: 
Closure_106,/222043010/omniapr/defects4j/Closure_106_buggy/test/com/google/javascript/jscomp/CollapsePropertiesTest.java,testCrashInNestedAssign,"  public void testCrashInNestedAssign() {
    test(""var a = {}; if (a.b = function() {}) a.b();"",
         ""var a$b; if (a$b=function() {}) { a$b(); }"");
  }",junit.framework.AssertionFailedError: 
Closure_106,/222043010/omniapr/defects4j/Closure_106_buggy/test/com/google/javascript/jscomp/CollapsePropertiesTest.java,testCrashInCommaOperator,"  public void testCrashInCommaOperator() {
    test(""var a = {}; a.b = function() {},a.b();"",
         ""var a$b; a$b=function() {},a$b();"");
  }",junit.framework.AssertionFailedError: 
Closure_107,/222043010/omniapr/defects4j/Closure_107_buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java,testGetMsgWiringNoWarnings,"  public void testGetMsgWiringNoWarnings() throws Exception {
    args.add(""--compilation_level=ADVANCED_OPTIMIZATIONS"");
    test(""/** @desc A bad foo. */ var MSG_FOO = 1;"", """");
  }",junit.framework.AssertionFailedError: Expected no warnings or errors
Closure_108,/222043010/omniapr/defects4j/Closure_108_buggy/test/com/google/javascript/jscomp/ScopedAliasesTest.java,testIssue1144,"  public void testIssue1144() {
    test(""var ns = {};"" +
         ""ns.sub = {};"" +
         ""/** @constructor */ ns.sub.C = function () {};"" +
         ""goog.scope(function () {"" +
         ""  var sub = ns.sub;"" +
         ""  /** @type {sub.C} */"" +
         ""  var x = null;"" +
         ""});"",
         SCOPE_NAMESPACE +
         ""var ns = {};"" +
         ""ns.sub = {};"" +
         ""/** @constructor */ ns.sub.C = function () {};"" +
         ""$jscomp.scope.x = null;"");
  }",java.lang.IllegalStateException
Closure_109,/222043010/omniapr/defects4j/Closure_109_buggy/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,testStructuralConstructor2,"  public void testStructuralConstructor2() throws Exception {
    JSType type = testParseType(
        ""function (new:?)"",
        // toString skips unknowns, but isConstructor reveals the truth.
        ""function (): ?"");
    assertTrue(type.isConstructor());
    assertFalse(type.isNominalConstructor());
  }",junit.framework.AssertionFailedError: extra warning: Bad type annotation. type not recognized due to syntax error
Closure_109,/222043010/omniapr/defects4j/Closure_109_buggy/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,testStructuralConstructor3,"  public void testStructuralConstructor3() throws Exception {
    resolve(parse(""@type {function (new:*)} */"").getType(),
        ""constructed type must be an object type"");
  }",junit.framework.AssertionFailedError: extra warning: Bad type annotation. type not recognized due to syntax error
Closure_110,/222043010/omniapr/defects4j/Closure_110_buggy/test/com/google/javascript/jscomp/ScopedAliasesTest.java,testHoistedFunctionDeclaration,"  public void testHoistedFunctionDeclaration() {
    testScoped("" g(f); function f() {} "",
               SCOPE_NAMESPACE +
               "" $jscomp.scope.f = function () {}; "" +
               ""g($jscomp.scope.f); "");
  }",junit.framework.AssertionFailedError: Unexpected error(s): JSC_GOOG_SCOPE_NON_ALIAS_LOCAL. The local variable f is in a goog.scope and is not an alias. at testcode line 1 : 39 expected:<0> but was:<1>
Closure_110,/222043010/omniapr/defects4j/Closure_110_buggy/test/com/google/javascript/jscomp/ScopedAliasesTest.java,testFunctionDeclaration,"  public void testFunctionDeclaration() {
    testScoped(""if (x) { function f() {} } g(f)"",
               SCOPE_NAMESPACE +
               ""if (x) { $jscomp.scope.f = function () {}; } "" +
               ""g($jscomp.scope.f); "");
  }",junit.framework.AssertionFailedError: Unexpected error(s): JSC_GOOG_SCOPE_NON_ALIAS_LOCAL. The local variable f is in a goog.scope and is not an alias. at testcode line 1 : 39 expected:<0> but was:<1>
Closure_111,/222043010/omniapr/defects4j/Closure_111_buggy/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,testGoogIsArray2,"  public void testGoogIsArray2() throws Exception {
    testClosureFunction(""goog.isArray"",
        ALL_TYPE,
        ARRAY_TYPE,
        ALL_TYPE);
  }",junit.framework.AssertionFailedError: Expected: Array
Closure_112,/222043010/omniapr/defects4j/Closure_112_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testIssue1058,"  public void testIssue1058() throws Exception {
    testTypes(
        ""/**\n"" +
        ""  * @constructor\n"" +
        ""  * @template CLASS\n"" +
        ""  */\n"" +
        ""var Class = function() {};\n"" +
        ""\n"" +
        ""/**\n"" +
        ""  * @param {function(CLASS):CLASS} a\n"" +
        ""  * @template T\n"" +
        ""  */\n"" +
        ""Class.prototype.foo = function(a) {\n"" +
        ""  return 'string';\n"" +
        ""};\n"" +
        ""\n"" +
        ""/** @param {number} a\n"" +
        ""  * @return {string} */\n"" +
        ""var a = function(a) { return '' };\n"" +
        ""\n"" +
        ""new Class().foo(a);"");
  }",junit.framework.AssertionFailedError: unexpected warnings(s):
Closure_112,/222043010/omniapr/defects4j/Closure_112_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testTemplatized11,"  public void testTemplatized11() throws Exception {
    testTypes(
        ""/** \n"" +
        "" * @template T\n"" +
        "" * @constructor\n"" +
        "" */\n"" +
        ""function C() {}\n"" +
        ""\n"" +
        ""/**\n"" +
        "" * @param {T|K} a\n"" +
        "" * @return {T}\n"" +
        "" * @template K\n"" +
        "" */\n"" +
        ""C.prototype.method = function (a) {};\n"" +
        ""\n"" +
        // method returns ""?""
        ""/** @type {void} */ var x = new C().method(1);"");
  }",junit.framework.AssertionFailedError: unexpected warnings(s):
Closure_113,/222043010/omniapr/defects4j/Closure_113_buggy/test/com/google/javascript/jscomp/VarCheckTest.java,testNoUndeclaredVarWhenUsingClosurePass,"  public void testNoUndeclaredVarWhenUsingClosurePass() {
    enableClosurePass();
    // We don't want to get goog as an undeclared var here.
    test(""goog.require('namespace.Class1');\n"", null,
        ProcessClosurePrimitives.MISSING_PROVIDE_ERROR);
  }","junit.framework.AssertionFailedError: There should be one error. required ""namespace.Class1"" namespace never provided"
Closure_114,/222043010/omniapr/defects4j/Closure_114_buggy/test/com/google/javascript/jscomp/NameAnalyzerTest.java,testAssignWithCall,"  public void testAssignWithCall() {
    test(""var fun, x; (fun = function(){ x; })();"",
        ""var x; (function(){ x; })();"");
  }",junit.framework.AssertionFailedError: 
Closure_115,/222043010/omniapr/defects4j/Closure_115_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testBug4944818,"  public void testBug4944818() {
    test(
        ""var getDomServices_ = function(self) {\n"" +
        ""  if (!self.domServices_) {\n"" +
        ""    self.domServices_ = goog$component$DomServices.get("" +
        ""        self.appContext_);\n"" +
        ""  }\n"" +
        ""\n"" +
        ""  return self.domServices_;\n"" +
        ""};\n"" +
        ""\n"" +
        ""var getOwnerWin_ = function(self) {\n"" +
        ""  return getDomServices_(self).getDomHelper().getWindow();\n"" +
        ""};\n"" +
        ""\n"" +
        ""HangoutStarter.prototype.launchHangout = function() {\n"" +
        ""  var self = a.b;\n"" +
        ""  var myUrl = new goog.Uri(getOwnerWin_(self).location.href);\n"" +
        ""};"",
        ""HangoutStarter.prototype.launchHangout = function() { "" +
        ""  var self$$2 = a.b;"" +
        ""  var JSCompiler_temp_const$$0 = goog.Uri;"" +
        ""  var JSCompiler_inline_result$$1;"" +
        ""  {"" +
        ""  var self$$inline_2 = self$$2;"" +
        ""  if (!self$$inline_2.domServices_) {"" +
        ""    self$$inline_2.domServices_ = goog$component$DomServices.get("" +
        ""        self$$inline_2.appContext_);"" +
        ""  }"" +
        ""  JSCompiler_inline_result$$1=self$$inline_2.domServices_;"" +
        ""  }"" +
        ""  var myUrl = new JSCompiler_temp_const$$0("" +
        ""      JSCompiler_inline_result$$1.getDomHelper()."" +
        ""          getWindow().location.href)"" +
        ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_115,/222043010/omniapr/defects4j/Closure_115_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testDoubleInlining1,"  public void testDoubleInlining1() {
    allowBlockInlining = false;
    test(""var foo = function(a) { return getWindow(a); };"" +
         ""var bar = function(b) { return b; };"" +
         ""foo(bar(x));"",
         ""getWindow(x)"");
  }",junit.framework.AssertionFailedError: 
Closure_115,/222043010/omniapr/defects4j/Closure_115_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testNoInlineIfParametersModified8,"  public void testNoInlineIfParametersModified8() {
    // OK, object parameter modified.
    test(""function f(a){return a.x=2}f(o)"", ""o.x=2"");
  }",junit.framework.AssertionFailedError: 
Closure_115,/222043010/omniapr/defects4j/Closure_115_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testNoInlineIfParametersModified9,"  public void testNoInlineIfParametersModified9() {
    // OK, array parameter modified.
    test(""function f(a){return a[2]=2}f(o)"", ""o[2]=2"");
  }",junit.framework.AssertionFailedError: 
Closure_115,/222043010/omniapr/defects4j/Closure_115_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testInlineFunctions6,"  public void testInlineFunctions6() {
    // more complex inlines
    test(""function BAR_FN(x, y, z) { return z(foo(x + y)) }"" +
         ""alert(BAR_FN(1, 2, baz))"",

         ""alert(baz(foo(1+2)))"");
  }",junit.framework.AssertionFailedError: 
Closure_116,/222043010/omniapr/defects4j/Closure_116_buggy/test/com/google/javascript/jscomp/FunctionInjectorTest.java,testIssue1101a,"  public void testIssue1101a() {
    helperCanInlineReferenceToFunction(CanInlineResult.NO,
        ""function foo(a){return modifiyX() + a;} foo(x);"", ""foo"",
        INLINE_DIRECT);
  }",junit.framework.AssertionFailedError: expected:<NO> but was:<YES>
Closure_116,/222043010/omniapr/defects4j/Closure_116_buggy/test/com/google/javascript/jscomp/FunctionInjectorTest.java,testIssue1101b,"  public void testIssue1101b() {
    helperCanInlineReferenceToFunction(CanInlineResult.NO,
        ""function foo(a){return (x.prop = 2),a;} foo(x.prop);"", ""foo"",
        INLINE_DIRECT);
  }",junit.framework.AssertionFailedError: expected:<NO> but was:<YES>
Closure_116,/222043010/omniapr/defects4j/Closure_116_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testBug4944818,"  public void testBug4944818() {
    test(
        ""var getDomServices_ = function(self) {\n"" +
        ""  if (!self.domServices_) {\n"" +
        ""    self.domServices_ = goog$component$DomServices.get("" +
        ""        self.appContext_);\n"" +
        ""  }\n"" +
        ""\n"" +
        ""  return self.domServices_;\n"" +
        ""};\n"" +
        ""\n"" +
        ""var getOwnerWin_ = function(self) {\n"" +
        ""  return getDomServices_(self).getDomHelper().getWindow();\n"" +
        ""};\n"" +
        ""\n"" +
        ""HangoutStarter.prototype.launchHangout = function() {\n"" +
        ""  var self = a.b;\n"" +
        ""  var myUrl = new goog.Uri(getOwnerWin_(self).location.href);\n"" +
        ""};"",
        ""HangoutStarter.prototype.launchHangout=function(){"" +
        ""  var self$$2=a.b;"" +
        ""  var JSCompiler_temp_const$$0=goog.Uri;"" +
        ""  var JSCompiler_inline_result$$1;"" +
        ""  {"" +
        ""    var JSCompiler_inline_result$$0;"" +
        ""    {"" +
        ""      var self$$inline_1=self$$2;"" +
        ""      if(!self$$inline_1.domServices_) {"" +
        ""        self$$inline_1.domServices_=goog$component$DomServices.get(self$$inline_1.appContext_);"" +
        ""      }"" +
        ""      JSCompiler_inline_result$$0=self$$inline_1.domServices_;"" +
        ""    }"" +
        ""    JSCompiler_inline_result$$1=JSCompiler_inline_result$$0.getDomHelper().getWindow();"" +
        ""  }"" +
        ""  var myUrl=new JSCompiler_temp_const$$0(JSCompiler_inline_result$$1.location.href)"" +
        ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_116,/222043010/omniapr/defects4j/Closure_116_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testDoubleInlining2,"  public void testDoubleInlining2() {
    test(""var foo = function(a) { return getWindow(a); };"" +
         ""var bar = function(b) { return b; };"" +
         ""foo(bar(x));"",
         ""{getWindow(x)}"");
  }",junit.framework.AssertionFailedError: 
Closure_116,/222043010/omniapr/defects4j/Closure_116_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testIssue1101,"  public void testIssue1101() {
    test(
        ""var x = (function (saved) {"" +
        ""    return foo(obj) + saved;"" +
        ""  })(obj[\""prop\""]);"",
        ""var x;"" +
        ""{"" +
        ""  var saved$$inline_0=obj[\""prop\""];x=foo(obj)+saved$$inline_0"" +
        ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_116,/222043010/omniapr/defects4j/Closure_116_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testInlineIfParametersModified8,"  public void testInlineIfParametersModified8() {
    // OK, object parameter modified.
    test(""function f(a){return a.x=2}f(o)"", ""{o.x=2}"");
  }",junit.framework.AssertionFailedError: 
Closure_116,/222043010/omniapr/defects4j/Closure_116_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testInlineIfParametersModified9,"  public void testInlineIfParametersModified9() {
    // OK, array parameter modified.
    test(""function f(a){return a[2]=2}f(o)"", ""{o[2]=2}"");
  }",junit.framework.AssertionFailedError: 
Closure_116,/222043010/omniapr/defects4j/Closure_116_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testInlineFunctions6,"  public void testInlineFunctions6() {
    // more complex inlines
    test(""function BAR_FN(x, y, z) { return z(nochg(x + y)) }"" +
         ""alert(BAR_FN(1, 2, baz))"",

         ""var JSCompiler_temp_const$$0=alert;"" +
         ""var JSCompiler_inline_result$$1;"" +
         ""{JSCompiler_inline_result$$1=baz(nochg(1+2));}"" +
         ""JSCompiler_temp_const$$0(JSCompiler_inline_result$$1)"");
  }",junit.framework.AssertionFailedError: 
Closure_117,/222043010/omniapr/defects4j/Closure_117_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testIssue1047,"  public void testIssue1047() throws Exception {
    testTypes(
        ""/**\n"" +
        "" * @constructor\n"" +
        "" */\n"" +
        ""function C2() {}\n"" +
        ""\n"" +
        ""/**\n"" +
        "" * @constructor\n"" +
        "" */\n"" +
        ""function C3(c2) {\n"" +
        ""  /**\n"" +
        ""   * @type {C2} \n"" +
        ""   * @private\n"" +
        ""   */\n"" +
        ""  this.c2_;\n"" +
        ""\n"" +
        ""  var x = this.c2_.prop;\n"" +
        ""}"",
        ""Property prop never defined on C2"");
  }",junit.framework.ComparisonFailure: expected:<...p never defined on C[2]> but was:<...p never defined on C[3.c2_]>
Closure_118,/222043010/omniapr/defects4j/Closure_118_buggy/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,testOneType4,"  public void testOneType4() {
    String js = """"
        + ""/** @constructor */ function Foo() {}\n""
        + ""Foo.prototype = {'a': 0};\n""
        + ""/** @type Foo */\n""
        + ""var F = new Foo;\n""
        + ""F['a'] = 0;"";
    String expected = ""{}"";
    testSets(false, js, js, expected);
    testSets(true, js, js, expected);
  }",junit.framework.ComparisonFailure: expected:<{[]}> but was:<{[a=[[Foo.prototype]]]}>
Closure_118,/222043010/omniapr/defects4j/Closure_118_buggy/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,testTwoTypes4,"  public void testTwoTypes4() {
    String js = """"
        + ""/** @constructor */ function Foo() {}\n""
        + ""Foo.prototype = {a: 0};""
        + ""/** @type Foo */\n""
        + ""var F = new Foo;\n""
        + ""F.a = 0;""
        + ""/** @constructor */ function Bar() {}\n""
        + ""Bar.prototype = {'a': 0};""
        + ""/** @type Bar */\n""
        + ""var B = new Bar;\n""
        + ""B['a'] = 0;"";

    String output = """"
        + ""function Foo(){}""
        + ""Foo.prototype = {a: 0};""
        + ""var F=new Foo;""
        + ""F.a=0;""
        + ""function Bar(){}""
        + ""Bar.prototype = {'a': 0};""
        + ""var B=new Bar;""
        + ""B['a']=0"";

    testSets(false, js, output, ""{a=[[Foo.prototype]]}"");
    testSets(true, js, output, ""{a=[[Foo.prototype]]}"");
  }",junit.framework.ComparisonFailure: expected:<{[]}> but was:<{[a=[[Foo.prototype]]]}>
Closure_119,/222043010/omniapr/defects4j/Closure_119_buggy/test/com/google/javascript/jscomp/CheckGlobalNamesTest.java,testGlobalCatch,"  public void testGlobalCatch() throws Exception {
    testSame(
        ""try {"" +
        ""  throw Error();"" +
        ""} catch (e) {"" +
        ""  console.log(e.name)"" +
        ""}"");
  }",junit.framework.AssertionFailedError: Unexpected warning(s): JSC_UNDEFINED_NAME. e is never defined at testcode line 1 : 48
Closure_120,/222043010/omniapr/defects4j/Closure_120_buggy/test/com/google/javascript/jscomp/InlineVariablesTest.java,testExternalIssue1053,"  public void testExternalIssue1053() {
    testSame(
        ""var u; function f() { u = Random(); var x = u; f(); alert(x===u)}"");
  }",junit.framework.AssertionFailedError: 
Closure_121,/222043010/omniapr/defects4j/Closure_121_buggy/test/com/google/javascript/jscomp/InlineVariablesTest.java,testExternalIssue1053,"  public void testExternalIssue1053() {
    testSame(
        ""var u; function f() { u = Random(); var x = u; f(); alert(x===u)}"");
  }",junit.framework.AssertionFailedError: 
Closure_122,/222043010/omniapr/defects4j/Closure_122_buggy/test/com/google/javascript/jscomp/parsing/ParserTest.java,testSuspiciousBlockCommentWarning3,"  public void testSuspiciousBlockCommentWarning3() {
    parse(""/* \n *@type {number} */ var x = 3;"", SUSPICIOUS_COMMENT_WARNING);
  }",junit.framework.AssertionFailedError
Closure_122,/222043010/omniapr/defects4j/Closure_122_buggy/test/com/google/javascript/jscomp/parsing/ParserTest.java,testSuspiciousBlockCommentWarning4,"  public void testSuspiciousBlockCommentWarning4() {
    parse(
        ""  /*\n"" +
        ""   * @type {number}\n"" +
        ""   */\n"" +
        ""  var x = 3;"",
        SUSPICIOUS_COMMENT_WARNING);
  }",junit.framework.AssertionFailedError
Closure_122,/222043010/omniapr/defects4j/Closure_122_buggy/test/com/google/javascript/jscomp/parsing/ParserTest.java,testSuspiciousBlockCommentWarning5,"  public void testSuspiciousBlockCommentWarning5() {
    parse(
        ""  /*\n"" +
        ""   * some random text here\n"" +
        ""   * @type {number}\n"" +
        ""   */\n"" +
        ""  var x = 3;"",
        SUSPICIOUS_COMMENT_WARNING);
  }",junit.framework.AssertionFailedError
Closure_123,/222043010/omniapr/defects4j/Closure_123_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testPrintInOperatorInForLoop,"  public void testPrintInOperatorInForLoop() {
    // Check for in expression in for's init expression.
    // Check alone, with + (higher precedence), with ?: (lower precedence),
    // and with conditional.
    assertPrint(""var a={}; for (var i = (\""length\"" in a); i;) {}"",
        ""var a={};for(var i=(\""length\""in a);i;);"");
    assertPrint(""var a={}; for (var i = (\""length\"" in a) ? 0 : 1; i;) {}"",
        ""var a={};for(var i=(\""length\""in a)?0:1;i;);"");
    assertPrint(""var a={}; for (var i = (\""length\"" in a) + 1; i;) {}"",
        ""var a={};for(var i=(\""length\""in a)+1;i;);"");
    assertPrint(""var a={};for (var i = (\""length\"" in a|| \""size\"" in a);;);"",
        ""var a={};for(var i=(\""length\""in a)||(\""size\""in a);;);"");
    assertPrint(""var a={};for (var i = a || a || (\""size\"" in a);;);"",
        ""var a={};for(var i=a||a||(\""size\""in a);;);"");

    // Test works with unary operators and calls.
    assertPrint(""var a={}; for (var i = -(\""length\"" in a); i;) {}"",
        ""var a={};for(var i=-(\""length\""in a);i;);"");
    assertPrint(""var a={};function b_(p){ return p;};"" +
        ""for(var i=1,j=b_(\""length\"" in a);;) {}"",
        ""var a={};function b_(p){return p}"" +
            ""for(var i=1,j=b_(\""length\""in a);;);"");

    // Test we correctly handle an in operator in the test clause.
    assertPrint(""var a={}; for (;(\""length\"" in a);) {}"",
        ""var a={};for(;\""length\""in a;);"");

    // Test we correctly handle an in operator inside a comma.
    assertPrintSame(""for(x,(y in z);;)foo()"");
    assertPrintSame(""for(var x,w=(y in z);;)foo()"");

    // And in operator inside a hook.
    assertPrintSame(""for(a=c?0:(0 in d);;)foo()"");
  }",junit.framework.ComparisonFailure: expected:<for(a=c?0:[(0 in d)];;)foo()> but was:<for(a=c?0:[0 in d];;)foo()>
Closure_124,/222043010/omniapr/defects4j/Closure_124_buggy/test/com/google/javascript/jscomp/ExploitAssignsTest.java,testIssue1017,"  public void testIssue1017() {
    testSame(""x = x.parentNode.parentNode; x = x.parentNode.parentNode;"");
  }",junit.framework.AssertionFailedError: 
Closure_125,/222043010/omniapr/defects4j/Closure_125_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testIssue1002,"  public void testIssue1002() throws Exception {
    testTypes(
        ""/** @interface */"" +
        ""var I = function() {};"" +
        ""/** @constructor @implements {I} */"" +
        ""var A = function() {};"" +
        ""/** @constructor @implements {I} */"" +
        ""var B = function() {};"" +
        ""var f = function() {"" +
        ""  if (A === B) {"" +
        ""    new B();"" +
        ""  }"" +
        ""};"");
  }",java.lang.IllegalStateException
Closure_126,/222043010/omniapr/defects4j/Closure_126_buggy/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java,testDontRemoveBreakInTryFinally,"  public void testDontRemoveBreakInTryFinally() throws Exception {
    foldSame(""function f() {b:try{throw 9} finally {break b} return 1;}"");
  }",junit.framework.AssertionFailedError: 
Closure_126,/222043010/omniapr/defects4j/Closure_126_buggy/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java,testFunctionReturnOptimization,"  public void testFunctionReturnOptimization() throws Exception {
    fold(""function f(){if(a()){b();if(c())return;}}"",
         ""function f(){if(a()){b();if(c());}}"");
    fold(""function f(){if(x)return; x=3; return; }"",
         ""function f(){if(x); else x=3}"");
    fold(""function f(){if(true){a();return;}else;b();}"",
         ""function f(){if(true){a();}else{b();}}"");
    fold(""function f(){if(false){a();return;}else;b();return;}"",
         ""function f(){if(false){a();}else{b();}}"");
    fold(""function f(){if(a()){b();return;}else;c();}"",
         ""function f(){if(a()){b();}else{c();}}"");
    fold(""function f(){if(a()){b()}else{c();return;}}"",
         ""function f(){if(a()){b()}else{c();}}"");
    fold(""function f(){if(a()){b();return;}else;}"",
         ""function f(){if(a()){b();}else;}"");
    fold(""function f(){if(a()){return;}else{return;} return;}"",
         ""function f(){if(a()){}else{}}"");
    fold(""function f(){if(a()){return;}else{return;} b();}"",
         ""function f(){if(a()){}else{return;b()}}"");
    fold(""function f(){ if (x) return; if (y) return; if (z) return; w(); }"",
        "" function f() {"" +
        ""   if (x) {} else { if (y) {} else { if (z) {} else w(); }}"" +
        "" }"");

    fold(""function f(){while(a())return;}"",
         ""function f(){while(a())return}"");
    foldSame(""function f(){for(x in a())return}"");

    fold(""function f(){while(a())break;}"",
         ""function f(){while(a())break}"");
    foldSame(""function f(){for(x in a())break}"");

    fold(""function f(){try{return;}catch(e){throw 9;}finally{return}}"",
         ""function f(){try{}catch(e){throw 9;}finally{return}}"");
    foldSame(""function f(){try{throw 9;}finally{return;}}"");

    fold(""function f(){try{return;}catch(e){return;}}"",
         ""function f(){try{}catch(e){}}"");
    fold(""function f(){try{if(a()){return;}else{return;} return;}catch(e){}}"",
         ""function f(){try{if(a()){}else{}}catch(e){}}"");

    fold(""function f(){g:return}"",
         ""function f(){}"");
    fold(""function f(){g:if(a()){return;}else{return;} return;}"",
         ""function f(){g:if(a()){}else{}}"");
    fold(""function f(){try{g:if(a()){throw 9;} return;}finally{return}}"",
         ""function f(){try{g:if(a()){throw 9;}}finally{return}}"");
  }",junit.framework.AssertionFailedError: 
Closure_127,/222043010/omniapr/defects4j/Closure_127_buggy/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,testIssue4177428_return,"  public void testIssue4177428_return() {
    test(
        ""f = function() {\n"" +
        ""  var action;\n"" +
        ""  a: {\n"" +
        ""    var proto = null;\n"" +
        ""    try {\n"" +
        ""      proto = new Proto\n"" +
        ""    } finally {\n"" +
        ""      action = proto;\n"" +
        ""      return\n"" +  // Keep this...
        ""    }\n"" +
        ""  }\n"" +
        ""  alert(action)\n"" + // and remove this.
        ""};"",
        ""f = function() {\n"" +
        ""  var action;\n"" +
        ""  a: {\n"" +
        ""    var proto = null;\n"" +
        ""    try {\n"" +
        ""      proto = new Proto\n"" +
        ""    } finally {\n"" +
        ""      action = proto;\n"" +
        ""      return\n"" +
        ""    }\n"" +
        ""  }\n"" +
        ""};""
        );
  }",junit.framework.AssertionFailedError: 
Closure_127,/222043010/omniapr/defects4j/Closure_127_buggy/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,testDontRemoveBreakInTryFinally,"  public void testDontRemoveBreakInTryFinally() throws Exception {
    testSame(""function f() {b:try{throw 9} finally {break b} return 1;}"");
  }",junit.framework.AssertionFailedError: 
Closure_127,/222043010/omniapr/defects4j/Closure_127_buggy/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,testIssue4177428_continue,"  public void testIssue4177428_continue() {
    testSame(
        ""f = function() {\n"" +
        ""  var action;\n"" +
        ""  a: do {\n"" +
        ""    var proto = null;\n"" +
        ""    try {\n"" +
        ""      proto = new Proto\n"" +
        ""    } finally {\n"" +
        ""      action = proto;\n"" +
        ""      continue a\n"" +  // Keep this...
        ""    }\n"" +
        ""  } while(false)\n"" +
        ""  alert(action)\n"" + // and this.
        ""};"");
  }",junit.framework.AssertionFailedError: 
Closure_127,/222043010/omniapr/defects4j/Closure_127_buggy/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,testDontRemoveBreakInTryFinallySwitch,"  public void testDontRemoveBreakInTryFinallySwitch() throws Exception {
    testSame(""function f() {b:try{throw 9} finally {switch(x) {case 1: break b} } return 1;}"");
  }",junit.framework.AssertionFailedError: 
Closure_127,/222043010/omniapr/defects4j/Closure_127_buggy/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,testIssue4177428a,"  public void testIssue4177428a() {
    testSame(
        ""f = function() {\n"" +
        ""  var action;\n"" +
        ""  a: {\n"" +
        ""    var proto = null;\n"" +
        ""    try {\n"" +
        ""      proto = new Proto\n"" +
        ""    } finally {\n"" +
        ""      action = proto;\n"" +
        ""      break a\n"" +  // Keep this...
        ""    }\n"" +
        ""  }\n"" +
        ""  alert(action)\n"" + // and this.
        ""};"");
  }",junit.framework.AssertionFailedError: 
Closure_127,/222043010/omniapr/defects4j/Closure_127_buggy/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java,testIssue4177428c,"  public void testIssue4177428c() {
    testSame(
        ""f = function() {\n"" +
        ""  var action;\n"" +
        ""  a: {\n"" +
        ""    var proto = null;\n"" +
        ""    try {\n"" +
        ""    } finally {\n"" +
        ""    try {\n"" +
        ""      proto = new Proto\n"" +
        ""    } finally {\n"" +
        ""      action = proto;\n"" +
        ""      break a\n"" +  // Keep this...
        ""    }\n"" +
        ""    }\n"" +
        ""  }\n"" +
        ""  alert(action)\n"" + // and this.
        ""};"");
  }",junit.framework.AssertionFailedError: 
Closure_128,/222043010/omniapr/defects4j/Closure_128_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testIssue942,"  public void testIssue942() {
    assertPrint(""var x = {0: 1};"", ""var x={0:1}"");
  }","junit.framework.ComparisonFailure: expected:<var x={[0]:1}> but was:<var x={[""0""]:1}>"
Closure_129,/222043010/omniapr/defects4j/Closure_129_buggy/test/com/google/javascript/jscomp/IntegrationTest.java,testIssue937,"  public void testIssue937() {
    CompilerOptions options = createCompilerOptions();
    CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS;
    level.setOptionsForCompilationLevel(options);
    WarningLevel warnings = WarningLevel.DEFAULT;
    warnings.setOptionsForWarningLevel(options);

    String code = """" +
        ""console.log("" +
            ""/** @type {function():!string} */ ((new x())['abc'])() );"";
    String result = """" +
        ""console.log((new x()).abc());"";
    test(options, code, result);
  }",junit.framework.AssertionFailedError: 
Closure_130,/222043010/omniapr/defects4j/Closure_130_buggy/test/com/google/javascript/jscomp/CollapsePropertiesTest.java,testIssue931,"  public void testIssue931() {
    collapsePropertiesOnExternTypes = true;
    testSame(
      ""function f() {\n"" +
      ""  return function () {\n"" +
      ""    var args = arguments;\n"" +
      ""    setTimeout(function() { alert(args); }, 0);\n"" +
      ""  }\n"" +
      ""};\n"");
  }",junit.framework.AssertionFailedError: 
Closure_131,/222043010/omniapr/defects4j/Closure_131_buggy/test/com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java,testQuotedProps,"  public void testQuotedProps() {
    testSame(""({'':0})"");
    testSame(""({'1.0':0})"");
    testSame(""({'\u1d17A':0})"");
    testSame(""({'a\u0004b':0})"");
  }",junit.framework.AssertionFailedError: 
Closure_131,/222043010/omniapr/defects4j/Closure_131_buggy/test/com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java,testDoNotConvert,"  public void testDoNotConvert() {
    testSame(""a[0]"");
    testSame(""a['']"");
    testSame(""a[' ']"");
    testSame(""a[',']"");
    testSame(""a[';']"");
    testSame(""a[':']"");
    testSame(""a['.']"");
    testSame(""a['0']"");
    testSame(""a['p ']"");
    testSame(""a['p' + '']"");
    testSame(""a[p]"");
    testSame(""a[P]"");
    testSame(""a[$]"");
    testSame(""a[p()]"");
    testSame(""a['default']"");
    // Ignorable control characters are ok in Java identifiers, but not in JS.
    testSame(""a['A\u0004']"");
    // upper case lower half of o from phonetic extensions set.
    // valid in Safari, not in Firefox, IE.
    test(""a['\u1d17A']"", ""a['\u1d17A']"");
    // Latin capital N with tilde - nice if we handled it, but for now let's
    // only allow simple Latin (aka ASCII) to be converted.
    test(""a['\u00d1StuffAfter']"", ""a['\u00d1StuffAfter']"");
  }",junit.framework.AssertionFailedError: 
Closure_132,/222043010/omniapr/defects4j/Closure_132_buggy/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java,testIssue925,"  public void testIssue925() {
    test(
        ""if (x[--y] === 1) {\n"" +
        ""    x[y] = 0;\n"" +
        ""} else {\n"" +
        ""    x[y] = 1;\n"" +
        ""}"",
        ""(x[--y] === 1) ? x[y] = 0 : x[y] = 1;"");

    test(
        ""if (x[--y]) {\n"" +
        ""    a = 0;\n"" +
        ""} else {\n"" +
        ""    a = 1;\n"" +
        ""}"",
        ""a = (x[--y]) ? 0 : 1;"");

    test(""if (x++) { x += 2 } else { x += 3 }"",
         ""x++ ? x += 2 : x += 3"");

    test(""if (x++) { x = x + 2 } else { x = x + 3 }"",
        ""x = x++ ? x + 2 : x + 3"");
  }",junit.framework.AssertionFailedError: 
Closure_133,/222043010/omniapr/defects4j/Closure_133_buggy/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,testTextExtents,"  public void testTextExtents() {
    parse(""@return {@code foo} bar \n *    baz. */"",
        true, ""Bad type annotation. type not recognized due to syntax error"");
  }",java.lang.IllegalStateException: Recorded bad position information
Closure_134,/222043010/omniapr/defects4j/Closure_134_buggy/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java,testImplementsAndExtends,"  public void testImplementsAndExtends() {
    String js = """"
        + ""/** @interface */ function Foo() {}\n""
        + ""/**\n""
        + "" * @constructor\n""
        + "" */\n""
        + ""function Bar(){}\n""
        + ""Bar.prototype.y = function() { return 3; };\n""
        + ""/**\n""
        + "" * @constructor\n""
        + "" * @extends {Bar}\n""
        + "" * @implements {Foo}\n""
        + "" */\n""
        + ""function SubBar(){ }\n""
        + ""/** @param {Foo} x */ function f(x) { x.z = 3; }\n""
        + ""/** @param {SubBar} x */ function g(x) { x.z = 3; }"";
    String output = """"
        + ""function Foo(){}\n""
        + ""function Bar(){}\n""
        + ""Bar.prototype.b = function() { return 3; };\n""
        + ""function SubBar(){}\n""
        + ""function f(x) { x.a = 3; }\n""
        + ""function g(x) { x.a = 3; }"";
    test(js, output);
  }",junit.framework.AssertionFailedError: 
Closure_134,/222043010/omniapr/defects4j/Closure_134_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testIssue86,"  public void testIssue86() throws Exception {
    testTypes(
        ""/** @interface */ function I() {}"" +
        ""/** @return {number} */ I.prototype.get = function(){};"" +
        ""/** @constructor \n * @implements {I} */ function F() {}"" +
        ""/** @override */ F.prototype.get = function() { return true; };"",
        ""inconsistent return type\n"" +
        ""found   : boolean\n"" +
        ""required: number"");
  }",junit.framework.AssertionFailedError: expected a warning
Closure_135,/222043010/omniapr/defects4j/Closure_135_buggy/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,testRewritePrototypeMethods2,"  public void testRewritePrototypeMethods2() throws Exception {
    // type checking on
    enableTypeCheck(CheckLevel.ERROR);
    checkTypes(RewritePrototypeMethodTestInput.INPUT,
               RewritePrototypeMethodTestInput.EXPECTED,
               RewritePrototypeMethodTestInput.EXPECTED_TYPE_CHECKING_ON);
  }","junit.framework.AssertionFailedError: expected:<[FUNCTION a = function (this:a): ?, NAME JSCompiler_StaticMethods_foo$self = a, FUNCTION JSCompiler_StaticMethods_foo = function (a): number, NAME JSCompiler_StaticMethods_bar$self = a, FUNCTION JSCompiler_StaticMethods_bar = function (a, number): number, FUNCTION JSCompiler_StaticMethods_baz = function (a): ?, NEW a = a, CALL JSCompiler_StaticMethods_foo = number, CALL JSCompiler_StaticMethods_bar = number, CALL JSCompiler_StaticMethods_baz = ?]> but was:<[FUNCTION a = function (this:a): ?, NAME JSCompiler_StaticMethods_foo$self = null, FUNCTION JSCompiler_StaticMethods_foo = function (a): number, NAME JSCompiler_StaticMethods_bar$self = null, FUNCTION JSCompiler_StaticMethods_bar = function (a, number): number, FUNCTION JSCompiler_StaticMethods_baz = function (a): ?, NEW a = a, CALL JSCompiler_StaticMethods_foo = number, CALL JSCompiler_StaticMethods_bar = number, CALL JSCompiler_StaticMethods_baz = ?]>"
Closure_135,/222043010/omniapr/defects4j/Closure_135_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testGoodExtends9,"  public void testGoodExtends9() throws Exception {
    testTypes(
        ""/** @constructor */ function Super() {}"" +
        ""Super.prototype.foo = function() {};"" +
        ""/** @constructor \n * @extends {Super} */ function Sub() {}"" +
        ""Sub.prototype = new Super();"" +
        ""/** @override */ Sub.prototype.foo = function() {};"");
  }",junit.framework.AssertionFailedError: unexpected warnings(s):
Closure_136,/222043010/omniapr/defects4j/Closure_136_buggy/test/com/google/javascript/jscomp/InlineGettersTest.java,testIssue2508576_1,"  public void testIssue2508576_1() {
    // Method defined by an extern should be left alone.
    String externs = ""function alert(a) {}"";
    testSame(externs, ""({a:alert,b:alert}).a(\""a\"")"", null);
  }","junit.framework.ComparisonFailure: expected:<[({a:alert,b:alert}).a(""a"")]> but was:<[]>"
Closure_136,/222043010/omniapr/defects4j/Closure_136_buggy/test/com/google/javascript/jscomp/InlineGettersTest.java,testIssue2508576_3,"  public void testIssue2508576_3() {
    // Anonymous object definition without side-effect should be removed.
    test(""({a:function(){},b:alert}).a(\""a\"")"", """");
  }","junit.framework.ComparisonFailure: expected:<[({a:alert,b:alert}).a(""a"")]> but was:<[]>"
Closure_136,/222043010/omniapr/defects4j/Closure_136_buggy/test/com/google/javascript/jscomp/MethodCheckTest.java,testSeparateMethods,"  public void testSeparateMethods() {
    testSame(""var f = new Foo();f.oneOrTwoArg2(1);"");
    testSame(""var f = new Baz();f.oneOrTwoArg2(1, 2);"");
    testSame(""Boz.staticMethod1(1);"");
    testSame(""Boz.staticMethod2(1, 2);"");

    // Can't detect these incorrect usuages as they are defined indirectly.
    testSame(""var f = new Bar();f.oneOrTwoArg2(1, 2, 3);"");
    testSame(""Boz.staticMethod1(1, 2);"");
    testSame(""Boz.staticMethod2(1);"");
  }",junit.framework.AssertionFailedError: Unexpected error(s): JSC_WRONG_ARGUMENT_COUNT. Function oneOrTwoArg2: called with 3 argument(s). All definitions of this function require at least 1 argument(s) and no more than 2 argument(s). at testcode line 1 expected:<0> but was:<1>
Closure_136,/222043010/omniapr/defects4j/Closure_136_buggy/test/com/google/javascript/jscomp/RenameVarsTest.java,testDollarSignSuperExport2,"  public void testDollarSignSuperExport2() {
    boolean normalizedExpectedJs = false;
    super.enableNormalize(false);

    useGoogleCodingConvention = false;
    // See http://code.google.com/p/closure-compiler/issues/detail?id=32
    test(""var x = function($super,duper,$fantastic){};"" +
            ""var y = function($super,duper){};"",
         ""var c = function($super,    a,         b){};"" +
            ""var d = function($super,    a){};"");

    localRenamingOnly = false;
    test(""var $super = 1"", ""var a = 1"");

    useGoogleCodingConvention = true;
    test(""var x = function($super,duper,$fantastic){};"" +
            ""var y = function($super,duper){};"",
         ""var d = function(a,     b,    c         ){};"" +
            ""var e = function(     a,    b){};"");

    super.disableNormalize();
  }",junit.framework.AssertionFailedError: 
Closure_137,/222043010/omniapr/defects4j/Closure_137_buggy/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,testOnlyInversion3,"  public void testOnlyInversion3() {
    invert = true;
    test(
        ""function x1() {"" +
        ""  var a$$1;"" +
        ""  function x2() {"" +
        ""    var a$$2;"" +
        ""  }"" +
        ""  function x3() {"" +
        ""    var a$$3;"" +
        ""  }"" +
        ""}"",
        ""function x1() {"" +
        ""  var a$$1;"" +
        ""  function x2() {"" +
        ""    var a;"" +
        ""  }"" +
        ""  function x3() {"" +
        ""    var a;"" +
        ""  }"" +
        ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_137,/222043010/omniapr/defects4j/Closure_137_buggy/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,testOnlyInversion4,"  public void testOnlyInversion4() {
    invert = true;
    test(
        ""function x1() {"" +
        ""  var a$$1;"" +
        ""  function x2() {"" +
        ""    var a;a$$1++"" +
        ""  }"" +
        ""}"",
        ""function x1() {"" +
        ""  var a$$1;"" +
        ""  function x2() {"" +
        ""    var a;a$$1++"" +
        ""  }"" +
        ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_137,/222043010/omniapr/defects4j/Closure_137_buggy/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,testArguments,"  public void testArguments() {
    // Set the test type
    this.useDefaultRenamer = true;

    invert = true;
    // Don't distinguish between ""arguments"", it can't be made unique.
    testSameWithInversion(
        ""function foo(){var arguments;function bar(){var arguments;}}"");
    // Don't introduce new references to arguments, it is special.
    testSameWithInversion(
        ""function foo(){var arguments$$1;}"");
  }",junit.framework.AssertionFailedError: 
Closure_137,/222043010/omniapr/defects4j/Closure_137_buggy/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java,testMakeLocalNamesUniqueWithContext1,"  public void testMakeLocalNamesUniqueWithContext1() {
    // Set the test type
    this.useDefaultRenamer = true;

    invert = true;
    test(
        ""var a;function foo(){var a$$inline_1; a = 1}"",
        ""var a;function foo(){var a$$inline_1; a = 1}"");
    test(
        ""var a;function foo(){var a$$inline_1;}"",
        ""var a;function foo(){var a;}"");
  }",junit.framework.AssertionFailedError: 
Closure_137,/222043010/omniapr/defects4j/Closure_137_buggy/test/com/google/javascript/jscomp/NormalizeTest.java,testRemoveDuplicateVarDeclarations2,"  public void testRemoveDuplicateVarDeclarations2() {
    test(""var e = 1; function f(){ try {} catch (e) {} var e = 2 }"",
         ""var e = 1; function f(){ try {} catch (e$$2) {} var e$$1 = 2 }"");
  }",junit.framework.AssertionFailedError: 
Closure_138,/222043010/omniapr/defects4j/Closure_138_buggy/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,testGoogIsArrayOnNull,"  public void testGoogIsArrayOnNull() throws Exception {
    testClosureFunction(""goog.isArray"",
        null,
        ARRAY_TYPE,
        null);
  }",junit.framework.AssertionFailedError: expected:<Array> but was:<null>
Closure_138,/222043010/omniapr/defects4j/Closure_138_buggy/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,testGoogIsFunctionOnNull,"  public void testGoogIsFunctionOnNull() throws Exception {
    testClosureFunction(""goog.isFunction"",
        null,
        U2U_CONSTRUCTOR_TYPE,
        null);
  }",junit.framework.AssertionFailedError: expected:<Array> but was:<null>
Closure_138,/222043010/omniapr/defects4j/Closure_138_buggy/test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java,testGoogIsObjectOnNull,"  public void testGoogIsObjectOnNull() throws Exception {
    testClosureFunction(""goog.isObject"",
        null,
        OBJECT_TYPE,
        null);
  }",junit.framework.AssertionFailedError: expected:<Array> but was:<null>
Closure_138,/222043010/omniapr/defects4j/Closure_138_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testIssue124b,"  public void testIssue124b() throws Exception {
    testTypes(
        ""var t = null;"" +
        ""function test() {"" +
        ""  if (t != null) { t = null; }"" +
        ""  t = undefined;"" +
        ""}"",
        ""condition always evaluates to false\n"" +
        ""left : (null|undefined)\n"" +
        ""right: null"");
  }",junit.framework.ComparisonFailure: expected:<...tes to false
Closure_138,/222043010/omniapr/defects4j/Closure_138_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testIssue124,"  public void testIssue124() throws Exception {
    testTypes(
        ""var t = null;"" +
        ""function test() {"" +
        ""  if (t != null) { t = null; }"" +
        ""  t = 1;"" +
        ""}"");
  }",junit.framework.ComparisonFailure: expected:<...tes to false
Closure_139,/222043010/omniapr/defects4j/Closure_139_buggy/test/com/google/javascript/jscomp/NormalizeTest.java,testNormalizeFunctionDeclarations,"  public void testNormalizeFunctionDeclarations() throws Exception {
    testSame(""function f() {}"");
    testSame(""var f = function () {}"");
    test(""var f = function f() {}"",
         ""var f = function f$$1() {}"");
    testSame(""var f = function g() {}"");
    test(""a:function g() {}"",
         ""a:{ var g = function () {} }"");
    test(""{function g() {}}"",
         ""{var g = function () {}}"");
    testSame(""if (function g() {}) {}"");
    test(""if (true) {function g() {}}"",
         ""if (true) {var g = function () {}}"");
    test(""if (true) {} else {function g() {}}"",
         ""if (true) {} else {var g = function () {}}"");
    testSame(""switch (function g() {}) {}"");
    test(""switch (1) { case 1: function g() {}}"",
         ""switch (1) { case 1: var g = function () {}}"");


    testSameInFunction(""function f() {}"");
    testInFunction(""f(); a:function g() {}"",
                   ""f(); a:{ var g = function () {} }"");
    testInFunction(""f(); {function g() {}}"",
                   ""f(); {var g = function () {}}"");
    testInFunction(""f(); if (true) {function g() {}}"",
                   ""f(); if (true) {var g = function () {}}"");
    testInFunction(""if (true) {} else {function g() {}}"",
                   ""if (true) {} else {var g = function () {}}"");
  }",junit.framework.AssertionFailedError: 
Closure_139,/222043010/omniapr/defects4j/Closure_139_buggy/test/com/google/javascript/jscomp/NormalizeTest.java,testRemoveDuplicateVarDeclarations3,"  public void testRemoveDuplicateVarDeclarations3() {
    test(""var f = 1; function f(){}"",
         ""f = 1; function f(){}"");
    test(""var f; function f(){}"",
         ""function f(){}"");
    test(""if (a) { var f = 1; } else { function f(){} }"",
         ""if (a) { var f = 1; } else { f = function (){} }"");

    test(""function f(){} var f = 1;"",
         ""function f(){} f = 1;"");
    test(""function f(){} var f;"",
         ""function f(){}"");
    test(""if (a) { function f(){} } else { var f = 1; }"",
         ""if (a) { var f = function (){} } else { f = 1; }"");

    // TODO(johnlenz): Do we need to handle this differently for ""third_party""
    // mode? Remove the previous function definitions?
    test(""function f(){} function f(){}"",
         ""function f(){} function f(){}"",
         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);
    test(""if (a) { function f(){} } else { function f(){} }"",
         ""if (a) { var f = function (){} } else { f = function (){} }"");
  }",junit.framework.AssertionFailedError: 
Closure_139,/222043010/omniapr/defects4j/Closure_139_buggy/test/com/google/javascript/jscomp/NormalizeTest.java,testMoveFunctions2,"  public void testMoveFunctions2() throws Exception {
    testSame(""function f() { function foo() {} }"");
    test(""function f() { f(); a:function bar() {} }"",
         ""function f() { f(); a:{ var bar = function () {} }}"");
    test(""function f() { f(); {function bar() {}}}"",
         ""function f() { f(); {var bar = function () {}}}"");
    test(""function f() { f(); if (true) {function bar() {}}}"",
         ""function f() { f(); if (true) {var bar = function () {}}}"");
  }",junit.framework.AssertionFailedError: 
Closure_140,/222043010/omniapr/defects4j/Closure_140_buggy/test/com/google/javascript/jscomp/CrossModuleCodeMotionTest.java,testEmptyModule,"  public void testEmptyModule() {
    // When the dest module is empty, it might try to move the code to the
    // one of the modules that the empty module depends on. In some cases
    // this might ended up to be the same module as the definition of the code.
    // When that happens, CrossMooduleCodeMotion might report a code change
    // while nothing is moved. This should not be a problem if we know all
    // modules are non-empty.
    JSModule m1 = new JSModule(""m1"");
    m1.add(JSSourceFile.fromCode(""m1"", ""function x() {}""));
    
    JSModule empty = new JSModule(""empty"");
    empty.addDependency(m1);
    
    JSModule m2 = new JSModule(""m2"");
    m2.add(JSSourceFile.fromCode(""m2"", ""x()""));
    m2.addDependency(empty);
    
    JSModule m3 = new JSModule(""m3"");
    m3.add(JSSourceFile.fromCode(""m3"", ""x()""));
    m3.addDependency(empty);
    
    test(new JSModule[] {m1,empty,m2,m3},
        new String[] {
          """",
          ""function x() {}"",
          ""x()"",
          ""x()""
    });
  }",junit.framework.AssertionFailedError: compiler.reportCodeChange() was called even though nothing changed
Closure_141,/222043010/omniapr/defects4j/Closure_141_buggy/test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,testCanExposeExpression2,"  public void testCanExposeExpression2() {
    helperCanExposeExpression(
        DecompositionType.MOVABLE, ""foo()"", ""foo"");
    helperCanExposeExpression(
        DecompositionType.MOVABLE, ""x = foo()"", ""foo"");
    helperCanExposeExpression(
        DecompositionType.MOVABLE, ""var x = foo()"", ""foo"");
    helperCanExposeExpression(
        DecompositionType.MOVABLE, ""if(foo()){}"", ""foo"");
    helperCanExposeExpression(
        DecompositionType.MOVABLE, ""switch(foo()){}"", ""foo"");
    helperCanExposeExpression(
        DecompositionType.MOVABLE, ""switch(foo()){}"", ""foo"");
    helperCanExposeExpression(
        DecompositionType.MOVABLE, ""function (){ return foo();}"", ""foo"");

    helperCanExposeExpression(
        DecompositionType.MOVABLE, ""x = foo() && 1"", ""foo"");
    helperCanExposeExpression(
        DecompositionType.MOVABLE, ""x = foo() || 1"", ""foo"");
    helperCanExposeExpression(
        DecompositionType.MOVABLE, ""x = foo() ? 0 : 1"", ""foo"");
    helperCanExposeExpression(
        DecompositionType.MOVABLE, ""(function(a){b = a})(foo())"", ""foo"");
  }",junit.framework.AssertionFailedError: expected:<MOVABLE> but was:<DECOMPOSABLE>
Closure_141,/222043010/omniapr/defects4j/Closure_141_buggy/test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java,testCanExposeExpression7,"  public void testCanExposeExpression7() {
    // Verify calls to anonymous function are movable.
    helperCanExposeAnonymousFunctionExpression(
        DecompositionType.MOVABLE,
        ""(function(map){descriptions_=map})(\n"" +
            ""function(){\n"" +
                ""var ret={};\n"" +
                ""ret[INIT]='a';\n"" +
                ""ret[MIGRATION_BANNER_DISMISS]='b';\n"" +
                ""return ret\n"" +
            ""}()\n"" +
        "");"", 2);
  }",junit.framework.AssertionFailedError: expected:<MOVABLE> but was:<DECOMPOSABLE>
Closure_141,/222043010/omniapr/defects4j/Closure_141_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testDecomposeAnonymousInCall,"  public void testDecomposeAnonymousInCall() {
    test(
        ""(function(map){descriptions_=map})(\n"" +
           ""function(){\n"" +
              ""var ret={};\n"" +
              ""ret[ONE]='a';\n"" +
              ""ret[TWO]='b';\n"" +
              ""return ret\n"" +
           ""}()\n"" +
        "");"",
        ""{"" +
        ""var JSCompiler_inline_result_0;"" +
        ""var ret$$inline_2={};\n"" +
        ""ret$$inline_2[ONE]='a';\n"" +
        ""ret$$inline_2[TWO]='b';\n"" +
        ""JSCompiler_inline_result_0 = ret$$inline_2;\n"" +
        ""}"" +
        ""{"" +
        ""descriptions_=JSCompiler_inline_result_0;"" +
        ""}""
        );
  }",java.lang.IllegalStateException: Call site missed.
Closure_141,/222043010/omniapr/defects4j/Closure_141_buggy/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,testCallFunctionFOrGViaHookWithSideEffects,"  public void testCallFunctionFOrGViaHookWithSideEffects() throws Exception {
    String source = ""var x = 0;\n"" +
        ""function f(){x = 10}\n"" +
        ""function g(){}\n"" +
        ""function h(){ (false ? f : g)() }\n"" +
        ""function i(){ (false ? g : f)() }\n"" +
        ""function j(){ (false ? f : f)() }\n"" +
        ""function k(){ (false ? g : g)() }\n"" +
        ""h(); i(); j(); k()"";

    checkMarkedCalls(source, ImmutableList.<String>of(""(g : g)"", ""k""));
  }","junit.framework.AssertionFailedError: expected:<[(g : g), k]> but was:<[]>"
Closure_141,/222043010/omniapr/defects4j/Closure_141_buggy/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,testCallFunctionForGorH,"  public void testCallFunctionForGorH() throws Exception {
    String source = ""function f(){}\n"" +
        ""function g(){}\n"" +
        ""function h(){}\n"" +
        ""function i(){ (false ? f : (g || h))() }\n"" +
        ""i()"";

    checkMarkedCalls(source, ImmutableList.<String>of(""(f : (g || h))"", ""i""));
  }","junit.framework.AssertionFailedError: expected:<[(g : g), k]> but was:<[]>"
Closure_141,/222043010/omniapr/defects4j/Closure_141_buggy/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,testCallFunctionFOrG,"  public void testCallFunctionFOrG() throws Exception {
    String source = ""function f(){}\n"" +
        ""function g(){}\n"" +
        ""function h(){ (f || g)() }\n"" +
        ""h()"";

    checkMarkedCalls(source, ImmutableList.<String>of(""(f || g)"", ""h""));
  }","junit.framework.AssertionFailedError: expected:<[(g : g), k]> but was:<[]>"
Closure_141,/222043010/omniapr/defects4j/Closure_141_buggy/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,testCallFunctionFOrGViaHook,"  public void testCallFunctionFOrGViaHook() throws Exception {
    String source = ""function f(){}\n"" +
        ""function g(){}\n"" +
        ""function h(){ (false ? f : g)() }\n"" +
        ""h()"";

    checkMarkedCalls(source, ImmutableList.<String>of(""(f : g)"", ""h""));
  }","junit.framework.AssertionFailedError: expected:<[(g : g), k]> but was:<[]>"
Closure_141,/222043010/omniapr/defects4j/Closure_141_buggy/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java,testCallFunctionFOrGWithSideEffects,"  public void testCallFunctionFOrGWithSideEffects() throws Exception {
    String source = ""var x = 0;\n"" +
        ""function f(){x = 10}\n"" +
        ""function g(){}\n"" +
        ""function h(){ (f || g)() }\n"" +
        ""function i(){ (g || f)() }\n"" +
        ""function j(){ (f || f)() }\n"" +
        ""function k(){ (g || g)() }\n"" +
        ""h(); i(); j(); k()"";

    checkMarkedCalls(source, ImmutableList.<String>of(""(g || g)"", ""k""));
  }","junit.framework.AssertionFailedError: expected:<[(g : g), k]> but was:<[]>"
Closure_142,/222043010/omniapr/defects4j/Closure_142_buggy/test/com/google/javascript/jscomp/CoalesceVariableNamesTest.java,testParameter4,"  public void testParameter4() {
    // Make sure that we do not merge two-arg functions because of the
    // IE sort bug (see comments in computeEscaped)
    test(""function FUNC(x, y) {var a,b; y; a=0; a; x; b=0; b}"",
         ""function FUNC(x, y) {var a; y; a=0; a; x; a=0; a}"");
  }",junit.framework.AssertionFailedError: 
Closure_142,/222043010/omniapr/defects4j/Closure_142_buggy/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java,testParseLicenseWithAnnotation,"  public void testParseLicenseWithAnnotation() throws Exception {
    Node node = new Node(1);
    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
    String comment = ""@license Foo \n * @author Charlie Brown */"";
    parse(comment);
    assertEquals("" Foo \n @author Charlie Brown "",
        node.getJSDocInfo().getLicense());
  }",junit.framework.ComparisonFailure: expected:< Foo 
Closure_143,/222043010/omniapr/defects4j/Closure_143_buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java,testDefineFlag3,"  public void testDefineFlag3() {
    args.add(""--define=FOO=\""x'\"""");
    test(""/** @define {string} */ var FOO = \""a\"";"",
         ""var FOO = \""x'\"";"");
  }","java.lang.RuntimeException: --define flag syntax invalid: FOO=""x'"""
Closure_143,/222043010/omniapr/defects4j/Closure_143_buggy/test/com/google/javascript/jscomp/RemoveConstantExpressionsTest.java,testCall1,"  public void testCall1() {
    test(""Math.sin(0);"", """");
  }",junit.framework.AssertionFailedError: 
Closure_143,/222043010/omniapr/defects4j/Closure_143_buggy/test/com/google/javascript/jscomp/RemoveConstantExpressionsTest.java,testNew1,"  public void testNew1() {
    test(""new Date;"", """");
  }",junit.framework.AssertionFailedError: 
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testTypeAnnotationsAssign,"  public void testTypeAnnotationsAssign() {
    assertTypeAnnotations(""/** @constructor */ var Foo = function(){}"",
        ""/**\n * @return {undefined}\n * @constructor\n */\n""
        + ""var Foo = function() {\n}"");
  }",junit.framework.ComparisonFailure: expected:</**
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testTypeAnnotationsMember,"  public void testTypeAnnotationsMember() {
    assertTypeAnnotations(""var a = {};""
        + ""/** @constructor */ a.Foo = function(){}""
        + ""/** @param {string} foo\n""
        + ""  * @return {number} */\n""
        + ""a.Foo.prototype.foo = function(foo) { return 3; };""
        + ""/** @type {string|undefined} */""
        + ""a.Foo.prototype.bar = '';"",
        ""var a = {};\n""
        + ""/**\n * @return {undefined}\n * @constructor\n */\n""
        + ""a.Foo = function() {\n};\n""
        + ""/**\n""
        + "" * @param {string} foo\n""
        + "" * @return {number}\n""
        + "" */\n""
        + ""a.Foo.prototype.foo = function(foo) {\n  return 3\n};\n""
        + ""/** @type {string} */\n""
        + ""a.Foo.prototype.bar = \""\"""");
  }",junit.framework.ComparisonFailure: expected:</**
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testOptionalTypesAnnotation,"  public void testOptionalTypesAnnotation() {
    assertTypeAnnotations(
        ""/**\n"" +
        "" * @param {string=} x \n"" +
        "" */\n"" +
        ""var a = function(x) {}"",
        ""/**\n"" +
        "" * @param {string=} x\n"" +
        "" * @return {undefined}\n"" +
        "" */\n"" +
        ""var a = function(x) {\n}"");
  }",junit.framework.ComparisonFailure: expected:</**
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testTempConstructor,"  public void testTempConstructor() {
    assertTypeAnnotations(
        ""var x = function() {\n/**\n * @constructor\n */\nfunction t1() {}\n"" +
        "" /**\n * @constructor\n */\nfunction t2() {}\n"" +
        "" t1.prototype = t2.prototype}"",
        ""/**\n * @return {undefined}\n */\nvar x = function() {\n"" +
        ""  /**\n * @return {undefined}\n * @constructor\n */\n"" +
        ""function t1() {\n  }\n"" +
        ""  /**\n * @return {undefined}\n * @constructor\n */\n"" +
        ""function t2() {\n  }\n"" +
        ""  t1.prototype = t2.prototype\n}""
    );
  }",junit.framework.ComparisonFailure: expected:</**
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testTypeAnnotationsDispatcher1,"  public void testTypeAnnotationsDispatcher1() {
    assertTypeAnnotations(
        ""var a = {};\n"" +
        ""/** \n"" +
        "" * @constructor \n"" +
        "" * @javadispatch \n"" +
        "" */\n"" +
        ""a.Foo = function(){}"",
        ""var a = {};\n"" +
        ""/**\n"" +
        "" * @return {undefined}\n"" +
        "" * @constructor\n"" +
        "" * @javadispatch\n"" +
        "" */\n"" +
        ""a.Foo = function() {\n"" +
        ""}"");
  }",junit.framework.ComparisonFailure: expected:</**
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testTypeAnnotationsDispatcher2,"  public void testTypeAnnotationsDispatcher2() {
    assertTypeAnnotations(
        ""var a = {};\n"" +
        ""/** \n"" +
        "" * @constructor \n"" +
        "" */\n"" +
        ""a.Foo = function(){}\n"" +
        ""/**\n"" +
        "" * @javadispatch\n"" +
        "" */\n"" +
        ""a.Foo.prototype.foo = function() {};"",

        ""var a = {};\n"" +
        ""/**\n"" +
        "" * @return {undefined}\n"" +
        "" * @constructor\n"" +
        "" */\n"" +
        ""a.Foo = function() {\n"" +
        ""};\n"" +
        ""/**\n"" +
        "" * @return {undefined}\n"" +
        "" * @javadispatch\n"" +
        "" */\n"" +
        ""a.Foo.prototype.foo = function() {\n"" +
        ""}"");
  }",junit.framework.ComparisonFailure: expected:</**
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testTypeAnnotationsImplements,"  public void testTypeAnnotationsImplements() {
    assertTypeAnnotations(""var a = {};""
        + ""/** @constructor */ a.Foo = function(){};\n""
        + ""/** @interface */ a.I = function(){};\n""
        + ""/** @interface */ a.I2 = function(){};\n""
        + ""/** @constructor \n @extends {a.Foo}\n""
        + "" * @implements {a.I} \n @implements {a.I2}\n""
        + ""*/ a.Bar = function(){}"",
        ""var a = {};\n""
        + ""/**\n * @return {undefined}\n * @constructor\n */\n""
        + ""a.Foo = function() {\n};\n""
        + ""/**\n * @interface\n */\n""
        + ""a.I = function() {\n};\n""
        + ""/**\n * @interface\n */\n""
        + ""a.I2 = function() {\n};\n""
        + ""/**\n * @return {undefined}\n * @extends {a.Foo}\n""
        + "" * @implements {a.I}\n""
        + "" * @implements {a.I2}\n * @constructor\n */\n""
        + ""a.Bar = function() {\n}"");
  }",junit.framework.ComparisonFailure: expected:</**
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testTypeAnnotationsNamespace,"  public void testTypeAnnotationsNamespace() {
    assertTypeAnnotations(""var a = {};""
        + ""/** @constructor */ a.Foo = function(){}"",
        ""var a = {};\n""
        + ""/**\n * @return {undefined}\n * @constructor\n */\n""
        + ""a.Foo = function() {\n}"");
  }",junit.framework.ComparisonFailure: expected:</**
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testTypeAnnotations,"  public void testTypeAnnotations() {
    assertTypeAnnotations(
        ""/** @constructor */ function Foo(){}"",
        ""/**\n * @return {undefined}\n * @constructor\n */\n""
        + ""function Foo() {\n}\n"");
  }",junit.framework.ComparisonFailure: expected:</**
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testVariableArgumentsTypesAnnotation,"  public void testVariableArgumentsTypesAnnotation() {
    assertTypeAnnotations(
        ""/**\n"" +
        "" * @param {...string} x \n"" +
        "" */\n"" +
        ""var a = function(x) {}"",
        ""/**\n"" +
        "" * @param {...string} x\n"" +
        "" * @return {undefined}\n"" +
        "" */\n"" +
        ""var a = function(x) {\n}"");
  }",junit.framework.ComparisonFailure: expected:</**
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testEmitUnknownParamTypesAsAllType,"  public void testEmitUnknownParamTypesAsAllType() {
    assertTypeAnnotations(
        ""var a = function(x) {}"",
        ""/**\n"" +
        "" * @param {*} x\n"" +
        "" * @return {undefined}\n"" +
        "" */\n"" + 
        ""var a = function(x) {\n}"");
  }",junit.framework.ComparisonFailure: expected:</**
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testTypeAnnotationsMemberSubclass,"  public void testTypeAnnotationsMemberSubclass() {
    assertTypeAnnotations(""var a = {};""
        + ""/** @constructor */ a.Foo = function(){};""
        + ""/** @constructor \n @extends {a.Foo} */ a.Bar = function(){}"",
        ""var a = {};\n""
        + ""/**\n * @return {undefined}\n * @constructor\n */\n""
        + ""a.Foo = function() {\n};\n""
        + ""/**\n * @return {undefined}\n * @extends {a.Foo}\n""
        + "" * @constructor\n */\n""
        + ""a.Bar = function() {\n}"");
  }",junit.framework.ComparisonFailure: expected:</**
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java,testRewritePrototypeMethods2,"  public void testRewritePrototypeMethods2() throws Exception {
    // type checking on
    enableTypeCheck(CheckLevel.ERROR);
    checkTypes(RewritePrototypeMethodTestInput.INPUT,
               RewritePrototypeMethodTestInput.EXPECTED,
               RewritePrototypeMethodTestInput.EXPECTED_TYPE_CHECKING_ON);
  }","junit.framework.AssertionFailedError: expected:<[FUNCTION a = function (this:a): undefined, NAME JSCompiler_StaticMethods_foo$self = a, FUNCTION JSCompiler_StaticMethods_foo = function (a): number, NAME JSCompiler_StaticMethods_bar$self = a, FUNCTION JSCompiler_StaticMethods_bar = function (a, number): number, FUNCTION JSCompiler_StaticMethods_baz = function (a): undefined, NEW a = a, CALL JSCompiler_StaticMethods_foo = number, CALL JSCompiler_StaticMethods_bar = number, CALL JSCompiler_StaticMethods_baz = undefined]> but was:<[FUNCTION a = function (this:a): ?, NAME JSCompiler_StaticMethods_foo$self = a, FUNCTION JSCompiler_StaticMethods_foo = function (a): number, NAME JSCompiler_StaticMethods_bar$self = a, FUNCTION JSCompiler_StaticMethods_bar = function (a, number): number, FUNCTION JSCompiler_StaticMethods_baz = function (a): ?, NEW a = a, CALL JSCompiler_StaticMethods_foo = number, CALL JSCompiler_StaticMethods_bar = number, CALL JSCompiler_StaticMethods_baz = ?]>"
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java,testStaticProperty,"  public void testStaticProperty() {
    String js = """"
      + ""/** @constructor */ function Foo() {} \n""
      + ""/** @constructor */ function Bar() {}\n""
      + ""Foo.a = 0;""
      + ""Bar.a = 0;"";
    String output = """"
        + ""function Foo(){}""
        + ""function Bar(){}""
        + ""Foo.function__this_Foo___undefined$a = 0;""
        + ""Bar.function__this_Bar___undefined$a = 0;"";

    testSets(false, js, output,
        ""{a=[[function (this:Bar): undefined],"" +
        "" [function (this:Foo): undefined]]}"");
  }",junit.framework.AssertionFailedError: 
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/ExternExportsPassTest.java,testExportDontEmitPrototypePathPrefix,"  public void testExportDontEmitPrototypePathPrefix() { 
    compileAndCheck(
        ""/**\n"" +
        "" * @constructor\n"" +
        "" */\n"" +
        ""var Foo = function() {};"" +
        ""/**\n"" +
        "" * @return {number}\n"" +
        "" */\n"" +
        ""Foo.prototype.m = function() {return 6;};\n"" +
        ""goog.exportSymbol('Foo', Foo);\n"" +
        ""goog.exportProperty(Foo.prototype, 'm', Foo.prototype.m);"",
        ""/**\n"" +
        "" * @return {undefined}\n"" +
        "" * @constructor\n"" +
        "" */\n"" +
        ""var Foo = function() {\n};\n"" +
        ""/**\n"" +
        "" * @return {number}\n"" +
        "" */\n"" +
        ""Foo.prototype.m = function() {\n}""
    );  
  }",junit.framework.ComparisonFailure: expected:</**
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/ExternExportsPassTest.java,testExportMultiple,"  public void testExportMultiple() throws Exception {
    compileAndCheck(""var a = {}; a.b = function(p1) {}; "" +
                    ""a.b.c = function(d, e, f) {};"" +
                    ""a.b.prototype.c = function(g, h, i) {};"" +
                    ""goog.exportSymbol('a.b', a.b);"" +
                    ""goog.exportProperty(a.b, 'c', a.b.c);"" +
                    ""goog.exportProperty(a.b.prototype, 'c', a.b.prototype.c);"",

                    ""var a = {};\n"" +
                    ""/**\n"" +
                    "" * @param {*} p1\n"" +
                    "" * @return {undefined}\n"" +
                    "" */\n"" +
                    ""a.b = function(p1) {\n};\n"" +
                    ""/**\n"" +
                    "" * @param {*} d\n"" +
                    "" * @param {*} e\n"" +
                    "" * @param {*} f\n"" +
                    "" * @return {undefined}\n"" +
                    "" */\n"" +
                    ""a.b.c = function(d, e, f) {\n};\n"" +
                    ""/**\n"" +
                    "" * @param {*} g\n"" +
                    "" * @param {*} h\n"" +
                    "" * @param {*} i\n"" +
                    "" * @return {undefined}\n"" +
                    "" */\n"" +
                    ""a.b.prototype.c = function(g, h, i) {\n}"");
  }",junit.framework.ComparisonFailure: expected:</**
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/ExternExportsPassTest.java,testExportSymbolWithConstructor,"  public void testExportSymbolWithConstructor() {
    compileAndCheck(""var internalName;\n"" +
                    ""/**\n"" +
                    "" * @constructor\n"" +
                    "" */\n"" +  
                    ""internalName = function() {"" +
                    ""};"" +
                    ""goog.exportSymbol('externalName', internalName)"",
                    ""/**\n"" +
                    "" * @return {undefined}\n"" +
                    "" * @constructor\n"" +
                    "" */\n"" + 
                    ""var externalName = function() {\n}"");
  }",junit.framework.ComparisonFailure: expected:</**
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/ExternExportsPassTest.java,testExportSymbolDefinedInVar,"  public void testExportSymbolDefinedInVar() throws Exception {
    compileAndCheck(""var a = function(d, e, f) {};"" +
                    ""goog.exportSymbol('foobar', a)"",
                    ""/**\n"" +
                    "" * @param {*} d\n"" +
                    "" * @param {*} e\n"" +
                    "" * @param {*} f\n"" +
                    "" * @return {undefined}\n"" +
                    "" */\n"" +
                    ""var foobar = function(d, e, f) {\n}"");
  }",junit.framework.ComparisonFailure: expected:</**
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/ExternExportsPassTest.java,testExportSymbol,"  public void testExportSymbol() throws Exception {
    compileAndCheck(""var a = {}; a.b = {}; a.b.c = function(d, e, f) {};"" +
                    ""goog.exportSymbol('foobar', a.b.c)"",
                    ""/**\n"" +
                    "" * @param {*} d\n"" +
                    "" * @param {*} e\n"" +
                    "" * @param {*} f\n"" +
                    "" * @return {undefined}\n"" +
                    "" */\n"" +
                    ""var foobar = function(d, e, f) {\n}"");
  }",junit.framework.ComparisonFailure: expected:</**
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/ExternExportsPassTest.java,testExportMultiple2,"  public void testExportMultiple2() throws Exception {
    compileAndCheck(""var a = {}; a.b = function(p1) {}; "" +
                    ""a.b.c = function(d, e, f) {};"" +
                    ""a.b.prototype.c = function(g, h, i) {};"" +
                    ""goog.exportSymbol('hello', a);"" +
                    ""goog.exportProperty(a.b, 'c', a.b.c);"" +
                    ""goog.exportProperty(a.b.prototype, 'c', a.b.prototype.c);"",

                    ""var hello = {};\n"" +
                    ""hello.b = {};\n"" +
                    ""/**\n"" +
                    "" * @param {*} d\n"" +
                    "" * @param {*} e\n"" +
                    "" * @param {*} f\n"" +
                    "" * @return {undefined}\n"" +
                    "" */\n"" +
                    ""hello.b.c = function(d, e, f) {\n};\n"" +
                    ""/**\n"" +
                    "" * @param {*} g\n"" +
                    "" * @param {*} h\n"" +
                    "" * @param {*} i\n"" +
                    "" * @return {undefined}\n"" +
                    "" */\n"" +
                    ""hello.b.prototype.c = function(g, h, i) {\n}"");
  }",junit.framework.ComparisonFailure: expected:</**
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/ExternExportsPassTest.java,testExportMultiple3,"  public void testExportMultiple3() throws Exception {
    compileAndCheck(""var a = {}; a.b = function(p1) {}; "" +
                    ""a.b.c = function(d, e, f) {};"" +
                    ""a.b.prototype.c = function(g, h, i) {};"" +
                    ""goog.exportSymbol('prefix', a.b);"" +
                    ""goog.exportProperty(a.b, 'c', a.b.c);"",

                    ""/**\n"" +
                    "" * @param {*} p1\n"" +
                    "" * @return {undefined}\n"" +
                    "" */\n"" +
                    ""var prefix = function(p1) {\n};\n"" +
                    ""/**\n"" +
                    "" * @param {*} d\n"" +
                    "" * @param {*} e\n"" +
                    "" * @param {*} f\n"" +
                    "" * @return {undefined}\n"" +
                    "" */\n"" +
                    ""prefix.c = function(d, e, f) {\n}"");
  }",junit.framework.ComparisonFailure: expected:</**
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/ExternExportsPassTest.java,testExportProperty,"  public void testExportProperty() throws Exception {
    compileAndCheck(""var a = {}; a.b = {}; a.b.c = function(d, e, f) {};"" +
                    ""goog.exportProperty(a.b, 'cprop', a.b.c)"",
                    ""var a = {};\n"" +
                    ""a.b = {};\n"" +
                    ""/**\n"" +
                    "" * @param {*} d\n"" +
                    "" * @param {*} e\n"" +
                    "" * @param {*} f\n"" +
                    "" * @return {undefined}\n"" +
                    "" */\n"" +
                    ""a.b.cprop = function(d, e, f) {\n}"");
  }",junit.framework.ComparisonFailure: expected:</**
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testNestedFunctionInference1,"  public void testNestedFunctionInference1() throws Exception {
    String nestedAssignOfFooAndBar =
        ""/** @constructor */ function f() {};"" +
        ""f.prototype.foo = f.prototype.bar = function(){};"";
    testFunctionType(nestedAssignOfFooAndBar, ""(new f).bar"",
        ""function (this:f): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testScoping10,"  public void testScoping10() throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope(""var a = function b(){};"");

    // a declared, b is not
    assertTrue(p.scope.isDeclared(""a"", false));
    assertFalse(p.scope.isDeclared(""b"", false));

    // checking that a has the correct assigned type
    assertEquals(""function (): undefined"",
        p.scope.getVar(""a"").getType().toString());
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testDuplicateOldTypeDef,"  public void testDuplicateOldTypeDef() throws Exception {
    testTypes(
        ""var goog = {}; goog.typedef = true;"" +
        ""/** @constructor */ goog.Bar = function() {};"" +
        ""/** @type {number} */ goog.Bar = goog.typedef"",
        ""variable goog.Bar redefined with type number, "" +
        ""original definition at [testcode]:1 "" +
        ""with type function (this:goog.Bar): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testBadConstructorCall,"  public void testBadConstructorCall() throws Exception {
    testTypes(
        ""/** @constructor */ function Foo() {}"" +
        ""Foo();"",
        ""Constructor function (this:Foo): undefined should be called "" +
        ""with the \""new\"" keyword"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testDontAddMethodsIfNoConstructor,"  public void testDontAddMethodsIfNoConstructor()
      throws Exception {
    Node js1Node = parseAndTypeCheck(
        ""function A() {}"" +
        ""A.prototype = {m1: 5, m2: true}"");

    JSType functionAType = js1Node.getFirstChild().getJSType();
    assertEquals(""function (): undefined"", functionAType.toString());
    assertEquals(UNKNOWN_TYPE,
        U2U_FUNCTION_TYPE.getPropertyType(""m1""));
    assertEquals(UNKNOWN_TYPE,
        U2U_FUNCTION_TYPE.getPropertyType(""m2""));
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testInterfaceInheritanceCheck11,"  public void testInterfaceInheritanceCheck11() throws Exception {
    testTypes(
        ""/** @constructor */function Super() {};"" +
        ""/** @param {number} bar */Super.prototype.foo = function(bar) {};"" +
        ""/** @constructor\n @extends {Super} */function Sub() {};"" +
        ""/** @override\n  @param {string} bar */Sub.prototype.foo =\n"" +
        ""function(bar) {};"",
        ""mismatch of the foo property type and the type of the property it "" +
        ""overrides from superclass Super\n"" +
        ""original: function (this:Super, number): undefined\n"" +
        ""override: function (this:Sub, string): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testErrorMismatchingPropertyOnInterface5,"  public void testErrorMismatchingPropertyOnInterface5() throws Exception {
    testTypes(""/** @interface */ function T() {};\n"" +
        ""/** @type {number} */T.prototype.x = function() { };"",
        ""assignment to property x of T.prototype\n"" +
        ""found   : function (): undefined\n"" +
        ""required: number"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testDuplicateTypeDef,"  public void testDuplicateTypeDef() throws Exception {
    testTypes(
        ""var goog = {};"" +
        ""/** @constructor */ goog.Bar = function() {};"" +
        ""/** @typedef {number} */ goog.Bar;"",
        ""variable goog.Bar redefined with type None, "" +
        ""original definition at [testcode]:1 "" +
        ""with type function (this:goog.Bar): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testBug911118,"  public void testBug911118() throws Exception {
    // verifying the type assigned to anonymous functions assigned variables
    Scope s = parseAndTypeCheckWithScope(""var a = function(){};"").scope;
    JSType type = s.getVar(""a"").getType();
    assertEquals(""function (): undefined"", type.toString());

    // verifying the bug example
    testTypes(""function nullFunction() {};"" +
        ""var foo = nullFunction;"" +
        ""foo = function() {};"" +
        ""foo();"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testFunctionInference12,"  public void testFunctionInference12() throws Exception {
    testFunctionType(
        ""var goog = {};"" +
        ""goog.f = function(){};"",
        ""goog.f"",
        ""function (): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testFunctionInference13,"  public void testFunctionInference13() throws Exception {
    testFunctionType(
        ""var goog = {};"" +
        ""/** @constructor */ goog.Foo = function(){};"" +
        ""/** @param {!goog.Foo} f */function eatFoo(f){};"",
        ""eatFoo"",
        ""function (goog.Foo): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testFunctionInference15,"  public void testFunctionInference15() throws Exception {
    testFunctionType(
        ""/** @constructor */ function f() {};"" +
        ""f.prototype.foo = function(){};"",
        ""f.prototype.foo"",
        ""function (this:f): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testFunctionInference16,"  public void testFunctionInference16() throws Exception {
    testFunctionType(
        ""/** @constructor */ function f() {};"" +
        ""f.prototype.foo = function(){};"",
        ""(new f).foo"",
        ""function (this:f): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testPrototypePropertyReference,"  public void testPrototypePropertyReference() throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope(""""
        + ""/** @constructor */\n""
        + ""function Foo() {}\n""
        + ""/** @param {number} a */\n""
        + ""Foo.prototype.bar = function(a){};\n""
        + ""/** @param {Foo} f */\n""
        + ""function baz(f) {\n""
        + ""  Foo.prototype.bar.call(f, 3);\n""
        + ""}"");
    assertEquals(0, compiler.getErrorCount());
    assertEquals(0, compiler.getWarningCount());

    assertTrue(p.scope.getVar(""Foo"").getType() instanceof FunctionType);
    FunctionType fooType = (FunctionType) p.scope.getVar(""Foo"").getType();
    assertEquals(""function (this:Foo, number): undefined"",
                 fooType.getPrototype().getPropertyType(""bar"").toString());
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testGoodExtends7,"  public void testGoodExtends7() throws Exception {
    testFunctionType(
        ""Function.prototype.inherits = function(x) {};"" +
        ""/** @constructor */function base() {}\n"" +
        ""/** @extends {base}\n * @constructor */function derived() {}\n"" +
        ""derived.inherits(base);"",
        ""(new derived).constructor"",
        ""function (this:derived): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testTypeRedefinition,"  public void testTypeRedefinition() throws Exception {
    testTypes(""a={};/**@enum {string}*/ a.A = {ZOR:'b'};""
        + ""/** @constructor */ a.A = function() {}"",
        ""variable a.A redefined with type function (this:a.A): undefined, "" +
        ""original definition at [testcode]:1 with type enum{a.A}"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testFunctionInference1,"  public void testFunctionInference1() throws Exception {
    testFunctionType(
        ""function f(a) {}"",
        ""function (?): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testFunctionInference2,"  public void testFunctionInference2() throws Exception {
    testFunctionType(
        ""function f(a,b) {}"",
        ""function (?, ?): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testFunctionInference3,"  public void testFunctionInference3() throws Exception {
    testFunctionType(
        ""function f(var_args) {}"",
        ""function (...[?]): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testFunctionInference4,"  public void testFunctionInference4() throws Exception {
    testFunctionType(
        ""function f(a,b,c,var_args) {}"",
        ""function (?, ?, ?, ...[?]): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testFunctionInference7,"  public void testFunctionInference7() throws Exception {
    testFunctionType(
        ""/** @this Date */function f(a,b,c,var_args) {}"",
        ""function (this:Date, ?, ?, ?, ...[?]): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testFunctionInference8,"  public void testFunctionInference8() throws Exception {
    testFunctionType(
        ""function f() {}"",
        ""function (): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testFunctionInference9,"  public void testFunctionInference9() throws Exception {
    testFunctionType(
        ""var f = function() {};"",
        ""function (): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testInterfaceInheritanceCheck7,"  public void testInterfaceInheritanceCheck7() throws Exception {
    testTypes(
        ""/** @interface */function Super() {};"" +
        ""/** @param {number} bar */Super.prototype.foo = function(bar) {};"" +
        ""/** @constructor\n @implements {Super} */function Sub() {};"" +
        ""/** @override\n  @param {string} bar */Sub.prototype.foo =\n"" +
        ""function(bar) {};"",
        ""mismatch of the foo property type and the type of the property it "" +
        ""overrides from interface Super\n"" +
        ""original: function (this:Super, number): undefined\n"" +
        ""override: function (this:Sub, string): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testDuplicateStaticMethodDecl1,"  public void testDuplicateStaticMethodDecl1() throws Exception {
    testTypes(
        ""var goog = goog || {};"" +
        ""/** @param {number} x */ goog.foo = function(x) {};"" +
        ""/** @param {number} x */ goog.foo = function(x) {};"",
        ""variable goog.foo redefined with type function (number): undefined, "" +
        ""original definition at [testcode]:1 "" +
        ""with type function (number): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testDuplicateStaticMethodDecl5,"  public void testDuplicateStaticMethodDecl5() throws Exception {
    testTypes(
        ""var goog = goog || {};"" +
        ""goog.foo = function(x) {};"" +
        ""/** @return {undefined} */ goog.foo = function(x) {};"",
        ""variable goog.foo redefined with type function (?): undefined, "" +
        ""original definition at [testcode]:1 with type "" +
        ""function (?): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testNestedFunctionInference1,"  public void testNestedFunctionInference1() throws Exception {
    String nestedAssignOfFooAndBar =
        ""/** @constructor */ function f() {};"" +
        ""f.prototype.foo = f.prototype.bar = function(){};"";
    testFunctionType(nestedAssignOfFooAndBar, ""(new f).bar"",
        ""function (this:f): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testScoping10,"  public void testScoping10() throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope(""var a = function b(){};"");

    // a declared, b is not
    assertTrue(p.scope.isDeclared(""a"", false));
    assertFalse(p.scope.isDeclared(""b"", false));

    // checking that a has the correct assigned type
    assertEquals(""function (): undefined"",
        p.scope.getVar(""a"").getType().toString());
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testDuplicateOldTypeDef,"  public void testDuplicateOldTypeDef() throws Exception {
    testTypes(
        ""var goog = {}; goog.typedef = true;"" +
        ""/** @constructor */ goog.Bar = function() {};"" +
        ""/** @type {number} */ goog.Bar = goog.typedef"",
        ""variable goog.Bar redefined with type number, "" +
        ""original definition at [testcode]:1 "" +
        ""with type function (this:goog.Bar): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testInferredReturn1,"  public void testInferredReturn1() throws Exception {
    testTypes(
        ""function f() {} /** @param {number} x */ function g(x) {}"" +
        ""g(f());"",
        ""actual parameter 1 of g does not match formal parameter\n"" +
        ""found   : undefined\n"" +
        ""required: number"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testInferredReturn2,"  public void testInferredReturn2() throws Exception {
    testTypes(
        ""/** @constructor */ function Foo() {}"" +
        ""Foo.prototype.bar = function() {}; "" +
        ""/** @param {number} x */ function g(x) {}"" +
        ""g((new Foo()).bar());"",
        ""actual parameter 1 of g does not match formal parameter\n"" +
        ""found   : undefined\n"" +
        ""required: number"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testInferredReturn3,"  public void testInferredReturn3() throws Exception {
    testTypes(
        ""/** @constructor */ function Foo() {}"" +
        ""Foo.prototype.bar = function() {}; "" +
        ""/** @constructor \n * @extends {Foo} */ function SubFoo() {}"" +
        ""/** @return {number} \n * @override  */ "" +
        ""SubFoo.prototype.bar = function() { return 3; }; "",
        ""mismatch of the bar property type and the type of the property "" +
        ""it overrides from superclass Foo\n"" +
        ""original: function (this:Foo): undefined\n"" +
        ""override: function (this:SubFoo): number"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testInferredReturn4,"  public void testInferredReturn4() throws Exception {
    // By design, this throws a warning. if you want global x to be
    // defined to some other type of function, then you need to declare it
    // as a greater type.
    testTypes(
        ""var x = function() {};"" +
        ""x = /** @type {function(): number} */ (function() { return 3; });"",
        ""assignment\n"" +
        ""found   : function (): number\n"" +
        ""required: function (): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testInferredReturn6,"  public void testInferredReturn6() throws Exception {
    testTypes(
        ""/** @return {string} */"" +
        ""function f() {"" +
        ""  var x = function() {};"" +
        ""  if (f()) "" +
        ""    x = /** @type {function(): number} */ "" +
        ""        (function() { return 3; });"" +
        ""  return x();"" +
        ""}"",
        ""inconsistent return type\n"" +
        ""found   : (number|undefined)\n"" +
        ""required: string"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testBadConstructorCall,"  public void testBadConstructorCall() throws Exception {
    testTypes(
        ""/** @constructor */ function Foo() {}"" +
        ""Foo();"",
        ""Constructor function (this:Foo): undefined should be called "" +
        ""with the \""new\"" keyword"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testDontAddMethodsIfNoConstructor,"  public void testDontAddMethodsIfNoConstructor()
      throws Exception {
    Node js1Node = parseAndTypeCheck(
        ""function A() {}"" +
        ""A.prototype = {m1: 5, m2: true}"");

    JSType functionAType = js1Node.getFirstChild().getJSType();
    assertEquals(""function (): undefined"", functionAType.toString());
    assertEquals(UNKNOWN_TYPE,
        U2U_FUNCTION_TYPE.getPropertyType(""m1""));
    assertEquals(UNKNOWN_TYPE,
        U2U_FUNCTION_TYPE.getPropertyType(""m2""));
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testInterfaceInheritanceCheck11,"  public void testInterfaceInheritanceCheck11() throws Exception {
    testTypes(
        ""/** @constructor */function Super() {};"" +
        ""/** @param {number} bar */Super.prototype.foo = function(bar) {};"" +
        ""/** @constructor\n @extends {Super} */function Sub() {};"" +
        ""/** @override\n  @param {string} bar */Sub.prototype.foo =\n"" +
        ""function(bar) {};"",
        ""mismatch of the foo property type and the type of the property it "" +
        ""overrides from superclass Super\n"" +
        ""original: function (this:Super, number): undefined\n"" +
        ""override: function (this:Sub, string): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testErrorMismatchingPropertyOnInterface5,"  public void testErrorMismatchingPropertyOnInterface5() throws Exception {
    testTypes(""/** @interface */ function T() {};\n"" +
        ""/** @type {number} */T.prototype.x = function() { };"",
        ""assignment to property x of T.prototype\n"" +
        ""found   : function (): undefined\n"" +
        ""required: number"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testDuplicateTypeDef,"  public void testDuplicateTypeDef() throws Exception {
    testTypes(
        ""var goog = {};"" +
        ""/** @constructor */ goog.Bar = function() {};"" +
        ""/** @typedef {number} */ goog.Bar;"",
        ""variable goog.Bar redefined with type None, "" +
        ""original definition at [testcode]:1 "" +
        ""with type function (this:goog.Bar): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testBug911118,"  public void testBug911118() throws Exception {
    // verifying the type assigned to function expressions assigned variables
    Scope s = parseAndTypeCheckWithScope(""var a = function(){};"").scope;
    JSType type = s.getVar(""a"").getType();
    assertEquals(""function (): undefined"", type.toString());

    // verifying the bug example
    testTypes(""function nullFunction() {};"" +
        ""var foo = nullFunction;"" +
        ""foo = function() {};"" +
        ""foo();"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testFunctionInference12,"  public void testFunctionInference12() throws Exception {
    testFunctionType(
        ""var goog = {};"" +
        ""goog.f = function(){};"",
        ""goog.f"",
        ""function (): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testFunctionInference13,"  public void testFunctionInference13() throws Exception {
    testFunctionType(
        ""var goog = {};"" +
        ""/** @constructor */ goog.Foo = function(){};"" +
        ""/** @param {!goog.Foo} f */function eatFoo(f){};"",
        ""eatFoo"",
        ""function (goog.Foo): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testFunctionInference15,"  public void testFunctionInference15() throws Exception {
    testFunctionType(
        ""/** @constructor */ function f() {};"" +
        ""f.prototype.foo = function(){};"",
        ""f.prototype.foo"",
        ""function (this:f): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testFunctionInference16,"  public void testFunctionInference16() throws Exception {
    testFunctionType(
        ""/** @constructor */ function f() {};"" +
        ""f.prototype.foo = function(){};"",
        ""(new f).foo"",
        ""function (this:f): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testPrototypePropertyReference,"  public void testPrototypePropertyReference() throws Exception {
    TypeCheckResult p = parseAndTypeCheckWithScope(""""
        + ""/** @constructor */\n""
        + ""function Foo() {}\n""
        + ""/** @param {number} a */\n""
        + ""Foo.prototype.bar = function(a){};\n""
        + ""/** @param {Foo} f */\n""
        + ""function baz(f) {\n""
        + ""  Foo.prototype.bar.call(f, 3);\n""
        + ""}"");
    assertEquals(0, compiler.getErrorCount());
    assertEquals(0, compiler.getWarningCount());

    assertTrue(p.scope.getVar(""Foo"").getType() instanceof FunctionType);
    FunctionType fooType = (FunctionType) p.scope.getVar(""Foo"").getType();
    assertEquals(""function (this:Foo, number): undefined"",
                 fooType.getPrototype().getPropertyType(""bar"").toString());
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testGoodExtends7,"  public void testGoodExtends7() throws Exception {
    testFunctionType(
        ""Function.prototype.inherits = function(x) {};"" +
        ""/** @constructor */function base() {}\n"" +
        ""/** @extends {base}\n * @constructor */function derived() {}\n"" +
        ""derived.inherits(base);"",
        ""(new derived).constructor"",
        ""function (this:derived): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testTypeRedefinition,"  public void testTypeRedefinition() throws Exception {
    testTypes(""a={};/**@enum {string}*/ a.A = {ZOR:'b'};""
        + ""/** @constructor */ a.A = function() {}"",
        ""variable a.A redefined with type function (this:a.A): undefined, "" +
        ""original definition at [testcode]:1 with type enum{a.A}"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testFunctionInference1,"  public void testFunctionInference1() throws Exception {
    testFunctionType(
        ""function f(a) {}"",
        ""function (?): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testFunctionInference2,"  public void testFunctionInference2() throws Exception {
    testFunctionType(
        ""function f(a,b) {}"",
        ""function (?, ?): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testFunctionInference3,"  public void testFunctionInference3() throws Exception {
    testFunctionType(
        ""function f(var_args) {}"",
        ""function (...[?]): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testFunctionInference4,"  public void testFunctionInference4() throws Exception {
    testFunctionType(
        ""function f(a,b,c,var_args) {}"",
        ""function (?, ?, ?, ...[?]): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testFunctionInference7,"  public void testFunctionInference7() throws Exception {
    testFunctionType(
        ""/** @this Date */function f(a,b,c,var_args) {}"",
        ""function (this:Date, ?, ?, ?, ...[?]): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testFunctionInference8,"  public void testFunctionInference8() throws Exception {
    testFunctionType(
        ""function f() {}"",
        ""function (): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testFunctionInference9,"  public void testFunctionInference9() throws Exception {
    testFunctionType(
        ""var f = function() {};"",
        ""function (): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testInterfaceInheritanceCheck7,"  public void testInterfaceInheritanceCheck7() throws Exception {
    testTypes(
        ""/** @interface */function Super() {};"" +
        ""/** @param {number} bar */Super.prototype.foo = function(bar) {};"" +
        ""/** @constructor\n @implements {Super} */function Sub() {};"" +
        ""/** @override\n  @param {string} bar */Sub.prototype.foo =\n"" +
        ""function(bar) {};"",
        ""mismatch of the foo property type and the type of the property it "" +
        ""overrides from interface Super\n"" +
        ""original: function (this:Super, number): undefined\n"" +
        ""override: function (this:Sub, string): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testDuplicateStaticMethodDecl1,"  public void testDuplicateStaticMethodDecl1() throws Exception {
    testTypes(
        ""var goog = goog || {};"" +
        ""/** @param {number} x */ goog.foo = function(x) {};"" +
        ""/** @param {number} x */ goog.foo = function(x) {};"",
        ""variable goog.foo redefined with type function (number): undefined, "" +
        ""original definition at [testcode]:1 with type function (number): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testDuplicateStaticMethodDecl5,"  public void testDuplicateStaticMethodDecl5() throws Exception {
    testTypes(
        ""var goog = goog || {};"" +
        ""goog.foo = function(x) {};"" +
        ""/** @return {undefined} */ goog.foo = function(x) {};"",
        ""variable goog.foo redefined with type function (?): undefined, "" +
        ""original definition at [testcode]:1 with type "" +
        ""function (?): undefined"");
  }",junit.framework.ComparisonFailure: expected:<... function (this:f): [undefined]
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,testConstructorNode,"  public void testConstructorNode() {
    testSame(""var goog = {}; /** @constructor */ goog.Foo = function() {};"");

    ObjectType ctor = (ObjectType) (findNameType(""goog.Foo"", globalScope));
    assertNotNull(ctor);
    assertTrue(ctor.isConstructor());
    assertEquals(""function (this:goog.Foo): undefined"", ctor.toString());
  }",junit.framework.ComparisonFailure: expected:<...on (this:goog.Foo): [undefined]> but was:<...on (this:goog.Foo): [?]>
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,testPropertiesOnInterface,"  public void testPropertiesOnInterface() throws Exception {
    testSame(""/** @interface */ var I = function() {};"" +
        ""/** @type {number} */ I.prototype.bar;"" +
        ""I.prototype.baz = function(){};"");

    Var i = globalScope.getVar(""I"");
    assertEquals(""function (this:I): ?"", i.getType().toString());
    assertTrue(i.getType().isInterface());

    ObjectType iPrototype = (ObjectType)
        ((ObjectType) i.getType()).getPropertyType(""prototype"");
    assertEquals(""I.prototype"", iPrototype.toString());
    assertTrue(iPrototype.isFunctionPrototypeType());

    assertEquals(""number"", iPrototype.getPropertyType(""bar"").toString());
    assertEquals(""function (this:I): undefined"",
        iPrototype.getPropertyType(""baz"").toString());

    assertEquals(iPrototype, globalScope.getVar(""I.prototype"").getType());
  }",junit.framework.ComparisonFailure: expected:<...on (this:goog.Foo): [undefined]> but was:<...on (this:goog.Foo): [?]>
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,testMethodBeforeFunction,"  public void testMethodBeforeFunction() throws Exception {
    testSame(
        ""var y = Window.prototype;"" +
        ""Window.prototype.alert = function(message) {};"" +
        ""/** @constructor */ function Window() {}\n"" +
        ""var window = new Window(); \n"" +
        ""var x = window;"");
    ObjectType x = (ObjectType) findNameType(""x"", globalScope);
    assertEquals(""Window"", x.toString());
    assertTrue(x.getImplicitPrototype().hasOwnProperty(""alert""));
    assertEquals(""function (this:Window, ?): undefined"",
        x.getPropertyType(""alert"").toString());
    assertTrue(x.isPropertyTypeDeclared(""alert""));

    ObjectType y = (ObjectType) findNameType(""y"", globalScope);
    assertEquals(""function (this:Window, ?): undefined"",
        y.getPropertyType(""alert"").toString());
  }",junit.framework.ComparisonFailure: expected:<...on (this:goog.Foo): [undefined]> but was:<...on (this:goog.Foo): [?]>
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,testConstructorProperty,"  public void testConstructorProperty() {
    testSame(""var foo = {}; /** @constructor */ foo.Bar = function() {};"");
    ObjectType foo = (ObjectType) findNameType(""foo"", globalScope);
    assertTrue(foo.hasProperty(""Bar""));
    assertFalse(foo.isPropertyTypeInferred(""Bar""));

    JSType fooBar = foo.getPropertyType(""Bar"");
    assertEquals(""function (this:foo.Bar): undefined"", fooBar.toString());
    assertEquals(Sets.newHashSet(foo), registry.getTypesWithProperty(""Bar""));
  }",junit.framework.ComparisonFailure: expected:<...on (this:goog.Foo): [undefined]> but was:<...on (this:goog.Foo): [?]>
Closure_144,/222043010/omniapr/defects4j/Closure_144_buggy/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,testReturnTypeInference1,"  public void testReturnTypeInference1() {
    testSame(""function f() {}"");
    assertEquals(
        ""function (): undefined"",
        findNameType(""f"", globalScope).toString());
  }",junit.framework.ComparisonFailure: expected:<...on (this:goog.Foo): [undefined]> but was:<...on (this:goog.Foo): [?]>
Closure_145,/222043010/omniapr/defects4j/Closure_145_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testFunctionSafariCompatiblity,"  public void testFunctionSafariCompatiblity() {
    // Functions within IFs cause syntax errors on Safari.
    assertPrint(""function(){if(e1){function goo(){return true}}else foo()}"",
        ""function(){if(e1){function goo(){return true}}else foo()}"");

    assertPrint(""function(){if(e1)function goo(){return true}else foo()}"",
        ""function(){if(e1){function goo(){return true}}else foo()}"");

    assertPrint(""if(e1){function goo(){return true}}"",
        ""if(e1){function goo(){return true}}"");

    assertPrint(""if(e1)function goo(){return true}"",
        ""if(e1){function goo(){return true}}"");

    assertPrint(""if(e1)A:function goo(){return true}"",
        ""if(e1){A:function goo(){return true}}"");
  }",junit.framework.ComparisonFailure: expected:<if(e1)[{A:function goo(){return true}]}> but was:<if(e1)[A:function goo(){return true]}>
Closure_145,/222043010/omniapr/defects4j/Closure_145_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testDoLoopIECompatiblity,"  public void testDoLoopIECompatiblity() {
    // Do loops within IFs cause syntax errors in IE6 and IE7.
    assertPrint(""function(){if(e1){do foo();while(e2)}else foo()}"",
        ""function(){if(e1){do foo();while(e2)}else foo()}"");

    assertPrint(""function(){if(e1)do foo();while(e2)else foo()}"",
        ""function(){if(e1){do foo();while(e2)}else foo()}"");

    assertPrint(""if(x){do{foo()}while(y)}else bar()"",
        ""if(x){do foo();while(y)}else bar()"");

    assertPrint(""if(x)do{foo()}while(y);else bar()"",
        ""if(x){do foo();while(y)}else bar()"");

    assertPrint(""if(x){do{foo()}while(y)}"",
        ""if(x){do foo();while(y)}"");

    assertPrint(""if(x)do{foo()}while(y);"",
        ""if(x){do foo();while(y)}"");

    assertPrint(""if(x)A:do{foo()}while(y);"",
        ""if(x){A:do foo();while(y)}"");
    
    assertPrint(""var i = 0;a: do{b: do{i++;break b;} while(0);} while(0);"",
        ""var i=0;a:do{b:do{i++;break b}while(0)}while(0)"");
  }",junit.framework.ComparisonFailure: expected:<if(e1)[{A:function goo(){return true}]}> but was:<if(e1)[A:function goo(){return true]}>
Closure_146,/222043010/omniapr/defects4j/Closure_146_buggy/test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java,testEqCondition4,"  public void testEqCondition4() throws Exception {
    FlowScope blind = newScope();
    testBinop(blind,
        Token.EQ,
        createVar(blind, ""a"", VOID_TYPE),
        createVar(blind, ""b"", VOID_TYPE),
        Sets.newHashSet(
            new TypedName(""a"", VOID_TYPE),
            new TypedName(""b"", VOID_TYPE)),
        Sets.newHashSet(
            new TypedName(""a"", NO_TYPE),
            new TypedName(""b"", NO_TYPE)));
  }",junit.framework.AssertionFailedError: expected:<None> but was:<undefined>
Closure_147,/222043010/omniapr/defects4j/Closure_147_buggy/test/com/google/javascript/jscomp/CheckGlobalThisTest.java,testIssue182a,"  public void testIssue182a() {
    testFailure(""var NS = {read: function() { return this.foo; }};"");
  }",junit.framework.AssertionFailedError: There should be one error.  expected:<1> but was:<0>
Closure_147,/222043010/omniapr/defects4j/Closure_147_buggy/test/com/google/javascript/jscomp/CheckGlobalThisTest.java,testIssue182b,"  public void testIssue182b() {
    testFailure(""var NS = {write: function() { this.foo = 3; }};"");
  }",junit.framework.AssertionFailedError: There should be one error.  expected:<1> but was:<0>
Closure_147,/222043010/omniapr/defects4j/Closure_147_buggy/test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java,testValueWithInnerFn,"  public void testValueWithInnerFn() {
    testChecks(""/** @param {number} i */ function f(i) { function g() {} }"",
        ""function f(i) {"" +
        ""  function g() {}"" +
        ""  jscomp.typecheck.checkType(i, "" +
        ""      [jscomp.typecheck.valueChecker('number')]);"" +
        ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_148,/222043010/omniapr/defects4j/Closure_148_buggy/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,testFoldTypeof,"  public void testFoldTypeof() {
    fold(""x = typeof 1"", ""x = \""number\"""");
    fold(""x = typeof 'foo'"", ""x = \""string\"""");
    fold(""x = typeof true"", ""x = \""boolean\"""");
    fold(""x = typeof false"", ""x = \""boolean\"""");
    fold(""x = typeof null"", ""x = \""object\"""");
    fold(""x = typeof undefined"", ""x = \""undefined\"""");
    fold(""x = typeof void 0"", ""x = \""undefined\"""");
    fold(""x = typeof []"", ""x = \""object\"""");
    fold(""x = typeof [1]"", ""x = \""object\"""");
    fold(""x = typeof [1,[]]"", ""x = \""object\"""");
    fold(""x = typeof {}"", ""x = \""object\"""");

    foldSame(""x = typeof[1,[foo()]]"");
    foldSame(""x = typeof{bathwater:baby()}"");
  }",junit.framework.AssertionFailedError: 
Closure_148,/222043010/omniapr/defects4j/Closure_148_buggy/test/com/google/javascript/jscomp/SourceMapTest.java,testGoldenOutput0,"  public void testGoldenOutput0() throws Exception {
    // Empty source map test
    checkSourceMap("""",

                   ""/** Begin line maps. **/{ \""file\"" : \""testcode\"","" +
                   "" \""count\"": 1 }\n"" +

                   ""[]\n"" +

                   ""/** Begin file information. **/\n"" +
                   ""[]\n"" +

                   ""/** Begin mapping definitions. **/\n"");
  }",junit.framework.ComparisonFailure: expected:<...ng definitions. **/
Closure_148,/222043010/omniapr/defects4j/Closure_148_buggy/test/com/google/javascript/jscomp/SourceMapTest.java,testGoldenOutput1,"  public void testGoldenOutput1() throws Exception {
    checkSourceMap(""function f(foo, bar) { foo = foo + bar + 2; return foo; }"",

                   ""/** Begin line maps. **/{ \""file\"" : \""testcode\"", "" +
                   ""\""count\"": 1 }\n"" +

                   ""[0,0,0,0,0,0,0,0,1,1,2,3,3,3,2,4,4,4,2,5,7,7,7,6,8,8,8,6,"" +
                   ""9,9,9,6,10,11,11,11,11,11,11,11,12,12,12,12,5]\n"" +

                   ""/** Begin file information. **/\n"" +
                   ""[]\n"" +

                   ""/** Begin mapping definitions. **/\n"" +
                   ""[\""testcode\"",1,9]\n"" +
                   ""[\""testcode\"",1,9,\""f\""]\n"" +
                   ""[\""testcode\"",1,10]\n"" +
                   ""[\""testcode\"",1,11,\""foo\""]\n"" +
                   ""[\""testcode\"",1,16,\""bar\""]\n"" +
                   ""[\""testcode\"",1,21]\n"" +
                   ""[\""testcode\"",1,23]\n"" +
                   ""[\""testcode\"",1,23,\""foo\""]\n"" +
                   ""[\""testcode\"",1,29,\""foo\""]\n"" +
                   ""[\""testcode\"",1,35,\""bar\""]\n"" +
                   ""[\""testcode\"",1,41]\n"" +
                   ""[\""testcode\"",1,44]\n"" +
                   ""[\""testcode\"",1,51,\""foo\""]\n"");
  }",junit.framework.ComparisonFailure: expected:<...ng definitions. **/
Closure_148,/222043010/omniapr/defects4j/Closure_148_buggy/test/com/google/javascript/jscomp/SourceMapTest.java,testGoldenOutput2,"  public void testGoldenOutput2() throws Exception {
    checkSourceMap(""function f(foo, bar) {\r\n\n\n\nfoo = foo + bar + foo;"" +
                   ""\nreturn foo;\n}"",

                   ""/** Begin line maps. **/{ \""file\"" : \""testcode\"", "" +
                   ""\""count\"": 1 }\n"" +

                   ""[0,0,0,0,0,0,0,0,1,1,2,3,3,3,2,4,4,4,2,5,7,7,7,6,8,8,8,"" +
                   ""6,9,9,9,6,10,10,10,11,11,11,11,11,11,11,12,12,12,"" +
                   ""12,5]\n"" +

                   ""/** Begin file information. **/\n"" +
                   ""[]\n"" +
                   ""/** Begin mapping definitions. **/\n"" +
                   ""[\""testcode\"",1,9]\n"" +
                   ""[\""testcode\"",1,9,\""f\""]\n"" +
                   ""[\""testcode\"",1,10]\n"" +
                   ""[\""testcode\"",1,11,\""foo\""]\n"" +
                   ""[\""testcode\"",1,16,\""bar\""]\n"" +
                   ""[\""testcode\"",1,21]\n"" +
                   ""[\""testcode\"",5,0]\n"" +
                   ""[\""testcode\"",5,0,\""foo\""]\n"" +
                   ""[\""testcode\"",5,6,\""foo\""]\n"" +
                   ""[\""testcode\"",5,12,\""bar\""]\n"" +
                   ""[\""testcode\"",5,18,\""foo\""]\n"" +
                   ""[\""testcode\"",6,0]\n"" +
                   ""[\""testcode\"",6,7,\""foo\""]\n"");
  }",junit.framework.ComparisonFailure: expected:<...ng definitions. **/
Closure_148,/222043010/omniapr/defects4j/Closure_148_buggy/test/com/google/javascript/jscomp/SourceMapTest.java,testGoldenOutput3,"  public void testGoldenOutput3() throws Exception {
    checkSourceMap(""c:\\myfile.js"",
                   ""foo;"",

                   ""/** Begin line maps. **/{ \""file\"" : \""testcode\"", "" +
                   ""\""count\"": 1 }\n"" +

                   ""[0,0,0]\n"" +

                   ""/** Begin file information. **/\n"" +
                   ""[]\n"" +
                   ""/** Begin mapping definitions. **/\n"" +
                   ""[\""c:\\\\myfile.js\"",1,0,\""foo\""]\n"");
  }",junit.framework.ComparisonFailure: expected:<...ng definitions. **/
Closure_148,/222043010/omniapr/defects4j/Closure_148_buggy/test/com/google/javascript/jscomp/SourceMapTest.java,testGoldenOutput4,"  public void testGoldenOutput4() throws Exception {
    checkSourceMap(""c:\\myfile.js"",
                   ""foo;   boo;   goo;"",

                   ""/** Begin line maps. **/"" +
                   ""{ \""file\"" : \""testcode\"", \""count\"": 1 }\n"" +
                   ""[0,0,0,1,1,1,1,2,2,2,2]\n"" +

                   ""/** Begin file information. **/\n"" +
                   ""[]\n"" +

                   ""/** Begin mapping definitions. **/\n"" +
                   ""[\""c:\\\\myfile.js\"",1,0,\""foo\""]\n"" +
                   ""[\""c:\\\\myfile.js\"",1,7,\""boo\""]\n"" +
                   ""[\""c:\\\\myfile.js\"",1,14,\""goo\""]\n"");
  }",junit.framework.ComparisonFailure: expected:<...ng definitions. **/
Closure_149,/222043010/omniapr/defects4j/Closure_149_buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java,testCharSetExpansion,"  public void testCharSetExpansion() {
    testSame("""");
    assertEquals(""US-ASCII"", lastCompiler.getOptions().outputCharset);
    args.add(""--charset=UTF-8"");
    testSame("""");
    assertEquals(""UTF-8"", lastCompiler.getOptions().outputCharset);
  }",junit.framework.AssertionFailedError: expected:<US-ASCII> but was:<null>
Closure_150,/222043010/omniapr/defects4j/Closure_150_buggy/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,testNamespacedFunctionStubLocal,"  public void testNamespacedFunctionStubLocal() {
    testSame(
        ""(function() {"" +
        ""var goog = {};"" +
        ""/** @param {number} x */ goog.foo;"" +
        ""});"");

    ObjectType goog = (ObjectType) findNameType(""goog"", lastLocalScope);
    assertTrue(goog.hasProperty(""foo""));
    assertEquals(""function (number): ?"",
        goog.getPropertyType(""foo"").toString());
    assertTrue(goog.isPropertyTypeDeclared(""foo""));

    assertEquals(lastLocalScope.getVar(""goog.foo"").getType(),
        goog.getPropertyType(""foo""));
  }",junit.framework.AssertionFailedError
Closure_150,/222043010/omniapr/defects4j/Closure_150_buggy/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java,testCollectedFunctionStubLocal,"  public void testCollectedFunctionStubLocal() {
    testSame(
        ""(function() {"" +
        ""/** @constructor */ function f() { "" +
        ""  /** @return {number} */ this.foo;"" +
        ""}"" +
        ""var x = new f();"" +
        ""});"");
    ObjectType x = (ObjectType) findNameType(""x"", lastLocalScope);
    assertEquals(""f"", x.toString());
    assertTrue(x.hasProperty(""foo""));
    assertEquals(""function (this:f): number"",
        x.getPropertyType(""foo"").toString());
    assertFalse(x.isPropertyTypeInferred(""foo""));
  }",junit.framework.AssertionFailedError
Closure_151,/222043010/omniapr/defects4j/Closure_151_buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java,testVersionFlag,"  public void testVersionFlag() {
    args.add(""--version"");
    testSame("""");
    assertEquals(
        0,
        new String(errReader.toByteArray()).indexOf(
            ""Closure Compiler (http://code.google.com/p/closure/compiler)\n"" +
            ""Version: HEAD\n"" +
            ""Built on:""));
  }",junit.framework.AssertionFailedError
Closure_152,/222043010/omniapr/defects4j/Closure_152_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testBackwardsTypedefUse1,"  public void testBackwardsTypedefUse1() throws Exception {
    testTypes(
        ""/** @this {MyTypedef} */ function f() {}"" +
        ""/** @typedef {string} */ var MyTypedef;"",
        ""@this type of a function must be an object\n"" +
        ""Actual type: string"");
  }",java.lang.ClassCastException: com.google.javascript.rhino.jstype.StringType cannot be cast to com.google.javascript.rhino.jstype.ObjectType
Closure_152,/222043010/omniapr/defects4j/Closure_152_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testBackwardsTypedefUse2,"  public void testBackwardsTypedefUse2() throws Exception {
    testTypes(
        ""/** @this {MyTypedef} */ function f() {}"" +
        ""/** @typedef {!(Date|Array)} */ var MyTypedef;"");
  }",java.lang.ClassCastException: com.google.javascript.rhino.jstype.StringType cannot be cast to com.google.javascript.rhino.jstype.ObjectType
Closure_152,/222043010/omniapr/defects4j/Closure_152_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testBackwardsTypedefUse3,"  public void testBackwardsTypedefUse3() throws Exception {
    testTypes(
        ""/** @this {MyTypedef} */ function f() {}"" +
        ""/** @typedef {(Date|Array)} */ var MyTypedef;"",
        ""@this type of a function must be an object\n"" +
        ""Actual type: (Array|Date|null)"");
  }",java.lang.ClassCastException: com.google.javascript.rhino.jstype.StringType cannot be cast to com.google.javascript.rhino.jstype.ObjectType
Closure_153,/222043010/omniapr/defects4j/Closure_153_buggy/test/com/google/javascript/jscomp/NormalizeTest.java,testDuplicateVarInExterns,"  public void testDuplicateVarInExterns() {
    test(""var extern;"",
         ""/** @suppress {duplicate} */ var extern = 3;"", ""var extern = 3;"",
         null, null);
  }",junit.framework.AssertionFailedError: 
Closure_153,/222043010/omniapr/defects4j/Closure_153_buggy/test/com/google/javascript/jscomp/NormalizeTest.java,testMakeLocalNamesUnique,"  public void testMakeLocalNamesUnique() {
    if (!Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
      return;
    }

    // Verify global names are untouched.
    testSame(""var a;"");

    // Verify global names are untouched.
    testSame(""a;"");

    // Local names are made unique.
    test(""var a;function foo(a){var b;a}"",
         ""var a;function foo(a$$1){var b;a$$1}"");
    test(""var a;function foo(){var b;a}function boo(){var b;a}"",
         ""var a;function foo(){var b;a}function boo(){var b$$1;a}"");
    test(""function foo(a){var b}"" +
         ""function boo(a){var b}"",
         ""function foo(a){var b}"" +
         ""function boo(a$$1){var b$$1}"");

    // Verify function expressions are renamed.
    test(""var a = function foo(){foo()};var b = function foo(){foo()};"",
         ""var a = function foo(){foo()};var b = function foo$$1(){foo$$1()};"");

    // Verify catch exceptions names are made unique
    test(""try { } catch(e) {e;}"",
         ""try { } catch(e) {e;}"");
    test(""try { } catch(e) {e;}; try { } catch(e) {e;}"",
         ""try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}"");
    test(""try { } catch(e) {e; try { } catch(e) {e;}};"",
         ""try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; "");

    // Verify the 1st global redefinition of extern definition is not removed.
    test(""/** @suppress {duplicate} */\nvar window;"", ""var window;"");

    // Verify the 2nd global redefinition of extern definition is removed.
    test(""/** @suppress {duplicate} */\nvar window;"" +
         ""/** @suppress {duplicate} */\nvar window;"", ""var window;"");

    // Verify local masking extern made unique.
    test(""function f() {var window}"",
         ""function f() {var window$$1}"");
  }",junit.framework.AssertionFailedError: 
Closure_154,/222043010/omniapr/defects4j/Closure_154_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testInterfaceInheritanceCheck12,"  public void testInterfaceInheritanceCheck12() throws Exception {
    testTypes(
        ""/** @interface */ function I() {};\n"" +
        ""/** @type {string} */ I.prototype.foobar;\n"" +
        ""/** \n * @constructor \n * @implements {I} */\n"" +
        ""function C() {\n"" +
        ""/** \n * @type {number} */ this.foobar = 2;};\n"" +
        ""/** @type {I} */ \n var test = new C(); alert(test.foobar);"",
        ""mismatch of the foobar property type and the type of the property"" +
        "" it overrides from interface I\n"" +
        ""original: string\n"" +
        ""override: number"");
  }",junit.framework.AssertionFailedError: expected a warning
Closure_155,/222043010/omniapr/defects4j/Closure_155_buggy/test/com/google/javascript/jscomp/InlineVariablesTest.java,testArgumentsModifiedInInnerFunction,"  public void testArgumentsModifiedInInnerFunction() {
    test(
      ""function g(callback) {\n"" +
      ""  var f = callback;\n"" +
      ""  f.apply(this, arguments);\n"" +
      ""  function inner(callback) {"" +
      ""    var x = callback;\n"" +
      ""    arguments[0] = this;\n"" +
      ""    x.apply(this);\n"" +
      ""  }"" +
      ""}"",
      ""function g(callback) {\n"" +
      ""  callback.apply(this, arguments);\n"" +
      ""  function inner(callback) {"" +
      ""    var x = callback;\n"" +
      ""    arguments[0] = this;\n"" +
      ""    x.apply(this);\n"" +
      ""  }"" +
      ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_155,/222043010/omniapr/defects4j/Closure_155_buggy/test/com/google/javascript/jscomp/InlineVariablesTest.java,testArgumentsModifiedInOuterFunction,"  public void testArgumentsModifiedInOuterFunction() {
    test(
      ""function g(callback) {\n"" +
      ""  var f = callback;\n"" +
      ""  arguments[0] = this;\n"" +
      ""  f.apply(this, arguments);\n"" +
      ""  function inner(callback) {"" +
      ""    var x = callback;\n"" +
      ""    x.apply(this);\n"" +
      ""  }"" +
      ""}"",
      ""function g(callback) {\n"" +
      ""  var f = callback;\n"" +
      ""  arguments[0] = this;\n"" +
      ""  f.apply(this, arguments);\n"" +
      ""  function inner(callback) {"" +
      ""    callback.apply(this);\n"" +
      ""  }"" +
      ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_155,/222043010/omniapr/defects4j/Closure_155_buggy/test/com/google/javascript/jscomp/InlineVariablesTest.java,testIssue378ModifiedArguments1,"  public void testIssue378ModifiedArguments1() {
    testSame(
        ""function g(callback) {\n"" +
        ""  var f = callback;\n"" +
        ""  arguments[0] = this;\n"" +
        ""  f.apply(this, arguments);\n"" +
        ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_155,/222043010/omniapr/defects4j/Closure_155_buggy/test/com/google/javascript/jscomp/InlineVariablesTest.java,testIssue378ModifiedArguments2,"  public void testIssue378ModifiedArguments2() {
    testSame(
        ""function g(callback) {\n"" +
        ""  /** @const */\n"" +
        ""  var f = callback;\n"" +
        ""  arguments[0] = this;\n"" +
        ""  f.apply(this, arguments);\n"" +
        ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_155,/222043010/omniapr/defects4j/Closure_155_buggy/test/com/google/javascript/jscomp/InlineVariablesTest.java,testIssue378EscapedArguments1,"  public void testIssue378EscapedArguments1() {
    testSame(
        ""function g(callback) {\n"" +
        ""  var f = callback;\n"" +
        ""  h(arguments,this);\n"" +
        ""  f.apply(this, arguments);\n"" +
        ""}\n"" +
        ""function h(a,b) {\n"" +
        ""  a[0] = b;"" +
        ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_155,/222043010/omniapr/defects4j/Closure_155_buggy/test/com/google/javascript/jscomp/InlineVariablesTest.java,testIssue378EscapedArguments2,"  public void testIssue378EscapedArguments2() {
    testSame(
        ""function g(callback) {\n"" +
        ""  /** @const */\n"" +
        ""  var f = callback;\n"" +
        ""  h(arguments,this);\n"" +
        ""  f.apply(this);\n"" +
        ""}\n"" +
        ""function h(a,b) {\n"" +
        ""  a[0] = b;"" +
        ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_155,/222043010/omniapr/defects4j/Closure_155_buggy/test/com/google/javascript/jscomp/InlineVariablesTest.java,testIssue378EscapedArguments4,"  public void testIssue378EscapedArguments4() {
    testSame(
        ""function g(callback) {\n"" +
        ""  var f = callback;\n"" +
        ""  h(arguments[0],this);\n"" +
        ""  f.apply(this, arguments);\n"" +
        ""}\n"" +
        ""function h(a,b) {\n"" +
        ""  a[0] = b;"" +
        ""}"");
  }",junit.framework.AssertionFailedError: 
Closure_156,/222043010/omniapr/defects4j/Closure_156_buggy/test/com/google/javascript/jscomp/CollapsePropertiesTest.java,testAliasedTopLevelEnum,"  public void testAliasedTopLevelEnum() {
    test(
        ""function alias() {}"" +
        ""var dojo = {};"" +
        ""dojo.gfx = {};"" +
        ""dojo.declare = function() {};"" +
        ""/** @enum {number} */"" +
        ""dojo.gfx.Shape = {SQUARE: 2};"" +
        ""dojo.gfx.Shape = dojo.declare('dojo.gfx.Shape');"" +
        ""alias(dojo);"" +
        ""alias(dojo.gfx.Shape.SQUARE);"",
        ""function alias() {}"" +
        ""var dojo = {};"" +
        ""dojo.gfx = {};"" +
        ""dojo.declare = function() {};"" +
        ""/** @constructor */"" +
        ""var dojo$gfx$Shape = {SQUARE: 2};"" +
        ""dojo$gfx$Shape = dojo.declare('dojo.gfx.Shape');"" +
        ""alias(dojo);"" +
        ""alias(dojo$gfx$Shape.SQUARE);"",
        null,
        CollapseProperties.UNSAFE_NAMESPACE_WARNING);
  }",junit.framework.AssertionFailedError: 
Closure_156,/222043010/omniapr/defects4j/Closure_156_buggy/test/com/google/javascript/jscomp/CollapsePropertiesTest.java,testIssue389,"  public void testIssue389() {
    test(
        ""function alias() {}"" +
        ""var dojo = {};"" +
        ""dojo.gfx = {};"" +
        ""dojo.declare = function() {};"" +
        ""/** @constructor */"" +
        ""dojo.gfx.Shape = function() {};"" +
        ""dojo.gfx.Shape = dojo.declare('dojo.gfx.Shape');"" +
        ""alias(dojo);"",
        ""function alias() {}"" +
        ""var dojo = {};"" +
        ""dojo.gfx = {};"" +
        ""dojo.declare = function() {};"" +
        ""/** @constructor */"" +
        ""var dojo$gfx$Shape = function() {};"" +
        ""dojo$gfx$Shape = dojo.declare('dojo.gfx.Shape');"" +
        ""alias(dojo);"",
        null,
        CollapseProperties.UNSAFE_NAMESPACE_WARNING);
  }",junit.framework.AssertionFailedError: 
Closure_157,/222043010/omniapr/defects4j/Closure_157_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testObjectLit2,"  public void testObjectLit2() {
    assertPrint(""var x={1:1}"", ""var x={1:1}"");
    assertPrint(""var x={'1':1}"", ""var x={1:1}"");
    assertPrint(""var x={'1.0':1}"", ""var x={\""1.0\"":1}"");
    assertPrint(""var x={1.5:1}"", ""var x={\""1.5\"":1}"");

  }","junit.framework.ComparisonFailure: expected:<var x={[1]:1}> but was:<var x={[""1""]:1}>"
Closure_157,/222043010/omniapr/defects4j/Closure_157_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testObjectLit3,"  public void testObjectLit3() {
    assertPrint(""var x={3E9:1}"",
                ""var x={3E9:1}"");
    assertPrint(""var x={'3000000000':1}"", // More than 31 bits
                ""var x={3E9:1}"");
    assertPrint(""var x={'3000000001':1}"",
                ""var x={3000000001:1}"");
    assertPrint(""var x={'6000000001':1}"",  // More than 32 bits
                ""var x={6000000001:1}"");
    assertPrint(""var x={\""12345678901234567\"":1}"",  // More than 53 bits
                ""var x={\""12345678901234567\"":1}"");
  }","junit.framework.ComparisonFailure: expected:<var x={[1]:1}> but was:<var x={[""1""]:1}>"
Closure_157,/222043010/omniapr/defects4j/Closure_157_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testGetter,"  public void testGetter() {
    assertPrint(""var x = {}"", ""var x={}"");
    assertPrint(""var x = {get a() {return 1}}"", ""var x={get a(){return 1}}"");
    assertPrint(
      ""var x = {get a() {}, get b(){}}"",
      ""var x={get a(){},get b(){}}"");

    assertPrint(
      ""var x = {get 'a'() {return 1}}"",
      ""var x={get \""a\""(){return 1}}"");

    assertPrint(
      ""var x = {get 1() {return 1}}"",
      ""var x={get 1(){return 1}}"");

    assertPrint(
      ""var x = {get \""()\""() {return 1}}"",
      ""var x={get \""()\""(){return 1}}"");
  }","junit.framework.ComparisonFailure: expected:<var x={[1]:1}> but was:<var x={[""1""]:1}>"
Closure_157,/222043010/omniapr/defects4j/Closure_157_buggy/test/com/google/javascript/jscomp/CodePrinterTest.java,testSetter,"  public void testSetter() {
    assertPrint(""var x = {}"", ""var x={}"");
    assertPrint(
       ""var x = {set a(y) {return 1}}"",
       ""var x={set a(y){return 1}}"");

    assertPrint(
      ""var x = {get 'a'() {return 1}}"",
      ""var x={get \""a\""(){return 1}}"");

    assertPrint(
      ""var x = {set 1(y) {return 1}}"",
      ""var x={set 1(y){return 1}}"");

    assertPrint(
      ""var x = {set \""(x)\""(y) {return 1}}"",
      ""var x={set \""(x)\""(y){return 1}}"");
  }","junit.framework.ComparisonFailure: expected:<var x={[1]:1}> but was:<var x={[""1""]:1}>"
Closure_157,/222043010/omniapr/defects4j/Closure_157_buggy/test/com/google/javascript/jscomp/FunctionNamesTest.java,testFunctionsNamesAndIds,"  public void testFunctionsNamesAndIds() {
    final String jsSource =
        ""goog.widget = function(str) {\n"" +
        ""  this.member_fn = function() {};\n"" +
        ""  local_fn = function() {};\n"" +
        ""  (function(a){})(1);\n"" +
        ""}\n"" +
        ""function foo() {\n"" +
        ""  function bar() {}\n"" +
        ""}\n"" +
        ""literal = {f1 : function(){}, f2 : function(){}};\n"" +
        ""goog.array.map(arr, function named(){});\n"" +
        ""goog.array.map(arr, function(){});\n"" +
        ""named_twice = function quax(){};\n"" +
        ""recliteral = {l1 : {l2 : function(){}}};\n"" +
        ""namedliteral = {n1 : function litnamed(){}};\n"" +
        ""namedrecliteral = {n1 : {n2 : function reclitnamed(){}}};\n"" +
        ""numliteral = {1 : function(){}};\n"" +
        ""recnumliteral = {1 : {a : function(){}}};\n"";

    testSame(jsSource);

    final Map<Integer, String> idNameMap = Maps.newLinkedHashMap();
    int count = 0;
    for (Node f : functionNames.getFunctionNodeList()) {
      int id = functionNames.getFunctionId(f);
      String name = functionNames.getFunctionName(f);
      idNameMap.put(id, name);
      count++;
    }

    assertEquals(""Unexpected number of functions"", 16, count);

    final Map<Integer, String> expectedMap = Maps.newLinkedHashMap();

    expectedMap.put(0, ""goog.widget.member_fn"");
    expectedMap.put(1, ""goog.widget::local_fn"");
    expectedMap.put(2, ""goog.widget::<anonymous>"");
    expectedMap.put(3, ""goog.widget"");
    expectedMap.put(4, ""foo::bar"");
    expectedMap.put(5, ""foo"");
    expectedMap.put(6, ""literal.f1"");
    expectedMap.put(7, ""literal.f2"");
    expectedMap.put(8, ""named"");
    expectedMap.put(9, ""<anonymous>"");
    expectedMap.put(10, ""quax"");
    expectedMap.put(11, ""recliteral.l1.l2"");
    expectedMap.put(12, ""litnamed"");
    expectedMap.put(13, ""reclitnamed"");
    expectedMap.put(14, ""numliteral.__2"");
    expectedMap.put(15, ""recnumliteral.__3.a"");
    assertEquals(""Function id/name mismatch"",
                 expectedMap, idNameMap);
  }","junit.framework.AssertionFailedError: Function id/name mismatch expected:<{0=goog.widget.member_fn, 1=goog.widget::local_fn, 2=goog.widget::<anonymous>, 3=goog.widget, 4=foo::bar, 5=foo, 6=literal.f1, 7=literal.f2, 8=named, 9=<anonymous>, 10=quax, 11=recliteral.l1.l2, 12=litnamed, 13=reclitnamed, 14=numliteral.__2, 15=recnumliteral.__3.a}> but was:<{0=goog.widget.member_fn, 1=goog.widget::local_fn, 2=goog.widget::<anonymous>, 3=goog.widget, 4=foo::bar, 5=foo, 6=literal.f1, 7=literal.f2, 8=named, 9=<anonymous>, 10=quax, 11=recliteral.l1.l2, 12=litnamed, 13=reclitnamed, 14=<anonymous>, 15=<anonymous>}>"
Closure_157,/222043010/omniapr/defects4j/Closure_157_buggy/test/com/google/javascript/jscomp/RenamePropertiesTest.java,testPrototypePropertiesAsObjLitKeys2,"  public void testPrototypePropertiesAsObjLitKeys2() {
    testSame(""Bar.prototype = {get 2(){}}; bar[2];"");

    testSame(""Bar.prototype = {get 'a'(){}}; bar['a'];"");

    test(""Bar.prototype = {get getA(){}}; bar.getA;"",
         ""Bar.prototype = {get a(){}}; bar.a;"");
  }",java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Closure_157,/222043010/omniapr/defects4j/Closure_157_buggy/test/com/google/javascript/jscomp/RenamePropertiesTest.java,testPrototypePropertiesAsObjLitKeys3,"  public void testPrototypePropertiesAsObjLitKeys3() {
    testSame(""Bar.prototype = {set 2(x){}}; bar[2];"");

    testSame(""Bar.prototype = {set 'a'(x){}}; bar['a'];"");

    test(""Bar.prototype = {set getA(x){}}; bar.getA;"",
         ""Bar.prototype = {set a(x){}}; bar.a;"");
  }",java.lang.RuntimeException: INTERNAL COMPILER ERROR.
Closure_157,/222043010/omniapr/defects4j/Closure_157_buggy/test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java,testDefineNumber,"  public void testDefineNumber() throws Exception {
    checkDefinitionsInJs(
        ""var a = 1"",
        ImmutableSet.of(""DEF NAME a -> NUMBER""));

    checkDefinitionsInJs(
        ""a = 1"",
        ImmutableSet.of(""DEF NAME a -> NUMBER""));

    checkDefinitionsInJs(
        ""a.b = 1"",
        ImmutableSet.of(""DEF GETPROP a.b -> NUMBER""));

    // getelem expressions are invisible to the definition gatherer.
    checkDefinitionsInJs(
        ""a[\""b\""] = 1"",
        ImmutableSet.<String>of());

    checkDefinitionsInJs(
        ""f().b = 1"",
        ImmutableSet.of(""DEF GETPROP null -> NUMBER""));

    checkDefinitionsInJs(
        ""({a : 1}); o.a"",
        ImmutableSet.of(""DEF STRING null -> NUMBER"",
                        ""USE GETPROP o.a -> [NUMBER]""));

    // TODO(johnlenz): Fix this.
    checkDefinitionsInJs(
      ""({'a' : 1}); o['a']"",
      ImmutableSet.<String>of(""DEF STRING null -> NUMBER""));

    checkDefinitionsInJs(
      ""({1 : 1}); o[1]"",
      ImmutableSet.<String>of(""DEF STRING null -> NUMBER""));

    checkDefinitionsInJs(
        ""var a = {b : 1}; a.b"",
        ImmutableSet.of(""DEF NAME a -> <null>"",
                        ""DEF STRING null -> NUMBER"",
                        ""USE NAME a -> [<null>]"",
                        ""USE GETPROP a.b -> [NUMBER]""));
  }",junit.framework.AssertionFailedError: expected:<[DEF STRING null -> NUMBER]> but was:<[]>
Closure_157,/222043010/omniapr/defects4j/Closure_157_buggy/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,testObjectLiteral6,"  public void testObjectLiteral6() {
    testNewParser(""({1: true})"",
      ""SCRIPT 0\n"" +
      ""    EXPR_RESULT 0\n"" +
      ""        OBJECTLIT 0 [parenthesized: true]\n"" +
      ""            STRING 1 0 [quoted: 1]\n"" +
      ""                TRUE 0\n"");
  }",junit.framework.ComparisonFailure: expected:<...: true]
Closure_157,/222043010/omniapr/defects4j/Closure_157_buggy/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,testObjectLiteral7,"  public void testObjectLiteral7() {
    mode = LanguageMode.ECMASCRIPT5;

    testNewParser(""({get 1() {}})"",
      ""SCRIPT 0\n"" +
      ""    EXPR_RESULT 0\n"" +
      ""        OBJECTLIT 0 [parenthesized: true]\n"" +
      ""            GET 1 0 [quoted: 1]\n"" +
      ""                FUNCTION  0\n"" +
      ""                    NAME  0\n"" +
      ""                    LP 0\n"" +
      ""                    BLOCK 0\n"");
  }",junit.framework.ComparisonFailure: expected:<...: true]
Closure_157,/222043010/omniapr/defects4j/Closure_157_buggy/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java,testObjectLiteral8,"  public void testObjectLiteral8() {
    mode = LanguageMode.ECMASCRIPT5;

    testNewParser(""({set 1(a) {}})"",
      ""SCRIPT 0\n"" +
      ""    EXPR_RESULT 0\n"" +
      ""        OBJECTLIT 0 [parenthesized: true]\n"" +
      ""            SET 1 0 [quoted: 1]\n"" +
      ""                FUNCTION  0\n"" +
      ""                    NAME  0\n"" +
      ""                    LP 0\n"" +
      ""                        NAME a 0\n"" +
      ""                    BLOCK 0\n"");
  }",junit.framework.ComparisonFailure: expected:<...: true]
Closure_157,/222043010/omniapr/defects4j/Closure_157_buggy/test/com/google/javascript/jscomp/parsing/ParserTest.java,testObjectLiteralDoc1,"  public void testObjectLiteralDoc1() {
    Node n = parse(""var x = {/** @type {number} */ 1: 2};"");

    Node objectLit = n.getFirstChild().getFirstChild().getFirstChild();
    assertEquals(Token.OBJECTLIT, objectLit.getType());

    Node number = objectLit.getFirstChild();
    assertEquals(Token.STRING, number.getType());
    assertNotNull(number.getJSDocInfo());
  }",junit.framework.AssertionFailedError: expected:<40> but was:<39>
Closure_158,/222043010/omniapr/defects4j/Closure_158_buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java,testWarningGuardOrdering2,"  public void testWarningGuardOrdering2() {
    args.add(""--jscomp_off=globalThis"");
    args.add(""--jscomp_error=globalThis"");
    test(""function f() { this.a = 3; }"", CheckGlobalThis.GLOBAL_THIS);
  }",junit.framework.AssertionFailedError: Expected exactly one warning or error Errors: 
Closure_158,/222043010/omniapr/defects4j/Closure_158_buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java,testWarningGuardOrdering4,"  public void testWarningGuardOrdering4() {
    args.add(""--jscomp_off=globalThis"");
    args.add(""--jscomp_warning=globalThis"");
    test(""function f() { this.a = 3; }"", CheckGlobalThis.GLOBAL_THIS);
  }",junit.framework.AssertionFailedError: Expected exactly one warning or error Errors: 
Closure_159,/222043010/omniapr/defects4j/Closure_159_buggy/test/com/google/javascript/jscomp/InlineFunctionsTest.java,testIssue423,"  public void testIssue423() {
    test(
        ""(function($) {\n"" +
        ""  $.fn.multicheck = function(options) {\n"" +
        ""    initialize.call(this, options);\n"" +
        ""  };\n"" +
        ""\n"" +
        ""  function initialize(options) {\n"" +
        ""    options.checkboxes = $(this).siblings(':checkbox');\n"" +
        ""    preload_check_all.call(this);\n"" +
        ""  }\n"" +
        ""\n"" +
        ""  function preload_check_all() {\n"" +
        ""    $(this).data('checkboxes');\n"" +
        ""  }\n"" +
        ""})(jQuery)"",
        ""(function($){"" +
        ""  $.fn.multicheck=function(options$$1){"" +
        ""    {"" +
        ""     options$$1.checkboxes=$(this).siblings(\"":checkbox\"");"" +
        ""     {"" +
        ""       $(this).data(\""checkboxes\"")"" +
        ""     }"" +
        ""    }"" +
        ""  }"" +
        ""})(jQuery)"");
  }",junit.framework.AssertionFailedError: 
Closure_160,/222043010/omniapr/defects4j/Closure_160_buggy/test/com/google/javascript/jscomp/CommandLineRunnerTest.java,testCheckSymbolsOverrideForQuiet,"  public void testCheckSymbolsOverrideForQuiet() {
    args.add(""--warning_level=QUIET"");
    args.add(""--jscomp_error=undefinedVars"");
    test(""x = 3;"", VarCheck.UNDEFINED_VAR_ERROR);
  }",junit.framework.AssertionFailedError: Expected exactly one warning or error Errors: 
Closure_161,/222043010/omniapr/defects4j/Closure_161_buggy/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java,testIssue522,"  public void testIssue522() {
    testSame(""[][1] = 1;"");
  }",junit.framework.AssertionFailedError: Unexpected error(s): JSC_INDEX_OUT_OF_BOUNDS_ERROR. Array index out of bounds: NUMBER 1.0 1 [source_file: testcode] at testcode line 1 : 3 expected:<0> but was:<1>
Closure_162,/222043010/omniapr/defects4j/Closure_162_buggy/test/com/google/javascript/jscomp/ScopedAliasesTest.java,testForwardJsDoc,"  public void testForwardJsDoc() {
    testScoped(
        ""/**\n"" +
        "" * @constructor\n"" +
        "" */\n"" +
        ""foo.Foo = function() {};"" +
        ""/** @param {Foo.Bar} x */ function actual(x) {3}"" +
        ""var Foo = foo.Foo;"" +
        ""/** @constructor */ Foo.Bar = function() {};"" +
        ""/** @param {foo.Foo.Bar} x */ function expected(x) {}"",

        ""/**\n"" +
        "" * @constructor\n"" +
        "" */\n"" +
        ""foo.Foo = function() {};"" +
        ""/** @param {foo.Foo.Bar} x */ function actual(x) {3}"" +
        ""/** @constructor */ foo.Foo.Bar = function() {};"" +
        ""/** @param {foo.Foo.Bar} x */ function expected(x) {}"");
    verifyTypes();
  }",junit.framework.AssertionFailedError: expected:<[STRING foo.Foo.Bar 4 [source_file: testcode]
Closure_163,/222043010/omniapr/defects4j/Closure_163_buggy/test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,testIssue600b,"  public void testIssue600b() {
    testSame(
        createModuleChain(
            ""var jQuery1 = (function() {\n"" +
            ""  var jQuery2 = function() {};\n"" +
            ""  jQuery2.prototype = {\n"" +
            ""    size: function() {\n"" +
            ""      return 1;\n"" +
            ""    }\n"" +
            ""  };\n"" +
            ""  return jQuery2;\n"" +
            ""})();\n"",

            ""(function() {"" +
            ""  var div = jQuery1('div');"" +
            ""  div.size();"" +
            ""})();""));
  }",junit.framework.AssertionFailedError: 
Closure_163,/222043010/omniapr/defects4j/Closure_163_buggy/test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,testIssue600e,"  public void testIssue600e() {
    testSame(
        createModuleChain(
            ""var jQuery2 = function() {};\n"" +
            ""(function() {"" +
            ""  var theLoneliestNumber = 1;\n"" +
            ""  jQuery2.prototype = {\n"" +
            ""    size: function() {\n"" +
            ""      return theLoneliestNumber;\n"" +
            ""    }\n"" +
            ""  };\n"" +
            ""})();"",

            ""(function() {"" +
            ""  var div = jQuery2('div');"" +
            ""  div.size();"" +
            ""})();""));
  }",junit.framework.AssertionFailedError: 
Closure_163,/222043010/omniapr/defects4j/Closure_163_buggy/test/com/google/javascript/jscomp/CrossModuleMethodMotionTest.java,testIssue600,"  public void testIssue600() {
    testSame(
        createModuleChain(
            ""var jQuery1 = (function() {\n"" +
            ""  var jQuery2 = function() {};\n"" +
            ""  var theLoneliestNumber = 1;\n"" +
            ""  jQuery2.prototype = {\n"" +
            ""    size: function() {\n"" +
            ""      return theLoneliestNumber;\n"" +
            ""    }\n"" +
            ""  };\n"" +
            ""  return jQuery2;\n"" +
            ""})();\n"",

            ""(function() {"" +
            ""  var div = jQuery1('div');"" +
            ""  div.size();"" +
            ""})();""));
  }",junit.framework.AssertionFailedError: 
Closure_164,/222043010/omniapr/defects4j/Closure_164_buggy/test/com/google/javascript/jscomp/LooseTypeCheckTest.java,testMethodInference7,"  public void testMethodInference7() throws Exception {
    testTypes(
        ""/** @constructor */ function F() {}"" +
        ""F.prototype.foo = function() { };"" +
        ""/** @constructor \n * @extends {F} */ "" +
        ""function G() {}"" +
        ""/** @override */ G.prototype.foo = function(x, y) { };"",
        ""mismatch of the foo property type and the type of the property "" +
        ""it overrides from superclass F\n"" +
        ""original: function (this:F): undefined\n"" +
        ""override: function (this:G, ?, ?): undefined"");
  }",junit.framework.AssertionFailedError: expected a warning
Closure_164,/222043010/omniapr/defects4j/Closure_164_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testMethodInference7,"  public void testMethodInference7() throws Exception {
    testTypes(
        ""/** @constructor */ function F() {}"" +
        ""F.prototype.foo = function() { };"" +
        ""/** @constructor \n * @extends {F} */ "" +
        ""function G() {}"" +
        ""/** @override */ G.prototype.foo = function(x, y) { };"",
        ""mismatch of the foo property type and the type of the property "" +
        ""it overrides from superclass F\n"" +
        ""original: function (this:F): undefined\n"" +
        ""override: function (this:G, ?, ?): undefined"");
  }",junit.framework.AssertionFailedError: expected a warning
Closure_164,/222043010/omniapr/defects4j/Closure_164_buggy/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java,testSupAndInfOfReturnTypesWithNumOfParams,"  public void testSupAndInfOfReturnTypesWithNumOfParams() {
    FunctionType twoNumbers = new FunctionBuilder(registry)
        .withParamsNode(registry.createParameters(NUMBER_TYPE, NUMBER_TYPE))
        .withReturnType(BOOLEAN_TYPE).build();
    FunctionType oneNumber = new FunctionBuilder(registry)
        .withParamsNode(registry.createParameters(NUMBER_TYPE))
        .withReturnType(BOOLEAN_TYPE).build();

    assertLeastSupertype(
        ""function (number, number): boolean"", twoNumbers, oneNumber);
    assertGreatestSubtype(
        ""function (number): boolean"", twoNumbers, oneNumber);
  }","junit.framework.ComparisonFailure: expected:<[function (number, number): boolea]n> but was:<[Functio]n>"
Closure_165,/222043010/omniapr/defects4j/Closure_165_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testIssue725,"  public void testIssue725() throws Exception {
    testTypes(
        ""/** @typedef {{name: string}} */ var RecordType1;"" +
        ""/** @typedef {{name2: string}} */ var RecordType2;"" +
        ""/** @param {RecordType1} rec */ function f(rec) {"" +
        ""  alert(rec.name2);"" +
        ""}"",
        ""Property name2 never defined on rec"");
  }",junit.framework.AssertionFailedError: expected a warning
Closure_166,/222043010/omniapr/defects4j/Closure_166_buggy/test/com/google/javascript/jscomp/TypeInferenceTest.java,testRecordInference,"  public void testRecordInference() {
    inFunction(
        ""/** @param {{a: (boolean|undefined)}|{b: (string|undefined)}} x */"" +
        ""function f(x) {}"" +
        ""var out = {};"" +
        ""f(out);"");
    assertEquals(""{a: (boolean|undefined), b: (string|undefined)}"",
        getType(""out"").toString());
  }","junit.framework.ComparisonFailure: expected:<{[a: (boolean|undefined), b: (string|undefined)]}> but was:<{[]}>"
Closure_166,/222043010/omniapr/defects4j/Closure_166_buggy/test/com/google/javascript/jscomp/TypeInferenceTest.java,testIssue785,"  public void testIssue785() {
    inFunction(""/** @param {string|{prop: (string|undefined)}} x */"" +
               ""function f(x) {}"" +
               ""var out = {};"" +
               ""f(out);"");
    assertEquals(""{prop: (string|undefined)}"", getType(""out"").toString());
  }","junit.framework.ComparisonFailure: expected:<{[a: (boolean|undefined), b: (string|undefined)]}> but was:<{[]}>"
Closure_167,/222043010/omniapr/defects4j/Closure_167_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testIssue783,"  public void testIssue783() throws Exception {
    testTypes(
        ""/** @constructor */"" +
        ""var Type = function () {"" +
        ""  /** @type {Type} */"" +
        ""  this.me_ = this;"" +
        ""};"" +
        ""Type.prototype.doIt = function() {"" +
        ""  var me = this.me_;"" +
        ""  for (var i = 0; i < me.unknownProp; i++) {}"" +
        ""};"",
        ""Property unknownProp never defined on Type"");
  }",junit.framework.AssertionFailedError: expected a warning
Closure_167,/222043010/omniapr/defects4j/Closure_167_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testMissingProperty20,"  public void testMissingProperty20() throws Exception {
    testTypes(
        ""/** @param {Object} x */"" +
        ""function f(x) { if (x.foo) { } else { x.foo(); } }"",
        ""Property foo never defined on Object"");
  }",junit.framework.AssertionFailedError: expected a warning
Closure_167,/222043010/omniapr/defects4j/Closure_167_buggy/test/com/google/javascript/rhino/jstype/JSTypeTest.java,testRestrictedTypeGivenToBoolean,"      public void testRestrictedTypeGivenToBoolean() {
    // simple cases
    assertTypeEquals(BOOLEAN_TYPE,
        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));
    assertTypeEquals(BOOLEAN_TYPE,
        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));

    assertTypeEquals(NO_TYPE,
        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));
    assertTypeEquals(NULL_TYPE,
        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));

    assertTypeEquals(NUMBER_TYPE,
        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));
    assertTypeEquals(NUMBER_TYPE,
        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));

    assertTypeEquals(STRING_TYPE,
        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));
    assertTypeEquals(STRING_TYPE,
        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));

    assertTypeEquals(STRING_OBJECT_TYPE,
        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));
    assertTypeEquals(NO_TYPE,
        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));

    assertTypeEquals(NO_TYPE,
        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));
    assertTypeEquals(VOID_TYPE,
        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));

    assertTypeEquals(NO_OBJECT_TYPE,
        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));
    assertTypeEquals(NO_TYPE,
        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));

    assertTypeEquals(NO_TYPE,
        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));
    assertTypeEquals(NO_TYPE,
        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));

    assertTypeEquals(ALL_TYPE,
        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));
    assertTypeEquals(ALL_TYPE,
        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));

    assertTypeEquals(CHECKED_UNKNOWN_TYPE,
        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));
    assertTypeEquals(UNKNOWN_TYPE,
        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));

    // unions
    UnionType nullableStringValue =
        (UnionType) createNullableType(STRING_TYPE);
    assertTypeEquals(STRING_TYPE,
        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));
    assertTypeEquals(nullableStringValue,
        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));

    UnionType nullableStringObject =
        (UnionType) createNullableType(STRING_OBJECT_TYPE);
    assertTypeEquals(STRING_OBJECT_TYPE,
        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));
    assertTypeEquals(NULL_TYPE,
        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));
  }",junit.framework.AssertionFailedError: Expected: ??
Closure_168,/222043010/omniapr/defects4j/Closure_168_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testIssue726,"  public void testIssue726() throws Exception {
    testTypes(
        ""/** @constructor */ function Foo() {}"" +
        ""/** @param {number} x */ Foo.prototype.bar = function(x) {};"" +
        ""/** @return {!Function} */ "" +
        ""Foo.prototype.getDeferredBar = function() { "" +
        ""  var self = this;"" +
        ""  return function() {"" +
        ""    self.bar(true);"" +
        ""  };"" +
        ""};"",
        ""actual parameter 1 of Foo.prototype.bar does not match formal parameter\n"" +
        ""found   : boolean\n"" +
        ""required: number"");
  }",junit.framework.AssertionFailedError: expected a warning
Closure_169,/222043010/omniapr/defects4j/Closure_169_buggy/test/com/google/javascript/jscomp/TypeCheckTest.java,testIssue791,"  public void testIssue791() throws Exception {
    testTypes(
        ""/** @param {{func: function()}} obj */"" +
        ""function test1(obj) {}"" +
        ""var fnStruc1 = {};"" +
        ""fnStruc1.func = function() {};"" +
        ""test1(fnStruc1);"");
  }",junit.framework.AssertionFailedError: unexpected warnings(s):
Closure_169,/222043010/omniapr/defects4j/Closure_169_buggy/test/com/google/javascript/rhino/jstype/RecordTypeTest.java,testSubtypeWithUnknowns2,"  public void testSubtypeWithUnknowns2() throws Exception {
    JSType recordA = new RecordTypeBuilder(registry)
        .addProperty(""a"",
            new FunctionBuilder(registry)
            .withReturnType(NUMBER_TYPE)
            .build(),
            null)
        .build();
    JSType recordB = new RecordTypeBuilder(registry)
        .addProperty(""a"",
            new FunctionBuilder(registry)
            .withReturnType(UNKNOWN_TYPE)
            .build(),
            null)
        .build();
    assertTrue(recordA.isSubtype(recordB));
    assertTrue(recordB.isSubtype(recordA));
  }",junit.framework.AssertionFailedError
Closure_170,/222043010/omniapr/defects4j/Closure_170_buggy/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java,testVarAssinInsideHookIssue965,"  public void testVarAssinInsideHookIssue965() {
    noInline(""var i = 0; return 1 ? (i = 5) : 0, i;"");
    noInline(""var i = 0; return (1 ? (i = 5) : 0) ? i : 0;"");
    noInline(""var i = 0; return (1 ? (i = 5) : 0) || i;"");
    noInline(""var i = 0; return (1 ? (i = 5) : 0) * i;"");
  }",junit.framework.AssertionFailedError: 
Codec_2,/222043010/omniapr/defects4j/Codec_2_buggy/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,testBase64EmptyInputStream,"    public void testBase64EmptyInputStream() throws Exception {
        byte[] emptyEncoded = new byte[0];
        byte[] emptyDecoded = new byte[0];
        testByteByByte(emptyEncoded, emptyDecoded, 76, CRLF);
        testByChunk(emptyEncoded, emptyDecoded, 76, CRLF);
    }",junit.framework.AssertionFailedError: EOF expected:<-1> but was:<13>
Codec_2,/222043010/omniapr/defects4j/Codec_2_buggy/src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,testBase64EmptyOutputStream,"    public void testBase64EmptyOutputStream() throws Exception {
        byte[] emptyEncoded = new byte[0];
        byte[] emptyDecoded = new byte[0];
        testByteByByte(emptyEncoded, emptyDecoded, 76, CRLF);
        testByChunk(emptyEncoded, emptyDecoded, 76, CRLF);
    }",junit.framework.AssertionFailedError: Streaming base64 encode
Codec_3,/222043010/omniapr/defects4j/Codec_3_buggy/src/test/org/apache/commons/codec/language/DoubleMetaphone2Test.java,testDoubleMetaphoneAlternate,"    public void testDoubleMetaphoneAlternate() {
        String value = null;
        for (int i = 0; i < TEST_DATA.length; i++) {
            value = TEST_DATA[i][0];
            assertEquals(""Test ["" + i + ""]="" + value, TEST_DATA[i][2], doubleMetaphone.doubleMetaphone(value, true));
        }
    }",junit.framework.ComparisonFailure: Test [19]=Angier expected:<AN[J]R> but was:<AN[K]R>
Codec_4,/222043010/omniapr/defects4j/Codec_4_buggy/src/test/org/apache/commons/codec/binary/Base64Codec13Test.java,testEncoder,"    public void testEncoder() throws EncoderException {
        Encoder enc = new Base64();
        for (int i = 0; i < STRINGS.length; i++) {
            if (STRINGS[i] != null) {
                byte[] base64 = utf8(STRINGS[i]);
                byte[] binary = BYTES[i];
                boolean b = Arrays.equals(base64, (byte[]) enc.encode(binary));
                assertTrue(""Encoder test-"" + i, b);
            }
        }
    }",junit.framework.AssertionFailedError: Encoder test-1
Codec_4,/222043010/omniapr/defects4j/Codec_4_buggy/src/test/org/apache/commons/codec/binary/Base64Codec13Test.java,testBinaryEncoder,"    public void testBinaryEncoder() throws EncoderException {
        BinaryEncoder enc = new Base64();
        for (int i = 0; i < STRINGS.length; i++) {
            if (STRINGS[i] != null) {
                byte[] base64 = utf8(STRINGS[i]);
                byte[] binary = BYTES[i];
                boolean b = Arrays.equals(base64, enc.encode(binary));
                assertTrue(""BinaryEncoder test-"" + i, b);
            }
        }
    }",junit.framework.AssertionFailedError: Encoder test-1
Codec_5,/222043010/omniapr/defects4j/Codec_5_buggy/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,testCodec98NPE,"    public void testCodec98NPE() throws Exception {
        byte[] codec98 = StringUtils.getBytesUtf8(Base64TestData.CODEC_98_NPE);
        ByteArrayInputStream data = new ByteArrayInputStream(codec98);
        Base64InputStream stream = new Base64InputStream(data);

        // This line causes an NPE in commons-codec-1.4.jar:
        byte[] decodedBytes = Base64TestData.streamToBytes(stream, new byte[1024]);

        String decoded = StringUtils.newStringUtf8(decodedBytes);
        assertEquals(
            ""codec-98 NPE Base64InputStream"", Base64TestData.CODEC_98_NPE_DECODED, decoded
        );
    }",java.lang.NullPointerException
Codec_5,/222043010/omniapr/defects4j/Codec_5_buggy/src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java,testCodec98NPE,"    public void testCodec98NPE() throws Exception {
        byte[] codec98 = StringUtils.getBytesUtf8(Base64TestData.CODEC_98_NPE);
        byte[] codec98_1024 = new byte[1024];
        System.arraycopy(codec98, 0, codec98_1024, 0, codec98.length);
        ByteArrayOutputStream data = new ByteArrayOutputStream(1024);
        Base64OutputStream stream = new Base64OutputStream(data, false);
        stream.write(codec98_1024, 0, 1024);
        stream.close();

        byte[] decodedBytes = data.toByteArray();
        String decoded = StringUtils.newStringUtf8(decodedBytes);
        assertEquals(
            ""codec-98 NPE Base64OutputStream"", Base64TestData.CODEC_98_NPE_DECODED, decoded
        );
    }",java.lang.NullPointerException
Codec_6,/222043010/omniapr/defects4j/Codec_6_buggy/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,testCodec101,"    public void testCodec101() throws Exception {
        byte[] codec101 = StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3);
        ByteArrayInputStream bais = new ByteArrayInputStream(codec101);
        Base64InputStream in = new Base64InputStream(bais);
        byte[] result = new byte[8192];
        int c = in.read(result);
        assertTrue(""Codec101: First read successful [c="" + c + ""]"", c > 0);

        c = in.read(result);
        assertTrue(""Codec101: Second read should report end-of-stream [c="" + c + ""]"", c < 0);
    }",junit.framework.AssertionFailedError: Codec101: First read successful [c=0]
Codec_7,/222043010/omniapr/defects4j/Codec_7_buggy/src/test/org/apache/commons/codec/binary/Base64Test.java,testByteToStringVariations,"    public void testByteToStringVariations() throws DecoderException {
        Base64 base64 = new Base64(0);
        byte[] b1 = StringUtils.getBytesUtf8(""Hello World"");
        byte[] b2 = new byte[0];
        byte[] b3 = null;
        byte[] b4 = Hex.decodeHex(""2bf7cc2701fe4397b49ebeed5acc7090"".toCharArray());  // for url-safe tests

        assertEquals(""byteToString Hello World"", ""SGVsbG8gV29ybGQ="", base64.encodeToString(b1));
        assertEquals(""byteToString static Hello World"", ""SGVsbG8gV29ybGQ="", Base64.encodeBase64String(b1));
        assertEquals(""byteToString \""\"""", """", base64.encodeToString(b2));
        assertEquals(""byteToString static \""\"""", """", Base64.encodeBase64String(b2));
        assertEquals(""byteToString null"", null, base64.encodeToString(b3));
        assertEquals(""byteToString static null"", null, Base64.encodeBase64String(b3));
        assertEquals(""byteToString UUID"", ""K/fMJwH+Q5e0nr7tWsxwkA=="", base64.encodeToString(b4));
        assertEquals(""byteToString static UUID"", ""K/fMJwH+Q5e0nr7tWsxwkA=="", Base64.encodeBase64String(b4));
        assertEquals(""byteToString static-url-safe UUID"", ""K_fMJwH-Q5e0nr7tWsxwkA"", Base64.encodeBase64URLSafeString(b4));
    }",junit.framework.ComparisonFailure: byteToString static Hello World expected:<SGVsbG8gV29ybGQ=[]> but was:<SGVsbG8gV29ybGQ=[
Codec_7,/222043010/omniapr/defects4j/Codec_7_buggy/src/test/org/apache/commons/codec/binary/Base64Test.java,testRfc4648Section10Encode,"    public void testRfc4648Section10Encode() {
        assertEquals("""", Base64.encodeBase64String(StringUtils.getBytesUtf8("""")));
        assertEquals(""Zg=="", Base64.encodeBase64String(StringUtils.getBytesUtf8(""f"")));
        assertEquals(""Zm8="", Base64.encodeBase64String(StringUtils.getBytesUtf8(""fo"")));
        assertEquals(""Zm9v"", Base64.encodeBase64String(StringUtils.getBytesUtf8(""foo"")));
        assertEquals(""Zm9vYg=="", Base64.encodeBase64String(StringUtils.getBytesUtf8(""foob"")));
        assertEquals(""Zm9vYmE="", Base64.encodeBase64String(StringUtils.getBytesUtf8(""fooba"")));
        assertEquals(""Zm9vYmFy"", Base64.encodeBase64String(StringUtils.getBytesUtf8(""foobar"")));
    }",junit.framework.ComparisonFailure: byteToString static Hello World expected:<SGVsbG8gV29ybGQ=[]> but was:<SGVsbG8gV29ybGQ=[
Codec_8,/222043010/omniapr/defects4j/Codec_8_buggy/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java,testCodec105,"    public void testCodec105() throws IOException {
        Base64InputStream in = new Base64InputStream(new Codec105ErrorInputStream(), true, 0, null);
        for (int i = 0; i < 5; i++) {
            in.read();
        }
    }",java.lang.ArrayIndexOutOfBoundsException: 2
Codec_9,/222043010/omniapr/defects4j/Codec_9_buggy/src/test/org/apache/commons/codec/binary/Base64Test.java,testCodec112,"    public void testCodec112() { // size calculation assumes always chunked
        byte[] in = new byte[] {0};
        byte[] out=Base64.encodeBase64(in);
        Base64.encodeBase64(in, false, false, out.length);
    }","java.lang.IllegalArgumentException: Input array too big, the output array would be bigger (6) than the specified maxium size of 4"
Codec_10,/222043010/omniapr/defects4j/Codec_10_buggy/src/test/org/apache/commons/codec/language/CaverphoneTest.java,testEndMb,"    public void testEndMb() throws EncoderException {
        String[][] data = {{""mb"", ""M111111111""}, {""mbmb"", ""MPM1111111""}};
        this.checkEncodings(data);
    }",junit.framework.ComparisonFailure: Source: mbmb expected:<M[PM]1111111> but was:<M[MP]1111111>
Codec_11,/222043010/omniapr/defects4j/Codec_11_buggy/src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,testSkipNotEncodedCRLF,"    public void testSkipNotEncodedCRLF() throws Exception {
        String qpdata = ""CRLF in an\n encoded text should be=20=\r\n\rskipped in the\r decoding."";
        String expected = ""CRLF in an encoded text should be skipped in the decoding."";

        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();
        assertEquals(expected, qpcodec.decode(qpdata));

        String encoded = qpcodec.encode(expected);
        assertEquals(expected, qpcodec.decode(encoded));
    }",org.apache.commons.codec.DecoderException: Invalid URL encoding: not a valid digit (radix 16): 13
Codec_11,/222043010/omniapr/defects4j/Codec_11_buggy/src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,testSoftLineBreakDecode,"    public void testSoftLineBreakDecode() throws Exception {
        String qpdata = ""If you believe that truth=3Dbeauty, then surely=20=\r\nmathematics "" +
                ""is the most beautiful branch of philosophy."";
        String expected = ""If you believe that truth=beauty, then surely mathematics "" +
                ""is the most beautiful branch of philosophy."";

        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();
        assertEquals(expected, qpcodec.decode(qpdata));

        String encoded = qpcodec.encode(expected);
        assertEquals(expected, qpcodec.decode(encoded));
    }",org.apache.commons.codec.DecoderException: Invalid URL encoding: not a valid digit (radix 16): 13
Codec_11,/222043010/omniapr/defects4j/Codec_11_buggy/src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,testSoftLineBreakEncode,"    public void testSoftLineBreakEncode() throws Exception {
        String qpdata = ""If you believe that truth=3Dbeauty, then surely mathematics is the most "" +
                ""b=\r\neautiful branch of philosophy."";
        String expected = ""If you believe that truth=beauty, then surely mathematics is the most "" +
                ""beautiful branch of philosophy."";

        QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();
        assertEquals(qpdata, qpcodec.encode(expected));

        String decoded = qpcodec.decode(qpdata);
        assertEquals(qpdata, qpcodec.encode(decoded));
    }",org.apache.commons.codec.DecoderException: Invalid URL encoding: not a valid digit (radix 16): 13
Codec_11,/222043010/omniapr/defects4j/Codec_11_buggy/src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,testUltimateSoftBreak,"    public void testUltimateSoftBreak() throws Exception {
        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();

        String plain =""This is a example of a quoted-printable text file. There is no end to it\t"";
        String expected = ""This is a example of a quoted-printable text file. There is no end to i=\r\nt=09"";

        assertEquals(expected, qpcodec.encode(plain));

        plain =""This is a example of a quoted-printable text file. There is no end to it "";
        expected = ""This is a example of a quoted-printable text file. There is no end to i=\r\nt=20"";

        assertEquals(expected, qpcodec.encode(plain));

        // whitespace before soft break
        plain =""This is a example of a quoted-printable text file. There is no end to   "";
        expected = ""This is a example of a quoted-printable text file. There is no end to=20=\r\n =20"";

        assertEquals(expected, qpcodec.encode(plain));

        // non-printable character before soft break
        plain =""This is a example of a quoted-printable text file. There is no end to=  "";
        expected = ""This is a example of a quoted-printable text file. There is no end to=3D=\r\n =20"";

        assertEquals(expected, qpcodec.encode(plain));
    }",org.apache.commons.codec.DecoderException: Invalid URL encoding: not a valid digit (radix 16): 13
Codec_11,/222043010/omniapr/defects4j/Codec_11_buggy/src/test/java/org/apache/commons/codec/net/QuotedPrintableCodecTest.java,testTrailingSpecial,"    public void testTrailingSpecial() throws Exception {
        final QuotedPrintableCodec qpcodec = new QuotedPrintableCodec();

        String plain =""This is a example of a quoted-printable text file. This might contain sp=cial chars."";
        String expected = ""This is a example of a quoted-printable text file. This might contain sp=3D=\r\ncial chars."";
        assertEquals(expected, qpcodec.encode(plain));

        plain =""This is a example of a quoted-printable text file. This might contain ta\tbs as well."";
        expected = ""This is a example of a quoted-printable text file. This might contain ta=09=\r\nbs as well."";
        assertEquals(expected, qpcodec.encode(plain));
    }",org.apache.commons.codec.DecoderException: Invalid URL encoding: not a valid digit (radix 16): 13
Codec_12,/222043010/omniapr/defects4j/Codec_12_buggy/src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,testSkipToEnd,"    public void testSkipToEnd() throws Throwable {
        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));
        Base32InputStream b32stream = new Base32InputStream(ins);
        // due to CODEC-130, skip now skips correctly decoded characters rather than encoded
        assertEquals(3, b32stream.skip(3));
        // End of stream reached
        assertEquals(-1, b32stream.read());
        assertEquals(-1, b32stream.read());
    }",junit.framework.AssertionFailedError: expected:<-1> but was:<183>
Codec_12,/222043010/omniapr/defects4j/Codec_12_buggy/src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,testCodec130,"    public void testCodec130() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        Base32OutputStream base32os = new Base32OutputStream(bos);

        base32os.write(StringUtils.getBytesUtf8(STRING_FIXTURE));
        base32os.close();

        ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
        Base32InputStream ins = new Base32InputStream(bis);

        // we skip the first character read from the reader
        ins.skip(1);
        byte[] decodedBytes = Base32TestData.streamToBytes(ins, new byte[64]);
        String str = StringUtils.newStringUtf8(decodedBytes);

        assertEquals(STRING_FIXTURE.substring(1), str);
    }",junit.framework.AssertionFailedError: expected:<-1> but was:<183>
Codec_12,/222043010/omniapr/defects4j/Codec_12_buggy/src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,testSkipWrongArgument,"    public void testSkipWrongArgument() throws Throwable {
        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));
        Base32InputStream b32stream = new Base32InputStream(ins);
        b32stream.skip(-10);
    }",junit.framework.AssertionFailedError: expected:<-1> but was:<183>
Codec_12,/222043010/omniapr/defects4j/Codec_12_buggy/src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,testAvailable,"    public void testAvailable() throws Throwable {
        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));
        Base32InputStream b32stream = new Base32InputStream(ins);
        assertEquals(1, b32stream.available());
        assertEquals(3, b32stream.skip(10));
        // End of stream reached
        assertEquals(0, b32stream.available());
        assertEquals(-1, b32stream.read());
        assertEquals(-1, b32stream.read());
        assertEquals(0, b32stream.available());
    }",junit.framework.AssertionFailedError: expected:<-1> but was:<183>
Codec_12,/222043010/omniapr/defects4j/Codec_12_buggy/src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,testSkipPastEnd,"    public void testSkipPastEnd() throws Throwable {
        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));
        Base32InputStream b32stream = new Base32InputStream(ins);
        // due to CODEC-130, skip now skips correctly decoded characters rather than encoded
        assertEquals(3, b32stream.skip(10));
        // End of stream reached
        assertEquals(-1, b32stream.read());
        assertEquals(-1, b32stream.read());
    }",junit.framework.AssertionFailedError: expected:<-1> but was:<183>
Codec_12,/222043010/omniapr/defects4j/Codec_12_buggy/src/test/java/org/apache/commons/codec/binary/Base32InputStreamTest.java,testSkipBig,"    public void testSkipBig() throws Throwable {
        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_FOO));
        Base32InputStream b32stream = new Base32InputStream(ins);
        assertEquals(3, b32stream.skip(1024));
        // End of stream reached
        assertEquals(-1, b32stream.read());
        assertEquals(-1, b32stream.read());
    }",junit.framework.AssertionFailedError: expected:<-1> but was:<183>
Codec_12,/222043010/omniapr/defects4j/Codec_12_buggy/src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,testSkipToEnd,"    public void testSkipToEnd() throws Throwable {
        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));
        Base64InputStream b64stream = new Base64InputStream(ins);
        // due to CODEC-130, skip now skips correctly decoded characters rather than encoded
        assertEquals(6, b64stream.skip(6));
        // End of stream reached
        assertEquals(-1, b64stream.read());
        assertEquals(-1, b64stream.read());
    }",junit.framework.AssertionFailedError: expected:<-1> but was:<255>
Codec_12,/222043010/omniapr/defects4j/Codec_12_buggy/src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,testCodec130,"    public void testCodec130() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        Base64OutputStream base64os = new Base64OutputStream(bos);

        base64os.write(StringUtils.getBytesUtf8(STRING_FIXTURE));
        base64os.close();

        ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
        Base64InputStream ins = new Base64InputStream(bis);

        // we skip the first character read from the reader
        ins.skip(1);
        byte[] decodedBytes = Base64TestData.streamToBytes(ins, new byte[64]);
        String str = StringUtils.newStringUtf8(decodedBytes);

        assertEquals(STRING_FIXTURE.substring(1), str);
    }",junit.framework.AssertionFailedError: expected:<-1> but was:<255>
Codec_12,/222043010/omniapr/defects4j/Codec_12_buggy/src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,testSkipWrongArgument,"    public void testSkipWrongArgument() throws Throwable {
        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));
        Base64InputStream b64stream = new Base64InputStream(ins);
        b64stream.skip(-10);
    }",junit.framework.AssertionFailedError: expected:<-1> but was:<255>
Codec_12,/222043010/omniapr/defects4j/Codec_12_buggy/src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,testAvailable,"    public void testAvailable() throws Throwable {
        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));
        Base64InputStream b64stream = new Base64InputStream(ins);
        assertEquals(1, b64stream.available());
        assertEquals(6, b64stream.skip(10));
        // End of stream reached
        assertEquals(0, b64stream.available());
        assertEquals(-1, b64stream.read());
        assertEquals(-1, b64stream.read());
        assertEquals(0, b64stream.available());
    }",junit.framework.AssertionFailedError: expected:<-1> but was:<255>
Codec_12,/222043010/omniapr/defects4j/Codec_12_buggy/src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,testSkipPastEnd,"    public void testSkipPastEnd() throws Throwable {
        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));
        Base64InputStream b64stream = new Base64InputStream(ins);
        // due to CODEC-130, skip now skips correctly decoded characters rather than encoded
        assertEquals(6, b64stream.skip(10));
        // End of stream reached
        assertEquals(-1, b64stream.read());
        assertEquals(-1, b64stream.read());
    }",junit.framework.AssertionFailedError: expected:<-1> but was:<255>
Codec_12,/222043010/omniapr/defects4j/Codec_12_buggy/src/test/java/org/apache/commons/codec/binary/Base64InputStreamTest.java,testSkipBig,"    public void testSkipBig() throws Throwable {
        InputStream ins = new ByteArrayInputStream(StringUtils.getBytesIso8859_1(ENCODED_B64));
        Base64InputStream b64stream = new Base64InputStream(ins);
        assertEquals(6, b64stream.skip(1024));
        // End of stream reached
        assertEquals(-1, b64stream.read());
        assertEquals(-1, b64stream.read());
    }",junit.framework.AssertionFailedError: expected:<-1> but was:<255>
Codec_13,/222043010/omniapr/defects4j/Codec_13_buggy/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,testIsDoubleMetaphoneEqualBasic,"    public void testIsDoubleMetaphoneEqualBasic() {
        final String[][] testFixture = new String[][] { { 
                """", """" }, {
                ""Case"", ""case"" }, {
                ""CASE"", ""Case"" }, {
                ""caSe"", ""cAsE"" }, {
                ""cookie"", ""quick"" }, {
                ""quick"", ""cookie"" }, {
                ""Brian"", ""Bryan"" }, {
                ""Auto"", ""Otto"" }, {
                ""Steven"", ""Stefan"" }, {
                ""Philipowitz"", ""Filipowicz"" }
        };
        doubleMetaphoneEqualTest(testFixture, false);
        doubleMetaphoneEqualTest(testFixture, true);
    }",java.lang.NullPointerException
Codec_13,/222043010/omniapr/defects4j/Codec_13_buggy/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java,testCodec184,"    public void testCodec184() throws Throwable {
        assertTrue(new DoubleMetaphone().isDoubleMetaphoneEqual("""", """", false));
        assertTrue(new DoubleMetaphone().isDoubleMetaphoneEqual("""", """", true));
        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(""aa"", """", false));
        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual(""aa"", """", true));
        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual("""", ""aa"", false));
        assertFalse(new DoubleMetaphone().isDoubleMetaphoneEqual("""", ""aa"", true));
      }",java.lang.NullPointerException
Codec_14,/222043010/omniapr/defects4j/Codec_14_buggy/src/test/java/org/apache/commons/codec/language/bm/PhoneticEngineRegressionTest.java,testCompatibilityWithOriginalVersion,"    public void testCompatibilityWithOriginalVersion() {
        // see CODEC-187
        // comparison: http://stevemorse.org/census/soundex.html

        Map<String, String> args = new TreeMap<String, String>();
        args.put(""nameType"", ""GENERIC"");
        args.put(""ruleType"", ""APPROX"");

        assertEquals(encode(args, true, ""abram""), ""Ybram|Ybrom|abram|abran|abrom|abron|avram|avrom|obram|obran|obrom|obron|ovram|ovrom"");
        assertEquals(encode(args, true, ""Bendzin""), ""bndzn|bntsn|bnzn|vndzn|vntsn"");

        args.put(""nameType"", ""ASHKENAZI"");
        args.put(""ruleType"", ""APPROX"");

        assertEquals(encode(args, true, ""abram""), ""Ybram|Ybrom|abram|abrom|avram|avrom|imbram|imbrom|obram|obrom|ombram|ombrom|ovram|ovrom"");
        assertEquals(encode(args, true, ""Halpern""), ""YlpYrn|Ylpirn|alpYrn|alpirn|olpYrn|olpirn|xalpirn|xolpirn"");

    }",junit.framework.AssertionFailedError: expected:<...dzn|bntsn|bnzn|vndzn[]> but was:<...dzn|bntsn|bnzn|vndzn[|vntsn]>
Codec_15,/222043010/omniapr/defects4j/Codec_15_buggy/src/test/java/org/apache/commons/codec/language/SoundexTest.java,testHWRuleEx1,"    public void testHWRuleEx1() {
        // From
        // http://www.archives.gov/research_room/genealogy/census/soundex.html:
        // Ashcraft is coded A-261 (A, 2 for the S, C ignored, 6 for the R, 1
        // for the F). It is not coded A-226.
        Assert.assertEquals(""A261"", this.getStringEncoder().encode(""Ashcraft""));
        Assert.assertEquals(""A261"", this.getStringEncoder().encode(""Ashcroft""));
        Assert.assertEquals(""Y330"", this.getStringEncoder().encode(""yehudit""));
        Assert.assertEquals(""Y330"", this.getStringEncoder().encode(""yhwdyt""));
    }",junit.framework.AssertionFailedError: expected:<Y3[3]0> but was:<Y3[0]0>
Codec_16,/222043010/omniapr/defects4j/Codec_16_buggy/src/test/java/org/apache/commons/codec/binary/Base32Test.java,testCodec200,"    public void testCodec200() {
        final Base32 codec = new Base32(true, (byte)'W'); // should be allowed
        assertNotNull(codec);
    }",java.lang.IllegalArgumentException: pad must not be in alphabet or whitespace
Codec_17,/222043010/omniapr/defects4j/Codec_17_buggy/src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java,testNewStringNullInput_CODEC229,"    public void testNewStringNullInput_CODEC229() {
        Assert.assertNull(StringUtils.newStringUtf8(null));
        Assert.assertNull(StringUtils.newStringIso8859_1(null));
        Assert.assertNull(StringUtils.newStringUsAscii(null));
        Assert.assertNull(StringUtils.newStringUtf16(null));
        Assert.assertNull(StringUtils.newStringUtf16Be(null));
        Assert.assertNull(StringUtils.newStringUtf16Le(null));
    }",java.lang.NullPointerException
Codec_18,/222043010/omniapr/defects4j/Codec_18_buggy/src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java,testEqualsCS1,"    public void testEqualsCS1() {
        Assert.assertFalse(StringUtils.equals(new StringBuilder(""abc""), null));
        Assert.assertFalse(StringUtils.equals(null, new StringBuilder(""abc"")));
        Assert.assertTrue(StringUtils.equals(new StringBuilder(""abc""), new StringBuilder(""abc"")));
        Assert.assertFalse(StringUtils.equals(new StringBuilder(""abc""), new StringBuilder(""abcd"")));
        Assert.assertFalse(StringUtils.equals(new StringBuilder(""abcd""), new StringBuilder(""abc"")));
        Assert.assertFalse(StringUtils.equals(new StringBuilder(""abc""), new StringBuilder(""ABC"")));
    }",java.lang.StringIndexOutOfBoundsException: String index out of range: 3
Codec_18,/222043010/omniapr/defects4j/Codec_18_buggy/src/test/java/org/apache/commons/codec/binary/StringUtilsTest.java,testEqualsCS2,"    public void testEqualsCS2() {
        Assert.assertTrue(StringUtils.equals(""abc"", new StringBuilder(""abc"")));
        Assert.assertFalse(StringUtils.equals(new StringBuilder(""abc""), ""abcd""));
        Assert.assertFalse(StringUtils.equals(""abcd"", new StringBuilder(""abc"")));
        Assert.assertFalse(StringUtils.equals(new StringBuilder(""abc""), ""ABC""));
    }",java.lang.StringIndexOutOfBoundsException: String index out of range: 3
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockito/internal/invocation/InvocationMatcherTest.java,should_capture_arguments_when_args_count_does_NOT_match,"    public void should_capture_arguments_when_args_count_does_NOT_match() throws Exception {
        //given
        mock.varargs();
        Invocation invocation = getLastInvocation();

        //when
        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(new LocalizedMatcher(AnyVararg.ANY_VARARG)));

        //then
        invocationMatcher.captureArgumentsFrom(invocation);
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockito/internal/util/reflection/FieldInitializerTest.java,can_instantiate_class_with_parameterized_constructor,"    public void can_instantiate_class_with_parameterized_constructor() throws Exception {
        ConstructorArgumentResolver resolver = given(mock(ConstructorArgumentResolver.class).resolveTypeInstances(any(Class[].class)))
                        .willReturn(new Object[]{null}).getMock();

        new FieldInitializer(this, field(""noDefaultConstructor""), resolver).initialize();

        assertNotNull(noDefaultConstructor);
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java,should_report_failure_if_constructor_throws_exception,"    public void should_report_failure_if_constructor_throws_exception() throws Exception {
        given(resolver.resolveTypeInstances(Matchers.<Class<?>[]>anyVararg())).willReturn(new Object[]{ null });

        try {
            new ParameterizedConstructorInstantiator(this, field(""withThrowingConstructor""), resolver).instantiate();
            fail();
        } catch (MockitoException e) {
            assertThat(e.getMessage()).contains(""constructor"").contains(""raised an exception"");
        }
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java,should_fail_if_an_argument_instance_type_do_not_match_wanted_type,"    public void should_fail_if_an_argument_instance_type_do_not_match_wanted_type() throws Exception {
        Observer observer = mock(Observer.class);
        Set wrongArg = mock(Set.class);
        given(resolver.resolveTypeInstances(Matchers.<Class<?>[]>anyVararg())).willReturn(new Object[]{ observer, wrongArg });

        try {
            new ParameterizedConstructorInstantiator(this, field(""withMultipleConstructor""), resolver).instantiate();
            fail();
        } catch (MockitoException e) {
            assertThat(e.getMessage()).contains(""argResolver"").contains(""incorrect types"");
        }
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java,should_instantiate_type_with_vararg_constructor,"    public void should_instantiate_type_with_vararg_constructor() throws Exception {
        Observer[] vararg = new Observer[] {  };
        given(resolver.resolveTypeInstances(Matchers.<Class<?>[]>anyVararg())).willReturn(new Object[]{ """", vararg});

        new ParameterizedConstructorInstantiator(this, field(""withVarargConstructor""), resolver).instantiate();

        assertNotNull(withVarargConstructor);
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java,should_instantiate_type_if_resolver_provide_matching_types,"    public void should_instantiate_type_if_resolver_provide_matching_types() throws Exception {
        Observer observer = mock(Observer.class);
        Map map = mock(Map.class);
        given(resolver.resolveTypeInstances(Matchers.<Class<?>[]>anyVararg())).willReturn(new Object[]{ observer, map });

        new ParameterizedConstructorInstantiator(this, field(""withMultipleConstructor""), resolver).instantiate();

        assertNotNull(withMultipleConstructor);
        assertNotNull(withMultipleConstructor.observer);
        assertNotNull(withMultipleConstructor.map);
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockitousage/basicapi/ResetTest.java,shouldRemoveAllStubbing,"    public void shouldRemoveAllStubbing() throws Exception {
        when(mock.objectReturningMethod(isA(Integer.class))).thenReturn(100);
        when(mock.objectReturningMethod(200)).thenReturn(200);
        reset(mock);
        assertNull(mock.objectReturningMethod(200));
        assertEquals(""default behavior should return null"", null, mock.objectReturningMethod(""blah""));
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockitousage/basicapi/UsingVarargsTest.java,shouldVerifyWithNullVarArgArray,"    public void shouldVerifyWithNullVarArgArray() {
        Foo foo = Mockito.mock(Foo.class);
        foo.varArgs((String[]) null);    
        Mockito.verify(foo).varArgs((String[]) Mockito.anyObject());
        Mockito.verify(foo).varArgs((String[]) null);
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockitousage/basicapi/UsingVarargsTest.java,shouldVerifyWithAnyObject,"    public void shouldVerifyWithAnyObject() {
        Foo foo = Mockito.mock(Foo.class);
        foo.varArgs("""");        
        Mockito.verify(foo).varArgs((String[]) Mockito.anyObject());
        Mockito.verify(foo).varArgs((String) Mockito.anyObject());
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockitousage/basicapi/UsingVarargsTest.java,shouldStubBooleanVarargs,"    public void shouldStubBooleanVarargs() {
        when(mock.withBooleanVarargs(1)).thenReturn(true);
        when(mock.withBooleanVarargs(1, true, false)).thenReturn(true);
        
        assertEquals(true, mock.withBooleanVarargs(1));
        assertEquals(false, mock.withBooleanVarargs(9999));
        
        assertEquals(true, mock.withBooleanVarargs(1, true, false));
        assertEquals(false, mock.withBooleanVarargs(1, true, false, true));
        assertEquals(false, mock.withBooleanVarargs(2, true, false));
        assertEquals(false, mock.withBooleanVarargs(1, true));
        assertEquals(false, mock.withBooleanVarargs(1, false, false));
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockitousage/basicapi/UsingVarargsTest.java,shouldMatchEasilyEmptyVararg,"    public void shouldMatchEasilyEmptyVararg() throws Exception {
        //when
        when(mock.foo(anyVararg())).thenReturn(-1);

        //then
        assertEquals(-1, mock.foo());
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockitousage/basicapi/UsingVarargsTest.java,shouldVerifyBooleanVarargs,"    public void shouldVerifyBooleanVarargs() {
        mock.withBooleanVarargs(1);
        mock.withBooleanVarargs(2, true, false, true);
        mock.withBooleanVarargs(3, true, true, true);

        verify(mock).withBooleanVarargs(1);
        verify(mock).withBooleanVarargs(2, true, false, true);
        try {
            verify(mock).withBooleanVarargs(3, true, true, true, true);
            fail();
        } catch (ArgumentsAreDifferent e) {}
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockitousage/basicapi/UsingVarargsTest.java,shouldStubCorrectlyWhenMixedVarargsUsed,"    public void shouldStubCorrectlyWhenMixedVarargsUsed() {
        MixedVarargs mixedVarargs = mock(MixedVarargs.class);
        when(mixedVarargs.doSomething(""hello"", (String[])null)).thenReturn(""hello"");
        when(mixedVarargs.doSomething(""goodbye"", (String[])null)).thenReturn(""goodbye"");

        String result = mixedVarargs.doSomething(""hello"",(String[]) null);
        assertEquals(""hello"", result);
        
        verify(mixedVarargs).doSomething(""hello"", (String[])null);
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockitousage/basicapi/UsingVarargsTest.java,shouldStubStringVarargs,"    public void shouldStubStringVarargs() {
        when(mock.withStringVarargsReturningString(1)).thenReturn(""1"");
        when(mock.withStringVarargsReturningString(2, ""1"", ""2"", ""3"")).thenReturn(""2"");
        
        RuntimeException expected = new RuntimeException();
        stubVoid(mock).toThrow(expected).on().withStringVarargs(3, ""1"", ""2"", ""3"", ""4"");

        assertEquals(""1"", mock.withStringVarargsReturningString(1));
        assertEquals(null, mock.withStringVarargsReturningString(2));
        
        assertEquals(""2"", mock.withStringVarargsReturningString(2, ""1"", ""2"", ""3""));
        assertEquals(null, mock.withStringVarargsReturningString(2, ""1"", ""2""));
        assertEquals(null, mock.withStringVarargsReturningString(2, ""1"", ""2"", ""3"", ""4""));
        assertEquals(null, mock.withStringVarargsReturningString(2, ""1"", ""2"", ""9999""));
        
        mock.withStringVarargs(3, ""1"", ""2"", ""3"", ""9999"");
        mock.withStringVarargs(9999, ""1"", ""2"", ""3"", ""4"");
        
        try {
            mock.withStringVarargs(3, ""1"", ""2"", ""3"", ""4"");
            fail();
        } catch (Exception e) {
            assertEquals(expected, e);
        }
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockitousage/basicapi/UsingVarargsTest.java,shouldStubCorrectlyWhenDoubleStringAndMixedVarargsUsed,"    public void shouldStubCorrectlyWhenDoubleStringAndMixedVarargsUsed() {
        MixedVarargs mixedVarargs = mock(MixedVarargs.class);
        when(mixedVarargs.doSomething(""one"", ""two"", (String[])null)).thenReturn(""hello"");
        when(mixedVarargs.doSomething(""1"", ""2"", (String[])null)).thenReturn(""goodbye"");

        String result = mixedVarargs.doSomething(""one"", ""two"", (String[])null);
        assertEquals(""hello"", result);
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockitousage/basicapi/UsingVarargsTest.java,shouldVerifyStringVarargs,"    public void shouldVerifyStringVarargs() {
        mock.withStringVarargs(1);
        mock.withStringVarargs(2, ""1"", ""2"", ""3"");
        mock.withStringVarargs(3, ""1"", ""2"", ""3"", ""4"");

        verify(mock).withStringVarargs(1);
        verify(mock).withStringVarargs(2, ""1"", ""2"", ""3"");
        try {
            verify(mock).withStringVarargs(2, ""1"", ""2"", ""79"", ""4"");
            fail();
        } catch (ArgumentsAreDifferent e) {}
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockitousage/basicapi/UsingVarargsTest.java,shouldVerifyObjectVarargs,"    public void shouldVerifyObjectVarargs() {
        mock.withObjectVarargs(1);
        mock.withObjectVarargs(2, ""1"", new ArrayList<Object>(), new Integer(1));
        mock.withObjectVarargs(3, new Integer(1));

        verify(mock).withObjectVarargs(1);
        verify(mock).withObjectVarargs(2, ""1"", new ArrayList<Object>(), new Integer(1));
        try {
            verifyNoMoreInteractions(mock);
            fail();
        } catch (NoInteractionsWanted e) {}
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockitousage/bugs/VarargsErrorWhenCallingRealMethodTest.java,shouldNotThrowAnyException,"    public void shouldNotThrowAnyException() throws Exception {
        Foo foo = mock(Foo.class);

        when(foo.blah(anyString(), anyString())).thenCallRealMethod();

        assertEquals(1, foo.blah(""foo"", ""bar""));
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockitousage/bugs/varargs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java,shouldVerifyCorrectlyWithAnyVarargs,"    public void shouldVerifyCorrectlyWithAnyVarargs() {
        //when
        table.newRow(""qux"", ""foo"", ""bar"", ""baz"");
        table.newRow(""abc"", ""def"");
        
        //then
        verify(table, times(2)).newRow(anyString(), (String[]) anyVararg());
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockitousage/bugs/varargs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java,shouldVerifyCorrectlyNumberOfInvocationsUsingAnyVarargAndEqualArgument,"    public void shouldVerifyCorrectlyNumberOfInvocationsUsingAnyVarargAndEqualArgument() {
        //when
        table.newRow(""x"", ""foo"", ""bar"", ""baz"");
        table.newRow(""x"", ""def"");

        //then
        verify(table, times(2)).newRow(eq(""x""), (String[]) anyVararg());
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java,shouldStubUsingAnyVarargs,"    public void shouldStubUsingAnyVarargs() {
        when(mock.run((String[]) anyVararg())).thenReturn(""foo"");
        
        assertEquals(""foo"", mock.run(""a"", ""b""));
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java,shouldVerifyUsingMatchers,"    public void shouldVerifyUsingMatchers() {
        stubVoid(one).toThrow(new RuntimeException()).on().oneArg(true);
        when(three.varargsObject(5, ""first arg"", ""second arg"")).thenReturn(""stubbed"");

        try {
            one.oneArg(true);
            fail();
        } catch (RuntimeException e) {}

        one.simpleMethod(100);
        two.simpleMethod(""test Mockito"");
        three.varargsObject(10, ""first arg"", ""second arg"");
        
        assertEquals(""stubbed"", three.varargsObject(5, ""first arg"", ""second arg""));

        verify(one).oneArg(eq(true));
        verify(one).simpleMethod(anyInt());
        verify(two).simpleMethod(startsWith(""test""));
        verify(three).varargsObject(5, ""first arg"", ""second arg"");
        verify(three).varargsObject(eq(10), eq(""first arg""), startsWith(""second""));
        
        verifyNoMoreInteractions(one, two, three);
        
        try {
            verify(three).varargsObject(eq(10), eq(""first arg""), startsWith(""third""));
            fail();
        } catch (WantedButNotInvoked e) {}
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockitousage/stubbing/BasicStubbingTest.java,test_stub_only_not_verifiable,"    public void test_stub_only_not_verifiable() throws Exception {
        IMethods localMock = mock(IMethods.class, withSettings().stubOnly());

        when(localMock.objectReturningMethod(isA(Integer.class))).thenReturn(100);
        when(localMock.objectReturningMethod(200)).thenReturn(200);

        assertEquals(200, localMock.objectReturningMethod(200));
        assertEquals(100, localMock.objectReturningMethod(666));
        assertEquals(""default behavior should return null"", null, localMock.objectReturningMethod(""blah""));

        try {
            verify(localMock, atLeastOnce()).objectReturningMethod(eq(200));
            fail();
        } catch (CannotVerifyStubOnlyMock e) {}
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockitousage/stubbing/BasicStubbingTest.java,should_evaluate_latest_stubbing_first,"    public void should_evaluate_latest_stubbing_first() throws Exception {
        when(mock.objectReturningMethod(isA(Integer.class))).thenReturn(100);
        when(mock.objectReturningMethod(200)).thenReturn(200);
        
        assertEquals(200, mock.objectReturningMethod(200));
        assertEquals(100, mock.objectReturningMethod(666));
        assertEquals(""default behavior should return null"", null, mock.objectReturningMethod(""blah""));
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockitousage/stubbing/DeprecatedStubbingTest.java,shouldEvaluateLatestStubbingFirst,"    public void shouldEvaluateLatestStubbingFirst() throws Exception {
        stub(mock.objectReturningMethod(isA(Integer.class))).toReturn(100);
        stub(mock.objectReturningMethod(200)).toReturn(200);
        
        assertEquals(200, mock.objectReturningMethod(200));
        assertEquals(100, mock.objectReturningMethod(666));
        assertEquals(""default behavior should return null"", null, mock.objectReturningMethod(""blah""));
    }",java.lang.UnsupportedOperationException
Mockito_1,/222043010/omniapr/defects4j/Mockito_1_buggy/test/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java,shouldUseEqualsToVerifyMethodVarargs,"    public void shouldUseEqualsToVerifyMethodVarargs() {
        mockOne = mock(IMethods.class);
        
        String textOne = ""test"";
        String textTwo = new String(textOne);
        
        assertEquals(textOne, textTwo);
        assertNotSame(textOne, textTwo);
        
        mockOne.varargsObject(1, textOne, textOne);
        mockOne.varargsObject(1, textTwo, textTwo);
        
        verify(mockOne, times(2)).varargsObject(1, textOne, textOne);
        
        inOrder = inOrder(mockOne);
        inOrder.verify(mockOne, times(2)).varargsObject(1, textOne, textOne);
    }",java.lang.UnsupportedOperationException
Mockito_2,/222043010/omniapr/defects4j/Mockito_2_buggy/test/org/mockito/internal/util/TimerTest.java,should_throw_friendly_reminder_exception_when_duration_is_negative,"    public void should_throw_friendly_reminder_exception_when_duration_is_negative() {
        try {
            new Timer(-1);
            Assert.fail(""It is forbidden to create timer with negative value of timer's duration."");
        } catch (FriendlyReminderException e) {
            Assert.assertTrue(true);
        }
    }",junit.framework.AssertionFailedError: It is forbidden to create timer with negative value of timer's duration.
Mockito_2,/222043010/omniapr/defects4j/Mockito_2_buggy/test/org/mockito/verification/NegativeDurationTest.java,should_throw_exception_when_duration_is_negative_for_timeout_method,"    public void should_throw_exception_when_duration_is_negative_for_timeout_method() {
        try {
            Mockito.timeout(-1);
            Assert.fail(""It is forbidden to invoke Mockito.timeout() with negative value."");
        } catch (FriendlyReminderException e) {
            Assert.assertTrue(true);
        }
    }",junit.framework.AssertionFailedError: It is forbidden to invoke Mockito.timeout() with negative value.
Mockito_2,/222043010/omniapr/defects4j/Mockito_2_buggy/test/org/mockito/verification/NegativeDurationTest.java,should_throw_exception_when_duration_is_negative_for_after_method,"    public void should_throw_exception_when_duration_is_negative_for_after_method() {
        try {
            Mockito.after(-1);
            Assert.fail(""It is forbidden to invoke Mockito.after() with negative value."");
        } catch (FriendlyReminderException e) {
            Assert.assertTrue(true);
        }
    }",junit.framework.AssertionFailedError: It is forbidden to invoke Mockito.timeout() with negative value.
Mockito_3,/222043010/omniapr/defects4j/Mockito_3_buggy/test/org/mockito/internal/invocation/InvocationMatcherTest.java,should_capture_varargs_as_vararg,"    public void should_capture_varargs_as_vararg() throws Exception {
        //given
        mock.mixedVarargs(1, ""a"", ""b"");
        Invocation invocation = getLastInvocation();
        CapturingMatcher m = new CapturingMatcher();
        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(new Equals(1), new LocalizedMatcher(m)));

        //when
        invocationMatcher.captureArgumentsFrom(invocation);

        //then
        Assertions.assertThat(m.getAllValues()).containsExactly(""a"", ""b"");
    }","junit.framework.AssertionFailedError: expected:<[['a', 'b']]> but was:<[[1]]>"
Mockito_3,/222043010/omniapr/defects4j/Mockito_3_buggy/test/org/mockitousage/bugs/varargs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java,shouldVerifyCorrectlyNumberOfInvocationsWithVarargs,"    public void shouldVerifyCorrectlyNumberOfInvocationsWithVarargs() {
        //when
        table.newRow(""qux"", ""foo"", ""bar"", ""baz"");
        table.newRow(""abc"", ""def"");
        
        //then
        verify(table).newRow(anyString(), eq(""foo""), anyString(), anyString());
        verify(table).newRow(anyString(), anyString());
    }",java.lang.ArrayIndexOutOfBoundsException: 2
Mockito_3,/222043010/omniapr/defects4j/Mockito_3_buggy/test/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java,shouldMatchAnyVararg,"    public void shouldMatchAnyVararg() {
        mock.run(""a"", ""b"");

        verify(mock).run(anyString(), anyString());
        verify(mock).run((String) anyObject(), (String) anyObject());

        verify(mock).run((String[]) anyVararg());
        
        verify(mock, never()).run();
        verify(mock, never()).run(anyString(), eq(""f""));
    }",java.lang.ArrayIndexOutOfBoundsException: 1
Mockito_3,/222043010/omniapr/defects4j/Mockito_3_buggy/test/org/mockitousage/matchers/CapturingArgumentsTest.java,should_capture_all_vararg,"    public void should_capture_all_vararg() throws Exception {
        // given
        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);

        // when
        mock.mixedVarargs(42, ""a"", ""b"", ""c"");
        mock.mixedVarargs(42, ""again ?!"");

        // then
        verify(mock, times(2)).mixedVarargs(any(), argumentCaptor.capture());

        Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly(""a"", ""b"", ""c"", ""again ?!"");
    }","junit.framework.AssertionFailedError: expected:<[['a', 'b', 'c', 'again ?!']]> but was:<[[42, 42]]>"
Mockito_3,/222043010/omniapr/defects4j/Mockito_3_buggy/test/org/mockitousage/matchers/CapturingArgumentsTest.java,captures_correctly_when_captor_used_multiple_times,"    public void captures_correctly_when_captor_used_multiple_times() throws Exception {
        // given
        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);

        // when
        mock.mixedVarargs(42, ""a"", ""b"", ""c"");

        // then
        // this is only for backwards compatibility. It does not make sense in real to do so.
        verify(mock).mixedVarargs(any(), argumentCaptor.capture(), argumentCaptor.capture(), argumentCaptor.capture());
        Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly(""a"", ""b"", ""c"");
    }","junit.framework.AssertionFailedError: expected:<[['a', 'b', 'c', 'again ?!']]> but was:<[[42, 42]]>"
Mockito_3,/222043010/omniapr/defects4j/Mockito_3_buggy/test/org/mockitousage/matchers/CapturingArgumentsTest.java,should_capture_vararg,"    public void should_capture_vararg() throws Exception {
        // given
        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);

        // when
        mock.mixedVarargs(42, ""a"", ""b"", ""c"");

        // then
        verify(mock).mixedVarargs(any(), argumentCaptor.capture());
        Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly(""a"", ""b"", ""c"");
    }","junit.framework.AssertionFailedError: expected:<[['a', 'b', 'c', 'again ?!']]> but was:<[[42, 42]]>"
Mockito_3,/222043010/omniapr/defects4j/Mockito_3_buggy/test/org/mockitousage/matchers/CapturingArgumentsTest.java,captures_correctly_when_captor_used_on_pure_vararg_method,"    public void captures_correctly_when_captor_used_on_pure_vararg_method() throws Exception {
        // given
        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);

        // when
        mock.varargs(42, ""capturedValue"");

        // then
        verify(mock).varargs(eq(42), argumentCaptor.capture());
        Assertions.assertThat(argumentCaptor.getValue()).contains(""capturedValue"");
    }","junit.framework.AssertionFailedError: expected:<[['a', 'b', 'c', 'again ?!']]> but was:<[[42, 42]]>"
Mockito_3,/222043010/omniapr/defects4j/Mockito_3_buggy/test/org/mockitousage/matchers/CapturingArgumentsTest.java,should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper,"    public void should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper() throws Exception {
        // given
        ArgumentCaptor<Byte> argumentCaptor = ArgumentCaptor.forClass(Byte.class);

        // when
        mock.varargsbyte((byte) 1, (byte) 2);

        // then
        verify(mock).varargsbyte(argumentCaptor.capture());
        assertEquals((byte) 2, (byte) argumentCaptor.getValue());
        Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly((byte) 1, (byte) 2);
    }","junit.framework.AssertionFailedError: expected:<[['a', 'b', 'c', 'again ?!']]> but was:<[[42, 42]]>"
Mockito_3,/222043010/omniapr/defects4j/Mockito_3_buggy/test/org/mockitousage/matchers/CapturingArgumentsTest.java,should_capture_byte_vararg_by_creating_captor_with_primitive,"    public void should_capture_byte_vararg_by_creating_captor_with_primitive() throws Exception {
        // given
        ArgumentCaptor<Byte> argumentCaptor = ArgumentCaptor.forClass(byte.class);

        // when
        mock.varargsbyte((byte) 1, (byte) 2);

        // then
        verify(mock).varargsbyte(argumentCaptor.capture());
        assertEquals((byte) 2, (byte) argumentCaptor.getValue());
        Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly((byte) 1, (byte) 2);
    }","junit.framework.AssertionFailedError: expected:<[['a', 'b', 'c', 'again ?!']]> but was:<[[42, 42]]>"
Mockito_4,/222043010/omniapr/defects4j/Mockito_4_buggy/test/org/mockito/exceptions/ReporterTest.java,can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order,"    public void can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order() throws Exception {
        Invocation invocation_with_bogus_default_answer = new InvocationBuilder().mock(mock(IMethods.class, new Returns(false))).toInvocation();
        new Reporter().noMoreInteractionsWantedInOrder(invocation_with_bogus_default_answer);
    }","java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.verification.VerificationInOrderFailure> but was<java.lang.ClassCastException>"
Mockito_4,/222043010/omniapr/defects4j/Mockito_4_buggy/test/org/mockito/exceptions/ReporterTest.java,can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure,"    public void can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure() throws Exception {
        IMethods mock_with_bogus_default_answer = mock(IMethods.class, new Returns(false));
        new Reporter().cannotInjectDependency(someField(), mock_with_bogus_default_answer, new Exception());
    }","java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.verification.VerificationInOrderFailure> but was<java.lang.ClassCastException>"
Mockito_4,/222043010/omniapr/defects4j/Mockito_4_buggy/test/org/mockito/exceptions/ReporterTest.java,can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted,"    public void can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted() throws Exception {
        Invocation invocation_with_bogus_default_answer = new InvocationBuilder().mock(mock(IMethods.class, new Returns(false))).toInvocation();
        new Reporter().noMoreInteractionsWanted(invocation_with_bogus_default_answer, Collections.<VerificationAwareInvocation>emptyList());
    }","java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.verification.VerificationInOrderFailure> but was<java.lang.ClassCastException>"
Mockito_4,/222043010/omniapr/defects4j/Mockito_4_buggy/test/org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java,should_not_throw_a_ClassCastException,"    public void should_not_throw_a_ClassCastException() {
        TestMock test = mock(TestMock.class, new Answer() {
            public Object answer(InvocationOnMock invocation) throws Throwable {
                return false;
            }
        });
        test.m1();
        verifyZeroInteractions(test);
    }","java.lang.Exception: Unexpected exception, expected<org.mockito.exceptions.verification.NoInteractionsWanted> but was<java.lang.ClassCastException>"
Mockito_5,/222043010/omniapr/defects4j/Mockito_5_buggy/test/org/mockitointegration/NoJUnitDependenciesTest.java,pure_mockito_should_not_depend_JUnit,"    public void pure_mockito_should_not_depend_JUnit() throws Exception {
        ClassLoader classLoader_without_JUnit = ClassLoaders.excludingClassLoader()
                .withCodeSourceUrlOf(
                        Mockito.class,
                        Matcher.class,
                        Enhancer.class,
                        Objenesis.class
                )
                .without(""junit"", ""org.junit"")
                .build();

        Set<String> pureMockitoAPIClasses = ClassLoaders.in(classLoader_without_JUnit).omit(""runners"", ""junit"", ""JUnit"").listOwnedClasses();

        for (String pureMockitoAPIClass : pureMockitoAPIClasses) {
            checkDependency(classLoader_without_JUnit, pureMockitoAPIClass);
        }
    }",junit.framework.AssertionFailedError: 'org.mockito.internal.verification.VerificationOverTimeImpl' has some dependency to JUnit
Mockito_5,/222043010/omniapr/defects4j/Mockito_5_buggy/test/org/mockitousage/verification/VerificationWithTimeoutTest.java,canIgnoreInvocationsWithJunit,"    public void canIgnoreInvocationsWithJunit() {
        //given
        Thread t1 = new Thread() {
            @Override
            public void run() {
                mock.add(""0"");
                mock.add(""1"");
                VerificationWithTimeoutTest.this.sleep(100);
                mock.add(""2"");
            }
        };

        //when
        t1.start();

        //then
        verify(mock, timeout(200)).add(""1"");
        verify(mock, timeout(200)).add(""2"");
    }",Argument(s) are different! Wanted:
Mockito_6,/222043010/omniapr/defects4j/Mockito_6_buggy/test/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java,shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers,"    public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers() {
        when(mock.forInteger(anyInt())).thenReturn(""0"");
        when(mock.forCharacter(anyChar())).thenReturn(""1"");
        when(mock.forShort(anyShort())).thenReturn(""2"");
        when(mock.forByte(anyByte())).thenReturn(""3"");
        when(mock.forBoolean(anyBoolean())).thenReturn(""4"");
        when(mock.forLong(anyLong())).thenReturn(""5"");
        when(mock.forFloat(anyFloat())).thenReturn(""6"");
        when(mock.forDouble(anyDouble())).thenReturn(""7"");
        
        assertEquals(null, mock.forInteger(null));
        assertEquals(null, mock.forCharacter(null));
        assertEquals(null, mock.forShort(null));
        assertEquals(null, mock.forByte(null));
        assertEquals(null, mock.forBoolean(null));
        assertEquals(null, mock.forLong(null));
        assertEquals(null, mock.forFloat(null));
        assertEquals(null, mock.forDouble(null));
    }",junit.framework.ComparisonFailure: expected:<null> but was:<0>
Mockito_6,/222043010/omniapr/defects4j/Mockito_6_buggy/test/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java,shouldNotAcceptNullInAnyXMatchers,"    public void shouldNotAcceptNullInAnyXMatchers() {
        when(mock.oneArg(anyObject())).thenReturn(""0"");
        when(mock.oneArg(anyString())).thenReturn(""1"");
        when(mock.forList(anyList())).thenReturn(""2"");
        when(mock.forMap(anyMap())).thenReturn(""3"");
        when(mock.forCollection(anyCollection())).thenReturn(""4"");
        when(mock.forSet(anySet())).thenReturn(""5"");
        
        assertEquals(null, mock.oneArg((Object) null));
        assertEquals(null, mock.oneArg((String) null));
        assertEquals(null, mock.forList(null));
        assertEquals(null, mock.forMap(null));
        assertEquals(null, mock.forCollection(null));
        assertEquals(null, mock.forSet(null));
    }",junit.framework.ComparisonFailure: expected:<null> but was:<0>
Mockito_6,/222043010/omniapr/defects4j/Mockito_6_buggy/test/org/mockitousage/matchers/MatchersTest.java,anyStringMatcher,"    public void anyStringMatcher() {
        when(mock.oneArg(anyString())).thenReturn(""matched"");
        
        assertEquals(""matched"", mock.oneArg(""""));
        assertEquals(""matched"", mock.oneArg(""any string""));
        assertEquals(null, mock.oneArg((String) null));
    }",junit.framework.ComparisonFailure: expected:<null> but was:<matched>
Mockito_6,/222043010/omniapr/defects4j/Mockito_6_buggy/test/org/mockitousage/matchers/NewMatchersTest.java,shouldAllowAnyCollection,"    public void shouldAllowAnyCollection() {
        when(mock.forCollection(anyCollection())).thenReturn(""matched"");
        
        assertEquals(""matched"", mock.forCollection(Arrays.asList(""x"", ""y"")));
        assertEquals(null, mock.forCollection(null));

        verify(mock, times(1)).forCollection(anyCollection());
    }",junit.framework.ComparisonFailure: expected:<null> but was:<matched>
Mockito_6,/222043010/omniapr/defects4j/Mockito_6_buggy/test/org/mockitousage/matchers/NewMatchersTest.java,shouldAllowAnyList,"    public void shouldAllowAnyList() {
        when(mock.forList(anyList())).thenReturn(""matched"");
        
        assertEquals(""matched"", mock.forList(Arrays.asList(""x"", ""y"")));
        assertEquals(null, mock.forList(null));

        verify(mock, times(1)).forList(anyList());
    }",junit.framework.ComparisonFailure: expected:<null> but was:<matched>
Mockito_6,/222043010/omniapr/defects4j/Mockito_6_buggy/test/org/mockitousage/matchers/NewMatchersTest.java,shouldAllowAnyMap,"    public void shouldAllowAnyMap() {
        when(mock.forMap(anyMap())).thenReturn(""matched"");
        
        assertEquals(""matched"", mock.forMap(new HashMap<String, String>()));
        assertEquals(null, mock.forMap(null));

        verify(mock, times(1)).forMap(anyMap());
    }",junit.framework.ComparisonFailure: expected:<null> but was:<matched>
Mockito_6,/222043010/omniapr/defects4j/Mockito_6_buggy/test/org/mockitousage/matchers/NewMatchersTest.java,shouldAllowAnySet,"    public void shouldAllowAnySet() {
        when(mock.forSet(anySet())).thenReturn(""matched"");
        
        assertEquals(""matched"", mock.forSet(new HashSet<String>()));
        assertEquals(null, mock.forSet(null));

        verify(mock, times(1)).forSet(anySet());
    }",junit.framework.ComparisonFailure: expected:<null> but was:<matched>
Mockito_7,/222043010/omniapr/defects4j/Mockito_7_buggy/test/org/mockitousage/bugs/deepstubs/DeepStubFailingWhenGenricNestedAsRawTypeTest.java,discoverDeepMockingOfGenerics,"  public void discoverDeepMockingOfGenerics() {
    MyClass1 myMock1 = mock(MyClass1.class, RETURNS_DEEP_STUBS);
    when(myMock1.getNested().getNested().returnSomething()).thenReturn(""Hello World."");
  }",org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'
Mockito_8,/222043010/omniapr/defects4j/Mockito_8_buggy/test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java,typeVariable_of_self_type,"    public void typeVariable_of_self_type() {
        GenericMetadataSupport genericMetadata = inferFrom(GenericsSelfReference.class).resolveGenericReturnType(firstNamedMethod(""self"", GenericsSelfReference.class));

        assertThat(genericMetadata.rawType()).isEqualTo(GenericsSelfReference.class);
    }",java.lang.StackOverflowError
Mockito_9,/222043010/omniapr/defects4j/Mockito_9_buggy/test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,abstractMethodStubbed,"    public void abstractMethodStubbed() {
    	AbstractThing thing = spy(AbstractThing.class);
    	when(thing.name()).thenReturn(""me"");
    	assertEquals(""abstract me"", thing.fullName());
    }",org.mockito.exceptions.base.MockitoException: 
Mockito_9,/222043010/omniapr/defects4j/Mockito_9_buggy/test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,testCallsRealInterfaceMethod,"    public void testCallsRealInterfaceMethod() {
    	List<String> list = mock(List.class, withSettings().defaultAnswer(CALLS_REAL_METHODS));
    	assertNull(list.get(1));
    }",org.mockito.exceptions.base.MockitoException: 
Mockito_9,/222043010/omniapr/defects4j/Mockito_9_buggy/test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,abstractMethodReturnsDefault,"    public void abstractMethodReturnsDefault() {
    	AbstractThing thing = spy(AbstractThing.class);
    	assertEquals(""abstract null"", thing.fullName());
    }",org.mockito.exceptions.base.MockitoException: 
Mockito_10,/222043010/omniapr/defects4j/Mockito_10_buggy/test/org/mockitousage/bugs/DeepStubsWronglyReportsSerializationProblemsTest.java,should_not_raise_a_mockito_exception_about_serialization_when_accessing_deep_stub,"    public void should_not_raise_a_mockito_exception_about_serialization_when_accessing_deep_stub() {
        NotSerializableShouldBeMocked the_deep_stub = mock(ToBeDeepStubbed.class, RETURNS_DEEP_STUBS).getSomething();
        assertThat(the_deep_stub).isNotNull();
    }",org.mockito.exceptions.base.MockitoException: 
Mockito_11,/222043010/omniapr/defects4j/Mockito_11_buggy/test/org/mockito/internal/creation/DelegatingMethodTest.java,equals_should_return_true_when_equal,"    public void equals_should_return_true_when_equal() throws Exception {
        DelegatingMethod equal = new DelegatingMethod(someMethod);
        assertTrue(delegatingMethod.equals(equal));
    }",junit.framework.AssertionFailedError
Mockito_11,/222043010/omniapr/defects4j/Mockito_11_buggy/test/org/mockito/internal/creation/DelegatingMethodTest.java,equals_should_return_true_when_self,"    public void equals_should_return_true_when_self() throws Exception {
        assertTrue(delegatingMethod.equals(delegatingMethod));
    }",junit.framework.AssertionFailedError
Mockito_12,/222043010/omniapr/defects4j/Mockito_12_buggy/test/org/mockito/internal/util/reflection/GenericMasterTest.java,shouldDealWithNestedGenerics,"    public void shouldDealWithNestedGenerics() throws Exception {
        assertEquals(Set.class, m.getGenericType(field(""nested"")));
        assertEquals(Set.class, m.getGenericType(field(""multiNested"")));
    }",java.lang.ClassCastException: sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl cannot be cast to java.lang.Class
Mockito_12,/222043010/omniapr/defects4j/Mockito_12_buggy/test/org/mockitousage/annotation/CaptorAnnotationBasicTest.java,shouldUseAnnotatedCaptor,"    public void shouldUseAnnotatedCaptor() {
        //when
        createPerson(""Wes"", ""Williams"");
        
        //then
        verify(peopleRepository).save(captor.capture());
        assertEquals(""Wes"", captor.getValue().getName());
        assertEquals(""Williams"", captor.getValue().getSurname());
    }",java.lang.ClassCastException: sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl cannot be cast to java.lang.Class
Mockito_12,/222043010/omniapr/defects4j/Mockito_12_buggy/test/org/mockitousage/annotation/CaptorAnnotationBasicTest.java,shouldUseCaptorInOrdinaryWay,"    public void shouldUseCaptorInOrdinaryWay() {
        //when
        createPerson(""Wes"", ""Williams"");
        
        //then
        ArgumentCaptor<Person> captor = ArgumentCaptor.forClass(Person.class);
        verify(peopleRepository).save(captor.capture());
        assertEquals(""Wes"", captor.getValue().getName());
        assertEquals(""Williams"", captor.getValue().getSurname());
    }",java.lang.ClassCastException: sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl cannot be cast to java.lang.Class
Mockito_12,/222043010/omniapr/defects4j/Mockito_12_buggy/test/org/mockitousage/annotation/CaptorAnnotationBasicTest.java,shouldCaptureGenericList,"    public void shouldCaptureGenericList() {
        //given
        List<String> list = new LinkedList<String>();
        mock.listArgMethod(list);
                
        //when
        verify(mock).listArgMethod(genericListCaptor.capture());
        
        //then
        assertSame(list, genericListCaptor.getValue());
    }",java.lang.ClassCastException: sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl cannot be cast to java.lang.Class
Mockito_12,/222043010/omniapr/defects4j/Mockito_12_buggy/test/org/mockitousage/annotation/CaptorAnnotationBasicTest.java,shouldUseGenericlessAnnotatedCaptor,"    public void shouldUseGenericlessAnnotatedCaptor() {
        //when
        createPerson(""Wes"", ""Williams"");
        
        //then
        verify(peopleRepository).save((Person) genericLessCaptor.capture());
        assertEquals(""Wes"", ((Person) genericLessCaptor.getValue()).getName());
        assertEquals(""Williams"", ((Person) genericLessCaptor.getValue()).getSurname());
    }",java.lang.ClassCastException: sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl cannot be cast to java.lang.Class
Mockito_12,/222043010/omniapr/defects4j/Mockito_12_buggy/test/org/mockitousage/annotation/CaptorAnnotationTest.java,shouldScreamWhenWrongTypeForCaptor,"    public void shouldScreamWhenWrongTypeForCaptor() {
        try {
            MockitoAnnotations.initMocks(new WrongType());
            fail();
        } catch (MockitoException e) {}
    }",java.lang.ClassCastException: sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl cannot be cast to java.lang.Class
Mockito_12,/222043010/omniapr/defects4j/Mockito_12_buggy/test/org/mockitousage/annotation/CaptorAnnotationTest.java,testNormalUsage,"    public void testNormalUsage() {

        MockitoAnnotations.initMocks(this);

        // check if assigned correctly
        assertNotNull(finalCaptor);
        assertNotNull(genericsCaptor);
        assertNotNull(nonGenericCaptorIsAllowed);
        assertNull(notAMock);

        // use captors in the field to be sure they are cool
        String argForFinalCaptor = ""Hello"";
        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();

        mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);

        Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());

        assertEquals(argForFinalCaptor, finalCaptor.getValue());
        assertEquals(argForGenericsCaptor, genericsCaptor.getValue());

    }",java.lang.ClassCastException: sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl cannot be cast to java.lang.Class
Mockito_12,/222043010/omniapr/defects4j/Mockito_12_buggy/test/org/mockitousage/annotation/CaptorAnnotationTest.java,shouldScreamWhenMoreThanOneMockitoAnnotaton,"    public void shouldScreamWhenMoreThanOneMockitoAnnotaton() {
        try {
            MockitoAnnotations.initMocks(new ToManyAnnotations());
            fail();
        } catch (MockitoException e) {
            assertContains(""missingGenericsField"", e.getMessage());
            assertContains(""multiple Mockito annotations"", e.getMessage());            
        }
    }",java.lang.ClassCastException: sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl cannot be cast to java.lang.Class
Mockito_12,/222043010/omniapr/defects4j/Mockito_12_buggy/test/org/mockitousage/annotation/CaptorAnnotationTest.java,shouldScreamWhenInitializingCaptorsForNullClass,"    public void shouldScreamWhenInitializingCaptorsForNullClass() throws Exception {
        try {
            MockitoAnnotations.initMocks(null);
            fail();
        } catch (MockitoException e) {
        }
    }",java.lang.ClassCastException: sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl cannot be cast to java.lang.Class
Mockito_12,/222043010/omniapr/defects4j/Mockito_12_buggy/test/org/mockitousage/annotation/CaptorAnnotationTest.java,shouldLookForAnnotatedCaptorsInSuperClasses,"    public void shouldLookForAnnotatedCaptorsInSuperClasses() throws Exception {
        Sub sub = new Sub();
        MockitoAnnotations.initMocks(sub);

        assertNotNull(sub.getCaptor());
        assertNotNull(sub.getBaseCaptor());
        assertNotNull(sub.getSuperBaseCaptor());
    }",java.lang.ClassCastException: sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl cannot be cast to java.lang.Class
Mockito_13,/222043010/omniapr/defects4j/Mockito_13_buggy/test/org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java,shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine,"    public void shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine() {
        //given
        when(mock.otherMethod()).thenReturn(""foo"");
        
        //when
        mockTwo.simpleMethod(""foo"");
        
        //then
        verify(mockTwo).simpleMethod(mock.otherMethod());
        try {
            verify(mockTwo, never()).simpleMethod(mock.otherMethod());
            fail();
        } catch (NeverWantedButInvoked e) {}
    }",junit.framework.AssertionFailedError
Mockito_14,/222043010/omniapr/defects4j/Mockito_14_buggy/test/org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java,shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine,"    public void shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine() {
        //given
        when(mock.otherMethod()).thenReturn(""foo"");
        
        //when
        mockTwo.simpleMethod(""foo"");
        
        //then
        verify(mockTwo).simpleMethod(mock.otherMethod());
    }",junit.framework.AssertionFailedError: 
Mockito_15,/222043010/omniapr/defects4j/Mockito_15_buggy/test/org/mockitousage/bugs/InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest.java,shouldInjectUsingPropertySetterIfAvailable,"    public void shouldInjectUsingPropertySetterIfAvailable() {
        assertTrue(awaitingInjection.propertySetterUsed);
    }",junit.framework.AssertionFailedError
Mockito_16,/222043010/omniapr/defects4j/Mockito_16_buggy/test/org/mockitousage/bugs/StubbingMocksThatAreConfiguredToReturnMocksTest.java,shouldAllowStubbingMocksConfiguredWithRETURNS_MOCKS,"    public void shouldAllowStubbingMocksConfiguredWithRETURNS_MOCKS() {
        IMethods mock = mock(IMethods.class, RETURNS_MOCKS);
        when(mock.objectReturningMethodNoArgs()).thenReturn(null);
    }",org.mockito.exceptions.misusing.MissingMethodInvocationException: 
Mockito_17,/222043010/omniapr/defects4j/Mockito_17_buggy/test/org/mockitousage/basicapi/MocksSerializationTest.java,shouldBeSerializeAndHaveExtraInterfaces,"    public void shouldBeSerializeAndHaveExtraInterfaces() throws Exception {
        //when
        IMethods mock = mock(IMethods.class, withSettings().serializable().extraInterfaces(List.class));
        IMethods mockTwo = mock(IMethods.class, withSettings().extraInterfaces(List.class).serializable());

        //then
        serializeAndBack((List) mock);
        serializeAndBack((List) mockTwo);
    }",java.io.NotSerializableException: org.mockitousage.IMethods$$EnhancerByMockitoWithCGLIB$$a67cc788
Mockito_18,/222043010/omniapr/defects4j/Mockito_18_buggy/test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java,should_return_empty_iterable,"    public void should_return_empty_iterable() throws Exception {
        assertFalse(((Iterable) values.returnValueFor(Iterable.class)).iterator().hasNext());
    }",java.lang.NullPointerException
Mockito_19,/222043010/omniapr/defects4j/Mockito_19_buggy/test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java,shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable,"	public void shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable() {
		MockitoAnnotations.initMocks(this);
		assertNull(otherSuperUnderTesting.candidate1);
		assertNotNull(otherSuperUnderTesting.candidate2);
	}",junit.framework.AssertionFailedError: Expected: <null> but was: candidate2
Mockito_20,/222043010/omniapr/defects4j/Mockito_20_buggy/test/org/mockitousage/annotation/SpyAnnotationTest.java,should_spy_inner_class,"    public void should_spy_inner_class() throws Exception {
    	 
     class WithMockAndSpy {
    		@Spy private InnerStrength strength;
    		@Mock private List<String> list;

            abstract class InnerStrength {
            	private final String name;

            	InnerStrength() {
            		// Make sure that @Mock fields are always injected before @Spy fields.
            		assertNotNull(list);
            		// Make sure constructor is indeed called.
            		this.name = ""inner"";
            	}
            	
            	abstract String strength();
            	
            	String fullStrength() {
            		return name + "" "" + strength();
            	}
            }
    	}
		WithMockAndSpy outer = new WithMockAndSpy();
        MockitoAnnotations.initMocks(outer);
        when(outer.strength.strength()).thenReturn(""strength"");
        assertEquals(""inner strength"", outer.strength.fullStrength());
    }",junit.framework.ComparisonFailure: expected:<[inner] strength> but was:<[null] strength>
Mockito_20,/222043010/omniapr/defects4j/Mockito_20_buggy/test/org/mockitousage/annotation/SpyAnnotationTest.java,should_report_when_constructor_is_explosive,"    public void should_report_when_constructor_is_explosive() throws Exception {
		class FailingSpy {
	        @Spy
            ThrowingConstructor throwingConstructor;
		}

        try {
            MockitoAnnotations.initMocks(new FailingSpy());
            fail();
        } catch (MockitoException e) {
            Assertions.assertThat(e.getMessage()).contains(""Unable to create mock instance"");
        }
    }",junit.framework.ComparisonFailure: expected:<[inner] strength> but was:<[null] strength>
Mockito_20,/222043010/omniapr/defects4j/Mockito_20_buggy/test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,can_spy_abstract_classes,"    public void can_spy_abstract_classes() {
        AbstractMessage mock = spy(AbstractMessage.class);
        assertEquals(""hey!"", mock.getMessage());
    }",junit.framework.ComparisonFailure: expected:<hey!> but was:<null>
Mockito_20,/222043010/omniapr/defects4j/Mockito_20_buggy/test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,exception_message_when_constructor_not_found,"    public void exception_message_when_constructor_not_found() {
        try {
            //when
            spy(HasConstructor.class);
            //then
            fail();
        } catch (MockitoException e) {
            assertEquals(""Unable to create mock instance of type 'HasConstructor'"", e.getMessage());
            assertContains(""0-arg constructor"", e.getCause().getMessage());
        }
    }",junit.framework.ComparisonFailure: expected:<hey!> but was:<null>
Mockito_20,/222043010/omniapr/defects4j/Mockito_20_buggy/test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,can_create_mock_with_constructor,"    public void can_create_mock_with_constructor() {
        Message mock = mock(Message.class, withSettings().useConstructor().defaultAnswer(CALLS_REAL_METHODS));
        //the message is a part of state of the mocked type that gets initialized in constructor
        assertEquals(""hey!"", mock.getMessage());
    }",junit.framework.ComparisonFailure: expected:<hey!> but was:<null>
Mockito_20,/222043010/omniapr/defects4j/Mockito_20_buggy/test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,can_mock_inner_classes,"    public void can_mock_inner_classes() {
        InnerClass mock = mock(InnerClass.class, withSettings().useConstructor().outerInstance(this).defaultAnswer(CALLS_REAL_METHODS));
        assertEquals(""hey!"", mock.getMessage());
    }",junit.framework.ComparisonFailure: expected:<hey!> but was:<null>
Mockito_20,/222043010/omniapr/defects4j/Mockito_20_buggy/test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,mocking_inner_classes_with_wrong_outer_instance,"    public void mocking_inner_classes_with_wrong_outer_instance() {
        try {
            //when
            mock(InnerClass.class, withSettings().useConstructor().outerInstance(""foo"").defaultAnswer(CALLS_REAL_METHODS));
            //then
            fail();
        } catch (MockitoException e) {
            assertEquals(""Unable to create mock instance of type 'InnerClass'"", e.getMessage());
            assertContains(""Please ensure that the outer instance has correct type and that the target class has 0-arg constructor."", e.getCause().getMessage());
        }
    }",junit.framework.ComparisonFailure: expected:<hey!> but was:<null>
Mockito_20,/222043010/omniapr/defects4j/Mockito_20_buggy/test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java,can_mock_abstract_classes,"    public void can_mock_abstract_classes() {
        AbstractMessage mock = mock(AbstractMessage.class, withSettings().useConstructor().defaultAnswer(CALLS_REAL_METHODS));
        assertEquals(""hey!"", mock.getMessage());
    }",junit.framework.ComparisonFailure: expected:<hey!> but was:<null>
Mockito_21,/222043010/omniapr/defects4j/Mockito_21_buggy/test/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java,creates_instances_of_inner_classes,"    @Test public void creates_instances_of_inner_classes() {
        assertEquals(new ConstructorInstantiator(this).newInstance(SomeInnerClass.class).getClass(), SomeInnerClass.class);
        assertEquals(new ConstructorInstantiator(new ChildOfThis()).newInstance(SomeInnerClass.class).getClass(), SomeInnerClass.class);
    }",org.mockito.internal.creation.instance.InstantationException: Unable to create mock instance of 'SomeInnerClass'.
Mockito_21,/222043010/omniapr/defects4j/Mockito_21_buggy/test/org/mockitousage/verification/VerificationWithTimeoutTest.java,canIgnoreInvocationsWithJunit,"    public void canIgnoreInvocationsWithJunit() {
        //given
        Thread t1 = new Thread() {
            @Override
            public void run() {
                mock.add(""0"");
                mock.add(""1"");
                VerificationWithTimeoutTest.this.sleep(100);
                mock.add(""2"");
            }
        };

        //when
        t1.start();

        //then
        verify(mock, timeout(200)).add(""1"");
        verify(mock, timeout(200)).add(""2"");
    }",Argument(s) are different! Wanted:
Mockito_22,/222043010/omniapr/defects4j/Mockito_22_buggy/test/org/mockito/internal/matchers/EqualityTest.java,shouldKnowIfObjectsAreEqual,"    public void shouldKnowIfObjectsAreEqual() throws Exception {
        int[] arr = new int[] {1, 2};
        assertTrue(areEqual(arr, arr));
        assertTrue(areEqual(new int[] {1, 2}, new int[] {1, 2}));
        assertTrue(areEqual(new Double[] {1.0}, new Double[] {1.0}));
        assertTrue(areEqual(new String[0], new String[0]));
        assertTrue(areEqual(new Object[10], new Object[10]));
        assertTrue(areEqual(new int[] {1}, new Integer[] {1}));
        assertTrue(areEqual(new Object[] {""1""}, new String[] {""1""}));
	Object badequals=new BadEquals();
	assertTrue(areEqual(badequals,badequals));

        assertFalse(areEqual(new Object[9], new Object[10]));
        assertFalse(areEqual(new int[] {1, 2}, new int[] {1}));
        assertFalse(areEqual(new int[] {1}, new double[] {1.0}));
    }",java.lang.RuntimeException
Mockito_22,/222043010/omniapr/defects4j/Mockito_22_buggy/test/org/mockitousage/bugs/ConcurrentModificationExceptionOnMultiThreadedVerificationTest.java,shouldSuccessfullyVerifyConcurrentInvocationsWithTimeout,"	public void shouldSuccessfullyVerifyConcurrentInvocationsWithTimeout() throws Exception {
        int potentialOverhead = 1000; // Leave 1000ms extra before timing out as leeway for test overheads
        int expectedMaxTestLength = TIMES * INTERVAL_MILLIS + potentialOverhead;

		reset(target);
		startInvocations();
		
		verify(target, timeout(expectedMaxTestLength).times(TIMES * nThreads)).targetMethod(""arg"");
		verifyNoMoreInteractions(target);
	}",junit.framework.AssertionFailedError: 
Mockito_23,/222043010/omniapr/defects4j/Mockito_23_buggy/test/org/mockitousage/stubbing/DeepStubsSerializableTest.java,should_serialize_and_deserialize_mock_created_by_deep_stubs,"    public void should_serialize_and_deserialize_mock_created_by_deep_stubs() throws Exception {
        // given
        SampleClass sampleClass = mock(SampleClass.class, withSettings().defaultAnswer(Mockito.RETURNS_DEEP_STUBS).serializable());
        when(sampleClass.getSample().isSth()).thenReturn(STUBBED_BOOLEAN_VALUE);
        when(sampleClass.getSample().getNumber()).thenReturn(STUBBED_INTEGER_VALUE);

        // when
        Object o = SimpleSerializationUtil.serializeAndBack(sampleClass);

        // then
        assertThat(o).isInstanceOf(SampleClass.class);
        SampleClass deserializedSample = (SampleClass) o;
        assertThat(deserializedSample.getSample().isSth()).isEqualTo(STUBBED_BOOLEAN_VALUE);
        assertThat(deserializedSample.getSample().getNumber()).isEqualTo(STUBBED_INTEGER_VALUE);
    }",java.io.NotSerializableException: org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs$2
Mockito_24,/222043010/omniapr/defects4j/Mockito_24_buggy/test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java,should_return_zero_if_mock_is_compared_to_itself,"    @Test public void should_return_zero_if_mock_is_compared_to_itself() {
        //given
        Date d = mock(Date.class);
        d.compareTo(d);
        Invocation compareTo = this.getLastInvocation();

        //when
        Object result = values.answer(compareTo);

        //then
        assertEquals(0, result);
    }",junit.framework.AssertionFailedError: expected:<0> but was:<1>
Mockito_24,/222043010/omniapr/defects4j/Mockito_24_buggy/test/org/mockitousage/bugs/ShouldMocksCompareToBeConsistentWithEqualsTest.java,should_compare_to_be_consistent_with_equals_when_comparing_the_same_reference,"    public void should_compare_to_be_consistent_with_equals_when_comparing_the_same_reference() {
        //given
        Date today    = mock(Date.class);

        //when
        Set<Date> set = new TreeSet<Date>();
        set.add(today);
        set.add(today);

        //then
        assertEquals(1, set.size());
    }",junit.framework.AssertionFailedError: expected:<1> but was:<2>
Mockito_25,/222043010/omniapr/defects4j/Mockito_25_buggy/test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,will_return_default_value_on_non_mockable_nested_generic,"    public void will_return_default_value_on_non_mockable_nested_generic() throws Exception {
        GenericsNest<?> genericsNest = mock(GenericsNest.class, RETURNS_DEEP_STUBS);
        ListOfInteger listOfInteger = mock(ListOfInteger.class, RETURNS_DEEP_STUBS);

        assertThat(genericsNest.returningNonMockableNestedGeneric().keySet().iterator().next()).isNull();
        assertThat(listOfInteger.get(25)).isEqualTo(0);
    }",java.lang.ClassCastException: org.mockito.internal.creation.jmock.ClassImposterizer$ClassWithSuperclassToWorkAroundCglibBug$$EnhancerByMockitoWithCGLIB$$7206ffd0 cannot be cast to java.lang.String
Mockito_25,/222043010/omniapr/defects4j/Mockito_25_buggy/test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_typevar_that_is_referencing_a_typevar_on_class,"    public void can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_typevar_that_is_referencing_a_typevar_on_class() throws Exception {
        GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);

        Cloneable cloneable_bound_of_typevar_K_referenced_by_typevar_O = (Cloneable) mock.typeVarWithTypeParams();
        Comparable<?> comparable_bound_of_typevar_K_referenced_by_typevar_O = (Comparable) mock.typeVarWithTypeParams();
    }",java.lang.ClassCastException: org.mockito.internal.creation.jmock.ClassImposterizer$ClassWithSuperclassToWorkAroundCglibBug$$EnhancerByMockitoWithCGLIB$$7206ffd0 cannot be cast to java.lang.String
Mockito_25,/222043010/omniapr/defects4j/Mockito_25_buggy/test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,can_create_mock_from_return_types_declared_with_a_bounded_wildcard,"    public void can_create_mock_from_return_types_declared_with_a_bounded_wildcard() throws Exception {
        GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);

        List<? super Integer> objects = mock.returningWildcard();
        Number type_that_is_the_upper_bound_of_the_wildcard = (Number) mock.returningWildcard().get(45);
        type_that_is_the_upper_bound_of_the_wildcard.floatValue();
    }",java.lang.ClassCastException: org.mockito.internal.creation.jmock.ClassImposterizer$ClassWithSuperclassToWorkAroundCglibBug$$EnhancerByMockitoWithCGLIB$$7206ffd0 cannot be cast to java.lang.String
Mockito_25,/222043010/omniapr/defects4j/Mockito_25_buggy/test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_parameterizedtype_that_is_referencing_a_typevar_on_class,"    public void can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_parameterizedtype_that_is_referencing_a_typevar_on_class() throws Exception {
        GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);

        Cloneable cloneable_bound_that_is_declared_on_typevar_K_in_the_class_which_is_referenced_by_typevar_O_declared_on_the_method =
                mock.paramTypeWithTypeParams().get(0);
        Comparable<?> comparable_bound_that_is_declared_on_typevar_K_in_the_class_which_is_referenced_by_typevar_O_declared_on_the_method =
                mock.paramTypeWithTypeParams().get(0);
    }",java.lang.ClassCastException: org.mockito.internal.creation.jmock.ClassImposterizer$ClassWithSuperclassToWorkAroundCglibBug$$EnhancerByMockitoWithCGLIB$$7206ffd0 cannot be cast to java.lang.String
Mockito_25,/222043010/omniapr/defects4j/Mockito_25_buggy/test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,generic_deep_mock_frenzy__look_at_these_chained_calls,"    public void generic_deep_mock_frenzy__look_at_these_chained_calls() throws Exception {
        GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);

        Set<? extends Map.Entry<? extends Cloneable, Set<Number>>> entries = mock.entrySet();
        Iterator<? extends Map.Entry<? extends Cloneable,Set<Number>>> entriesIterator = mock.entrySet().iterator();
        Map.Entry<? extends Cloneable, Set<Number>> nextEntry = mock.entrySet().iterator().next();

        Cloneable cloneableKey = mock.entrySet().iterator().next().getKey();
        Comparable<?> comparableKey = mock.entrySet().iterator().next().getKey();

        Set<Number> value = mock.entrySet().iterator().next().getValue();
        Iterator<Number> numbersIterator = mock.entrySet().iterator().next().getValue().iterator();
        Number number = mock.entrySet().iterator().next().getValue().iterator().next();
    }",java.lang.ClassCastException: org.mockito.internal.creation.jmock.ClassImposterizer$ClassWithSuperclassToWorkAroundCglibBug$$EnhancerByMockitoWithCGLIB$$7206ffd0 cannot be cast to java.lang.String
Mockito_25,/222043010/omniapr/defects4j/Mockito_25_buggy/test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java,can_create_mock_from_multiple_type_variable_bounds_when_method_return_type_is_referencing_a_typevar_on_class,"    public void can_create_mock_from_multiple_type_variable_bounds_when_method_return_type_is_referencing_a_typevar_on_class() throws Exception {
        GenericsNest<?> mock = mock(GenericsNest.class, RETURNS_DEEP_STUBS);

        Cloneable cloneable_bound_of_typevar_K = mock.returningK();
        Comparable<?> comparable_bound_of_typevar_K = mock.returningK();
    }",java.lang.ClassCastException: org.mockito.internal.creation.jmock.ClassImposterizer$ClassWithSuperclassToWorkAroundCglibBug$$EnhancerByMockitoWithCGLIB$$7206ffd0 cannot be cast to java.lang.String
Mockito_26,/222043010/omniapr/defects4j/Mockito_26_buggy/test/org/mockito/internal/progress/HandyReturnValuesTest.java,should_default_values_for_primitive,"    @Test public void should_default_values_for_primitive() {
        assertThat(h.returnFor(boolean.class)).isFalse();
        assertThat(h.returnFor(char.class)).isEqualTo('\u0000');
        assertThat(h.returnFor(byte.class)).isEqualTo((byte) 0);
        assertThat(h.returnFor(short.class)).isEqualTo((short) 0);
        assertThat(h.returnFor(int.class)).isEqualTo(0);
        assertThat(h.returnFor(long.class)).isEqualTo(0L);
        assertThat(h.returnFor(float.class)).isEqualTo(0.0F);
        assertThat(h.returnFor(double.class)).isEqualTo(0.0D);
    }",java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Double
Mockito_26,/222043010/omniapr/defects4j/Mockito_26_buggy/test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java,should_return_primitive,"    @Test public void should_return_primitive() {
        assertEquals(false, values.returnValueFor(Boolean.TYPE));
        assertEquals((char) 0, values.returnValueFor(Character.TYPE));
        assertEquals((byte) 0, values.returnValueFor(Byte.TYPE));
        assertEquals((short) 0, values.returnValueFor(Short.TYPE));
        assertEquals(0, values.returnValueFor(Integer.TYPE));
        assertEquals(0L, values.returnValueFor(Long.TYPE));
        assertEquals(0F, values.returnValueFor(Float.TYPE));
        assertEquals(0D, values.returnValueFor(Double.TYPE));
    }",junit.framework.AssertionFailedError: expected:<0.0> but was:<0>
Mockito_26,/222043010/omniapr/defects4j/Mockito_26_buggy/test/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java,should_return_the_usual_default_values_for_primitives,"    public void should_return_the_usual_default_values_for_primitives() throws Throwable {
        ReturnsMocks answer = new ReturnsMocks();
        assertEquals(false, answer.answer(invocationOf(HasPrimitiveMethods.class, ""booleanMethod"")));
        assertEquals((char) 0, answer.answer(invocationOf(HasPrimitiveMethods.class, ""charMethod"")));
        assertEquals((byte) 0, answer.answer(invocationOf(HasPrimitiveMethods.class, ""byteMethod"")));
        assertEquals((short) 0, answer.answer(invocationOf(HasPrimitiveMethods.class, ""shortMethod"")));
        assertEquals(0, answer.answer(invocationOf(HasPrimitiveMethods.class, ""intMethod"")));
        assertEquals(0L, answer.answer(invocationOf(HasPrimitiveMethods.class, ""longMethod"")));
        assertEquals(0f, answer.answer(invocationOf(HasPrimitiveMethods.class, ""floatMethod"")));
        assertEquals(0d, answer.answer(invocationOf(HasPrimitiveMethods.class, ""doubleMethod"")));
    }",junit.framework.AssertionFailedError: expected:<0.0> but was:<0>
Mockito_26,/222043010/omniapr/defects4j/Mockito_26_buggy/test/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java,should_return_the_usual_default_values_for_primitives,"    public void should_return_the_usual_default_values_for_primitives() throws Throwable {
        Answer<Object> answer = new ReturnsSmartNulls();
        assertEquals(false  ,   answer.answer(invocationOf(HasPrimitiveMethods.class, ""booleanMethod"")));
        assertEquals((char) 0,  answer.answer(invocationOf(HasPrimitiveMethods.class, ""charMethod"")));
        assertEquals((byte) 0,  answer.answer(invocationOf(HasPrimitiveMethods.class, ""byteMethod"")));
        assertEquals((short) 0, answer.answer(invocationOf(HasPrimitiveMethods.class, ""shortMethod"")));
        assertEquals(0,         answer.answer(invocationOf(HasPrimitiveMethods.class, ""intMethod"")));
        assertEquals(0L,        answer.answer(invocationOf(HasPrimitiveMethods.class, ""longMethod"")));
        assertEquals(0f,        answer.answer(invocationOf(HasPrimitiveMethods.class, ""floatMethod"")));
        assertEquals(0d,        answer.answer(invocationOf(HasPrimitiveMethods.class, ""doubleMethod"")));
    }",junit.framework.AssertionFailedError: expected:<0.0> but was:<0>
Mockito_27,/222043010/omniapr/defects4j/Mockito_27_buggy/test/org/mockitousage/bugs/ListenersLostOnResetMockTest.java,listener,"    public void listener() throws Exception {
        InvocationListener invocationListener = mock(InvocationListener.class);

        List mockedList = mock(List.class, withSettings().invocationListeners(invocationListener));
        reset(mockedList);

        mockedList.clear();

        verify(invocationListener).reportInvocation(any(MethodInvocationReport.class));
    }",junit.framework.AssertionFailedError: 
Mockito_28,/222043010/omniapr/defects4j/Mockito_28_buggy/test/org/mockitousage/bugs/InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest.java,mock_should_be_injected_once_and_in_the_best_matching_type,"    public void mock_should_be_injected_once_and_in_the_best_matching_type() {
        assertSame(REFERENCE, illegalInjectionExample.mockShouldNotGoInHere);
        assertSame(mockedBean, illegalInjectionExample.mockShouldGoInHere);
    }",junit.framework.AssertionFailedError: expected same:<java.lang.Object@65ff5d53> was not:<mockedBean>
Mockito_29,/222043010/omniapr/defects4j/Mockito_29_buggy/test/org/mockitousage/bugs/NPEWithCertainMatchersTest.java,shouldNotThrowNPEWhenNullPassedToSame,"    public void shouldNotThrowNPEWhenNullPassedToSame() {
        mock.objectArgMethod(""not null"");

        verify(mock).objectArgMethod(same(null));
    }","java.lang.Exception: Unexpected exception, expected<java.lang.AssertionError> but was<java.lang.NullPointerException>"
Mockito_30,/222043010/omniapr/defects4j/Mockito_30_buggy/test/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java,shouldPrintTheParametersOnSmartNullPointerExceptionMessage,"	public void shouldPrintTheParametersOnSmartNullPointerExceptionMessage() throws Throwable {
    	Answer<Object> answer = new ReturnsSmartNulls();

        Foo smartNull = (Foo) answer.answer(invocationOf(Foo.class, ""withArgs"", ""oompa"", ""lumpa""));

        try {
            smartNull.get();
            fail();
        } catch (SmartNullPointerException ex) {
        	String message = ex.getMessage();
        	assertTrue(""Exception message should include oompa and lumpa, but was: "" + message,
        			message.contains(""oompa, lumpa""));
        }
	}","junit.framework.AssertionFailedError: Exception message should include oompa and lumpa, but was: "
Mockito_31,/222043010/omniapr/defects4j/Mockito_31_buggy/test/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java,shouldPrintTheParametersWhenCallingAMethodWithArgs,"    public void shouldPrintTheParametersWhenCallingAMethodWithArgs() throws Throwable {
    	Answer<Object> answer = new ReturnsSmartNulls();

    	Foo smartNull = (Foo) answer.answer(invocationOf(Foo.class, ""withArgs"", ""oompa"", ""lumpa""));

    	assertEquals(""SmartNull returned by unstubbed withArgs(oompa, lumpa) method on mock"", smartNull + """");
    }","junit.framework.ComparisonFailure: expected:<... unstubbed withArgs([oompa, lumpa]) method on mock> but was:<... unstubbed withArgs([]) method on mock>"
Mockito_32,/222043010/omniapr/defects4j/Mockito_32_buggy/test/org/mockitousage/bugs/SpyShouldHaveNiceNameTest.java,shouldPrintNiceName,"    public void shouldPrintNiceName() {
        //when
        veryCoolSpy.add(1);

        try {
            verify(veryCoolSpy).add(2);
            fail();
        } catch(AssertionError e) {
            Assertions.assertThat(e.getMessage()).contains(""veryCoolSpy"");
        }
    }",junit.framework.AssertionFailedError: <'
Mockito_33,/222043010/omniapr/defects4j/Mockito_33_buggy/test/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java,shouldStubbingWork,"    public void shouldStubbingWork() {
        Mockito.when(iterable.iterator()).thenReturn(myIterator);
        Assert.assertNotNull(((Iterable) iterable).iterator());
        Assert.assertNotNull(iterable.iterator());
    }",junit.framework.AssertionFailedError
Mockito_33,/222043010/omniapr/defects4j/Mockito_33_buggy/test/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java,shouldVerificationWorks,"    public void shouldVerificationWorks() {
        iterable.iterator();
        
        verify(iterable).iterator();
        verify((Iterable) iterable).iterator();
    }",junit.framework.AssertionFailedError
Mockito_34,/222043010/omniapr/defects4j/Mockito_34_buggy/test/org/mockito/internal/invocation/InvocationMatcherTest.java,shouldMatchCaptureArgumentsWhenArgsCountDoesNOTMatch,"    public void shouldMatchCaptureArgumentsWhenArgsCountDoesNOTMatch() throws Exception {
        //given
        mock.varargs();
        Invocation invocation = getLastInvocation();

        //when
        InvocationMatcher invocationMatcher = new InvocationMatcher(invocation, (List) asList(new LocalizedMatcher(AnyVararg.ANY_VARARG)));

        //then
        invocationMatcher.captureArgumentsFrom(invocation);
    }",java.lang.ArrayIndexOutOfBoundsException: 0
Mockito_34,/222043010/omniapr/defects4j/Mockito_34_buggy/test/org/mockitousage/basicapi/UsingVarargsTest.java,shouldMatchEasilyEmptyVararg,"    public void shouldMatchEasilyEmptyVararg() throws Exception {
        //when
        when(mock.foo(anyVararg())).thenReturn(-1);

        //then
        assertEquals(-1, mock.foo());
    }",java.lang.ArrayIndexOutOfBoundsException: 0
Mockito_35,/222043010/omniapr/defects4j/Mockito_35_buggy/test/org/mockitousage/bugs/NPEWithCertainMatchersTest.java,shouldNotThrowNPEWhenIntPassed,"    public void shouldNotThrowNPEWhenIntPassed() {
        mock.intArgumentMethod(100);
        
        verify(mock).intArgumentMethod(isA(Integer.class));
    }",java.lang.NullPointerException
Mockito_35,/222043010/omniapr/defects4j/Mockito_35_buggy/test/org/mockitousage/bugs/NPEWithCertainMatchersTest.java,shouldNotThrowNPEWhenIntegerPassed,"    public void shouldNotThrowNPEWhenIntegerPassed() {
        mock.intArgumentMethod(100);

        verify(mock).intArgumentMethod(isA(Integer.class));
    }",java.lang.NullPointerException
Mockito_35,/222043010/omniapr/defects4j/Mockito_35_buggy/test/org/mockitousage/bugs/NPEWithCertainMatchersTest.java,shouldNotThrowNPEWhenIntegerPassedToEq,"    public void shouldNotThrowNPEWhenIntegerPassedToEq() {
        mock.intArgumentMethod(100);
        
        verify(mock).intArgumentMethod(eq(new Integer(100)));
    }",java.lang.NullPointerException
Mockito_35,/222043010/omniapr/defects4j/Mockito_35_buggy/test/org/mockitousage/bugs/NPEWithCertainMatchersTest.java,shouldNotThrowNPEWhenIntegerPassedToSame,"    public void shouldNotThrowNPEWhenIntegerPassedToSame() {
        mock.intArgumentMethod(100);

        verify(mock, never()).intArgumentMethod(same(new Integer(100)));
    }",java.lang.NullPointerException
Mockito_36,/222043010/omniapr/defects4j/Mockito_36_buggy/test/org/mockito/internal/invocation/InvocationTest.java,shouldScreamWhenCallingRealMethodOnInterface,"    public void shouldScreamWhenCallingRealMethodOnInterface() throws Throwable {
        //given
        Invocation invocationOnInterface = new InvocationBuilder().toInvocation();

        try {
            //when
            invocationOnInterface.callRealMethod();
            //then
            fail();
        } catch(MockitoException e) {}
    }",java.lang.NullPointerException
Mockito_36,/222043010/omniapr/defects4j/Mockito_36_buggy/test/org/mockitousage/spies/SpyingOnInterfacesTest.java,shouldFailInRuntimeWhenCallingRealMethodOnInterface,"    public void shouldFailInRuntimeWhenCallingRealMethodOnInterface() throws Exception {
        //given
        List list = mock(List.class);
        when(list.get(0)).thenAnswer(
            new Answer() {
                public Object answer(InvocationOnMock invocation) throws Throwable {
                    return invocation.callRealMethod();
                }
            }
        );
        try {
            //when
            list.get(0);            
            //then
            fail();
        } catch (MockitoException e) {}
    }",java.lang.NoSuchMethodError: java.lang.Object.get(I)Ljava/lang/Object;
Mockito_37,/222043010/omniapr/defects4j/Mockito_37_buggy/test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java,shouldFailWhenCallingRealMethodOnIterface,"    public void shouldFailWhenCallingRealMethodOnIterface() throws Throwable {
        //given
        Invocation inovcationOnIterface = new InvocationBuilder().method(""simpleMethod"").toInvocation();
        try {
            //when
            validator.validate(new CallsRealMethods(), inovcationOnIterface);
            //then
            fail();
        } catch (MockitoException e) {}
    }",junit.framework.AssertionFailedError
Mockito_37,/222043010/omniapr/defects4j/Mockito_37_buggy/test/org/mockitousage/spies/SpyingOnInterfacesTest.java,shouldFailFastWhenCallingRealMethodOnInterface,"    public void shouldFailFastWhenCallingRealMethodOnInterface() throws Exception {
        List list = mock(List.class);
        try {
            //when
            when(list.get(0)).thenCallRealMethod();
            //then
            fail();
        } catch (MockitoException e) {}
    }",junit.framework.AssertionFailedError
Jsoup_2,/222043010/omniapr/defects4j/Jsoup_2_buggy/src/test/java/org/jsoup/parser/ParserTest.java,handlesTextAfterData,"    @Test public void handlesTextAfterData() {
        String h = ""<html><body>pre <script>inner</script> aft</body></html>"";
        Document doc = Jsoup.parse(h);
        assertEquals(""<html><head></head><body>pre <script>inner</script> aft</body></html>"", TextUtil.stripNewlines(doc.html()));
    }",junit.framework.AssertionFailedError: expected:<...dy>pre <script>inner[</script> aft]</body></html>> but was:<...dy>pre <script>inner[ aft</script>]</body></html>>
Jsoup_3,/222043010/omniapr/defects4j/Jsoup_3_buggy/src/test/java/org/jsoup/nodes/ElementTest.java,testAppendRowToTable,"    @Test public void testAppendRowToTable() {
        Document doc = Jsoup.parse(""<table><tr><td>1</td></tr></table>"");
        Element table = doc.select(""table"").first();
        table.append(""<tr><td>2</td></tr>"");

        assertEquals(""<table><tr><td>1</td></tr><tr><td>2</td></tr></table>"", TextUtil.stripNewlines(doc.body().html()));
    }",junit.framework.AssertionFailedError: expected:<...tr><td>1</td></tr><t[r><td>2</td></tr]></table>> but was:<...tr><td>1</td></tr><t[able><tr><td>2</td></tr></table]></table>>
Jsoup_3,/222043010/omniapr/defects4j/Jsoup_3_buggy/src/test/java/org/jsoup/nodes/ElementTest.java,testPrependRowToTable,"        @Test public void testPrependRowToTable() {
        Document doc = Jsoup.parse(""<table><tr><td>1</td></tr></table>"");
        Element table = doc.select(""table"").first();
        table.prepend(""<tr><td>2</td></tr>"");

        assertEquals(""<table><tr><td>2</td></tr><tr><td>1</td></tr></table>"", TextUtil.stripNewlines(doc.body().html()));
    }",junit.framework.AssertionFailedError: expected:<...tr><td>1</td></tr><t[r><td>2</td></tr]></table>> but was:<...tr><td>1</td></tr><t[able><tr><td>2</td></tr></table]></table>>
Jsoup_3,/222043010/omniapr/defects4j/Jsoup_3_buggy/src/test/java/org/jsoup/parser/ParserTest.java,handlesNestedImplicitTable,"    @Test public void handlesNestedImplicitTable() {
        Document doc = Jsoup.parse(""<table><td>1</td></tr> <td>2</td></tr> <td> <table><td>3</td> <td>4</td></table> <tr><td>5</table>"");
        assertEquals(""<table><tr><td>1</td></tr> <tr><td>2</td></tr> <tr><td> <table><tr><td>3</td> <td>4</td></tr></table> </td></tr><tr><td>5</td></tr></table>"", TextUtil.stripNewlines(doc.body().html()));
    }",junit.framework.AssertionFailedError: expected:<...> <tr><td> <table><t[r><td>3</td> <td>4</td></tr></table> </td></tr><tr><td>5]</td></tr></table>> but was:<...> <tr><td> <table><t[d>3</td> <td>4</td></table> <tr><td>5</td></tr>]</td></tr></table>>
Jsoup_4,/222043010/omniapr/defects4j/Jsoup_4_buggy/src/test/java/org/jsoup/nodes/EntitiesTest.java,escape,"    @Test public void escape() {
        String text = ""Hello &<> Å å π 新 there"";
        String escapedAscii = Entities.escape(text, Charset.forName(""ascii"").newEncoder(), Entities.EscapeMode.base);
        String escapedAsciiFull = Entities.escape(text, Charset.forName(""ascii"").newEncoder(), Entities.EscapeMode.extended);
        String escapedUtf = Entities.escape(text, Charset.forName(""UTF-8"").newEncoder(), Entities.EscapeMode.base);

        assertEquals(""Hello &amp;&lt;&gt; &Aring; &aring; &#960; &#26032; there"", escapedAscii);
        assertEquals(""Hello &amp;&lt;&gt; &angst; &aring; &pi; &#26032; there"", escapedAsciiFull);
        assertEquals(""Hello &amp;&lt;&gt; &Aring; &aring; π 新 there"", escapedUtf);
        // odd that it's defined as aring in base but angst in full
    }",junit.framework.AssertionFailedError: expected:<...ello &amp;&lt;&gt; &[A]ring; &aring; &#960;...> but was:<...ello &amp;&lt;&gt; &[a]ring; &aring; &#960;...>
Jsoup_4,/222043010/omniapr/defects4j/Jsoup_4_buggy/src/test/java/org/jsoup/nodes/EntitiesTest.java,caseSensitive,"    @Test public void caseSensitive() {
        String unescaped = ""Ü ü & &"";
        assertEquals(""&Uuml; &uuml; &amp; &amp;"", Entities.escape(unescaped, Charset.forName(""ascii"").newEncoder(), Entities.EscapeMode.extended));
        
        String escaped = ""&Uuml; &uuml; &amp; &AMP"";
        assertEquals(""Ü ü & &"", Entities.unescape(escaped));
    }",junit.framework.AssertionFailedError: expected:<...ello &amp;&lt;&gt; &[A]ring; &aring; &#960;...> but was:<...ello &amp;&lt;&gt; &[a]ring; &aring; &#960;...>
Jsoup_5,/222043010/omniapr/defects4j/Jsoup_5_buggy/src/test/java/org/jsoup/parser/ParserTest.java,parsesQuiteRoughAttributes,"    @Test public void parsesQuiteRoughAttributes() {
        String html = ""<p =a>One<a =a"";
        Document doc = Jsoup.parse(html);
        assertEquals(""<p>One<a></a></p>"", doc.body().html());
        
        doc = Jsoup.parse(""<p ....."");
        assertEquals(""<p></p>"", doc.body().html());
        
        doc = Jsoup.parse(""<p .....<p!!"");
        assertEquals(""<p></p>\n<p></p>"", doc.body().html());
    }",java.lang.StringIndexOutOfBoundsException: String index out of range: 14
Jsoup_6,/222043010/omniapr/defects4j/Jsoup_6_buggy/src/test/java/org/jsoup/integration/ParseTest.java,testYahooArticle,"    public void testYahooArticle() throws IOException {
        File in = getFile(""/htmltests/yahoo-article-1.html"");
        Document doc = Jsoup.parse(in, ""UTF-8"", ""http://news.yahoo.com/s/nm/20100831/bs_nm/us_gm_china"");
        Element p = doc.select(""p:contains(Volt will be sold in the United States"").first();
        assertEquals(""In July, GM said its electric Chevrolet Volt will be sold in the United States at $41,000 -- $8,000 more than its nearest competitor, the Nissan Leaf."", p.text());
    }",java.lang.IllegalArgumentException: Illegal group reference: group index is missing
Jsoup_6,/222043010/omniapr/defects4j/Jsoup_6_buggy/src/test/java/org/jsoup/nodes/EntitiesTest.java,quoteReplacements,"    @Test public void quoteReplacements() {
        String escaped = ""&#92; &#36;"";
        String unescaped = ""\\ $"";
        
        assertEquals(unescaped, Entities.unescape(escaped));
    }",java.lang.IllegalArgumentException: character to be escaped is missing
Jsoup_7,/222043010/omniapr/defects4j/Jsoup_7_buggy/src/test/java/org/jsoup/nodes/DocumentTest.java,testNormalisesStructure,"    @Test public void testNormalisesStructure() {
        Document doc = Jsoup.parse(""<html><head><script>one</script><noscript><p>two</p></noscript></head><body><p>three</p></body></html>"");
        assertEquals(""<html><head><script>one</script><noscript></noscript></head><body><p>two</p><p>three</p></body></html>"", TextUtil.stripNewlines(doc.html()));
    }",junit.framework.AssertionFailedError: expected:<...</script><noscript><[/noscript></head><body><p>two</p><p>three</p></body]></html>> but was:<...</script><noscript><[body><p>two</p><body><p>three</p></body></body></noscript></head]></html>>
Jsoup_8,/222043010/omniapr/defects4j/Jsoup_8_buggy/src/test/java/org/jsoup/nodes/ElementTest.java,parentlessToString,"    @Test public void parentlessToString() {
        Document doc = Jsoup.parse(""<img src='foo'>"");
        Element img = doc.select(""img"").first();
        assertEquals(""\n<img src=\""foo\"" />"", img.toString());

        img.remove(); // lost its parent
        assertEquals(""<img src=\""foo\"" />"", img.toString());
    }",java.lang.NullPointerException
Jsoup_9,/222043010/omniapr/defects4j/Jsoup_9_buggy/src/test/java/org/jsoup/nodes/EntitiesTest.java,unescape,"    @Test public void unescape() {
        String text = ""Hello &amp;&LT&gt; &angst &#960; &#960 &#x65B0; there &! &frac34;"";
        assertEquals(""Hello &<> Å π π 新 there &! ¾"", Entities.unescape(text));

        assertEquals(""&0987654321; &unknown"", Entities.unescape(""&0987654321; &unknown""));
    }",junit.framework.AssertionFailedError: expected:<...<> Å π π 新 there &! [¾]> but was:<...<> Å π π 新 there &! [&frac34;]>
Jsoup_10,/222043010/omniapr/defects4j/Jsoup_10_buggy/src/test/java/org/jsoup/nodes/NodeTest.java,absHandlesRelativeQuery,"    @Test public void absHandlesRelativeQuery() {
        Document doc = Jsoup.parse(""<a href='?foo'>One</a> <a href='bar.html?foo'>Two</a>"", ""http://jsoup.org/path/file?bar"");

        Element a1 = doc.select(""a"").first();
        assertEquals(""http://jsoup.org/path/file?foo"", a1.absUrl(""href""));

        Element a2 = doc.select(""a"").get(1);
        assertEquals(""http://jsoup.org/path/bar.html?foo"", a2.absUrl(""href""));
    }",junit.framework.AssertionFailedError: expected:<...tp://jsoup.org/path/[file]?foo> but was:<...tp://jsoup.org/path/[]?foo>
Jsoup_11,/222043010/omniapr/defects4j/Jsoup_11_buggy/src/test/java/org/jsoup/select/SelectorTest.java,notAll,"    @Test public void notAll() {
        Document doc = Jsoup.parse(""<p>Two</p> <p><span>Three</span></p>"");

        Elements el1 = doc.body().select("":not(p)""); // should just be the span
        assertEquals(2, el1.size());
        assertEquals(""body"", el1.first().tagName());
        assertEquals(""span"", el1.last().tagName());
    }",org.jsoup.select.Selector$SelectorParseException: Could not parse query ':not(p)': unexpected token at ':not(p)'
Jsoup_11,/222043010/omniapr/defects4j/Jsoup_11_buggy/src/test/java/org/jsoup/select/SelectorTest.java,testPseudoHas,"    @Test public void testPseudoHas() {
        Document doc = Jsoup.parse(""<div id=0><p><span>Hello</span></p></div> <div id=1><span class=foo>There</span></div> <div id=2><p>Not</p></div>"");

        Elements divs1 = doc.select(""div:has(span)"");
        assertEquals(2, divs1.size());
        assertEquals(""0"", divs1.get(0).id());
        assertEquals(""1"", divs1.get(1).id());

        Elements divs2 = doc.select(""div:has([class]"");
        assertEquals(1, divs2.size());
        assertEquals(""1"", divs2.get(0).id());

        Elements divs3 = doc.select(""div:has(span, p)"");
        assertEquals(3, divs3.size());
        assertEquals(""0"", divs3.get(0).id());
        assertEquals(""1"", divs3.get(1).id());
        assertEquals(""2"", divs3.get(2).id());

        Elements els1 = doc.body().select("":has(p)"");
        assertEquals(3, els1.size()); // body, div, dib
        assertEquals(""body"", els1.first().tagName());
        assertEquals(""0"", els1.get(1).id());
        assertEquals(""2"", els1.get(2).id());
    }",org.jsoup.select.Selector$SelectorParseException: Could not parse query ':not(p)': unexpected token at ':not(p)'
Jsoup_11,/222043010/omniapr/defects4j/Jsoup_11_buggy/src/test/java/org/jsoup/select/SelectorTest.java,notClass,"    @Test public void notClass() {
        Document doc = Jsoup.parse(""<div class=left>One</div><div class=right id=1><p>Two</p></div>"");

        Elements el1 = doc.select(""div:not(.left)"");
        assertEquals(1, el1.size());
        assertEquals(""1"", el1.first().id());
    }",org.jsoup.select.Selector$SelectorParseException: Could not parse query ':not(p)': unexpected token at ':not(p)'
Jsoup_11,/222043010/omniapr/defects4j/Jsoup_11_buggy/src/test/java/org/jsoup/select/SelectorTest.java,notParas,"    @Test public void notParas() {
        Document doc = Jsoup.parse(""<p id=1>One</p> <p>Two</p> <p><span>Three</span></p>"");

        Elements el1 = doc.select(""p:not([id=1])"");
        assertEquals(2, el1.size());
        assertEquals(""Two"", el1.first().text());
        assertEquals(""Three"", el1.last().text());

        Elements el2 = doc.select(""p:not(:has(span))"");
        assertEquals(2, el2.size());
        assertEquals(""One"", el2.first().text());
        assertEquals(""Two"", el2.last().text());
    }",org.jsoup.select.Selector$SelectorParseException: Could not parse query ':not(p)': unexpected token at ':not(p)'
Jsoup_12,/222043010/omniapr/defects4j/Jsoup_12_buggy/src/test/java/org/jsoup/select/SelectorTest.java,testByAttributeRegexCombined,"    @Test public void testByAttributeRegexCombined() {
        Document doc = Jsoup.parse(""<div><table class=x><td>Hello</td></table></div>"");
        Elements els = doc.select(""div table[class~=x|y]"");
        assertEquals(1, els.size());
        assertEquals(""Hello"", els.text());
    }",org.jsoup.select.Selector$SelectorParseException: Could not parse query '=x|y]': unexpected token at '=x|y]'
Jsoup_13,/222043010/omniapr/defects4j/Jsoup_13_buggy/src/test/java/org/jsoup/nodes/NodeTest.java,handlesAbsPrefixOnHasAttr,"    @Test public void handlesAbsPrefixOnHasAttr() {
        // 1: no abs url; 2: has abs url
        Document doc = Jsoup.parse(""<a id=1 href='/foo'>One</a> <a id=2 href='http://jsoup.org/'>Two</a>"");
        Element one = doc.select(""#1"").first();
        Element two = doc.select(""#2"").first();

        assertFalse(one.hasAttr(""abs:href""));
        assertTrue(one.hasAttr(""href""));
        assertEquals("""", one.absUrl(""href""));

        assertTrue(two.hasAttr(""abs:href""));
        assertTrue(two.hasAttr(""href""));
        assertEquals(""http://jsoup.org/"", two.absUrl(""href""));
    }",junit.framework.AssertionFailedError
Jsoup_13,/222043010/omniapr/defects4j/Jsoup_13_buggy/src/test/java/org/jsoup/nodes/NodeTest.java,handlesAbsPrefix,"    @Test public void handlesAbsPrefix() {
        Document doc = Jsoup.parse(""<a href=/foo>Hello</a>"", ""http://jsoup.org/"");
        Element a = doc.select(""a"").first();
        assertEquals(""/foo"", a.attr(""href""));
        assertEquals(""http://jsoup.org/foo"", a.attr(""abs:href""));
        assertTrue(a.hasAttr(""abs:href""));
    }",junit.framework.AssertionFailedError
Jsoup_13,/222043010/omniapr/defects4j/Jsoup_13_buggy/src/test/java/org/jsoup/select/ElementsTest.java,absAttr,"    @Test public void absAttr() {
        Document doc = Jsoup.parse(""<a id=1 href='/foo'>One</a> <a id=2 href='http://jsoup.org'>Two</a>"");
        Elements one = doc.select(""#1"");
        Elements two = doc.select(""#2"");
        Elements both = doc.select(""a"");

        assertEquals("""", one.attr(""abs:href""));
        assertEquals(""http://jsoup.org"", two.attr(""abs:href""));
        assertEquals(""http://jsoup.org"", both.attr(""abs:href""));
    }",junit.framework.AssertionFailedError: expected:<[http://jsoup.org]> but was:<[]>
Jsoup_13,/222043010/omniapr/defects4j/Jsoup_13_buggy/src/test/java/org/jsoup/select/ElementsTest.java,hasAbsAttr,"    @Test public void hasAbsAttr() {
        Document doc = Jsoup.parse(""<a id=1 href='/foo'>One</a> <a id=2 href='http://jsoup.org'>Two</a>"");
        Elements one = doc.select(""#1"");
        Elements two = doc.select(""#2"");
        Elements both = doc.select(""a"");
        assertFalse(one.hasAttr(""abs:href""));
        assertTrue(two.hasAttr(""abs:href""));
        assertTrue(both.hasAttr(""abs:href"")); // hits on #2
    }",junit.framework.AssertionFailedError: expected:<[http://jsoup.org]> but was:<[]>
Jsoup_14,/222043010/omniapr/defects4j/Jsoup_14_buggy/src/test/java/org/jsoup/parser/ParserTest.java,parsesUnterminatedTextarea,"    @Test public void parsesUnterminatedTextarea() {
        // don't parse right to end, but break on <p>
        Document doc = Jsoup.parse(""<body><p><textarea>one<p>two"");
        Element t = doc.select(""textarea"").first();
        assertEquals(""one"", t.text());
        assertEquals(""two"", doc.select(""p"").get(1).text());
    }",junit.framework.AssertionFailedError: expected:<one[]> but was:<one[<p>two]>
Jsoup_14,/222043010/omniapr/defects4j/Jsoup_14_buggy/src/test/java/org/jsoup/parser/ParserTest.java,handlesUnclosedTitle,"    @Test public void handlesUnclosedTitle() {
        Document one = Jsoup.parse(""<title>One <b>Two <b>Three</TITLE><p>Test</p>""); // has title, so <b> is plain text
        assertEquals(""One <b>Two <b>Three"", one.title());
        assertEquals(""Test"", one.select(""p"").first().text());

        Document two = Jsoup.parse(""<title>One<b>Two <p>Test</p>""); // no title, so <b> causes </title> breakout
        assertEquals(""One"", two.title());
        assertEquals(""<b>Two <p>Test</p></b>"", two.body().html());
    }",junit.framework.AssertionFailedError: expected:<one[]> but was:<one[<p>two]>
Jsoup_15,/222043010/omniapr/defects4j/Jsoup_15_buggy/src/test/java/org/jsoup/parser/ParserTest.java,handlesDataOnlyTags,"    @Test public void handlesDataOnlyTags() {
        String t = ""<style>font-family: bold</style>"";
        List<Element> tels = Jsoup.parse(t).getElementsByTag(""style"");
        assertEquals(""font-family: bold"", tels.get(0).data());
        assertEquals("""", tels.get(0).text());

        String s = ""<p>Hello</p><script>obj.insert('<a rel=\""none\"" />');\ni++;</script><p>There</p>"";
        Document doc = Jsoup.parse(s);
        assertEquals(""Hello There"", doc.text());
        assertEquals(""obj.insert('<a rel=\""none\"" />');\ni++;"", doc.data());
    }",junit.framework.AssertionFailedError: expected:<Hello []There> but was:<Hello ['); i++; ]There>
Jsoup_16,/222043010/omniapr/defects4j/Jsoup_16_buggy/src/test/java/org/jsoup/nodes/DocumentTypeTest.java,outerHtmlGeneration,"    @Test public void outerHtmlGeneration() {
        DocumentType html5 = new DocumentType(""html"", """", """", """");
        assertEquals(""<!DOCTYPE html>"", html5.outerHtml());

        DocumentType publicDocType = new DocumentType(""html"", ""-//IETF//DTD HTML//"", """", """");
        assertEquals(""<!DOCTYPE html PUBLIC \""-//IETF//DTD HTML//\"">"", publicDocType.outerHtml());

        DocumentType systemDocType = new DocumentType(""html"", """", ""http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd"", """");
        assertEquals(""<!DOCTYPE html \""http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd\"">"", systemDocType.outerHtml());

        DocumentType combo = new DocumentType(""notHtml"", ""--public"", ""--system"", """");
        assertEquals(""<!DOCTYPE notHtml PUBLIC \""--public\"" \""--system\"">"", combo.outerHtml());
    }","junit.framework.AssertionFailedError: expected:<<!DOCTYPE html [""]http://www.ibm.com/d...> but was:<<!DOCTYPE html []http://www.ibm.com/d...>"
Jsoup_16,/222043010/omniapr/defects4j/Jsoup_16_buggy/src/test/java/org/jsoup/nodes/DocumentTypeTest.java,constructorValidationThrowsExceptionOnBlankName,"    public void constructorValidationThrowsExceptionOnBlankName() {
        DocumentType fail = new DocumentType("""","""", """", """");
    }","junit.framework.AssertionFailedError: expected:<<!DOCTYPE html [""]http://www.ibm.com/d...> but was:<<!DOCTYPE html []http://www.ibm.com/d...>"
Jsoup_17,/222043010/omniapr/defects4j/Jsoup_17_buggy/src/test/java/org/jsoup/parser/ParserTest.java,handles0CharacterAsText,"    @Test public void handles0CharacterAsText() {
        Document doc = Jsoup.parse(""0<p>0</p>"");
        assertEquals(""0\n<p>0</p>"", doc.body().html());
    }",junit.framework.AssertionFailedError: expected:<[0
Jsoup_18,/222043010/omniapr/defects4j/Jsoup_18_buggy/src/test/java/org/jsoup/parser/CharacterReaderTest.java,handleCarriageReturnAsLineFeed,"    @Test public void handleCarriageReturnAsLineFeed() {
        String in = ""one \r two \r\n three"";
        CharacterReader r = new CharacterReader(in);

        String first = r.consumeTo('\n');
        assertEquals(""one "", first);
        assertEquals(""\n two \n three"", r.consumeToEnd());
    }",junit.framework.AssertionFailedError: expected:<one []> but was:<one [
Jsoup_18,/222043010/omniapr/defects4j/Jsoup_18_buggy/src/test/java/org/jsoup/parser/CharacterReaderTest.java,consumeToEnd,"    @Test public void consumeToEnd() {
        String in = ""one two three"";
        CharacterReader r = new CharacterReader(in);
        String toEnd = r.consumeToEnd();
        assertEquals(in, toEnd);
        assertTrue(r.isEmpty());
    }",junit.framework.AssertionFailedError: expected:<one []> but was:<one [
Jsoup_18,/222043010/omniapr/defects4j/Jsoup_18_buggy/src/test/java/org/jsoup/parser/ParserTest.java,handlesNewlinesAndWhitespaceInTag,"    @Test public void handlesNewlinesAndWhitespaceInTag() {
        Document doc = Jsoup.parse(""<a \n href=\""one\"" \r\n id=\""two\"" \f >"");
        assertEquals(""<a href=\""one\"" id=\""two\""></a>"", doc.body().html());
    }","junit.framework.AssertionFailedError: expected:<<a href=""one"" []id=""two""></a>> but was:<<a href=""one"" [="""" ]id=""two""></a>>"
Jsoup_19,/222043010/omniapr/defects4j/Jsoup_19_buggy/src/test/java/org/jsoup/safety/CleanerTest.java,handlesCustomProtocols,"    @Test public void handlesCustomProtocols() {
        String html = ""<img src='cid:12345' /> <img src='data:gzzt' />"";
        String dropped = Jsoup.clean(html, Whitelist.basicWithImages());
        assertEquals(""<img /> \n<img />"", dropped);

        String preserved = Jsoup.clean(html, Whitelist.basicWithImages().addProtocols(""img"", ""src"", ""cid"", ""data""));
        assertEquals(""<img src=\""cid:12345\"" /> \n<img src=\""data:gzzt\"" />"", preserved);
    }","junit.framework.AssertionFailedError: expected:<<img [src=""cid:12345"" /> "
Jsoup_20,/222043010/omniapr/defects4j/Jsoup_20_buggy/src/test/java/org/jsoup/helper/DataUtilTest.java,discardsSpuriousByteOrderMark,"    @Test public void discardsSpuriousByteOrderMark() {
        String html = ""\uFEFF<html><head><title>One</title></head><body>Two</body></html>"";
        ByteBuffer buffer = Charset.forName(""UTF-8"").encode(html);
        Document doc = DataUtil.parseByteData(buffer, ""UTF-8"", ""http://foo.com/"", Parser.htmlParser());
        assertEquals(""One"", doc.head().text());
    }",junit.framework.AssertionFailedError: expected:<[One]> but was:<[]>
Jsoup_21,/222043010/omniapr/defects4j/Jsoup_21_buggy/src/test/java/org/jsoup/select/SelectorTest.java,handlesCommasInSelector,"    @Test public void handlesCommasInSelector() {
        Document doc = Jsoup.parse(""<p name='1,2'>One</p><div>Two</div><ol><li>123</li><li>Text</li></ol>"");

        Elements ps = doc.select(""[name=1,2]"");
        assertEquals(1, ps.size());

        Elements containers = doc.select(""div, li:matches([0-9,]+)"");
        assertEquals(2, containers.size());
        assertEquals(""div"", containers.get(0).tagName());
        assertEquals(""li"", containers.get(1).tagName());
        assertEquals(""123"", containers.get(1).text());
    }",java.util.regex.PatternSyntaxException: Unclosed character class near index 3
Jsoup_21,/222043010/omniapr/defects4j/Jsoup_21_buggy/src/test/java/org/jsoup/select/SelectorTest.java,mixCombinatorGroup,"    @Test public void mixCombinatorGroup() {
        String h = ""<div class=foo><ol><li>One<li>Two<li>Three</ol></div>"";
        Document doc = Jsoup.parse(h);
        Elements els = doc.select("".foo > ol, ol > li + li"");

        assertEquals(2, els.size());
        assertEquals(""li"", els.get(0).tagName());
        assertEquals(""Three"", els.get(1).text());
    }",java.util.regex.PatternSyntaxException: Unclosed character class near index 3
Jsoup_22,/222043010/omniapr/defects4j/Jsoup_22_buggy/src/test/java/org/jsoup/nodes/ElementTest.java,elementIsNotASiblingOfItself,"    @Test public void elementIsNotASiblingOfItself() {
        Document doc = Jsoup.parse(""<div><p>One<p>Two<p>Three</div>"");
        Element p2 = doc.select(""p"").get(1);

        assertEquals(""Two"", p2.text());
        Elements els = p2.siblingElements();
        assertEquals(2, els.size());
        assertEquals(""<p>One</p>"", els.get(0).outerHtml());
        assertEquals(""<p>Three</p>"", els.get(1).outerHtml());
    }",junit.framework.AssertionFailedError: expected:<2> but was:<3>
Jsoup_22,/222043010/omniapr/defects4j/Jsoup_22_buggy/src/test/java/org/jsoup/nodes/NodeTest.java,nodeIsNotASiblingOfItself,"    @Test public void nodeIsNotASiblingOfItself() {
        Document doc = Jsoup.parse(""<div><p>One<p>Two<p>Three</div>"");
        Element p2 = doc.select(""p"").get(1);

        assertEquals(""Two"", p2.text());
        List<Node> nodes = p2.siblingNodes();
        assertEquals(2, nodes.size());
        assertEquals(""<p>One</p>"", nodes.get(0).outerHtml());
        assertEquals(""<p>Three</p>"", nodes.get(1).outerHtml());
    }",junit.framework.AssertionFailedError: expected:<2> but was:<3>
Jsoup_22,/222043010/omniapr/defects4j/Jsoup_22_buggy/src/test/java/org/jsoup/nodes/NodeTest.java,orphanNodeReturnsNullForSiblingElements,"    @Test public void orphanNodeReturnsNullForSiblingElements() {
        Node node = new Element(Tag.valueOf(""p""), """");
        Element el = new Element(Tag.valueOf(""p""), """");

        assertEquals(0, node.siblingIndex());
        assertEquals(0, node.siblingNodes().size());

        assertNull(node.previousSibling());
        assertNull(node.nextSibling());

        assertEquals(0, el.siblingElements().size());
        assertNull(el.previousElementSibling());
        assertNull(el.nextElementSibling());
    }",junit.framework.AssertionFailedError: expected:<2> but was:<3>
Jsoup_23,/222043010/omniapr/defects4j/Jsoup_23_buggy/src/test/java/org/jsoup/nodes/EntitiesTest.java,letterDigitEntities,"    @Test public void letterDigitEntities() {
        String html = ""<p>&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;</p>"";
        Document doc = Jsoup.parse(html);
        Element p = doc.select(""p"").first();
        assertEquals(""&sup1;&sup2;&sup3;&frac14;&frac12;&frac34;"", p.html());
        assertEquals(""¹²³¼½¾"", p.text());
    }",junit.framework.AssertionFailedError: expected:<[&sup1;&sup2;&sup3;&frac14;&frac12;&]frac34;> but was:<[⊃1;⊃2;⊃3;&amp;frac14;&amp;frac12;&amp;]frac34;>
Jsoup_24,/222043010/omniapr/defects4j/Jsoup_24_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,handlesQuotesInCommentsInScripts,"    @Test public void handlesQuotesInCommentsInScripts() {
        String html = ""<script>\n"" +
                ""  <!--\n"" +
                ""    document.write('</scr' + 'ipt>');\n"" +
                ""  // -->\n"" +
                ""</script>"";
        Document node = Jsoup.parseBodyFragment(html);
        assertEquals(""<script>\n"" +
                ""  <!--\n"" +
                ""    document.write('</scr' + 'ipt>');\n"" +
                ""  // -->\n"" +
                ""</script>"", node.body().html());
    }",junit.framework.AssertionFailedError: expected:<...ocument.write('</scr['] + 'ipt>');
Jsoup_25,/222043010/omniapr/defects4j/Jsoup_25_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,preservesSpaceInTextArea,"    @Test public void preservesSpaceInTextArea() {
        // preserve because the tag is marked as preserve white space
        Document doc = Jsoup.parse(""<textarea>\n\tOne\n\tTwo\n\tThree\n</textarea>"");
        String expect = ""One\n\tTwo\n\tThree""; // the leading and trailing spaces are dropped as a convenience to authors
        Element el = doc.select(""textarea"").first();
        assertEquals(expect, el.text());
        assertEquals(expect, el.val());
        assertEquals(expect, el.html());
        assertEquals(""<textarea>\n\t"" + expect + ""\n</textarea>"", el.outerHtml()); // but preserved in round-trip html
    }",junit.framework.AssertionFailedError: expected:<One[
Jsoup_26,/222043010/omniapr/defects4j/Jsoup_26_buggy/src/test/java/org/jsoup/safety/CleanerTest.java,handlesFramesets,"    @Test public void handlesFramesets() {
        String dirty = ""<html><head><script></script><noscript></noscript></head><frameset><frame src=\""foo\"" /><frame src=\""foo\"" /></frameset></html>"";
        String clean = Jsoup.clean(dirty, Whitelist.basic());
        assertEquals("""", clean); // nothing good can come out of that

        Document dirtyDoc = Jsoup.parse(dirty);
        Document cleanDoc = new Cleaner(Whitelist.basic()).clean(dirtyDoc);
        assertFalse(cleanDoc == null);
        assertEquals(0, cleanDoc.body().childNodes().size());
    }",java.lang.NullPointerException
Jsoup_27,/222043010/omniapr/defects4j/Jsoup_27_buggy/src/test/java/org/jsoup/helper/DataUtilTest.java,testCharset,"    public void testCharset() {
        assertEquals(""utf-8"", DataUtil.getCharsetFromContentType(""text/html;charset=utf-8 ""));
        assertEquals(""UTF-8"", DataUtil.getCharsetFromContentType(""text/html; charset=UTF-8""));
        assertEquals(""ISO-8859-1"", DataUtil.getCharsetFromContentType(""text/html; charset=ISO-8859-1""));
        assertEquals(null, DataUtil.getCharsetFromContentType(""text/html""));
        assertEquals(null, DataUtil.getCharsetFromContentType(null));
        assertEquals(null, DataUtil.getCharsetFromContentType(""text/html;charset=Unknown""));
    }",junit.framework.AssertionFailedError: expected:<[utf]-8> but was:<[UTF]-8>
Jsoup_27,/222043010/omniapr/defects4j/Jsoup_27_buggy/src/test/java/org/jsoup/helper/DataUtilTest.java,testQuotedCharset,"    @Test public void testQuotedCharset() {
        assertEquals(""utf-8"", DataUtil.getCharsetFromContentType(""text/html; charset=\""utf-8\""""));
        assertEquals(""UTF-8"", DataUtil.getCharsetFromContentType(""text/html;charset=\""UTF-8\""""));
        assertEquals(""ISO-8859-1"", DataUtil.getCharsetFromContentType(""text/html; charset=\""ISO-8859-1\""""));
        assertEquals(null, DataUtil.getCharsetFromContentType(""text/html; charset=\""Unsupported\""""));
    }",junit.framework.AssertionFailedError: expected:<[utf]-8> but was:<[UTF]-8>
Jsoup_28,/222043010/omniapr/defects4j/Jsoup_28_buggy/src/test/java/org/jsoup/nodes/EntitiesTest.java,unescape,"    @Test public void unescape() {
        String text = ""Hello &amp;&LT&gt; &reg &angst; &angst &#960; &#960 &#x65B0; there &! &frac34; &copy; &COPY;"";
        assertEquals(""Hello &<> ® Å &angst π π 新 there &! ¾ © ©"", Entities.unescape(text));

        assertEquals(""&0987654321; &unknown"", Entities.unescape(""&0987654321; &unknown""));
    }",junit.framework.AssertionFailedError: expected:<Hello &<> ® Å [&angst] π π 新 there &! ¾ © ...> but was:<Hello &<> ® Å [Å] π π 新 there &! ¾ © ...>
Jsoup_28,/222043010/omniapr/defects4j/Jsoup_28_buggy/src/test/java/org/jsoup/nodes/EntitiesTest.java,noSpuriousDecodes,"    @Test public void noSpuriousDecodes() {
        String string = ""http://www.foo.com?a=1&num_rooms=1&children=0&int=VA&b=2"";
        assertEquals(string, Entities.unescape(string));
    }",junit.framework.AssertionFailedError: expected:<Hello &<> ® Å [&angst] π π 新 there &! ¾ © ...> but was:<Hello &<> ® Å [Å] π π 新 there &! ¾ © ...>
Jsoup_28,/222043010/omniapr/defects4j/Jsoup_28_buggy/src/test/java/org/jsoup/parser/AttributeParseTest.java,moreAttributeUnescapes,"    @Test public void moreAttributeUnescapes() {
        String html = ""<a href='&wr_id=123&mid-size=true&ok=&wr'>Check</a>"";
        Elements els = Jsoup.parse(html).select(""a"");
        assertEquals(""&wr_id=123&mid-size=true&ok=&wr"", els.first().attr(""href""));
    }",junit.framework.AssertionFailedError: expected:<...23&mid-size=true&ok=[&wr]> but was:<...23&mid-size=true&ok=[≀]>
Jsoup_28,/222043010/omniapr/defects4j/Jsoup_28_buggy/src/test/java/org/jsoup/parser/AttributeParseTest.java,strictAttributeUnescapes,"    @Test public void strictAttributeUnescapes() {
        String html = ""<a id=1 href='?foo=bar&mid&lt=true'>One</a> <a id=2 href='?foo=bar&lt;qux&lg=1'>Two</a>"";
        Elements els = Jsoup.parse(html).select(""a"");
        assertEquals(""?foo=bar&mid&lt=true"", els.first().attr(""href""));
        assertEquals(""?foo=bar<qux&lg=1"", els.last().attr(""href""));
    }",junit.framework.AssertionFailedError: expected:<...23&mid-size=true&ok=[&wr]> but was:<...23&mid-size=true&ok=[≀]>
Jsoup_28,/222043010/omniapr/defects4j/Jsoup_28_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,doesNotFindShortestMatchingEntity,"    @Test public void doesNotFindShortestMatchingEntity() {
        // previous behaviour was to identify a possible entity, then chomp down the string until a match was found.
        // (as defined in html5.) However in practise that lead to spurious matches against the author's intent.
        String html = ""One &clubsuite; &clubsuit;"";
        Document doc = Jsoup.parse(html);
        assertEquals(StringUtil.normaliseWhitespace(""One &amp;clubsuite; ♣""), doc.body().html());
    }",junit.framework.AssertionFailedError: expected:<One [&amp;clubsuit]e; ♣> but was:<One [♣]e; ♣>
Jsoup_28,/222043010/omniapr/defects4j/Jsoup_28_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,relaxedBaseEntityMatchAndStrictExtendedMatch,"    @Test public void relaxedBaseEntityMatchAndStrictExtendedMatch() {
        // extended entities need a ; at the end to match, base does not
        String html = ""&amp &quot &reg &icy &hopf &icy; &hopf;"";
        Document doc = Jsoup.parse(html);
        doc.outputSettings().escapeMode(Entities.EscapeMode.extended); // modifies output only to clarify test
        assertEquals(StringUtil.normaliseWhitespace(""&amp; &quot; &reg; &amp;icy &amp;hopf &icy; &hopf;""), doc.body().html());
    }",junit.framework.AssertionFailedError: expected:<One [&amp;clubsuit]e; ♣> but was:<One [♣]e; ♣>
Jsoup_29,/222043010/omniapr/defects4j/Jsoup_29_buggy/src/test/java/org/jsoup/nodes/DocumentTest.java,testTitles,"    @Test public void testTitles() {
        Document noTitle = Jsoup.parse(""<p>Hello</p>"");
        Document withTitle = Jsoup.parse(""<title>First</title><title>Ignore</title><p>Hello</p>"");
        
        assertEquals("""", noTitle.title());
        noTitle.title(""Hello"");
        assertEquals(""Hello"", noTitle.title());
        assertEquals(""Hello"", noTitle.select(""title"").first().text());
        
        assertEquals(""First"", withTitle.title());
        withTitle.title(""Hello"");
        assertEquals(""Hello"", withTitle.title());
        assertEquals(""Hello"", withTitle.select(""title"").first().text());

        Document normaliseTitle = Jsoup.parse(""<title>   Hello\nthere   \n   now   \n"");
        assertEquals(""Hello there now"", normaliseTitle.title());
    }",junit.framework.AssertionFailedError: expected:<Hello[ there] now> but was:<Hello[
Jsoup_30,/222043010/omniapr/defects4j/Jsoup_30_buggy/src/test/java/org/jsoup/safety/CleanerTest.java,testIsValid,"    @Test public void testIsValid() {
        String ok = ""<p>Test <b><a href='http://example.com/'>OK</a></b></p>"";
        String nok1 = ""<p><script></script>Not <b>OK</b></p>"";
        String nok2 = ""<p align=right>Test Not <b>OK</b></p>"";
        String nok3 = ""<!-- comment --><p>Not OK</p>""; // comments and the like will be cleaned
        assertTrue(Jsoup.isValid(ok, Whitelist.basic()));
        assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));
        assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));
        assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));
    }",junit.framework.AssertionFailedError
Jsoup_31,/222043010/omniapr/defects4j/Jsoup_31_buggy/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,handlesXmlDeclarationAsDeclaration,"    @Test public void handlesXmlDeclarationAsDeclaration() {
        String html = ""<?xml encoding='UTF-8' ?><body>One</body><!-- comment -->"";
        Document doc = Jsoup.parse(html, """", Parser.xmlParser());
        assertEquals(""<?xml encoding='UTF-8' ?> <body> One </body> <!-- comment -->"",
                StringUtil.normaliseWhitespace(doc.outerHtml()));
        assertEquals(""#declaration"", doc.childNode(0).nodeName());
        assertEquals(""#comment"", doc.childNode(2).nodeName());
    }",junit.framework.AssertionFailedError: expected:<<[?xml encoding='UTF-8' ?]> <body> One </body>...> but was:<<[!--?xml encoding='UTF-8' ?--]> <body> One </body>...>
Jsoup_32,/222043010/omniapr/defects4j/Jsoup_32_buggy/src/test/java/org/jsoup/nodes/ElementTest.java,testClonesClassnames,"    @Test public void testClonesClassnames() {
        Document doc = Jsoup.parse(""<div class='one two'></div>"");
        Element div = doc.select(""div"").first();
        Set<String> classes = div.classNames();
        assertEquals(2, classes.size());
        assertTrue(classes.contains(""one""));
        assertTrue(classes.contains(""two""));

        Element copy = div.clone();
        Set<String> copyClasses = copy.classNames();
        assertEquals(2, copyClasses.size());
        assertTrue(copyClasses.contains(""one""));
        assertTrue(copyClasses.contains(""two""));
        copyClasses.add(""three"");
        copyClasses.remove(""one"");

        assertTrue(classes.contains(""one""));
        assertFalse(classes.contains(""three""));
        assertFalse(copyClasses.contains(""one""));
        assertTrue(copyClasses.contains(""three""));

        assertEquals("""", div.html());
        assertEquals("""", copy.html());
    }",junit.framework.AssertionFailedError
Jsoup_33,/222043010/omniapr/defects4j/Jsoup_33_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,handlesKnownEmptyBlocks,"    @Test public void handlesKnownEmptyBlocks() {
        // if a known tag, allow self closing outside of spec, but force an end tag. unknown tags can be self closing.
        String h = ""<div id='1' /><script src='/foo' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two"";
        Document doc = Jsoup.parse(h);
        assertEquals(""<div id=\""1\""></div><script src=\""/foo\""></script><div id=\""2\""><img /><img /></div><a id=\""3\""></a><i></i><foo /><foo>One</foo> <hr /> hr text <hr /> hr text two"", TextUtil.stripNewlines(doc.body().html()));
    }","junit.framework.AssertionFailedError: expected:<...src=""/foo""></script>[<div id=""2""><img /><img /></div><a id=""3""></a><i></i><foo /><foo>One</foo> <hr /> hr text <hr />] hr text two> but was:<...src=""/foo""></script>[&lt;div id=2&gt;&lt;img /&gt;&lt;img&gt;&lt;/div&gt;&lt;a id=3 /&gt;&lt;i /&gt;&lt;foo /&gt;&lt;foo&gt;One&lt;/foo&gt; &lt;hr /&gt; hr text &lt;hr&gt;] hr text two>"
Jsoup_34,/222043010/omniapr/defects4j/Jsoup_34_buggy/src/test/java/org/jsoup/parser/CharacterReaderTest.java,nextIndexOfUnmatched,"    @Test public void nextIndexOfUnmatched() {
        CharacterReader r = new CharacterReader(""<[[one]]"");
        assertEquals(-1, r.nextIndexOf(""]]>""));
    }",java.lang.ArrayIndexOutOfBoundsException: 8
Jsoup_34,/222043010/omniapr/defects4j/Jsoup_34_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,handlesUnclosedCdataAtEOF,"    @Test public void handlesUnclosedCdataAtEOF() {
        // https://github.com/jhy/jsoup/issues/349 would crash, as character reader would try to seek past EOF
        String h = ""<![CDATA[]]"";
        Document doc = Jsoup.parse(h);
        assertEquals(1, doc.body().childNodeSize());
    }",java.lang.ArrayIndexOutOfBoundsException: 11
Jsoup_35,/222043010/omniapr/defects4j/Jsoup_35_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,handlesUnclosedAnchors,"    @Test public void handlesUnclosedAnchors() {
        String h = ""<a href='http://example.com/'>Link<p>Error link</a>"";
        Document doc = Jsoup.parse(h);
        String want = ""<a href=\""http://example.com/\"">Link</a>\n<p><a href=\""http://example.com/\"">Error link</a></p>"";
        assertEquals(want, doc.body().html());
    }","junit.framework.AssertionFailedError: expected:<...com/"">Link</a>"
Jsoup_36,/222043010/omniapr/defects4j/Jsoup_36_buggy/src/test/java/org/jsoup/helper/DataUtilTest.java,shouldCorrectCharsetForDuplicateCharsetString,"    public void shouldCorrectCharsetForDuplicateCharsetString() {
        assertEquals(""iso-8859-1"", DataUtil.getCharsetFromContentType(""text/html; charset=charset=iso-8859-1""));
    }",java.nio.charset.IllegalCharsetNameException: charset=iso-8859-1
Jsoup_36,/222043010/omniapr/defects4j/Jsoup_36_buggy/src/test/java/org/jsoup/helper/DataUtilTest.java,shouldNotThrowExceptionOnEmptyCharset,"    public void shouldNotThrowExceptionOnEmptyCharset() {
        assertEquals(null, DataUtil.getCharsetFromContentType(""text/html; charset=""));
        assertEquals(null, DataUtil.getCharsetFromContentType(""text/html; charset=;""));
    }",java.nio.charset.IllegalCharsetNameException: charset=iso-8859-1
Jsoup_36,/222043010/omniapr/defects4j/Jsoup_36_buggy/src/test/java/org/jsoup/helper/DataUtilTest.java,testQuotedCharset,"    @Test public void testQuotedCharset() {
        assertEquals(""utf-8"", DataUtil.getCharsetFromContentType(""text/html; charset=\""utf-8\""""));
        assertEquals(""UTF-8"", DataUtil.getCharsetFromContentType(""text/html;charset=\""UTF-8\""""));
        assertEquals(""ISO-8859-1"", DataUtil.getCharsetFromContentType(""text/html; charset=\""ISO-8859-1\""""));
        assertEquals(null, DataUtil.getCharsetFromContentType(""text/html; charset=\""Unsupported\""""));
        assertEquals(""UTF-8"", DataUtil.getCharsetFromContentType(""text/html; charset='UTF-8'""));
    }",java.nio.charset.IllegalCharsetNameException: charset=iso-8859-1
Jsoup_36,/222043010/omniapr/defects4j/Jsoup_36_buggy/src/test/java/org/jsoup/helper/DataUtilTest.java,shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags,"    public void shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags() {
        assertEquals(""ISO-8859-1"", DataUtil.getCharsetFromContentType(""text/html; charset=ISO-8859-1, charset=1251""));
    }",java.nio.charset.IllegalCharsetNameException: charset=iso-8859-1
Jsoup_36,/222043010/omniapr/defects4j/Jsoup_36_buggy/src/test/java/org/jsoup/helper/DataUtilTest.java,shouldReturnNullForIllegalCharsetNames,"    public void shouldReturnNullForIllegalCharsetNames() {
        assertEquals(null, DataUtil.getCharsetFromContentType(""text/html; charset=$HJKDF§$/(""));
    }",java.nio.charset.IllegalCharsetNameException: charset=iso-8859-1
Jsoup_36,/222043010/omniapr/defects4j/Jsoup_36_buggy/src/test/java/org/jsoup/integration/ParseTest.java,testBrokenHtml5CharsetWithASingleDoubleQuote,"    public void testBrokenHtml5CharsetWithASingleDoubleQuote() throws IOException {
        InputStream in = inputStreamFrom(""<html>\n"" +
                ""<head><meta charset=UTF-8\""></head>\n"" +
                ""<body></body>\n"" +
                ""</html>"");
        Document doc = Jsoup.parse(in, null, ""http://example.com/"");
        assertEquals(""UTF-8"", doc.outputSettings().charset().displayName());
    }","java.nio.charset.IllegalCharsetNameException: UTF-8"""
Jsoup_37,/222043010/omniapr/defects4j/Jsoup_37_buggy/src/test/java/org/jsoup/nodes/ElementTest.java,testNotPretty,"    @Test public void testNotPretty() {
        Document doc = Jsoup.parse(""<div>   \n<p>Hello\n there\n</p></div>"");
        doc.outputSettings().prettyPrint(false);
        assertEquals(""<html><head></head><body><div>   \n<p>Hello\n there\n</p></div></body></html>"", doc.html());

        Element div = doc.select(""div"").first();
        assertEquals(""   \n<p>Hello\n there\n</p>"", div.html());
    }",junit.framework.AssertionFailedError: expected:<[   
Jsoup_38,/222043010/omniapr/defects4j/Jsoup_38_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,convertsImageToImg,"    @Test public void convertsImageToImg() {
        // image to img, unless in a svg. old html cruft.
        String h = ""<body><image><svg><image /></svg></body>"";
        Document doc = Jsoup.parse(h);
        assertEquals(""<img />\n<svg>\n <image />\n</svg>"", doc.body().html());
    }",junit.framework.AssertionFailedError: expected:<<img />
Jsoup_39,/222043010/omniapr/defects4j/Jsoup_39_buggy/src/test/java/org/jsoup/helper/DataUtilTest.java,discardsSpuriousByteOrderMarkWhenNoCharsetSet,"    @Test public void discardsSpuriousByteOrderMarkWhenNoCharsetSet() {
        String html = ""\uFEFF<html><head><title>One</title></head><body>Two</body></html>"";
        ByteBuffer buffer = Charset.forName(""UTF-8"").encode(html);
        Document doc = DataUtil.parseByteData(buffer, null, ""http://foo.com/"", Parser.htmlParser());
        assertEquals(""One"", doc.head().text());
        assertEquals(""UTF-8"", doc.outputSettings().charset().displayName());
    }",junit.framework.AssertionFailedError: expected:<[One]> but was:<[]>
Jsoup_40,/222043010/omniapr/defects4j/Jsoup_40_buggy/src/test/java/org/jsoup/nodes/DocumentTypeTest.java,constructorValidationOkWithBlankName,"    public void constructorValidationOkWithBlankName() {
        DocumentType fail = new DocumentType("""","""", """", """");
    }",java.lang.IllegalArgumentException: String must not be empty
Jsoup_40,/222043010/omniapr/defects4j/Jsoup_40_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,handlesInvalidDoctypes,"    @Test public void handlesInvalidDoctypes() {
        // would previously throw invalid name exception on empty doctype
        Document doc = Jsoup.parse(""<!DOCTYPE>"");
        assertEquals(
                ""<!DOCTYPE> <html> <head></head> <body></body> </html>"",
                StringUtil.normaliseWhitespace(doc.outerHtml()));

        doc = Jsoup.parse(""<!DOCTYPE><html><p>Foo</p></html>"");
        assertEquals(
                ""<!DOCTYPE> <html> <head></head> <body> <p>Foo</p> </body> </html>"",
                StringUtil.normaliseWhitespace(doc.outerHtml()));

        doc = Jsoup.parse(""<!DOCTYPE \u0000>"");
        assertEquals(
                ""<!DOCTYPE �> <html> <head></head> <body></body> </html>"",
                StringUtil.normaliseWhitespace(doc.outerHtml()));
    }",java.lang.IllegalArgumentException: String must not be empty
Jsoup_41,/222043010/omniapr/defects4j/Jsoup_41_buggy/src/test/java/org/jsoup/nodes/ElementTest.java,testHashAndEquals,"    public void testHashAndEquals() {
        String doc1 = ""<div id=1><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>"" +
                ""<div id=2><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>"";

        Document doc = Jsoup.parse(doc1);
        Elements els = doc.select(""p"");

        /*
        for (Element el : els) {
            System.out.println(el.hashCode() + "" - "" + el.outerHtml());
        }

        0 1534787905 - <p class=""one"">One</p>
        1 1534787905 - <p class=""one"">One</p>
        2 1539683239 - <p class=""one"">Two</p>
        3 1535455211 - <p class=""two"">One</p>
        4 1534787905 - <p class=""one"">One</p>
        5 1534787905 - <p class=""one"">One</p>
        6 1539683239 - <p class=""one"">Two</p>
        7 1535455211 - <p class=""two"">One</p>
        */
        assertEquals(8, els.size());
        Element e0 = els.get(0);
        Element e1 = els.get(1);
        Element e2 = els.get(2);
        Element e3 = els.get(3);
        Element e4 = els.get(4);
        Element e5 = els.get(5);
        Element e6 = els.get(6);
        Element e7 = els.get(7);

        assertEquals(e0, e1);
        assertEquals(e0, e4);
        assertEquals(e0, e5);
        assertFalse(e0.equals(e2));
        assertFalse(e0.equals(e3));
        assertFalse(e0.equals(e6));
        assertFalse(e0.equals(e7));

        assertEquals(e0.hashCode(), e1.hashCode());
        assertEquals(e0.hashCode(), e4.hashCode());
        assertEquals(e0.hashCode(), e5.hashCode());
        assertFalse(e0.hashCode() == (e2.hashCode()));
        assertFalse(e0.hashCode() == (e3).hashCode());
        assertFalse(e0.hashCode() == (e6).hashCode());
        assertFalse(e0.hashCode() == (e7).hashCode());
    }","junit.framework.AssertionFailedError: expected: org.jsoup.nodes.Element<<p class=""one"">One</p>> but was: org.jsoup.nodes.Element<<p class=""one"">One</p>>"
Jsoup_42,/222043010/omniapr/defects4j/Jsoup_42_buggy/src/test/java/org/jsoup/nodes/FormElementTest.java,createsFormData,"    @Test public void createsFormData() {
        String html = ""<form><input name='one' value='two'><select name='three'><option value='not'>"" +
                ""<option value='four' selected><option value='five' selected><textarea name=six>seven</textarea>"" +
                ""<input name='seven' type='radio' value='on' checked><input name='seven' type='radio' value='off'>"" +
                ""<input name='eight' type='checkbox' checked><input name='nine' type='checkbox' value='unset'>"" +
                ""<input name='ten' value='text' disabled>"" +
                ""</form>"";
        Document doc = Jsoup.parse(html);
        FormElement form = (FormElement) doc.select(""form"").first();
        List<Connection.KeyVal> data = form.formData();

        assertEquals(6, data.size());
        assertEquals(""one=two"", data.get(0).toString());
        assertEquals(""three=four"", data.get(1).toString());
        assertEquals(""three=five"", data.get(2).toString());
        assertEquals(""six=seven"", data.get(3).toString());
        assertEquals(""seven=on"", data.get(4).toString()); // set
        assertEquals(""eight=on"", data.get(5).toString()); // default
        // nine should not appear, not checked checkbox
        // ten should not appear, disabled
    }",junit.framework.AssertionFailedError: expected:<6> but was:<7>
Jsoup_42,/222043010/omniapr/defects4j/Jsoup_42_buggy/src/test/java/org/jsoup/nodes/FormElementTest.java,usesOnForCheckboxValueIfNoValueSet,"    @Test public void usesOnForCheckboxValueIfNoValueSet() {
        Document doc = Jsoup.parse(""<form><input type=checkbox checked name=foo></form>"");
        FormElement form = (FormElement) doc.select(""form"").first();
        List<Connection.KeyVal> data = form.formData();
        assertEquals(""on"", data.get(0).value());
        assertEquals(""foo"", data.get(0).key());
    }",junit.framework.AssertionFailedError: expected:<6> but was:<7>
Jsoup_43,/222043010/omniapr/defects4j/Jsoup_43_buggy/src/test/java/org/jsoup/nodes/ElementTest.java,testElementSiblingIndexSameContent,"    @Test public void testElementSiblingIndexSameContent() {
        Document doc = Jsoup.parse(""<div><p>One</p>...<p>One</p>...<p>One</p>"");
        Elements ps = doc.select(""p"");
        assertTrue(0 == ps.get(0).elementSiblingIndex());
        assertTrue(1 == ps.get(1).elementSiblingIndex());
        assertTrue(2 == ps.get(2).elementSiblingIndex());
    }",junit.framework.AssertionFailedError
Jsoup_43,/222043010/omniapr/defects4j/Jsoup_43_buggy/src/test/java/org/jsoup/nodes/ElementTest.java,testGetSiblingsWithDuplicateContent,"    @Test public void testGetSiblingsWithDuplicateContent() {
        Document doc = Jsoup.parse(""<div><p>Hello<p id=1>there<p>this<p>this<p>is<p>an<p id=last>element</div>"");
        Element p = doc.getElementById(""1"");
        assertEquals(""there"", p.text());
        assertEquals(""Hello"", p.previousElementSibling().text());
        assertEquals(""this"", p.nextElementSibling().text());
        assertEquals(""this"", p.nextElementSibling().nextElementSibling().text());
        assertEquals(""is"", p.nextElementSibling().nextElementSibling().nextElementSibling().text());
        assertEquals(""Hello"", p.firstElementSibling().text());
        assertEquals(""element"", p.lastElementSibling().text());
    }",junit.framework.AssertionFailedError
Jsoup_44,/222043010/omniapr/defects4j/Jsoup_44_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,testInvalidTableContents,"    public void testInvalidTableContents() throws IOException {
        File in = ParseTest.getFile(""/htmltests/table-invalid-elements.html"");
        Document doc = Jsoup.parse(in, ""UTF-8"");
        doc.outputSettings().prettyPrint(true);
        String rendered = doc.toString();
        int endOfEmail = rendered.indexOf(""Comment"");
        int guarantee = rendered.indexOf(""Why am I here?"");
        assertTrue(""Comment not found"", endOfEmail > -1);
        assertTrue(""Search text not found"", guarantee > -1);
        assertTrue(""Search text did not come after comment"", guarantee > endOfEmail);
    }",junit.framework.AssertionFailedError: Search text did not come after comment
Jsoup_45,/222043010/omniapr/defects4j/Jsoup_45_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,testReinsertionModeForThCelss,"    @Test public void testReinsertionModeForThCelss() {
        String body = ""<body> <table> <tr> <th> <table><tr><td></td></tr></table> <div> <table><tr><td></td></tr></table> </div> <div></div> <div></div> <div></div> </th> </tr> </table> </body>"";
        Document doc = Jsoup.parse(body);
        assertEquals(1, doc.body().children().size());
    }",junit.framework.AssertionFailedError: expected:<1> but was:<5>
Jsoup_46,/222043010/omniapr/defects4j/Jsoup_46_buggy/src/test/java/org/jsoup/nodes/DocumentTest.java,testShiftJisRoundtrip,"    public void testShiftJisRoundtrip() throws Exception {
        String input =
                ""<html>""
                        +   ""<head>""
                        +     ""<meta http-equiv=\""content-type\"" content=\""text/html; charset=Shift_JIS\"" />""
                        +   ""</head>""
                        +   ""<body>""
                        +     ""before&nbsp;after""
                        +   ""</body>""
                        + ""</html>"";
        InputStream is = new ByteArrayInputStream(input.getBytes(Charset.forName(""ASCII"")));

        Document doc = Jsoup.parse(is, null, ""http://example.com"");
        doc.outputSettings().escapeMode(Entities.EscapeMode.xhtml);

        String output = new String(doc.html().getBytes(doc.outputSettings().charset()), doc.outputSettings().charset());

        assertFalse(""Should not have contained a '?'."", output.contains(""?""));
        assertTrue(""Should have contained a '&#xa0;' or a '&nbsp;'."",
                output.contains(""&#xa0;"") || output.contains(""&nbsp;""));
    }",junit.framework.AssertionFailedError: Should not have contained a '?'.
Jsoup_47,/222043010/omniapr/defects4j/Jsoup_47_buggy/src/test/java/org/jsoup/nodes/EntitiesTest.java,escapesGtInXmlAttributesButNotInHtml,"    @Test public void escapesGtInXmlAttributesButNotInHtml() {
        // https://github.com/jhy/jsoup/issues/528 - < is OK in HTML attribute values, but not in XML


        String docHtml = ""<a title='<p>One</p>'>One</a>"";
        Document doc = Jsoup.parse(docHtml);
        Element element = doc.select(""a"").first();

        doc.outputSettings().escapeMode(base);
        assertEquals(""<a title=\""<p>One</p>\"">One</a>"", element.outerHtml());

        doc.outputSettings().escapeMode(xhtml);
        assertEquals(""<a title=\""&lt;p>One&lt;/p>\"">One</a>"", element.outerHtml());
    }","junit.framework.AssertionFailedError: expected:<<a title=""[&lt;p>One&lt;]/p>"">One</a>> but was:<<a title=""[<p>One<]/p>"">One</a>>"
Jsoup_48,/222043010/omniapr/defects4j/Jsoup_48_buggy/src/test/java/org/jsoup/helper/HttpConnectionTest.java,sameHeadersCombineWithComma,"    @Test public void sameHeadersCombineWithComma() {
        Map<String, List<String>> headers = new HashMap<String, List<String>>();
        List<String> values = new ArrayList<String>();
        values.add(""no-cache"");
        values.add(""no-store"");
        headers.put(""Cache-Control"", values);
        HttpConnection.Response res = new HttpConnection.Response();
        res.processResponseHeaders(headers);
        assertEquals(""no-cache, no-store"", res.header(""Cache-Control""));
    }","junit.framework.AssertionFailedError: expected:<no-cache[, no-store]> but was:<no-cache[]>"
Jsoup_49,/222043010/omniapr/defects4j/Jsoup_49_buggy/src/test/java/org/jsoup/nodes/ElementTest.java,appendMustCorrectlyMoveChildrenInsideOneParentElement,"    public void appendMustCorrectlyMoveChildrenInsideOneParentElement() {
        Document doc = new Document("""");
        Element body = doc.appendElement(""body"");
        body.appendElement(""div1"");
        body.appendElement(""div2"");
        final Element div3 = body.appendElement(""div3"");
        div3.text(""Check"");
        final Element div4 = body.appendElement(""div4"");

        ArrayList<Element> toMove = new ArrayList<Element>();
        toMove.add(div3);
        toMove.add(div4);

        body.insertChildren(0, toMove);

        String result = doc.toString().replaceAll(""\\s+"", """");
        assertEquals(""<body><div3>Check</div3><div4></div4><div1></div1><div2></div2></body>"", result);

    }",junit.framework.AssertionFailedError: expected:<...><div3>Check</div3><[div4></div4><div1></div1><div2></div2><]/body>> but was:<...><div3>Check</div3><[]/body>>
Jsoup_50,/222043010/omniapr/defects4j/Jsoup_50_buggy/src/test/java/org/jsoup/helper/DataUtilTest.java,supportsBOMinFiles,"    public void supportsBOMinFiles() throws IOException {
        // test files from http://www.i18nl10n.com/korean/utftest/
        File in = getFile(""/bomtests/bom_utf16be.html"");
        Document doc = Jsoup.parse(in, null, ""http://example.com"");
        assertTrue(doc.title().contains(""UTF-16BE""));
        assertTrue(doc.text().contains(""가각갂갃간갅""));

        in = getFile(""/bomtests/bom_utf16le.html"");
        doc = Jsoup.parse(in, null, ""http://example.com"");
        assertTrue(doc.title().contains(""UTF-16LE""));
        assertTrue(doc.text().contains(""가각갂갃간갅""));

        in = getFile(""/bomtests/bom_utf32be.html"");
        doc = Jsoup.parse(in, null, ""http://example.com"");
        assertTrue(doc.title().contains(""UTF-32BE""));
        assertTrue(doc.text().contains(""가각갂갃간갅""));

        in = getFile(""/bomtests/bom_utf32le.html"");
        doc = Jsoup.parse(in, null, ""http://example.com"");
        assertTrue(doc.title().contains(""UTF-32LE""));
        assertTrue(doc.text().contains(""가각갂갃간갅""));
    }",junit.framework.AssertionFailedError
Jsoup_51,/222043010/omniapr/defects4j/Jsoup_51_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,testSupportsNonAsciiTags,"    @Test public void testSupportsNonAsciiTags() {
        String body = ""<進捗推移グラフ>Yes</進捗推移グラフ>"";
        Document doc = Jsoup.parse(body);
        Elements els = doc.select(""進捗推移グラフ"");
        assertEquals(""Yes"", els.text());
    }",junit.framework.AssertionFailedError: expected:<[Yes]> but was:<[]>
Jsoup_52,/222043010/omniapr/defects4j/Jsoup_52_buggy/src/test/java/org/jsoup/nodes/DocumentTest.java,testMetaCharsetUpdateXmlNoCharset,"    public void testMetaCharsetUpdateXmlNoCharset() {
        final Document doc = createXmlDocument(""1.0"", ""none"", false);
        doc.updateMetaCharsetElement(true);
        doc.charset(Charset.forName(charsetUtf8));
        
        final String xmlCharsetUTF8 = ""<?xml version=\""1.0\"" encoding=\"""" + charsetUtf8 + ""\""?>\n"" +
                                        ""<root>\n"" +
                                        "" node\n"" +
                                        ""</root>"";
        assertEquals(xmlCharsetUTF8, doc.toString());
        
        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);
        assertEquals(charsetUtf8, selectedNode.attr(""encoding""));
    }","junit.framework.AssertionFailedError: expected:<....0"" encoding=""UTF-8""[?]>"
Jsoup_52,/222043010/omniapr/defects4j/Jsoup_52_buggy/src/test/java/org/jsoup/nodes/DocumentTest.java,testMetaCharsetUpdateXmlIso8859,"    public void testMetaCharsetUpdateXmlIso8859() {
        final Document doc = createXmlDocument(""1.0"", ""changeThis"", true);
        doc.updateMetaCharsetElement(true);
        doc.charset(Charset.forName(charsetIso8859));
        
        final String xmlCharsetISO = ""<?xml version=\""1.0\"" encoding=\"""" + charsetIso8859 + ""\""?>\n"" +
                                        ""<root>\n"" +
                                        "" node\n"" +
                                        ""</root>"";
        assertEquals(xmlCharsetISO, doc.toString());
        
        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);
        assertEquals(charsetIso8859, doc.charset().name());
        assertEquals(charsetIso8859, selectedNode.attr(""encoding""));
        assertEquals(doc.charset(), doc.outputSettings().charset());
    }","junit.framework.AssertionFailedError: expected:<....0"" encoding=""UTF-8""[?]>"
Jsoup_52,/222043010/omniapr/defects4j/Jsoup_52_buggy/src/test/java/org/jsoup/nodes/DocumentTest.java,testMetaCharsetUpdateXmlUtf8,"    public void testMetaCharsetUpdateXmlUtf8() {
        final Document doc = createXmlDocument(""1.0"", ""changeThis"", true);
        doc.updateMetaCharsetElement(true);
        doc.charset(Charset.forName(charsetUtf8));
        
        final String xmlCharsetUTF8 = ""<?xml version=\""1.0\"" encoding=\"""" + charsetUtf8 + ""\""?>\n"" +
                                        ""<root>\n"" +
                                        "" node\n"" +
                                        ""</root>"";
        assertEquals(xmlCharsetUTF8, doc.toString());

        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);
        assertEquals(charsetUtf8, doc.charset().name());
        assertEquals(charsetUtf8, selectedNode.attr(""encoding""));
        assertEquals(doc.charset(), doc.outputSettings().charset());
    }","junit.framework.AssertionFailedError: expected:<....0"" encoding=""UTF-8""[?]>"
Jsoup_52,/222043010/omniapr/defects4j/Jsoup_52_buggy/src/test/java/org/jsoup/nodes/DocumentTest.java,testMetaCharsetUpdateXmlDisabledNoChanges,"    public void testMetaCharsetUpdateXmlDisabledNoChanges() {
        final Document doc = createXmlDocument(""dontTouch"", ""dontTouch"", true);
        
        final String xmlCharset = ""<?xml version=\""dontTouch\"" encoding=\""dontTouch\""?>\n"" +
                                    ""<root>\n"" +
                                    "" node\n"" +
                                    ""</root>"";
        assertEquals(xmlCharset, doc.toString());
        
        XmlDeclaration selectedNode = (XmlDeclaration) doc.childNode(0);
        assertEquals(""dontTouch"", selectedNode.attr(""encoding""));
        assertEquals(""dontTouch"", selectedNode.attr(""version""));
    }","junit.framework.AssertionFailedError: expected:<....0"" encoding=""UTF-8""[?]>"
Jsoup_52,/222043010/omniapr/defects4j/Jsoup_52_buggy/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,handlesXmlDeclarationAsDeclaration,"    @Test public void handlesXmlDeclarationAsDeclaration() {
        String html = ""<?xml encoding='UTF-8' ?><body>One</body><!-- comment -->"";
        Document doc = Jsoup.parse(html, """", Parser.xmlParser());
        assertEquals(""<?xml encoding=\""UTF-8\""?> <body> One </body> <!-- comment -->"",
                StringUtil.normaliseWhitespace(doc.outerHtml()));
        assertEquals(""#declaration"", doc.childNode(0).nodeName());
        assertEquals(""#comment"", doc.childNode(2).nodeName());
    }","junit.framework.AssertionFailedError: expected:<<?xml encoding=[""UTF-8""]?> <body> One </body...> but was:<<?xml encoding=['UTF-8' ]?> <body> One </body...>"
Jsoup_52,/222043010/omniapr/defects4j/Jsoup_52_buggy/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,testDetectCharsetEncodingDeclaration,"    public void testDetectCharsetEncodingDeclaration() throws IOException, URISyntaxException {
        File xmlFile = new File(XmlTreeBuilder.class.getResource(""/htmltests/xml-charset.xml"").toURI());
        InputStream inStream = new FileInputStream(xmlFile);
        Document doc = Jsoup.parse(inStream, null, ""http://example.com/"", Parser.xmlParser());
        assertEquals(""ISO-8859-1"", doc.charset().name());
        assertEquals(""<?xml version=\""1.0\"" encoding=\""ISO-8859-1\""?> <data>äöåéü</data>"",
            TextUtil.stripNewlines(doc.html()));
    }","junit.framework.AssertionFailedError: expected:<<?xml encoding=[""UTF-8""]?> <body> One </body...> but was:<<?xml encoding=['UTF-8' ]?> <body> One </body...>"
Jsoup_52,/222043010/omniapr/defects4j/Jsoup_52_buggy/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,testParseDeclarationAttributes,"    public void testParseDeclarationAttributes() {
        String xml = ""<?xml version='1' encoding='UTF-8' something='else'?><val>One</val>"";
        Document doc = Jsoup.parse(xml, """", Parser.xmlParser());
        XmlDeclaration decl = (XmlDeclaration) doc.childNode(0);
        assertEquals(""1"", decl.attr(""version""));
        assertEquals(""UTF-8"", decl.attr(""encoding""));
        assertEquals(""else"", decl.attr(""something""));
        assertEquals(""version=\""1\"" encoding=\""UTF-8\"" something=\""else\"""", decl.getWholeDeclaration());
        assertEquals(""<?xml version=\""1\"" encoding=\""UTF-8\"" something=\""else\""?>"", decl.outerHtml());
    }","junit.framework.AssertionFailedError: expected:<<?xml encoding=[""UTF-8""]?> <body> One </body...> but was:<<?xml encoding=['UTF-8' ]?> <body> One </body...>"
Jsoup_53,/222043010/omniapr/defects4j/Jsoup_53_buggy/src/test/java/org/jsoup/select/SelectorTest.java,attributeWithBrackets,"    @Test public void attributeWithBrackets() {
        String html = ""<div data='End]'>One</div> <div data='[Another)]]'>Two</div>"";
        Document doc = Jsoup.parse(html);
        assertEquals(""One"", doc.select(""div[data='End]'"").first().text());
        assertEquals(""Two"", doc.select(""div[data='[Another)]]'"").first().text());
    }",org.jsoup.select.Selector$SelectorParseException: Could not parse query 'div[data='End]'': unexpected token at '''
Jsoup_54,/222043010/omniapr/defects4j/Jsoup_54_buggy/src/test/java/org/jsoup/helper/W3CDomTest.java,handlesInvalidAttributeNames,"    public void handlesInvalidAttributeNames() {
        String html = ""<html><head></head><body style=\""color: red\"" \"" name\""></body></html>"";
        org.jsoup.nodes.Document jsoupDoc;
        jsoupDoc = Jsoup.parse(html);
        Element body = jsoupDoc.select(""body"").first();
        assertTrue(body.hasAttr(""\"""")); // actually an attribute with key '""'. Correct per HTML5 spec, but w3c xml dom doesn't dig it
        assertTrue(body.hasAttr(""name\""""));

        Document w3Doc = new W3CDom().fromJsoup(jsoupDoc);
    }",org.w3c.dom.DOMException: INVALID_CHARACTER_ERR: An invalid or illegal XML character is specified. 
Jsoup_55,/222043010/omniapr/defects4j/Jsoup_55_buggy/src/test/java/org/jsoup/parser/AttributeParseTest.java,dropsSlashFromAttributeName,"    @Test public void dropsSlashFromAttributeName() {
        String html = ""<img /onerror='doMyJob'/>"";
        Document doc = Jsoup.parse(html);
        assertTrue(""SelfClosingStartTag ignores last character"", doc.select(""img[onerror]"").size() != 0);
        assertEquals(""<img onerror=\""doMyJob\"">"", doc.body().html());

        doc = Jsoup.parse(html, """", Parser.xmlParser());
        assertEquals(""<img onerror=\""doMyJob\"" />"", doc.html());
    }",junit.framework.AssertionFailedError: SelfClosingStartTag ignores last character
Jsoup_56,/222043010/omniapr/defects4j/Jsoup_56_buggy/src/test/java/org/jsoup/nodes/DocumentTypeTest.java,testRoundTrip,"    @Test public void testRoundTrip() {
        String base = ""<!DOCTYPE html>"";
        assertEquals(""<!doctype html>"", htmlOutput(base));
        assertEquals(base, xmlOutput(base));

        String publicDoc = ""<!DOCTYPE html PUBLIC \""-//W3C//DTD XHTML 1.0 Transitional//EN\"" \""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"">"";
        assertEquals(publicDoc, htmlOutput(publicDoc));
        assertEquals(publicDoc, xmlOutput(publicDoc));

        String systemDoc = ""<!DOCTYPE html SYSTEM \""exampledtdfile.dtd\"">"";
        assertEquals(systemDoc, htmlOutput(systemDoc));
        assertEquals(systemDoc, xmlOutput(systemDoc));

        String legacyDoc = ""<!DOCTYPE html SYSTEM \""about:legacy-compat\"">"";
        assertEquals(legacyDoc, htmlOutput(legacyDoc));
        assertEquals(legacyDoc, xmlOutput(legacyDoc));
    }","junit.framework.AssertionFailedError: expected:<<!DOCTYPE html [SYSTEM ]""exampledtdfile.dtd""...> but was:<<!DOCTYPE html []""exampledtdfile.dtd""...>"
Jsoup_57,/222043010/omniapr/defects4j/Jsoup_57_buggy/src/test/java/org/jsoup/nodes/ElementTest.java,testChainedRemoveAttributes,"    public void testChainedRemoveAttributes() {
        String html = ""<a one two three four>Text</a>"";
        Document doc = Jsoup.parse(html);
        Element a = doc.select(""a"").first();
        a
            .removeAttr(""zero"")
            .removeAttr(""one"")
            .removeAttr(""two"")
            .removeAttr(""three"")
            .removeAttr(""four"")
            .removeAttr(""five"");
        assertEquals(""<a>Text</a>"", a.outerHtml());
    }",java.util.ConcurrentModificationException
Jsoup_58,/222043010/omniapr/defects4j/Jsoup_58_buggy/src/test/java/org/jsoup/safety/CleanerTest.java,testIsValidBodyHtml,"    @Test public void testIsValidBodyHtml() {
        String ok = ""<p>Test <b><a href='http://example.com/' rel='nofollow'>OK</a></b></p>"";
        String ok1 = ""<p>Test <b><a href='http://example.com/'>OK</a></b></p>""; // missing enforced is OK because still needs run thru cleaner
        String nok1 = ""<p><script></script>Not <b>OK</b></p>"";
        String nok2 = ""<p align=right>Test Not <b>OK</b></p>"";
        String nok3 = ""<!-- comment --><p>Not OK</p>""; // comments and the like will be cleaned
        String nok4 = ""<html><head>Foo</head><body><b>OK</b></body></html>""; // not body html
        String nok5 = ""<p>Test <b><a href='http://example.com/' rel='nofollowme'>OK</a></b></p>"";
        String nok6 = ""<p>Test <b><a href='http://example.com/'>OK</b></p>""; // missing close tag
        String nok7 = ""</div>What"";
        assertTrue(Jsoup.isValid(ok, Whitelist.basic()));
        assertTrue(Jsoup.isValid(ok1, Whitelist.basic()));
        assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));
        assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));
        assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));
        assertFalse(Jsoup.isValid(nok4, Whitelist.basic()));
        assertFalse(Jsoup.isValid(nok5, Whitelist.basic()));
        assertFalse(Jsoup.isValid(nok6, Whitelist.basic()));
        assertFalse(Jsoup.isValid(ok, Whitelist.none()));
        assertFalse(Jsoup.isValid(nok7, Whitelist.basic()));
    }",junit.framework.AssertionFailedError
Jsoup_58,/222043010/omniapr/defects4j/Jsoup_58_buggy/src/test/java/org/jsoup/safety/CleanerTest.java,testIsValidDocument,"    @Test public void testIsValidDocument() {
        String ok = ""<html><head></head><body><p>Hello</p></body><html>"";
        String nok = ""<html><head><script>woops</script><title>Hello</title></head><body><p>Hello</p></body><html>"";

        Whitelist relaxed = Whitelist.relaxed();
        Cleaner cleaner = new Cleaner(relaxed);
        Document okDoc = Jsoup.parse(ok);
        assertTrue(cleaner.isValid(okDoc));
        assertFalse(cleaner.isValid(Jsoup.parse(nok)));
        assertFalse(new Cleaner(Whitelist.none()).isValid(okDoc));
    }",junit.framework.AssertionFailedError
Jsoup_59,/222043010/omniapr/defects4j/Jsoup_59_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,handlesControlCodeInAttributeName,"    @Test public void handlesControlCodeInAttributeName() {
        Document doc = Jsoup.parse(""<p><a \06=foo>One</a><a/\06=bar><a foo\06=bar>Two</a></p>"");
        assertEquals(""<p><a>One</a><a></a><a foo=\""bar\"">Two</a></p>"", doc.body().html());
    }",java.lang.IllegalArgumentException: String must not be empty
Jsoup_59,/222043010/omniapr/defects4j/Jsoup_59_buggy/src/test/java/org/jsoup/safety/CleanerTest.java,handlesControlCharactersAfterTagName,"    @Test public void handlesControlCharactersAfterTagName() {
        String html = ""<a/\06>"";
        String clean = Jsoup.clean(html, Whitelist.basic());
        assertEquals(""<a rel=\""nofollow\""></a>"", clean);
    }",java.lang.IllegalArgumentException: String must not be empty
Jsoup_60,/222043010/omniapr/defects4j/Jsoup_60_buggy/src/test/java/org/jsoup/select/QueryParserTest.java,testParsesSingleQuoteInContains,"    @Test(expected = Selector.SelectorParseException.class)  public void testParsesSingleQuoteInContains() {
        Evaluator parse = QueryParser.parse(""p:contains(One \"" One)"");
    }",junit.framework.AssertionFailedError: Expected exception: org.jsoup.select.Selector$SelectorParseException
Jsoup_60,/222043010/omniapr/defects4j/Jsoup_60_buggy/src/test/java/org/jsoup/select/QueryParserTest.java,exceptionOnUncloseAttribute,"    @Test(expected = Selector.SelectorParseException.class) public void exceptionOnUncloseAttribute() {
        Evaluator parse = QueryParser.parse(""section > a[href=\""]"");
    }",junit.framework.AssertionFailedError: Expected exception: org.jsoup.select.Selector$SelectorParseException
Jsoup_61,/222043010/omniapr/defects4j/Jsoup_61_buggy/src/test/java/org/jsoup/select/ElementsTest.java,hasClassCaseInsensitive,"    @Test public void hasClassCaseInsensitive() {
        Elements els = Jsoup.parse(""<p Class=One>One <p class=Two>Two <p CLASS=THREE>THREE"").select(""p"");
        Element one = els.get(0);
        Element two = els.get(1);
        Element thr = els.get(2);

        assertTrue(one.hasClass(""One""));
        assertTrue(one.hasClass(""ONE""));

        assertTrue(two.hasClass(""TWO""));
        assertTrue(two.hasClass(""Two""));

        assertTrue(thr.hasClass(""ThreE""));
        assertTrue(thr.hasClass(""three""));
    }",junit.framework.AssertionFailedError
Jsoup_61,/222043010/omniapr/defects4j/Jsoup_61_buggy/src/test/java/org/jsoup/select/SelectorTest.java,testByClassCaseInsensitive,"    @Test public void testByClassCaseInsensitive() {
        String html = ""<p Class=foo>One <p Class=Foo>Two <p class=FOO>Three <p class=farp>Four"";
        Elements elsFromClass = Jsoup.parse(html).select(""P.Foo"");
        Elements elsFromAttr = Jsoup.parse(html).select(""p[class=foo]"");

        assertEquals(elsFromAttr.size(), elsFromClass.size());
        assertEquals(3, elsFromClass.size());
        assertEquals(""Two"", elsFromClass.get(1).text());
    }",junit.framework.AssertionFailedError: expected:<3> but was:<1>
Jsoup_62,/222043010/omniapr/defects4j/Jsoup_62_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,caseSensitiveParseTree,"    @Test public void caseSensitiveParseTree() {
        String html = ""<r><X>A</X><y>B</y></r>"";
        Parser parser = Parser.htmlParser();
        parser.settings(ParseSettings.preserveCase);
        Document doc = parser.parseInput(html, """");
        assertEquals(""<r> <X> A </X> <y> B </y> </r>"", StringUtil.normaliseWhitespace(doc.body().html()));

    }",junit.framework.AssertionFailedError: expected:<<r> <X> A <[/X> <y> B </y]> </r>> but was:<<r> <X> A <[y> B </y> </X]> </r>>
Jsoup_63,/222043010/omniapr/defects4j/Jsoup_63_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,selfClosingOnNonvoidIsError,"    @Test public void selfClosingOnNonvoidIsError() {
        String html = ""<p>test</p><div /><div>Two</div>"";
        Parser parser = Parser.htmlParser().setTrackErrors(5);
        parser.parseInput(html, """");
        assertEquals(1, parser.getErrors().size());
        assertEquals(""18: Tag cannot be self closing; not a void tag"", parser.getErrors().get(0).toString());

        assertFalse(Jsoup.isValid(html, Whitelist.relaxed()));
        String clean = Jsoup.clean(html, Whitelist.relaxed());
        assertEquals(""<p>test</p> <div></div> <div> Two </div>"", StringUtil.normaliseWhitespace(clean));
    }",junit.framework.AssertionFailedError: expected:<18: [Tag cannot be self closing; not a void tag]> but was:<18: [Self closing flag not acknowledged]>
Jsoup_63,/222043010/omniapr/defects4j/Jsoup_63_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,selfClosingVoidIsNotAnError,"    @Test public void selfClosingVoidIsNotAnError() {
        String html = ""<p>test<br/>test<br/></p>"";
        Parser parser = Parser.htmlParser().setTrackErrors(5);
        parser.parseInput(html, """");
        assertEquals(0, parser.getErrors().size());

        assertTrue(Jsoup.isValid(html, Whitelist.basic()));
        String clean = Jsoup.clean(html, Whitelist.basic());
        assertEquals(""<p>test<br>test<br></p>"", clean);
    }",junit.framework.AssertionFailedError: expected:<18: [Tag cannot be self closing; not a void tag]> but was:<18: [Self closing flag not acknowledged]>
Jsoup_63,/222043010/omniapr/defects4j/Jsoup_63_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,tracksErrorsWhenRequested,"    @Test public void tracksErrorsWhenRequested() {
        String html = ""<p>One</p href='no'><!DOCTYPE html>&arrgh;<font /><br /><foo"";
        Parser parser = Parser.htmlParser().setTrackErrors(500);
        Document doc = Jsoup.parse(html, ""http://example.com"", parser);
        
        List<ParseError> errors = parser.getErrors();
        assertEquals(5, errors.size());
        assertEquals(""20: Attributes incorrectly present on end tag"", errors.get(0).toString());
        assertEquals(""35: Unexpected token [Doctype] when in state [InBody]"", errors.get(1).toString());
        assertEquals(""36: Invalid character reference: invalid named referenece 'arrgh'"", errors.get(2).toString());
        assertEquals(""50: Tag cannot be self closing; not a void tag"", errors.get(3).toString());
        assertEquals(""61: Unexpectedly reached end of file (EOF) in input state [TagName]"", errors.get(4).toString());
    }",junit.framework.AssertionFailedError: expected:<18: [Tag cannot be self closing; not a void tag]> but was:<18: [Self closing flag not acknowledged]>
Jsoup_64,/222043010/omniapr/defects4j/Jsoup_64_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,handlesKnownEmptyStyle,"    @Test public void handlesKnownEmptyStyle() {
        String h = ""<html><head><style /><meta name=foo></head><body>One</body></html>"";
        Document doc = Jsoup.parse(h);
        assertEquals(""<html><head><style></style><meta name=\""foo\""></head><body>One</body></html>"", TextUtil.stripNewlines(doc.html()));
    }","junit.framework.AssertionFailedError: expected:<...ead><style></style><[meta name=""foo""></head><body>One]</body></html>> but was:<...ead><style></style><[/head><body>&lt;meta name=foo&gt;&lt;/head&gt;&lt;body&gt;One&lt;/body&gt;&lt;/html&gt;]</body></html>>"
Jsoup_64,/222043010/omniapr/defects4j/Jsoup_64_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,handlesKnownEmptyNoFrames,"    @Test public void handlesKnownEmptyNoFrames() {
        String h = ""<html><head><noframes /><meta name=foo></head><body>One</body></html>"";
        Document doc = Jsoup.parse(h);
        assertEquals(""<html><head><noframes></noframes><meta name=\""foo\""></head><body>One</body></html>"", TextUtil.stripNewlines(doc.html()));
    }","junit.framework.AssertionFailedError: expected:<...ead><style></style><[meta name=""foo""></head><body>One]</body></html>> but was:<...ead><style></style><[/head><body>&lt;meta name=foo&gt;&lt;/head&gt;&lt;body&gt;One&lt;/body&gt;&lt;/html&gt;]</body></html>>"
Jsoup_65,/222043010/omniapr/defects4j/Jsoup_65_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,testTemplateInsideTable,"  @Test public void testTemplateInsideTable() throws IOException {
        File in = ParseTest.getFile(""/htmltests/table-polymer-template.html"");
        Document doc = Jsoup.parse(in, ""UTF-8"");
        doc.outputSettings().prettyPrint(true);

        Elements templates = doc.body().getElementsByTag(""template"");
        for (Element template : templates) {
            assertTrue(template.childNodes().size() > 1);
        }
  }",junit.framework.AssertionFailedError
Jsoup_66,/222043010/omniapr/defects4j/Jsoup_66_buggy/src/test/java/org/jsoup/nodes/ElementTest.java,testNextElementSiblingAfterClone,"    public void testNextElementSiblingAfterClone() {
        // via https://github.com/jhy/jsoup/issues/951
        String html = ""<!DOCTYPE html><html lang=\""en\""><head></head><body><div>Initial element</div></body></html>"";
        String expectedText = ""New element"";
        String cloneExpect = ""New element in clone"";

        Document original = Jsoup.parse(html);
        Document clone = original.clone();

        Element originalElement = original.body().child(0);
        originalElement.after(""<div>"" + expectedText + ""</div>"");
        Element originalNextElementSibling = originalElement.nextElementSibling();
        Element originalNextSibling = (Element) originalElement.nextSibling();
        assertEquals(expectedText, originalNextElementSibling.text());
        assertEquals(expectedText, originalNextSibling.text());

        Element cloneElement = clone.body().child(0);
        cloneElement.after(""<div>"" + cloneExpect + ""</div>"");
        Element cloneNextElementSibling = cloneElement.nextElementSibling();
        Element cloneNextSibling = (Element) cloneElement.nextSibling();
        assertEquals(cloneExpect, cloneNextElementSibling.text());
        assertEquals(cloneExpect, cloneNextSibling.text());
    }",java.lang.NullPointerException
Jsoup_67,/222043010/omniapr/defects4j/Jsoup_67_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,handlesDeepStack,"    @Test public void handlesDeepStack() {
        // inspired by http://sv.stargate.wikia.com/wiki/M2J and https://github.com/jhy/jsoup/issues/955
        // I didn't put it in the integration tests, because explorer and intellij kept dieing trying to preview/index it

        // Arrange
        StringBuilder longBody = new StringBuilder(500000);
        for (int i = 0; i < 25000; i++) {
            longBody.append(i).append(""<dl><dd>"");
        }
        for (int i = 0; i < 25000; i++) {
            longBody.append(i).append(""</dd></dl>"");
        }

        // Act
        long start = System.currentTimeMillis();
        Document doc = Parser.parseBodyFragment(longBody.toString(), """");

        // Assert
        assertEquals(2, doc.body().childNodeSize());
        assertEquals(25000, doc.select(""dd"").size());
        assertTrue(System.currentTimeMillis() - start < 1000);
    }",junit.framework.AssertionFailedError
Jsoup_68,/222043010/omniapr/defects4j/Jsoup_68_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,testHandlesDeepSpans,"  @Test public void testHandlesDeepSpans() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 200; i++) {
            sb.append(""<span>"");
        }

        sb.append(""<p>One</p>"");

        Document doc = Jsoup.parse(sb.toString());
        assertEquals(200, doc.select(""span"").size());
        assertEquals(1, doc.select(""p"").size());
  }",java.lang.StackOverflowError
Jsoup_69,/222043010/omniapr/defects4j/Jsoup_69_buggy/src/test/java/org/jsoup/nodes/FormElementTest.java,removeFormElement,"    @Test public void removeFormElement() {
        String html = ""<html>\n"" +
                ""  <body> \n"" +
                ""      <form action=\""/hello.php\"" method=\""post\"">\n"" +
                ""      User:<input type=\""text\"" name=\""user\"" />\n"" +
                ""      Password:<input type=\""password\"" name=\""pass\"" />\n"" +
                ""      <input type=\""submit\"" name=\""login\"" value=\""login\"" />\n"" +
                ""   </form>\n"" +
                ""  </body>\n"" +
                ""</html>  "";
        Document doc = Jsoup.parse(html);
        FormElement form = (FormElement) doc.selectFirst(""form"");
        Element pass = form.selectFirst(""input[name=pass]"");
        pass.remove();

        List<Connection.KeyVal> data = form.formData();
        assertEquals(2, data.size());
        assertEquals(""user"", data.get(0).key());
        assertEquals(""login"", data.get(1).key());
        assertEquals(null, doc.selectFirst(""input[name=pass]""));
    }",junit.framework.AssertionFailedError: expected:<2> but was:<3>
Jsoup_70,/222043010/omniapr/defects4j/Jsoup_70_buggy/src/test/java/org/jsoup/nodes/ElementTest.java,testKeepsPreTextAtDepth,"    @Test public void testKeepsPreTextAtDepth() {
        String h = ""<pre><code><span><b>code\n\ncode</b></span></code></pre>"";
        Document doc = Jsoup.parse(h);
        assertEquals(""code\n\ncode"", doc.text());
        assertEquals(""<pre><code><span><b>code\n\ncode</b></span></code></pre>"", doc.body().html());
    }",junit.framework.AssertionFailedError: expected:<code[
Jsoup_71,/222043010/omniapr/defects4j/Jsoup_71_buggy/src/test/java/org/jsoup/select/SelectorTest.java,splitOnBr,"    @Test public void splitOnBr() {
        String html = ""<div><p>One<br>Two<br>Three</p></div>"";
        Document doc = Jsoup.parse(html);

        Elements els = doc.select(""p:matchText"");
        assertEquals(3, els.size());
        assertEquals(""One"", els.get(0).text());
        assertEquals(""Two"", els.get(1).text());
        assertEquals(""Three"", els.get(2).toString());
    }",org.jsoup.select.Selector$SelectorParseException: Could not parse query 'p:matchText': unexpected token at ':matchText'
Jsoup_71,/222043010/omniapr/defects4j/Jsoup_71_buggy/src/test/java/org/jsoup/select/SelectorTest.java,textAsElements,"    @Test public void textAsElements() {
        String html = ""<p>One<br>Two</p>"";
        Document doc = Jsoup.parse(html);
        String origHtml = doc.html();

        Elements one = doc.select(""p:matchText:first-child"");
        assertEquals(""One"", one.first().text());

        Elements two = doc.select(""p:matchText:last-child"");
        assertEquals(""Two"", two.first().text());

        assertEquals(origHtml, doc.html());

        assertEquals(""Two"", doc.select(""p:matchText + br + *"").text());
    }",org.jsoup.select.Selector$SelectorParseException: Could not parse query 'p:matchText': unexpected token at ':matchText'
Jsoup_72,/222043010/omniapr/defects4j/Jsoup_72_buggy/src/test/java/org/jsoup/parser/CharacterReaderTest.java,consumeToNonexistentEndWhenAtAnd,"    public void consumeToNonexistentEndWhenAtAnd() {
        CharacterReader r = new CharacterReader(""<!"");
        assertTrue(r.matchConsume(""<!""));
        assertTrue(r.isEmpty());

        String after = r.consumeTo('>');
        assertEquals("""", after);

        assertTrue(r.isEmpty());
    }",java.lang.StringIndexOutOfBoundsException: String index out of range: -1
Jsoup_72,/222043010/omniapr/defects4j/Jsoup_72_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,commentAtEnd,"  @Test public void commentAtEnd() throws Exception {
      Document doc = Jsoup.parse(""<!"");
      assertTrue(doc.childNode(0) instanceof Comment);
  }",java.lang.StringIndexOutOfBoundsException: String index out of range: -1
Jsoup_73,/222043010/omniapr/defects4j/Jsoup_73_buggy/src/test/java/org/jsoup/helper/W3CDomTest.java,namespacePreservation,"    public void namespacePreservation() throws IOException {
        File in = ParseTest.getFile(""/htmltests/namespaces.xhtml"");
        org.jsoup.nodes.Document jsoupDoc;
        jsoupDoc = Jsoup.parse(in, ""UTF-8"");

        Document doc;
        org.jsoup.helper.W3CDom jDom = new org.jsoup.helper.W3CDom();
        doc = jDom.fromJsoup(jsoupDoc);

        Node htmlEl = doc.getChildNodes().item(0);
        assertEquals(""http://www.w3.org/1999/xhtml"", htmlEl.getNamespaceURI());
        assertEquals(""html"", htmlEl.getLocalName());
        assertEquals(""html"", htmlEl.getNodeName());

        // inherits default namespace
        Node head = htmlEl.getFirstChild();
        assertEquals(""http://www.w3.org/1999/xhtml"", head.getNamespaceURI());
        assertEquals(""head"", head.getLocalName());
        assertEquals(""head"", head.getNodeName());

        Node epubTitle = htmlEl.getChildNodes().item(2).getChildNodes().item(3);
        assertEquals(""Check"", epubTitle.getTextContent());
        assertEquals(""http://www.idpf.org/2007/ops"", epubTitle.getNamespaceURI());
        assertEquals(""title"", epubTitle.getLocalName());
        assertEquals(""epub:title"", epubTitle.getNodeName());

        Node xSection = epubTitle.getNextSibling().getNextSibling();
        assertEquals(""urn:test"", xSection.getNamespaceURI());
        assertEquals(""section"", xSection.getLocalName());
        assertEquals(""x:section"", xSection.getNodeName());

        // https://github.com/jhy/jsoup/issues/977
        // does not keep last set namespace
        Node svg = xSection.getNextSibling().getNextSibling();
        assertEquals(""http://www.w3.org/2000/svg"", svg.getNamespaceURI());
        assertEquals(""svg"", svg.getLocalName());
        assertEquals(""svg"", svg.getNodeName());

        Node path = svg.getChildNodes().item(1);
        assertEquals(""http://www.w3.org/2000/svg"", path.getNamespaceURI());
        assertEquals(""path"", path.getLocalName());
        assertEquals(""path"", path.getNodeName());

        Node clip = path.getChildNodes().item(1);
        assertEquals(""http://example.com/clip"", clip.getNamespaceURI());
        assertEquals(""clip"", clip.getLocalName());
        assertEquals(""clip"", clip.getNodeName());
        assertEquals(""456"", clip.getTextContent());

        Node picture = svg.getNextSibling().getNextSibling();
        assertEquals(""http://www.w3.org/1999/xhtml"", picture.getNamespaceURI());
        assertEquals(""picture"", picture.getLocalName());
        assertEquals(""picture"", picture.getNodeName());

        Node img = picture.getFirstChild();
        assertEquals(""http://www.w3.org/1999/xhtml"", img.getNamespaceURI());
        assertEquals(""img"", img.getLocalName());
        assertEquals(""img"", img.getNodeName());

    }",junit.framework.AssertionFailedError: expected:<http://[www.w3.org/1999/xhtml]> but was:<http://[example.com/clip]>
Jsoup_74,/222043010/omniapr/defects4j/Jsoup_74_buggy/src/test/java/org/jsoup/nodes/ElementTest.java,testNormalizesInvisiblesInText,"    @Test public void testNormalizesInvisiblesInText() {
        // return Character.getType(c) == 16 && (c == 8203 || c == 8204 || c == 8205 || c == 173);
        String escaped = ""This&shy;is&#x200b;one&#x200c;long&#x200d;word"";
        String decoded = ""This\u00ADis\u200Bone\u200Clong\u200Dword""; // browser would not display those soft hyphens / other chars, so we don't want them in the text

        Document doc = Jsoup.parse(""<p>"" + escaped);
        Element p = doc.select(""p"").first();
        doc.outputSettings().charset(""ascii""); // so that the outer html is easier to see with escaped invisibles
        assertEquals(""Thisisonelongword"", p.text()); // text is normalized
        assertEquals(""<p>"" + escaped + ""</p>"", p.outerHtml()); // html / whole text keeps &shy etc;
        assertEquals(decoded, p.textNodes().get(0).getWholeText());

        Element matched = doc.select(""p:contains(Thisisonelongword)"").first(); // really just oneloneword, no invisibles
        assertEquals(""p"", matched.nodeName());
        assertTrue(matched.is("":containsOwn(Thisisonelongword)""));

    }",junit.framework.AssertionFailedError: expected:<This[isonelong]word> but was:<This[­is​one‌long‍]word>
Jsoup_75,/222043010/omniapr/defects4j/Jsoup_75_buggy/src/test/java/org/jsoup/nodes/ElementTest.java,booleanAttributeOutput,"    public void booleanAttributeOutput() {
        Document doc = Jsoup.parse(""<img src=foo noshade='' nohref async=async autofocus=false>"");
        Element img = doc.selectFirst(""img"");

        assertEquals(""<img src=\""foo\"" noshade nohref async autofocus=\""false\"">"", img.outerHtml());
    }","junit.framework.AssertionFailedError: expected:<...mg src=""foo"" noshade[] nohref async autofo...> but was:<...mg src=""foo"" noshade[=""""] nohref async autofo...>"
Jsoup_76,/222043010/omniapr/defects4j/Jsoup_76_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,preSkipsFirstNewline,"  @Test public void preSkipsFirstNewline() {
        Document doc = Jsoup.parse(""<pre>\n\nOne\nTwo\n</pre>"");
        Element pre = doc.selectFirst(""pre"");
        assertEquals(""One\nTwo"", pre.text());
        assertEquals(""\nOne\nTwo\n"", pre.wholeText());
  }",junit.framework.AssertionFailedError: expected:<
Jsoup_77,/222043010/omniapr/defects4j/Jsoup_77_buggy/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,normalizesDiscordantTags,"    @Test public void normalizesDiscordantTags() {
        Parser parser = Parser.xmlParser().settings(ParseSettings.htmlDefault);
        Document document = Jsoup.parse(""<div>test</DIV><p></p>"", """", parser);
        assertEquals(""<div>\n test\n</div>\n<p></p>"", document.html());
        // was failing -> toString() = ""<div>\n test\n <p></p>\n</div>""
    }",junit.framework.AssertionFailedError: expected:<<div>
Jsoup_78,/222043010/omniapr/defects4j/Jsoup_78_buggy/src/test/java/org/jsoup/integration/ConnectTest.java,handlesEmptyStreamDuringParseRead,"    public void handlesEmptyStreamDuringParseRead() throws IOException {
        // this handles situations where the remote server sets a content length greater than it actually writes

        Connection.Response res = Jsoup.connect(InterruptedServlet.Url)
            .timeout(200)
            .execute();

        boolean threw = false;
        try {
            Document document = res.parse();
            assertEquals(""Something"", document.title());
        } catch (IOException e) {
            threw = true;
        }
        assertEquals(true, threw);
    }",org.jsoup.UncheckedIOException: java.io.IOException: Underlying input stream returned zero bytes
Jsoup_79,/222043010/omniapr/defects4j/Jsoup_79_buggy/src/test/java/org/jsoup/nodes/TextNodeTest.java,testLeadNodesHaveNoChildren,"    @Test public void testLeadNodesHaveNoChildren() {
        Document doc = Jsoup.parse(""<div>Hello there</div>"");
        Element div = doc.select(""div"").first();
        TextNode tn = (TextNode) div.childNode(0);
        List<Node> nodes = tn.childNodes();
        assertEquals(0, nodes.size());
    }",java.lang.UnsupportedOperationException: Leaf Nodes do not have child nodes.
Jsoup_80,/222043010/omniapr/defects4j/Jsoup_80_buggy/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,handlesDodgyXmlDecl,"    public void handlesDodgyXmlDecl() {
        String xml = ""<?xml version='1.0'><val>One</val>"";
        Document doc = Jsoup.parse(xml, """", Parser.xmlParser());
        assertEquals(""One"", doc.select(""val"").text());
    }","java.lang.IndexOutOfBoundsException: Index: 0, Size: 0"
Jsoup_81,/222043010/omniapr/defects4j/Jsoup_81_buggy/src/test/java/org/jsoup/helper/DataUtilTest.java,supportsXmlCharsetDeclaration,"    public void supportsXmlCharsetDeclaration() throws IOException {
        String encoding = ""iso-8859-1"";
        InputStream soup = new ByteArrayInputStream((
            ""<?xml version=\""1.0\"" encoding=\""iso-8859-1\""?>"" +
                ""<!DOCTYPE html PUBLIC \""-//W3C//DTD XHTML 1.0 Strict//EN\"" \""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"">"" +
                ""<html xmlns=\""http://www.w3.org/1999/xhtml\"" lang=\""en\"" xml:lang=\""en\"">Hellö Wörld!</html>""
        ).getBytes(encoding));

        Document doc = Jsoup.parse(soup, null, """");
        assertEquals(""Hellö Wörld!"", doc.body().text());
    }",junit.framework.AssertionFailedError: expected:<Hell[ö Wö]rld!> but was:<Hell[� W�]rld!>
Jsoup_82,/222043010/omniapr/defects4j/Jsoup_82_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,fallbackToUtfIfCantEncode,"    @Test public void fallbackToUtfIfCantEncode() throws IOException {
        // that charset can't be encoded, so make sure we flip to utf

        String in = ""<html><meta charset=\""ISO-2022-CN\""/>One</html>"";
        Document doc = Jsoup.parse(new ByteArrayInputStream(in.getBytes()), null, """");

        assertEquals(""UTF-8"", doc.charset().name());
        assertEquals(""One"", doc.text());

        String html = doc.outerHtml();
        assertEquals(""<html><head><meta charset=\""UTF-8\""></head><body>One</body></html>"", TextUtil.stripNewlines(html));
    }",junit.framework.AssertionFailedError: expected:<[UTF-8]> but was:<[ISO-2022-CN]>
Jsoup_83,/222043010/omniapr/defects4j/Jsoup_83_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,parsesQuiteRoughAttributes,"    @Test public void parsesQuiteRoughAttributes() {
        String html = ""<p =a>One<a <p>Something</p>Else"";
        // this (used to; now gets cleaner) gets a <p> with attr '=a' and an <a tag with an attribue named '<p'; and then auto-recreated
        Document doc = Jsoup.parse(html);

        // NOTE: per spec this should be the test case. but impacts too many ppl
        // assertEquals(""<p =a>One<a <p>Something</a></p>\n<a <p>Else</a>"", doc.body().html());

        assertEquals(""<p =a>One<a></a></p><p><a>Something</a></p><a>Else</a>"", TextUtil.stripNewlines(doc.body().html()));

        doc = Jsoup.parse(""<p .....>"");
        assertEquals(""<p .....></p>"", doc.body().html());
    }",junit.framework.AssertionFailedError: expected:<<p =a>One<a[></a></p><p><a>Something</a></p><a]>Else</a>> but was:<<p =a>One<a[ <p>Something</a></p><a <p]>Else</a>>
Jsoup_83,/222043010/omniapr/defects4j/Jsoup_83_buggy/src/test/java/org/jsoup/parser/TokeniserStateTest.java,handlesLessInTagThanAsNewTag,"    @Test public void handlesLessInTagThanAsNewTag() {
        // out of spec, but clear author intent
        String html = ""<p\n<p<div id=one <span>Two"";
        Document doc = Jsoup.parse(html);
        assertEquals(""<p></p><p></p><div id=\""one\""><span>Two</span></div>"", TextUtil.stripNewlines(doc.body().html()));
    }","junit.framework.AssertionFailedError: expected:<<p[></p><p></p><div id=""one""><span>Two</span></div]>> but was:<<p[ <p<div id=""one"" <span>Two</p]>>"
Jsoup_84,/222043010/omniapr/defects4j/Jsoup_84_buggy/src/test/java/org/jsoup/helper/W3CDomTest.java,treatsUndeclaredNamespaceAsLocalName,"    @Test public void treatsUndeclaredNamespaceAsLocalName() {
        String html = ""<fb:like>One</fb:like>"";
        org.jsoup.nodes.Document doc = Jsoup.parse(html);

        Document w3Doc = new W3CDom().fromJsoup(doc);
        Node htmlEl = w3Doc.getFirstChild();

        assertNull(htmlEl.getNamespaceURI());
        assertEquals(""html"", htmlEl.getLocalName());
        assertEquals(""html"", htmlEl.getNodeName());

        Node fb = htmlEl.getFirstChild().getNextSibling().getFirstChild();
        assertNull(fb.getNamespaceURI());
        assertEquals(""like"", fb.getLocalName());
        assertEquals(""fb:like"", fb.getNodeName());

    }",org.w3c.dom.DOMException: NAMESPACE_ERR: An attempt is made to create or change an object in a way which is incorrect with regard to namespaces.
Jsoup_85,/222043010/omniapr/defects4j/Jsoup_85_buggy/src/test/java/org/jsoup/nodes/AttributeTest.java,validatesKeysNotEmpty,"    @Test(expected = IllegalArgumentException.class) public void validatesKeysNotEmpty() {
        Attribute attr = new Attribute("" "", ""Check"");
    }",junit.framework.AssertionFailedError: Expected exception: java.lang.IllegalArgumentException
Jsoup_86,/222043010/omniapr/defects4j/Jsoup_86_buggy/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,handlesLTinScript,"    public void handlesLTinScript() {
        // https://github.com/jhy/jsoup/issues/1139
        String html = ""<script> var a=\""<?\""; var b=\""?>\""; </script>"";
        Document doc = Jsoup.parse(html, """", Parser.xmlParser());
        assertEquals(""<script> var a=\""\n <!--?\""; var b=\""?-->\""; </script>"", doc.html()); // converted from pseudo xmldecl to comment
    }","java.lang.IndexOutOfBoundsException: Index: 0, Size: 0"
Jsoup_87,/222043010/omniapr/defects4j/Jsoup_87_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,preservedCaseLinksCantNest,"    @Test public void preservedCaseLinksCantNest() {
        String html = ""<A>ONE <A>Two</A></A>"";
        Document doc = Parser.htmlParser()
            .settings(ParseSettings.preserveCase)
            .parseInput(html, """");
        assertEquals(""<A> ONE </A> <A> Two </A>"", StringUtil.normaliseWhitespace(doc.body().html()));
    }",junit.framework.AssertionFailedError: expected:<<A> ONE <[/A> <A> Two] </A>> but was:<<A> ONE <[A> Two </A>] </A>>
Jsoup_88,/222043010/omniapr/defects4j/Jsoup_88_buggy/src/test/java/org/jsoup/nodes/AttributeTest.java,booleanAttributesAreEmptyStringValues,"    @Test public void booleanAttributesAreEmptyStringValues() {
        Document doc = Jsoup.parse(""<div hidden>"");
        Attributes attributes = doc.body().child(0).attributes();
        assertEquals("""", attributes.get(""hidden""));

        Attribute first = attributes.iterator().next();
        assertEquals(""hidden"", first.getKey());
        assertEquals("""", first.getValue());
    }",junit.framework.AssertionFailedError: expected:<> but was:<null>
Jsoup_89,/222043010/omniapr/defects4j/Jsoup_89_buggy/src/test/java/org/jsoup/nodes/AttributeTest.java,settersOnOrphanAttribute,"    @Test public void settersOnOrphanAttribute() {
        Attribute attr = new Attribute(""one"", ""two"");
        attr.setKey(""three"");
        String oldVal = attr.setValue(""four"");
        assertEquals(""two"", oldVal);
        assertEquals(""three"", attr.getKey());
        assertEquals(""four"", attr.getValue());
        assertEquals(null, attr.parent);
    }",java.lang.NullPointerException
Jsoup_90,/222043010/omniapr/defects4j/Jsoup_90_buggy/src/test/java/org/jsoup/helper/HttpConnectionTest.java,handlesHeaderEncodingOnRequest,"    @Test public void handlesHeaderEncodingOnRequest() {
        Connection.Request req = new HttpConnection.Request();
        req.addHeader(""xxx"", ""é"");
    }",java.lang.ArrayIndexOutOfBoundsException: 1
Jsoup_91,/222043010/omniapr/defects4j/Jsoup_91_buggy/src/test/java/org/jsoup/integration/ConnectTest.java,testBinaryThrowsExceptionWhenTypeIgnored,"    public void testBinaryThrowsExceptionWhenTypeIgnored() {
        Connection con = Jsoup.connect(FileServlet.Url);
        con.data(FileServlet.LocationParam, ""/htmltests/thumb.jpg"");
        con.data(FileServlet.ContentTypeParam, ""image/jpeg"");
        con.ignoreContentType(true);

        boolean threw = false;
        try {
            con.execute();
            Document doc = con.response().parse();
        } catch (IOException e) {
            threw = true;
            assertEquals(""Input is binary and unsupported"", e.getMessage());
        }
        assertTrue(threw);
    }",junit.framework.AssertionFailedError
Jsoup_91,/222043010/omniapr/defects4j/Jsoup_91_buggy/src/test/java/org/jsoup/integration/ConnectTest.java,testBinaryResultThrows,"    public void testBinaryResultThrows() {
        Connection con = Jsoup.connect(FileServlet.Url);
        con.data(FileServlet.LocationParam, ""/htmltests/thumb.jpg"");
        con.data(FileServlet.ContentTypeParam, ""text/html"");

        boolean threw = false;
        try {
            con.execute();
            Document doc = con.response().parse();
        } catch (IOException e) {
            threw = true;
            assertEquals(""Input is binary and unsupported"", e.getMessage());
        }
        assertTrue(threw);
    }",junit.framework.AssertionFailedError
Jsoup_91,/222043010/omniapr/defects4j/Jsoup_91_buggy/src/test/java/org/jsoup/integration/ParseTest.java,testBinaryThrowsException,"    public void testBinaryThrowsException() throws IOException {
        File in = getFile(""/htmltests/thumb.jpg"");

        boolean threw = false;
        try {
            Document doc = Jsoup.parse(in, ""UTF-8"");
        } catch (IOException e) {
            threw = true;
            assertEquals(""Input is binary and unsupported"", e.getMessage());
        }
        assertTrue(threw);
    }",junit.framework.AssertionFailedError
Jsoup_92,/222043010/omniapr/defects4j/Jsoup_92_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,retainsAttributesOfDifferentCaseIfSensitive,"    @Test public void retainsAttributesOfDifferentCaseIfSensitive() {
        String html = ""<p One=One One=Two one=Three two=Four two=Five Two=Six>Text</p>"";
        Parser parser = Parser.htmlParser().settings(ParseSettings.preserveCase);
        Document doc = parser.parseInput(html, """");
        assertEquals(""<p One=\""One\"" one=\""Three\"" two=\""Four\"" Two=\""Six\"">Text</p>"", doc.selectFirst(""p"").outerHtml());
    }","junit.framework.AssertionFailedError: expected:<<p One=""[One"" one=""Three"" two=""Four]"" Two=""Six"">Text</p>> but was:<<p One=""[Two"" one=""Three"" two=""Five]"" Two=""Six"">Text</p>>"
Jsoup_92,/222043010/omniapr/defects4j/Jsoup_92_buggy/src/test/java/org/jsoup/parser/HtmlParserTest.java,dropsDuplicateAttributes,"    @Test public void dropsDuplicateAttributes() {
        String html = ""<p One=One ONE=Two Two=two one=Three One=Four two=Five>Text</p>"";
        Parser parser = Parser.htmlParser().setTrackErrors(10);
        Document doc = parser.parseInput(html, """");

        Element p = doc.selectFirst(""p"");
        assertEquals(""<p one=\""One\"" two=\""two\"">Text</p>"", p.outerHtml()); // normalized names due to lower casing

        assertEquals(1, parser.getErrors().size());
        assertEquals(""Duplicate attribute"", parser.getErrors().get(0).getErrorMessage());
    }","junit.framework.AssertionFailedError: expected:<<p One=""[One"" one=""Three"" two=""Four]"" Two=""Six"">Text</p>> but was:<<p One=""[Two"" one=""Three"" two=""Five]"" Two=""Six"">Text</p>>"
Jsoup_92,/222043010/omniapr/defects4j/Jsoup_92_buggy/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java,dropsDuplicateAttributes,"    @Test public void dropsDuplicateAttributes() {
        // case sensitive, so should drop Four and Five
        String html = ""<p One=One ONE=Two one=Three One=Four ONE=Five two=Six two=Seven Two=Eight>Text</p>"";
        Parser parser = Parser.xmlParser().setTrackErrors(10);
        Document doc = parser.parseInput(html, """");

        assertEquals(""<p One=\""One\"" ONE=\""Two\"" one=\""Three\"" two=\""Six\"" Two=\""Eight\"">Text</p>"", doc.selectFirst(""p"").outerHtml());
    }","junit.framework.AssertionFailedError: expected:<<p One=""[One"" ONE=""Two"" one=""Three"" two=""Six]"" Two=""Eight"">Text</...> but was:<<p One=""[Four"" ONE=""Five"" one=""Three"" two=""Seven]"" Two=""Eight"">Text</...>"
Jsoup_93,/222043010/omniapr/defects4j/Jsoup_93_buggy/src/test/java/org/jsoup/nodes/FormElementTest.java,createsFormData,"    @Test public void createsFormData() {
        String html = ""<form><input name='one' value='two'><select name='three'><option value='not'>"" +
                ""<option value='four' selected><option value='five' selected><textarea name=six>seven</textarea>"" +
                ""<input name='seven' type='radio' value='on' checked><input name='seven' type='radio' value='off'>"" +
                ""<input name='eight' type='checkbox' checked><input name='nine' type='checkbox' value='unset'>"" +
                ""<input name='ten' value='text' disabled>"" +
                ""<input name='eleven' value='text' type='button'>"" +
                ""</form>"";
        Document doc = Jsoup.parse(html);
        FormElement form = (FormElement) doc.select(""form"").first();
        List<Connection.KeyVal> data = form.formData();

        assertEquals(6, data.size());
        assertEquals(""one=two"", data.get(0).toString());
        assertEquals(""three=four"", data.get(1).toString());
        assertEquals(""three=five"", data.get(2).toString());
        assertEquals(""six=seven"", data.get(3).toString());
        assertEquals(""seven=on"", data.get(4).toString()); // set
        assertEquals(""eight=on"", data.get(5).toString()); // default
        // nine should not appear, not checked checkbox
        // ten should not appear, disabled
        // eleven should not appear, button
    }",junit.framework.AssertionFailedError: expected:<6> but was:<7>
JacksonDatabind_2,/222043010/omniapr/defects4j/JacksonDatabind_2_buggy/src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java,testConversionOfPojos,"    public void testConversionOfPojos() throws Exception
    {
        final Issue467Bean input = new Issue467Bean(13);
        final String EXP = ""{\""x\"":13}"";
        
        // first, sanity check
        String json = MAPPER.writeValueAsString(input);
        assertEquals(EXP, json);

        // then via conversions: should become JSON Object
        JsonNode tree = MAPPER.valueToTree(input);
        assertTrue(""Expected Object, got ""+tree.getNodeType(), tree.isObject());
        assertEquals(EXP, MAPPER.writeValueAsString(tree));
    }","junit.framework.AssertionFailedError: Expected Object, got POJO"
JacksonDatabind_3,/222043010/omniapr/defects4j/JacksonDatabind_3_buggy/src/test/java/com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java,testStringArray,"    public void testStringArray() throws Exception
    {
        final String[] STRS = new String[] {
            ""a"", ""b"", ""abcd"", """", ""???"", ""\""quoted\"""", ""lf: \n"",
        };
        StringWriter sw = new StringWriter();
        JsonGenerator jg = MAPPER.getFactory().createGenerator(sw);
        jg.writeStartArray();
        for (String str : STRS) {
            jg.writeString(str);
        }
        jg.writeEndArray();
        jg.close();

        String[] result = MAPPER.readValue(sw.toString(), String[].class);
        assertNotNull(result);

        assertEquals(STRS.length, result.length);
        for (int i = 0; i < STRS.length; ++i) {
            assertEquals(STRS[i], result[i]);
        }

        // [#479]: null handling was busted in 2.4.0
        result = MAPPER.readValue("" [ null ]"", String[].class);
        assertNotNull(result);
        assertEquals(1, result.length);
        assertNull(result[0]);
    }",java.lang.NullPointerException
JacksonDatabind_4,/222043010/omniapr/defects4j/JacksonDatabind_4_buggy/src/test/java/com/fasterxml/jackson/databind/deser/TestCollectionDeserialization.java,testArrayIndexForExceptions,"    public void testArrayIndexForExceptions() throws Exception
    {
        final String OBJECTS_JSON = ""[ \""KEY2\"", false ]"";
        try {
            MAPPER.readValue(OBJECTS_JSON, Key[].class);
            fail(""Should not pass"");
        } catch (JsonMappingException e) {
            verifyException(e, ""Can not deserialize"");
            List<JsonMappingException.Reference> refs = e.getPath();
            assertEquals(1, refs.size());
            assertEquals(1, refs.get(0).getIndex());
        }

        try {
            MAPPER.readValue(""[ \""xyz\"", { } ]"", String[].class);
            fail(""Should not pass"");
        } catch (JsonMappingException e) {
            verifyException(e, ""Can not deserialize"");
            List<JsonMappingException.Reference> refs = e.getPath();
            assertEquals(1, refs.size());
            assertEquals(1, refs.get(0).getIndex());
        }

        try {
            MAPPER.readValue(""{\""keys\"":""+OBJECTS_JSON+""}"", KeyListBean.class);
            fail(""Should not pass"");
        } catch (JsonMappingException e) {
            verifyException(e, ""Can not deserialize"");
            List<JsonMappingException.Reference> refs = e.getPath();
            assertEquals(2, refs.size());
            // Bean has no index, but has name:
            assertEquals(-1, refs.get(0).getIndex());
            assertEquals(""keys"", refs.get(0).getFieldName());

            // and for List, reverse:
            assertEquals(1, refs.get(1).getIndex());
            assertNull(refs.get(1).getFieldName());
        }
    }",junit.framework.AssertionFailedError: expected:<1> but was:<0>
JacksonDatabind_5,/222043010/omniapr/defects4j/JacksonDatabind_5_buggy/src/test/java/com/fasterxml/jackson/databind/introspect/TestMixinMerging.java,testDisappearingMixins515,"    public void testDisappearingMixins515() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();
        mapper.disable(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS)
            .disable(MapperFeature.AUTO_DETECT_FIELDS)
            .disable(MapperFeature.AUTO_DETECT_GETTERS)
            .disable(MapperFeature.AUTO_DETECT_IS_GETTERS)
            .disable(MapperFeature.INFER_PROPERTY_MUTATORS);
        SimpleModule module = new SimpleModule(""Test"");
        module.setMixInAnnotation(Person.class, PersonMixin.class);        
        mapper.registerModule(module);

        assertEquals(""{\""city\"":\""Seattle\""}"", mapper.writeValueAsString(new PersonImpl()));
    }","com.fasterxml.jackson.databind.JsonMappingException: No serializer found for class com.fasterxml.jackson.databind.introspect.TestMixinMerging$PersonImpl and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) )"
JacksonDatabind_6,/222043010/omniapr/defects4j/JacksonDatabind_6_buggy/src/test/java/com/fasterxml/jackson/databind/deser/TestDateDeserialization.java,testISO8601MissingSeconds,"    public void testISO8601MissingSeconds() throws Exception
    {
        String inputStr;
        Date inputDate;
        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(""GMT""));
    
        inputStr = ""1997-07-16T19:20+01:00"";
        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);
        c.setTime(inputDate);
        assertEquals(1997, c.get(Calendar.YEAR));
        assertEquals(Calendar.JULY, c.get(Calendar.MONTH));
        assertEquals(16, c.get(Calendar.DAY_OF_MONTH));
        assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));
        assertEquals(0, c.get(Calendar.SECOND));
        assertEquals(0, c.get(Calendar.MILLISECOND));
}","com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not construct instance of java.util.Date from String value '1997-07-16T19:20+01:00': not a valid representation (error: Failed to parse Date value '1997-07-16T19:20+01:00': Can not parse date ""1997-07-16T19:20+01:00"": not compatible with any of standard forms (""yyyy-MM-dd'T'HH:mm:ss.SSSZ"", ""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"", ""EEE, dd MMM yyyy HH:mm:ss zzz"", ""yyyy-MM-dd""))"
JacksonDatabind_6,/222043010/omniapr/defects4j/JacksonDatabind_6_buggy/src/test/java/com/fasterxml/jackson/databind/deser/TestDateDeserialization.java,testISO8601PartialMilliseconds,"    public void testISO8601PartialMilliseconds() throws Exception
    {
        String inputStr;
        Date inputDate;
        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(""GMT""));
        
        inputStr = ""2014-10-03T18:00:00.6-05:00"";
        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);
        c.setTime(inputDate);
        assertEquals(2014, c.get(Calendar.YEAR));
        assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));
        assertEquals(3, c.get(Calendar.DAY_OF_MONTH));
        assertEquals(600, c.get(Calendar.MILLISECOND));

        inputStr = ""2014-10-03T18:00:00.61-05:00"";
        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);
        c.setTime(inputDate);
        assertEquals(2014, c.get(Calendar.YEAR));
        assertEquals(Calendar.OCTOBER, c.get(Calendar.MONTH));
        assertEquals(3, c.get(Calendar.DAY_OF_MONTH));
        assertEquals(18 + 5, c.get(Calendar.HOUR_OF_DAY));
        assertEquals(0, c.get(Calendar.MINUTE));
        assertEquals(0, c.get(Calendar.SECOND));
        assertEquals(610, c.get(Calendar.MILLISECOND));

        inputStr = ""1997-07-16T19:20:30.45+01:00"";
        inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class);
        c.setTime(inputDate);
        assertEquals(1997, c.get(Calendar.YEAR));
        assertEquals(Calendar.JULY, c.get(Calendar.MONTH));
        assertEquals(16, c.get(Calendar.DAY_OF_MONTH));
        assertEquals(19 - 1, c.get(Calendar.HOUR_OF_DAY));
        assertEquals(20, c.get(Calendar.MINUTE));
        assertEquals(30, c.get(Calendar.SECOND));
        assertEquals(450, c.get(Calendar.MILLISECOND));
    }","com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not construct instance of java.util.Date from String value '1997-07-16T19:20+01:00': not a valid representation (error: Failed to parse Date value '1997-07-16T19:20+01:00': Can not parse date ""1997-07-16T19:20+01:00"": not compatible with any of standard forms (""yyyy-MM-dd'T'HH:mm:ss.SSSZ"", ""yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"", ""EEE, dd MMM yyyy HH:mm:ss zzz"", ""yyyy-MM-dd""))"
JacksonDatabind_7,/222043010/omniapr/defects4j/JacksonDatabind_7_buggy/src/test/java/com/fasterxml/jackson/databind/creators/TestCreatorsDelegating.java,testDelegateWithTokenBuffer,"    public void testDelegateWithTokenBuffer() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();
        Value592 value = mapper.readValue(""{\""a\"":1,\""b\"":2}"", Value592.class);
        assertNotNull(value);
        Object ob = value.stuff;
        assertEquals(TokenBuffer.class, ob.getClass());
        JsonParser jp = ((TokenBuffer) ob).asParser();
        assertToken(JsonToken.START_OBJECT, jp.nextToken());
        assertToken(JsonToken.FIELD_NAME, jp.nextToken());
        assertEquals(""a"", jp.getCurrentName());
        assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());
        assertEquals(1, jp.getIntValue());
        assertToken(JsonToken.FIELD_NAME, jp.nextToken());
        assertEquals(""b"", jp.getCurrentName());
        assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());
        assertEquals(2, jp.getIntValue());
        assertToken(JsonToken.END_OBJECT, jp.nextToken());
        jp.close();
    }","junit.framework.AssertionFailedError: Expected token START_OBJECT, current token FIELD_NAME"
JacksonDatabind_8,/222043010/omniapr/defects4j/JacksonDatabind_8_buggy/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java,testStringBuilder,"    public void testStringBuilder() throws Exception
    {
        StringBuilder sb = MAPPER.readValue(quote(""abc""), StringBuilder.class);
        assertEquals(""abc"", sb.toString());
    }","com.fasterxml.jackson.databind.JsonMappingException: Conflicting String creators: already had explicitly marked [constructor for java.lang.StringBuilder, annotations: [null]], encountered [constructor for java.lang.StringBuilder, annotations: [null]]"
JacksonDatabind_9,/222043010/omniapr/defects4j/JacksonDatabind_9_buggy/src/test/java/com/fasterxml/jackson/databind/ser/TestMapSerialization.java,testClassKey,"    public void testClassKey() throws IOException
    {
        Map<Class<?>,Integer> map = new LinkedHashMap<Class<?>,Integer>();
        map.put(String.class, 2);
        String json = MAPPER.writeValueAsString(map);
        assertEquals(aposToQuotes(""{'java.lang.String':2}""), json);
    }","junit.framework.ComparisonFailure: expected:<{""[]java.lang.String"":2}> but was:<{""[class ]java.lang.String"":2}>"
JacksonDatabind_10,/222043010/omniapr/defects4j/JacksonDatabind_10_buggy/src/test/java/com/fasterxml/jackson/databind/ser/TestAnyGetter.java,testIssue705,"    public void testIssue705() throws Exception
    {
        Issue705Bean input = new Issue705Bean(""key"", ""value"");        
        String json = MAPPER.writeValueAsString(input);
        assertEquals(""{\""stuff\"":\""[key/value]\""}"", json);
    }","junit.framework.ComparisonFailure: expected:<{""[stuff"":""[key/value]]""}> but was:<{""[key"":""value]""}>"
JacksonDatabind_11,/222043010/omniapr/defects4j/JacksonDatabind_11_buggy/src/test/java/com/fasterxml/jackson/databind/type/TestJavaType.java,testLocalType728,"    public void testLocalType728() throws Exception
    {
        TypeFactory tf = TypeFactory.defaultInstance();
        Method m = Issue728.class.getMethod(""method"", CharSequence.class);
        assertNotNull(m);

        // Start with return type
        // first type-erased
        JavaType t = tf.constructType(m.getReturnType());
        assertEquals(CharSequence.class, t.getRawClass());
        // then generic
        t = tf.constructType(m.getGenericReturnType());
        assertEquals(CharSequence.class, t.getRawClass());

        // then parameter type
        t = tf.constructType(m.getParameterTypes()[0]);
        assertEquals(CharSequence.class, t.getRawClass());
        t = tf.constructType(m.getGenericParameterTypes()[0]);
        assertEquals(CharSequence.class, t.getRawClass());
    }",junit.framework.AssertionFailedError: expected:<interface java.lang.CharSequence> but was:<class java.lang.Object>
JacksonDatabind_11,/222043010/omniapr/defects4j/JacksonDatabind_11_buggy/src/test/java/com/fasterxml/jackson/databind/type/TestLocalType609.java,testLocalPartialType609,"    public void testLocalPartialType609() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        
        EntityContainer input = new EntityContainer(); 
        input.entity = new RuleForm(12);
        String json = mapper.writeValueAsString(input);
        
        EntityContainer output = mapper.readValue(json, EntityContainer.class);
        assertEquals(12, output.getEntity().value);
    }",com.fasterxml.jackson.databind.JsonMappingException: Type variable 'T' can not be resolved (with context of class com.fasterxml.jackson.databind.type.TestLocalType609$EntityContainer)
JacksonDatabind_12,/222043010/omniapr/defects4j/JacksonDatabind_12_buggy/src/test/java/com/fasterxml/jackson/databind/deser/TestCustomDeserializers.java,testCustomMapValueDeser735,"    public void testCustomMapValueDeser735() throws Exception {
        String json = ""{\""map1\"":{\""a\"":1},\""map2\"":{\""a\"":1}}"";
        TestMapBean735 bean = MAPPER.readValue(json, TestMapBean735.class);

        assertEquals(100, bean.map1.get(""a"").intValue());
        assertEquals(1, bean.map2.get(""a"").intValue());
    }",junit.framework.AssertionFailedError: expected:<1> but was:<100>
JacksonDatabind_13,/222043010/omniapr/defects4j/JacksonDatabind_13_buggy/src/test/java/com/fasterxml/jackson/databind/struct/TestObjectIdDeserialization.java,testNullObjectId,"    public void testNullObjectId() throws Exception
    {
        // Ok, so missing Object Id is ok, but so is null.
        
        Identifiable value = MAPPER.readValue
                (aposToQuotes(""{'value':3, 'next':null, 'id':null}""), Identifiable.class);
        assertNotNull(value);
        assertEquals(3, value.value);
    }","com.fasterxml.jackson.databind.JsonMappingException: (was java.lang.NullPointerException) (through reference chain: com.fasterxml.jackson.databind.struct.Identifiable[""id""])"
JacksonDatabind_14,/222043010/omniapr/defects4j/JacksonDatabind_14_buggy/src/test/java/com/fasterxml/jackson/databind/convert/TestUpdateValue.java,testIssue744,"    public void testIssue744() throws IOException
    {
        ObjectMapper mapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        module.addDeserializer(DataA.class, new DataADeserializer());
        mapper.registerModule(module);

        DataB db = new DataB();
        db.da.i = 11;
        db.k = 13;
        String jsonBString = mapper.writeValueAsString(db);
        JsonNode jsonBNode = mapper.valueToTree(db);

        // create parent
        DataB dbNewViaString = mapper.readValue(jsonBString, DataB.class);
        assertEquals(5, dbNewViaString.da.i);
        assertEquals(13, dbNewViaString.k);

        DataB dbNewViaNode = mapper.treeToValue(jsonBNode, DataB.class);
        assertEquals(5, dbNewViaNode.da.i);
        assertEquals(13, dbNewViaNode.k);

        // update parent
        DataB dbUpdViaString = new DataB();
        DataB dbUpdViaNode = new DataB();

        assertEquals(1, dbUpdViaString.da.i);
        assertEquals(3, dbUpdViaString.k);
        mapper.readerForUpdating(dbUpdViaString).readValue(jsonBString);
        assertEquals(5, dbUpdViaString.da.i);
        assertEquals(13, dbUpdViaString.k);

        assertEquals(1, dbUpdViaNode.da.i);
        assertEquals(3, dbUpdViaNode.k);
        
        mapper.readerForUpdating(dbUpdViaNode).readValue(jsonBNode);
        assertEquals(5, dbUpdViaNode.da.i);
        assertEquals(13, dbUpdViaNode.k);
    }","com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field ""i"" (class com.fasterxml.jackson.databind.convert.TestUpdateValue$DataB), not marked as ignorable (2 known properties: ""da"", ""k""])"
JacksonDatabind_15,/222043010/omniapr/defects4j/JacksonDatabind_15_buggy/src/test/java/com/fasterxml/jackson/databind/convert/TestConvertingSerializer.java,testIssue731,"    public void testIssue731() throws Exception
    {
        String json = objectWriter().writeValueAsString(new ConvertingBeanWithUntypedConverter(1, 2));
        // must be  {""a"":2,""b"":4}
        assertEquals(""{\""a\"":2,\""b\"":4}"", json);
    }","com.fasterxml.jackson.databind.JsonMappingException: No serializer found for class com.fasterxml.jackson.databind.convert.TestConvertingSerializer$DummyBean and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) )"
JacksonDatabind_16,/222043010/omniapr/defects4j/JacksonDatabind_16_buggy/src/test/java/com/fasterxml/jackson/databind/mixins/MixinsWithBundlesTest.java,testMixinWithBundles,"    public void testMixinWithBundles() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper().addMixIn(Foo.class, FooMixin.class);
        String result = mapper.writeValueAsString(new Foo(""result""));
        assertEquals(""{\""bar\"":\""result\""}"", result);
    }","junit.framework.ComparisonFailure: expected:<{""[bar]"":""result""}> but was:<{""[stuff]"":""result""}>"
JacksonDatabind_17,/222043010/omniapr/defects4j/JacksonDatabind_17_buggy/src/test/java/com/fasterxml/jackson/databind/node/TestJsonNode.java,testArrayWithDefaultTyping,"    public void testArrayWithDefaultTyping() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper()
            .enableDefaultTyping();

        JsonNode array = mapper.readTree(""[ 1, 2 ]"");
        assertTrue(array.isArray());
        assertEquals(2, array.size());

        JsonNode obj = mapper.readTree(""{ \""a\"" : 2 }"");
        assertTrue(obj.isObject());
        assertEquals(1, obj.size());
        assertEquals(2, obj.path(""a"").asInt());
    }","com.fasterxml.jackson.databind.JsonMappingException: Unexpected token (VALUE_NUMBER_INT), expected VALUE_STRING: need JSON String that contains type id (for subtype of com.fasterxml.jackson.databind.JsonNode)"
JacksonDatabind_18,/222043010/omniapr/defects4j/JacksonDatabind_18_buggy/src/test/java/com/fasterxml/jackson/databind/seq/ReadRecoveryTest.java,testSimpleRootRecovery,"    public void testSimpleRootRecovery() throws Exception
    {
        final String JSON = aposToQuotes(""{'a':3}{'a':27,'foo':[1,2],'b':{'x':3}}  {'a':1,'b':2} "");

        MappingIterator<Bean> it = MAPPER.readerFor(Bean.class).readValues(JSON);
        Bean bean = it.nextValue();

        assertNotNull(bean);
        assertEquals(3, bean.a);

        // second one problematic
        try {
            it.nextValue();
        } catch (JsonMappingException e) {
            verifyException(e, ""Unrecognized field \""foo\"""");
        }

        // but should recover nicely
        bean = it.nextValue();
        assertNotNull(bean);
        assertEquals(1, bean.a);
        assertEquals(2, bean.b);

        assertFalse(it.hasNextValue());
        
        it.close();
    }","com.fasterxml.jackson.databind.JsonMappingException: Can not instantiate value of type [simple type, class com.fasterxml.jackson.databind.seq.ReadRecoveryTest$Bean] from Integral number (1); no single-int-arg constructor/factory method"
JacksonDatabind_18,/222043010/omniapr/defects4j/JacksonDatabind_18_buggy/src/test/java/com/fasterxml/jackson/databind/seq/ReadRecoveryTest.java,testRootBeans,"    public void testRootBeans() throws Exception
    {
        final String JSON = aposToQuotes(""{'a':3} {'x':5}"");
        MappingIterator<Bean> it = MAPPER.readerFor(Bean.class).readValues(JSON);
        // First one should be fine
        assertTrue(it.hasNextValue());
        Bean bean = it.nextValue();
        assertEquals(3, bean.a);
        // but second one not
        try {
            bean = it.nextValue();
            fail(""Should not have succeeded"");
        } catch (JsonMappingException e) {
            verifyException(e, ""Unrecognized field \""x\"""");
        }
        // 21-May-2015, tatu: With [databind#734], recovery, we now know there's no more data!
        assertFalse(it.hasNextValue());

        it.close();
    }","com.fasterxml.jackson.databind.JsonMappingException: Can not instantiate value of type [simple type, class com.fasterxml.jackson.databind.seq.ReadRecoveryTest$Bean] from Integral number (1); no single-int-arg constructor/factory method"
JacksonDatabind_18,/222043010/omniapr/defects4j/JacksonDatabind_18_buggy/src/test/java/com/fasterxml/jackson/databind/seq/ReadRecoveryTest.java,testSimpleArrayRecovery,"    public void testSimpleArrayRecovery() throws Exception
    {
        final String JSON = aposToQuotes(""[{'a':3},{'a':27,'foo':[1,2],'b':{'x':3}}  ,{'a':1,'b':2}  ]"");

        MappingIterator<Bean> it = MAPPER.readerFor(Bean.class).readValues(JSON);
        Bean bean = it.nextValue();

        assertNotNull(bean);
        assertEquals(3, bean.a);

        // second one problematic
        try {
            it.nextValue();
        } catch (JsonMappingException e) {
            verifyException(e, ""Unrecognized field \""foo\"""");
        }

        // but should recover nicely
        bean = it.nextValue();
        assertNotNull(bean);
        assertEquals(1, bean.a);
        assertEquals(2, bean.b);

        assertFalse(it.hasNextValue());
        
        it.close();
    }","com.fasterxml.jackson.databind.JsonMappingException: Can not instantiate value of type [simple type, class com.fasterxml.jackson.databind.seq.ReadRecoveryTest$Bean] from Integral number (1); no single-int-arg constructor/factory method"
JacksonDatabind_19,/222043010/omniapr/defects4j/JacksonDatabind_19_buggy/src/test/java/com/fasterxml/jackson/databind/convert/TestMapConversions.java,testMapToProperties,"    public void testMapToProperties() throws Exception
    {
        Bean bean = new Bean();
        bean.A = 129;
        bean.B = ""13"";
        Properties props = MAPPER.convertValue(bean, Properties.class);

        assertEquals(2, props.size());

        assertEquals(""13"", props.getProperty(""B""));
        // should coercce non-Strings to Strings
        assertEquals(""129"", props.getProperty(""A""));
    }",junit.framework.ComparisonFailure: expected:<129> but was:<null>
JacksonDatabind_19,/222043010/omniapr/defects4j/JacksonDatabind_19_buggy/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java,testReadProperties,"    public void testReadProperties() throws Exception
    {
        Properties props = MAPPER.readValue(aposToQuotes(""{'a':'foo', 'b':123, 'c':true}""),
                Properties.class);
        assertEquals(3, props.size());
        assertEquals(""foo"", props.getProperty(""a""));
        assertEquals(""123"", props.getProperty(""b""));
        assertEquals(""true"", props.getProperty(""c""));
    }",junit.framework.ComparisonFailure: expected:<123> but was:<null>
JacksonDatabind_19,/222043010/omniapr/defects4j/JacksonDatabind_19_buggy/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory.java,testProperties,"    public void testProperties()
    {
        TypeFactory tf = TypeFactory.defaultInstance();
        JavaType t = tf.constructType(Properties.class);
        assertEquals(MapType.class, t.getClass());
        assertSame(Properties.class, t.getRawClass());

        // so far so good. But how about parameterization?
        assertSame(String.class, ((MapType) t).getKeyType().getRawClass());
        assertSame(String.class, ((MapType) t).getContentType().getRawClass());
    }",junit.framework.AssertionFailedError: expected same:<class java.lang.String> was not:<class java.lang.Object>
JacksonDatabind_20,/222043010/omniapr/defects4j/JacksonDatabind_20_buggy/src/test/java/com/fasterxml/jackson/databind/introspect/TestNamingStrategyStd.java,testNamingWithObjectNode,"    public void testNamingWithObjectNode() throws Exception
    {
        ObjectMapper m = new ObjectMapper();
        m.setPropertyNamingStrategy(PropertyNamingStrategy.LOWER_CASE);
        ClassWithObjectNodeField result =
            m.readValue(
                ""{ \""id\"": \""1\"", \""json\"": { \""foo\"": \""bar\"", \""baz\"": \""bing\"" } }"",
                ClassWithObjectNodeField.class);
        assertNotNull(result);
        assertEquals(""1"", result.id);
        assertNotNull(result.json);
        assertEquals(2, result.json.size());
        assertEquals(""bing"", result.json.path(""baz"").asText());
    }","com.fasterxml.jackson.databind.JsonMappingException: Conflicting setter definitions for property ""all"": com.fasterxml.jackson.databind.node.ObjectNode#setAll(1 params) vs com.fasterxml.jackson.databind.node.ObjectNode#setAll(1 params)"
JacksonDatabind_21,/222043010/omniapr/defects4j/JacksonDatabind_21_buggy/src/test/java/com/fasterxml/jackson/databind/deser/TestEnumDeserialization.java,testEnumWithJsonPropertyRename,"    public void testEnumWithJsonPropertyRename() throws Exception
    {
        String json = MAPPER.writeValueAsString(new EnumWithPropertyAnno[] {
                EnumWithPropertyAnno.B, EnumWithPropertyAnno.A
        });
        assertEquals(""[\""b\"",\""a\""]"", json);

        // and while not really proper place, let's also verify deser while we're at it
        EnumWithPropertyAnno[] result = MAPPER.readValue(json, EnumWithPropertyAnno[].class);
        assertNotNull(result);
        assertEquals(2, result.length);
        assertSame(EnumWithPropertyAnno.B, result[0]);
        assertSame(EnumWithPropertyAnno.A, result[1]);
    }","junit.framework.ComparisonFailure: expected:<[""[b"",""a]""]> but was:<[""[B"",""A]""]>"
JacksonDatabind_22,/222043010/omniapr/defects4j/JacksonDatabind_22_buggy/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonValue.java,testJsonValueWithCustomOverride,"    public void testJsonValueWithCustomOverride() throws Exception
    {
        final Bean838 INPUT = new Bean838();

        // by default, @JsonValue should be used
        assertEquals(quote(""value""), MAPPER.writeValueAsString(INPUT));

        // but custom serializer should override it
        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(new SimpleModule()
            .addSerializer(Bean838.class, new Bean838Serializer())
            );
        assertEquals(""42"", mapper.writeValueAsString(INPUT));
    }","junit.framework.ComparisonFailure: expected:<[42]> but was:<[""value""]>"
JacksonDatabind_23,/222043010/omniapr/defects4j/JacksonDatabind_23_buggy/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize2.java,testEmptyInclusionScalars,"    public void testEmptyInclusionScalars() throws IOException
    {
        ObjectMapper defMapper = MAPPER;
        ObjectMapper inclMapper = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_EMPTY);

        // First, Strings
        StringWrapper str = new StringWrapper("""");
        assertEquals(""{\""str\"":\""\""}"", defMapper.writeValueAsString(str));
        assertEquals(""{}"", inclMapper.writeValueAsString(str));
        assertEquals(""{}"", inclMapper.writeValueAsString(new StringWrapper()));

        assertEquals(""{\""value\"":\""x\""}"", defMapper.writeValueAsString(new NonEmptyString(""x"")));
        assertEquals(""{}"", defMapper.writeValueAsString(new NonEmptyString("""")));

        // Then numbers
        assertEquals(""{\""value\"":12}"", defMapper.writeValueAsString(new NonEmptyInt(12)));
        assertEquals(""{}"", defMapper.writeValueAsString(new NonEmptyInt(0)));

        assertEquals(""{\""value\"":1.25}"", defMapper.writeValueAsString(new NonEmptyDouble(1.25)));
        assertEquals(""{}"", defMapper.writeValueAsString(new NonEmptyDouble(0.0)));

        IntWrapper zero = new IntWrapper(0);
        assertEquals(""{\""i\"":0}"", defMapper.writeValueAsString(zero));
        assertEquals(""{}"", inclMapper.writeValueAsString(zero));
    }","junit.framework.ComparisonFailure: expected:<{[]}> but was:<{[""value"":0]}>"
JacksonDatabind_24,/222043010/omniapr/defects4j/JacksonDatabind_24_buggy/src/test/java/com/fasterxml/jackson/databind/ser/TestConfig.java,testDateFormatConfig,"    public void testDateFormatConfig() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();
        TimeZone tz1 = TimeZone.getTimeZone(""America/Los_Angeles"");
        TimeZone tz2 = TimeZone.getTimeZone(""Central Standard Time"");

        // sanity checks
        assertEquals(tz1, tz1);
        assertEquals(tz2, tz2);
        if (tz1.equals(tz2)) {
            fail();
        }

        mapper.setTimeZone(tz1);
        assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());
        assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());

        // also better stick via reader/writer as well
        assertEquals(tz1, mapper.writer().getConfig().getTimeZone());
        assertEquals(tz1, mapper.reader().getConfig().getTimeZone());
        
        SimpleDateFormat f = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
        f.setTimeZone(tz2);
        mapper.setDateFormat(f);

        // should not change the timezone tho
        assertEquals(tz1, mapper.getSerializationConfig().getTimeZone());
        assertEquals(tz1, mapper.getDeserializationConfig().getTimeZone());
        assertEquals(tz1, mapper.writer().getConfig().getTimeZone());
        assertEquals(tz1, mapper.reader().getConfig().getTimeZone());
    }","junit.framework.AssertionFailedError: expected:<sun.util.calendar.ZoneInfo[id=""America/Los_Angeles"",offset=-28800000,dstSavings=3600000,useDaylight=true,transitions=185,lastRule=java.util.SimpleTimeZone[id=America/Los_Angeles,offset=-28800000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]]> but was:<sun.util.calendar.ZoneInfo[id=""GMT"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]>"
JacksonDatabind_25,/222043010/omniapr/defects4j/JacksonDatabind_25_buggy/src/test/java/com/fasterxml/jackson/databind/deser/TestArrayDeserialization.java,testByteArrayTypeOverride890,"    public void testByteArrayTypeOverride890() throws Exception
    {
        HiddenBinaryBean890 result = MAPPER.readValue(
                aposToQuotes(""{'someBytes':'AQIDBA=='}""), HiddenBinaryBean890.class);
        assertNotNull(result);
        assertNotNull(result.someBytes);
        assertEquals(byte[].class, result.someBytes.getClass());
    }",com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize Class [B (of type array) as a Bean
JacksonDatabind_26,/222043010/omniapr/defects4j/JacksonDatabind_26_buggy/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java,testEnumHandlers,"    public void testEnumHandlers() throws IOException
    {
        ObjectMapper mapper = new ObjectMapper();
        // ensure we have serializers and/or deserializers, first
        String json = mapper.writerFor(EnumPOJO.class)
                .writeValueAsString(new EnumPOJO());
        EnumPOJO result = mapper.readerFor(EnumPOJO.class)
                .readValue(json);
        assertNotNull(result);

        // and then use JDK serialization to freeze/thaw objects
        byte[] bytes = jdkSerialize(mapper);
        ObjectMapper mapper2 = jdkDeserialize(bytes);
        assertNotNull(mapper2);

        bytes = jdkSerialize(mapper.readerFor(EnumPOJO.class));
        ObjectReader r = jdkDeserialize(bytes);
        assertNotNull(r);

        /* 14-Aug-2015, tatu: Looks like pre-loading JsonSerializer is problematic
         *    at this point; comment out for now. Try to fix later on.
         */
        bytes = jdkSerialize(mapper.writerFor(EnumPOJO.class));
        ObjectWriter w = jdkDeserialize(bytes);
        assertNotNull(w);

        // plus, ensure objects are usable:
        String json2 = w.writeValueAsString(new EnumPOJO());
        assertEquals(json, json2);
        EnumPOJO result2 = r.readValue(json2);
        assertNotNull(result2);
    }",java.io.NotSerializableException: com.fasterxml.jackson.databind.ser.BeanPropertyWriter
JacksonDatabind_27,/222043010/omniapr/defects4j/JacksonDatabind_27_buggy/src/test/java/com/fasterxml/jackson/databind/jsontype/TestExternalId.java,testInverseExternalId928,"    public void testInverseExternalId928() throws Exception
    {
        final String CLASS = Payload928.class.getName();

        ObjectMapper mapper = new ObjectMapper();

        final String successCase = ""{\""payload\"":{\""something\"":\""test\""},\""class\"":\""""+CLASS+""\""}"";
        Envelope928 envelope1 = mapper.readValue(successCase, Envelope928.class);
        assertNotNull(envelope1);
        assertEquals(Payload928.class, envelope1._payload.getClass());

        // and then re-ordered case that was problematic
        final String failCase = ""{\""class\"":\""""+CLASS+""\"",\""payload\"":{\""something\"":\""test\""}}"";
        Envelope928 envelope2 = mapper.readValue(failCase, Envelope928.class);
        assertNotNull(envelope2);
        assertEquals(Payload928.class, envelope2._payload.getClass());
    }",java.lang.IllegalStateException: No fallback setter/field defined: can not use creator property for com.fasterxml.jackson.databind.deser.CreatorProperty
JacksonDatabind_28,/222043010/omniapr/defects4j/JacksonDatabind_28_buggy/src/test/java/com/fasterxml/jackson/databind/node/TestObjectNode.java,testIssue941,"    public void testIssue941() throws Exception
    {
        ObjectNode object = MAPPER.createObjectNode();

        String json = MAPPER.writeValueAsString(object);
        System.out.println(""json: ""+json);

        ObjectNode de1 = MAPPER.readValue(json, ObjectNode.class);  // this works
        System.out.println(""Deserialized to ObjectNode: ""+de1);

        MyValue de2 = MAPPER.readValue(json, MyValue.class);  // but this throws exception
        System.out.println(""Deserialized to MyValue: ""+de2);
    }",com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of com.fasterxml.jackson.databind.node.ObjectNode out of END_OBJECT token
JacksonDatabind_29,/222043010/omniapr/defects4j/JacksonDatabind_29_buggy/src/test/java/com/fasterxml/jackson/databind/jsontype/TestExternalId.java,testExternalTypeIdWithNull,"    public void testExternalTypeIdWithNull() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();
        mapper.registerSubtypes(ValueBean.class);
        ExternalBean b;
        b = mapper.readValue(aposToQuotes(""{'bean':null,'extType':'vbean'}""),
                ExternalBean.class);
        assertNotNull(b);
        b = mapper.readValue(aposToQuotes(""{'extType':'vbean','bean':null}""),
                ExternalBean.class);
        assertNotNull(b);
    }",com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of com.fasterxml.jackson.databind.jsontype.TestExternalId$ValueBean out of VALUE_STRING token
JacksonDatabind_30,/222043010/omniapr/defects4j/JacksonDatabind_30_buggy/src/test/java/com/fasterxml/jackson/databind/jsontype/TestExternalId.java,testBigDecimal965,"    public void testBigDecimal965() throws Exception
    {

        Wrapper965 w = new Wrapper965();
        w.typeEnum = Type965.BIG_DECIMAL;
        final String NUM_STR = ""-10000000000.0000000001"";
        w.value = new BigDecimal(NUM_STR);

        String json = MAPPER.writeValueAsString(w);

        // simple sanity check so serialization is faithful
        if (!json.contains(NUM_STR)) {
            fail(""JSON content should contain value '""+NUM_STR+""', does not appear to: ""+json);
        }
        
        Wrapper965 w2 = MAPPER.readerFor(Wrapper965.class)
                .with(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)
                .readValue(json);

        assertEquals(w.typeEnum, w2.typeEnum);
        assertTrue(String.format(""Expected %s = %s; got back %s = %s"",
            w.value.getClass().getSimpleName(), w.value.toString(), w2.value.getClass().getSimpleName(), w2.value.toString()),
            w.value.equals(w2.value));
    }",junit.framework.AssertionFailedError: Expected BigDecimal = -10000000000.0000000001; got back BigDecimal = -1.0E+10
JacksonDatabind_31,/222043010/omniapr/defects4j/JacksonDatabind_31_buggy/src/test/java/com/fasterxml/jackson/databind/util/TestTokenBuffer.java,testOutputContext,"    public void testOutputContext() throws IOException
    {
        TokenBuffer buf = new TokenBuffer(null, false); // no ObjectCodec
        StringWriter w = new StringWriter();
        JsonGenerator gen = MAPPER.getFactory().createGenerator(w);
 
        // test content: [{""a"":1,""b"":{""c"":2}},{""a"":2,""b"":{""c"":3}}]

        buf.writeStartArray();
        gen.writeStartArray();
        _verifyOutputContext(buf, gen);
        
        buf.writeStartObject();
        gen.writeStartObject();
        _verifyOutputContext(buf, gen);
        
        buf.writeFieldName(""a"");
        gen.writeFieldName(""a"");
        _verifyOutputContext(buf, gen);

        buf.writeNumber(1);
        gen.writeNumber(1);
        _verifyOutputContext(buf, gen);

        buf.writeFieldName(""b"");
        gen.writeFieldName(""b"");
        _verifyOutputContext(buf, gen);

        buf.writeStartObject();
        gen.writeStartObject();
        _verifyOutputContext(buf, gen);
        
        buf.writeFieldName(""c"");
        gen.writeFieldName(""c"");
        _verifyOutputContext(buf, gen);

        buf.writeNumber(2);
        gen.writeNumber(2);
        _verifyOutputContext(buf, gen);

        buf.writeEndObject();
        gen.writeEndObject();
        _verifyOutputContext(buf, gen);

        buf.writeEndObject();
        gen.writeEndObject();
        _verifyOutputContext(buf, gen);

        buf.writeEndArray();
        gen.writeEndArray();
        _verifyOutputContext(buf, gen);
        
        buf.close();
        gen.close();
    }","junit.framework.AssertionFailedError: Expected name 'b' (JsonParser), TokenBuffer had 'a'"
JacksonDatabind_32,/222043010/omniapr/defects4j/JacksonDatabind_32_buggy/src/test/java/com/fasterxml/jackson/databind/deser/TestUntypedDeserialization.java,testNestedUntyped989,"    public void testNestedUntyped989() throws IOException
    {
        Untyped989 pojo;
        ObjectReader r = MAPPER.readerFor(Untyped989.class);

        pojo = r.readValue(""[]"");
        assertTrue(pojo.value instanceof List);
        pojo = r.readValue(""[{}]"");
        assertTrue(pojo.value instanceof List);
        
        pojo = r.readValue(""{}"");
        assertTrue(pojo.value instanceof Map);
        pojo = r.readValue(""{\""a\"":[]}"");
        assertTrue(pojo.value instanceof Map);
    }",com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of java.lang.Object out of END_OBJECT token
JacksonDatabind_33,/222043010/omniapr/defects4j/JacksonDatabind_33_buggy/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrapped.java,testUnwrappedAsPropertyIndicator,"    public void testUnwrappedAsPropertyIndicator() throws Exception
    {
        Inner inner = new Inner();
        inner.animal = ""Zebra"";

        Outer outer = new Outer();
        outer.inner = inner;

        String actual = MAPPER.writeValueAsString(outer);

        assertTrue(actual.contains(""animal""));
        assertTrue(actual.contains(""Zebra""));
        assertFalse(actual.contains(""inner""));
    }","com.fasterxml.jackson.databind.JsonMappingException: No serializer found for class com.fasterxml.jackson.databind.struct.TestUnwrapped$Outer and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) )"
JacksonDatabind_34,/222043010/omniapr/defects4j/JacksonDatabind_34_buggy/src/test/java/com/fasterxml/jackson/databind/jsonschema/NewSchemaTest.java,testSimpleNumbers,"    public void testSimpleNumbers() throws Exception
    {
        final StringBuilder sb = new StringBuilder();
        
        MAPPER.acceptJsonFormatVisitor(Numbers.class,
                new JsonFormatVisitorWrapper.Base() {
            @Override
            public JsonObjectFormatVisitor expectObjectFormat(final JavaType type) {
                return new JsonObjectFormatVisitor.Base(getProvider()) {
                    @Override
                    public void optionalProperty(BeanProperty prop) throws JsonMappingException {
                        sb.append(""[optProp "").append(prop.getName()).append(""("");
                        JsonSerializer<Object> ser = null;
                        if (prop instanceof BeanPropertyWriter) {
                            BeanPropertyWriter bpw = (BeanPropertyWriter) prop;
                            ser = bpw.getSerializer();
                        }
                        final SerializerProvider prov = getProvider();
                        if (ser == null) {
                            ser = prov.findValueSerializer(prop.getType(), prop);
                        }
                        ser.acceptJsonFormatVisitor(new JsonFormatVisitorWrapper.Base() {
                            @Override
                            public JsonNumberFormatVisitor expectNumberFormat(
                                    JavaType type) throws JsonMappingException {
                                return new JsonNumberFormatVisitor() {
                                    @Override
                                    public void format(JsonValueFormat format) {
                                        sb.append(""[numberFormat="").append(format).append(""]"");
                                    }

                                    @Override
                                    public void enumTypes(Set<String> enums) { }

                                    @Override
                                    public void numberType(NumberType numberType) {
                                        sb.append(""[numberType="").append(numberType).append(""]"");
                                    }
                                };
                            }

                            @Override
                            public JsonIntegerFormatVisitor expectIntegerFormat(JavaType type) throws JsonMappingException {
                                return new JsonIntegerFormatVisitor() {
                                    @Override
                                    public void format(JsonValueFormat format) {
                                        sb.append(""[integerFormat="").append(format).append(""]"");
                                    }

                                    @Override
                                    public void enumTypes(Set<String> enums) { }

                                    @Override
                                    public void numberType(NumberType numberType) {
                                        sb.append(""[numberType="").append(numberType).append(""]"");
                                    }
                                };
                            }
                        }, prop.getType());

                        sb.append("")]"");
                    }
                };
            }
        });
        assertEquals(""[optProp dec([numberType=BIG_DECIMAL])][optProp bigInt([numberType=BIG_INTEGER])]"",
                sb.toString());
    }",junit.framework.ComparisonFailure: expected:<...dec([numberType=BIG_[DECIMAL]])][optProp bigInt([...> but was:<...dec([numberType=BIG_[INTEGER]])][optProp bigInt([...>
JacksonDatabind_35,/222043010/omniapr/defects4j/JacksonDatabind_35_buggy/src/test/java/com/fasterxml/jackson/databind/jsontype/WrapperObjectWithObjectIdTest.java,testSimple,"    public void testSimple() throws Exception
    {
        Company comp = new Company();
        comp.addComputer(new DesktopComputer(""computer-1"", ""Bangkok""));
        comp.addComputer(new DesktopComputer(""computer-2"", ""Pattaya""));
        comp.addComputer(new LaptopComputer(""computer-3"", ""Apple""));

        final ObjectMapper mapper = new ObjectMapper();

        String json = mapper.writerWithDefaultPrettyPrinter()
                .writeValueAsString(comp);

        System.out.println(""JSON: ""+json);

        Company result = mapper.readValue(json, Company.class);
        assertNotNull(result);
        assertNotNull(result.computers);
        assertEquals(3, result.computers.size());
    }","com.fasterxml.jackson.databind.JsonMappingException: Unexpected token (FIELD_NAME), expected START_OBJECT: need JSON Object to contain As.WRAPPER_OBJECT type information for class com.fasterxml.jackson.databind.jsontype.WrapperObjectWithObjectIdTest$Computer"
JacksonDatabind_36,/222043010/omniapr/defects4j/JacksonDatabind_36_buggy/src/test/java/com/fasterxml/jackson/databind/TestStdDateFormat.java,testLenient,"    public void testLenient() throws Exception
    {
        StdDateFormat f = StdDateFormat.instance;

        // default should be lenient
        assertTrue(f.isLenient());

        StdDateFormat f2 = f.clone();
        assertTrue(f2.isLenient());

        f2.setLenient(false);
        assertFalse(f2.isLenient());

        f2.setLenient(true);
        assertTrue(f2.isLenient());

        // and for testing, finally, leave as non-lenient
        f2.setLenient(false);
        assertFalse(f2.isLenient());
        StdDateFormat f3 = f2.clone();
        assertFalse(f3.isLenient());

        // first, legal dates are... legal
        Date dt = f3.parse(""2015-11-30"");
        assertNotNull(dt);

        // but as importantly, when not lenient, do not allow
        try {
            f3.parse(""2015-11-32"");
            fail(""Should not pass"");
        } catch (ParseException e) {
            verifyException(e, ""can not parse date"");
        }

        // ... yet, with lenient, do allow
        f3.setLenient(true);
        dt = f3.parse(""2015-11-32"");
        assertNotNull(dt);
    }",java.lang.NullPointerException
JacksonDatabind_37,/222043010/omniapr/defects4j/JacksonDatabind_37_buggy/src/test/java/com/fasterxml/jackson/databind/objectid/Objecid1083Test.java,testSimple,"      public void testSimple() throws Exception {
          final ObjectMapper mapper = new ObjectMapper();
          final String json = aposToQuotes(""{'schemas': [{\n""
              + ""  'name': 'FoodMart'\n""
              + ""}]}\n"");
          mapper.readValue(json, JsonRoot.class);
      }","com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field ""name"" (class com.fasterxml.jackson.databind.objectid.Objecid1083Test$JsonMapSchema), not marked as ignorable (0 known properties: ])"
JacksonDatabind_38,/222043010/omniapr/defects4j/JacksonDatabind_38_buggy/src/test/java/com/fasterxml/jackson/databind/interop/DeprecatedTypeHandling1102Test.java,testExplicitMapType,"    public void testExplicitMapType() throws Exception
    {
        JavaType key = SimpleType.construct(String.class);
        JavaType elem = SimpleType.construct(Point.class);
        JavaType t = MapType.construct(Map.class, key, elem);

        final String json = aposToQuotes(""{'x':{'x':3,'y':5}}"");        

        Map<String,Point> m = MAPPER.readValue(json, t);
        assertNotNull(m);
        assertEquals(1, m.size());
        Object ob = m.values().iterator().next();
        assertEquals(Point.class, ob.getClass());
        Point p = (Point) ob;
        assertEquals(3, p.x);
        assertEquals(5, p.getY());
    }",junit.framework.AssertionFailedError: expected:<class com.fasterxml.jackson.databind.interop.DeprecatedTypeHandling1102Test$Point> but was:<class java.util.LinkedHashMap>
JacksonDatabind_38,/222043010/omniapr/defects4j/JacksonDatabind_38_buggy/src/test/java/com/fasterxml/jackson/databind/interop/DeprecatedTypeHandling1102Test.java,testExplicitCollectionType,"    public void testExplicitCollectionType() throws Exception
    {
        JavaType elem = SimpleType.construct(Point.class);
        JavaType t = CollectionType.construct(List.class, elem);

        final String json = aposToQuotes(""[ {'x':1,'y':2}, {'x':3,'y':6 }]"");        

        List<Point> l = MAPPER.readValue(json, t);
        assertNotNull(l);
        assertEquals(2, l.size());
        Object ob = l.get(0);
        assertEquals(Point.class, ob.getClass());
        Point p = (Point) ob;
        assertEquals(1, p.x);
        assertEquals(2, p.getY());
    }",junit.framework.AssertionFailedError: expected:<class com.fasterxml.jackson.databind.interop.DeprecatedTypeHandling1102Test$Point> but was:<class java.util.LinkedHashMap>
JacksonDatabind_38,/222043010/omniapr/defects4j/JacksonDatabind_38_buggy/src/test/java/com/fasterxml/jackson/databind/interop/DeprecatedTypeHandling1102Test.java,testPOJOSubType,"    public void testPOJOSubType() throws Exception
    {
        JavaType elem = SimpleType.construct(Point3D.class);

        Point3D p = MAPPER.readValue(aposToQuotes(""{'x':1,'z':3,'y':2}""), elem);
        assertNotNull(p);
        assertEquals(1, p.x);
        assertEquals(2, p.getY());
        assertEquals(3, p.z);
    }",junit.framework.AssertionFailedError: expected:<class com.fasterxml.jackson.databind.interop.DeprecatedTypeHandling1102Test$Point> but was:<class java.util.LinkedHashMap>
JacksonDatabind_39,/222043010/omniapr/defects4j/JacksonDatabind_39_buggy/src/test/java/com/fasterxml/jackson/databind/jsontype/TestPolymorphicWithDefaultImpl.java,testUnknownTypeIDRecovery,"    public void testUnknownTypeIDRecovery() throws Exception
    {
        ObjectReader reader = MAPPER.readerFor(CallRecord.class).without(
                DeserializationFeature.FAIL_ON_INVALID_SUBTYPE);
        String json = aposToQuotes(""{'version':0.0,'application':'123',""
                +""'item':{'type':'xevent','location':'location1'},""
                +""'item2':{'type':'event','location':'location1'}}"");
        // can't read item2 - which is valid
        CallRecord r = reader.readValue(json);
        assertNull(r.item);
        assertNotNull(r.item2);

        json = aposToQuotes(""{'item':{'type':'xevent','location':'location1'}, 'version':0.0,'application':'123'}"");
        CallRecord r3 = reader.readValue(json);
        assertNull(r3.item);
        assertEquals(""123"", r3.application);
    }","com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field ""location"" (class com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl$CallRecord), not marked as ignorable (4 known properties: ""version"", ""item"", ""item2"", ""application""])"
JacksonDatabind_40,/222043010/omniapr/defects4j/JacksonDatabind_40_buggy/src/test/java/com/fasterxml/jackson/databind/deser/TestSimpleTypes.java,testEmptyToNullCoercionForPrimitives,"    public void testEmptyToNullCoercionForPrimitives() throws Exception {
        _testEmptyToNullCoercion(int.class, Integer.valueOf(0));
        _testEmptyToNullCoercion(long.class, Long.valueOf(0));
        _testEmptyToNullCoercion(double.class, Double.valueOf(0.0));
        _testEmptyToNullCoercion(float.class, Float.valueOf(0.0f));
    }",junit.framework.AssertionFailedError: Should not have passed
JacksonDatabind_41,/222043010/omniapr/defects4j/JacksonDatabind_41_buggy/src/test/java/com/fasterxml/jackson/databind/interop/DeprecatedTypeHandling1102Test.java,testDeprecatedTypeResolution,"    public void testDeprecatedTypeResolution() throws Exception
    {
        TypeFactory tf = MAPPER.getTypeFactory();

        // first, with real (if irrelevant) context
        JavaType t = tf.constructType(Point.class, getClass());
        assertEquals(Point.class, t.getRawClass());

        // and then missing context
        JavaType t2 = tf.constructType(Point.class, (Class<?>) null);
        assertEquals(Point.class, t2.getRawClass());

        JavaType ctxt = tf.constructType(getClass());
        JavaType t3 = tf.constructType(Point.class, ctxt);
        assertEquals(Point.class, t3.getRawClass());
    }",java.lang.IllegalArgumentException: Unrecognized Type: [null]
JacksonDatabind_42,/222043010/omniapr/defects4j/JacksonDatabind_42_buggy/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java,testLocale,"    public void testLocale() throws IOException
    {
        assertEquals(new Locale(""en""), MAPPER.readValue(quote(""en""), Locale.class));
        assertEquals(new Locale(""es"", ""ES""), MAPPER.readValue(quote(""es_ES""), Locale.class));
        assertEquals(new Locale(""FI"", ""fi"", ""savo""),
                MAPPER.readValue(quote(""fi_FI_savo""), Locale.class));
        // [databind#1123]
        Locale loc = MAPPER.readValue(quote(""""), Locale.class);
        assertSame(Locale.ROOT, loc);
    }",junit.framework.AssertionFailedError: expected same:<> was not:<null>
JacksonDatabind_43,/222043010/omniapr/defects4j/JacksonDatabind_43_buggy/src/test/java/com/fasterxml/jackson/databind/objectid/TestObjectIdSerialization.java,testNullStringPropertyId,"    public void testNullStringPropertyId() throws Exception
    {
        IdentifiableStringId value = MAPPER.readValue
                (aposToQuotes(""{'value':3, 'next':null, 'id':null}""), IdentifiableStringId.class);
        assertNotNull(value);
        assertEquals(3, value.value);
    }",com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of java.lang.String out of VALUE_NULL token
JacksonDatabind_44,/222043010/omniapr/defects4j/JacksonDatabind_44_buggy/src/test/java/com/fasterxml/jackson/databind/jsontype/TestSubtypes.java,testIssue1125WithDefault,"    public void testIssue1125WithDefault() throws Exception
    {
        Issue1125Wrapper result = MAPPER.readValue(aposToQuotes(""{'value':{'a':3,'def':9,'b':5}}""),
        		Issue1125Wrapper.class);
        assertNotNull(result.value);
        assertEquals(Default1125.class, result.value.getClass());
        Default1125 impl = (Default1125) result.value;
        assertEquals(3, impl.a);
        assertEquals(5, impl.b);
        assertEquals(9, impl.def);
    }","com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field ""b"" (class com.fasterxml.jackson.databind.jsontype.TestSubtypes$Default1125), not marked as ignorable (2 known properties: ""a"", ""def""])"
JacksonDatabind_45,/222043010/omniapr/defects4j/JacksonDatabind_45_buggy/src/test/java/com/fasterxml/jackson/databind/ser/DateSerializationTest.java,testDateDefaultShape,"    public void testDateDefaultShape() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();
        // No @JsonFormat => default to user config
        mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        String json = mapper.writeValueAsString(new DateAsDefaultBean(0L));
        assertEquals(aposToQuotes(""{'date':0}""), json);
        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        json = mapper.writeValueAsString(new DateAsDefaultBean(0L));
        assertEquals(aposToQuotes(""{'date':'1970-01-01T00:00:00.000+0000'}""), json);

        // Empty @JsonFormat => default to user config
        mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        json = mapper.writeValueAsString(new DateAsDefaultBeanWithEmptyJsonFormat(0L));
        assertEquals(aposToQuotes(""{'date':0}""), json);
        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        json = mapper.writeValueAsString(new DateAsDefaultBeanWithEmptyJsonFormat(0L));
        assertEquals(aposToQuotes(""{'date':'1970-01-01T00:00:00.000+0000'}""), json);

        // @JsonFormat with Shape.ANY and pattern => STRING shape, regardless of user config
        mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        json = mapper.writeValueAsString(new DateAsDefaultBeanWithPattern(0L));
        assertEquals(aposToQuotes(""{'date':'1970-01-01'}""), json);
        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        json = mapper.writeValueAsString(new DateAsDefaultBeanWithPattern(0L));
        assertEquals(aposToQuotes(""{'date':'1970-01-01'}""), json);

        // @JsonFormat with Shape.ANY and locale => STRING shape, regardless of user config
        mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        json = mapper.writeValueAsString(new DateAsDefaultBeanWithLocale(0L));
        assertEquals(aposToQuotes(""{'date':'1970-01-01T00:00:00.000+0000'}""), json);
        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        json = mapper.writeValueAsString(new DateAsDefaultBeanWithLocale(0L));
        assertEquals(aposToQuotes(""{'date':'1970-01-01T00:00:00.000+0000'}""), json);

        // @JsonFormat with Shape.ANY and timezone => STRING shape, regardless of user config
        mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        json = mapper.writeValueAsString(new DateAsDefaultBeanWithTimezone(0L));
        assertEquals(aposToQuotes(""{'date':'1970-01-01T01:00:00.000+0100'}""), json);
        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        json = mapper.writeValueAsString(new DateAsDefaultBeanWithTimezone(0L));
        assertEquals(aposToQuotes(""{'date':'1970-01-01T01:00:00.000+0100'}""), json);
    }","junit.framework.ComparisonFailure: expected:<{""date"":[""1970-01-01""]}> but was:<{""date"":[0]}>"
JacksonDatabind_46,/222043010/omniapr/defects4j/JacksonDatabind_46_buggy/src/test/java/com/fasterxml/jackson/databind/type/TestJavaType.java,testGenericSignature1195,"    public void testGenericSignature1195() throws Exception
    {
        TypeFactory tf = TypeFactory.defaultInstance();
        Method m;
        JavaType t;

        m = Generic1195.class.getMethod(""getList"");
        t  = tf.constructType(m.getGenericReturnType());
        assertEquals(""Ljava/util/List<Ljava/lang/String;>;"", t.getGenericSignature());

        m = Generic1195.class.getMethod(""getMap"");
        t  = tf.constructType(m.getGenericReturnType());
        assertEquals(""Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;"",
                t.getGenericSignature());

        m = Generic1195.class.getMethod(""getGeneric"");
        t  = tf.constructType(m.getGenericReturnType());
        assertEquals(""Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;"", t.getGenericSignature());
    }",junit.framework.ComparisonFailure: expected:<...e<Ljava/lang/String;[>];> but was:<...e<Ljava/lang/String;[];>
JacksonDatabind_47,/222043010/omniapr/defects4j/JacksonDatabind_47_buggy/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerialize.java,testBrokenAnnotation,"    public void testBrokenAnnotation() throws Exception
    {
        try {
            serializeAsString(MAPPER, new BrokenClass());
        } catch (Exception e) {
            verifyException(e, ""types not related"");
        }
    }","junit.framework.AssertionFailedError: Expected an exception with one of substrings ([types not related]): got one with message ""Failed to widen type [simple type, class java.lang.Long] with annotation (value java.lang.String), from 'getValue': Class java.lang.String not a super-type of [simple type, class java.lang.Long]"""
JacksonDatabind_47,/222043010/omniapr/defects4j/JacksonDatabind_47_buggy/src/test/java/com/fasterxml/jackson/databind/ser/TestJsonSerializeAs.java,testSpecializedAsIntermediate,"    public void testSpecializedAsIntermediate() throws IOException {
        assertEquals(aposToQuotes(""{'value':{'a':1,'b':2}}""),
                WRITER.writeValueAsString(new Bean1178Holder()));
    }","com.fasterxml.jackson.databind.JsonMappingException: Failed to widen type [simple type, class com.fasterxml.jackson.databind.ser.TestJsonSerializeAs$Bean1178Base] with annotation (value com.fasterxml.jackson.databind.ser.TestJsonSerializeAs$Bean1178Abstract), from 'value': Class com.fasterxml.jackson.databind.ser.TestJsonSerializeAs$Bean1178Abstract not a super-type of [simple type, class com.fasterxml.jackson.databind.ser.TestJsonSerializeAs$Bean1178Base]"
JacksonDatabind_48,/222043010/omniapr/defects4j/JacksonDatabind_48_buggy/src/test/java/com/fasterxml/jackson/databind/ser/TestFeatures.java,testVisibilityFeatures,"    public void testVisibilityFeatures() throws Exception
    {
        ObjectMapper om = new ObjectMapper();
        // Only use explicitly specified values to be serialized/deserialized (i.e., JSONProperty).
        om.configure(MapperFeature.AUTO_DETECT_FIELDS, false);
        om.configure(MapperFeature.AUTO_DETECT_GETTERS, false);
        om.configure(MapperFeature.AUTO_DETECT_SETTERS, false);
        om.configure(MapperFeature.AUTO_DETECT_IS_GETTERS, false);
        om.configure(MapperFeature.USE_GETTERS_AS_SETTERS, false);
        om.configure(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS, true);
        om.configure(MapperFeature.INFER_PROPERTY_MUTATORS, false);
        om.configure(MapperFeature.USE_ANNOTATIONS, true);

        JavaType javaType = om.getTypeFactory().constructType(TCls.class);        
        BeanDescription desc = (BeanDescription) om.getSerializationConfig().introspect(javaType);
        List<BeanPropertyDefinition> props = desc.findProperties();
        if (props.size() != 1) {
            fail(""Should find 1 property, not ""+props.size()+""; properties = ""+props);
        }
    }","junit.framework.AssertionFailedError: Should find 1 property, not 2; properties = [[Property 'name'; ctors: null, field(s): null, getter(s): null, setter(s): [method com.fasterxml.jackson.databind.ser.TestFeatures$TCls#setName(1 params)][visible=true,ignore=false,explicitName=false]], [Property 'groupname'; ctors: null, field(s): [field com.fasterxml.jackson.databind.ser.TestFeatures$TCls#groupname][visible=true,ignore=false,explicitName=true], getter(s): null, setter(s): null]]"
JacksonDatabind_49,/222043010/omniapr/defects4j/JacksonDatabind_49_buggy/src/test/java/com/fasterxml/jackson/databind/objectid/AlwaysAsReferenceFirstTest.java,testIssue1255,"    public void testIssue1255() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();
        Foo mo = new Foo();
        mo.bar1 = new Bar();
        mo.bar2 = mo.bar1;

        String json = mapper.writeValueAsString(mo);

        Foo result = mapper.readValue(json, Foo.class);
        assertNotNull(result);
    }","com.fasterxml.jackson.databind.deser.UnresolvedForwardReference: Unresolved forward references for: Object id [1] (for com.fasterxml.jackson.databind.objectid.AlwaysAsReferenceFirstTest$Bar) at [Source: {""bar1"":1,""bar2"":{""@id"":2,""value"":3}}; line: 1, column: 10]."
JacksonDatabind_50,/222043010/omniapr/defects4j/JacksonDatabind_50_buggy/src/test/java/com/fasterxml/jackson/databind/objectid/ObjectWithCreator1261Test.java,testObjectIds1261,"    public void testObjectIds1261() throws Exception
    {
         ObjectMapper mapper = new ObjectMapper();
         mapper.enable(SerializationFeature.INDENT_OUTPUT);
         mapper.enable(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY);

         Answer initialAnswer = createInitialAnswer();
         String initialAnswerString = mapper.writeValueAsString(initialAnswer);
// System.out.println(""Initial answer:\n""+initialAnswerString);
         JsonNode tree = mapper.readTree(initialAnswerString);
         Answer deserializedAnswer = mapper.readValue(initialAnswerString,
               Answer.class);
         String reserializedAnswerString = mapper
               .writeValueAsString(deserializedAnswer);
         JsonNode newTree = mapper.readTree(reserializedAnswerString);
         if (!tree.equals(newTree)) {
                  fail(""Original and recovered Json are different. Recovered = \n""
                        + reserializedAnswerString + ""\n"");
         }
   }",com.fasterxml.jackson.databind.JsonMappingException: Can not deserialize instance of com.fasterxml.jackson.databind.objectid.ObjectWithCreator1261Test$Child out of START_ARRAY token
JacksonDatabind_51,/222043010/omniapr/defects4j/JacksonDatabind_51_buggy/src/test/java/com/fasterxml/jackson/databind/jsontype/TestCustomTypeIdResolver.java,testPolymorphicTypeViaCustom,"    public void testPolymorphicTypeViaCustom() throws Exception {
        Base1270<Poly1> req = new Base1270<Poly1>();
        Poly1 o = new Poly1();
        o.val = ""optionValue"";
        req.options = o;
        req.val = ""some value"";
        Top1270 top = new Top1270();
        top.b = req;
        String json = MAPPER.writeValueAsString(top);
        JsonNode tree = MAPPER.readTree(json);
        assertNotNull(tree.get(""b""));
        assertNotNull(tree.get(""b"").get(""options""));
        assertNotNull(tree.get(""b"").get(""options"").get(""val""));

        // Can we reverse the process? I have some doubts
        Top1270 itemRead = MAPPER.readValue(json, Top1270.class);
        assertNotNull(itemRead);
        assertNotNull(itemRead.b);
    }","com.fasterxml.jackson.databind.JsonMappingException: Problem deserializing property 'options' (expected type: [simple type, class java.lang.Object]; actual type: java.util.LinkedHashMap), problem: Can not set com.fasterxml.jackson.databind.jsontype.TestCustomTypeIdResolver$Poly1Base field com.fasterxml.jackson.databind.jsontype.TestCustomTypeIdResolver$Base1270.options to java.util.LinkedHashMap"
JacksonDatabind_52,/222043010/omniapr/defects4j/JacksonDatabind_52_buggy/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeId999Test.java,testExternalTypeId,"    public void testExternalTypeId() throws Exception
    {
        TypeReference<?> type = new TypeReference<Message<FooPayload>>() { };

        Message<?> msg = MAPPER.readValue(aposToQuotes(""{ 'type':'foo', 'payload': {} }""), type);
        assertNotNull(msg);
        assertNotNull(msg.payload);
        assertEquals(""foo"", msg.type);

        // and then with different order
        msg = MAPPER.readValue(aposToQuotes(""{'payload': {}, 'type':'foo' }""), type);
        assertNotNull(msg);
        assertNotNull(msg.payload);
        assertEquals(""foo"", msg.type);
    }",junit.framework.ComparisonFailure: expected:<foo> but was:<null>
JacksonDatabind_53,/222043010/omniapr/defects4j/JacksonDatabind_53_buggy/src/test/java/com/fasterxml/jackson/databind/jsontype/TypeRefinementForMap1215Test.java,testMapRefinement,"    public void testMapRefinement() throws Exception
    {
        String ID1 = ""3a6383d4-8123-4c43-8b8d-7cedf3e59404"";
        String ID2 = ""81c3d978-90c4-4b00-8da1-1c39ffcab02c"";
        String json = aposToQuotes(
""{'id':'""+ID1+""','items':[{'id':'""+ID2+""','property':'value'}]}"");

        ObjectMapper m = new ObjectMapper();
        Data data = m.readValue(json, Data.class);

        assertEquals(ID1, data.id);
        assertNotNull(data.items);
        assertEquals(1, data.items.size());
        Item value = data.items.get(ID2);
        assertNotNull(value);
        assertEquals(""value"", value.property);
    }","com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of com.fasterxml.jackson.databind.jsontype.TypeRefinementForMap1215Test$HasUniqueId, problem: abstract types either need to be mapped to concrete types, have custom deserializer, or be instantiated with additional type information"
JacksonDatabind_54,/222043010/omniapr/defects4j/JacksonDatabind_54_buggy/src/test/java/com/fasterxml/jackson/databind/deser/TestJDKAtomicTypes.java,testEmpty1256,"    public void testEmpty1256() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_ABSENT);

        String json = mapper.writeValueAsString(new Issue1256Bean());
        assertEquals(""{}"", json);
    }","junit.framework.ComparisonFailure: expected:<{[]}> but was:<{[""a"":null]}>"
JacksonDatabind_55,/222043010/omniapr/defects4j/JacksonDatabind_55_buggy/src/test/java/com/fasterxml/jackson/databind/ser/TestEnumSerialization.java,testEnumsWithJsonPropertyAsKey,"    public void testEnumsWithJsonPropertyAsKey() throws Exception
    {
        EnumMap<EnumWithJsonProperty,String> input = new EnumMap<EnumWithJsonProperty,String>(EnumWithJsonProperty.class);
        input.put(EnumWithJsonProperty.A, ""b"");
        assertEquals(""{\""aleph\"":\""b\""}"", MAPPER.writeValueAsString(input));
    }","junit.framework.ComparisonFailure: expected:<{""[aleph]"":""b""}> but was:<{""[A]"":""b""}>"
JacksonDatabind_56,/222043010/omniapr/defects4j/JacksonDatabind_56_buggy/src/test/java/com/fasterxml/jackson/databind/deser/TestJdkTypes.java,testLocale,"    public void testLocale() throws IOException
    {
        assertEquals(new Locale(""en""), MAPPER.readValue(quote(""en""), Locale.class));
        assertEquals(new Locale(""es"", ""ES""), MAPPER.readValue(quote(""es_ES""), Locale.class));
        assertEquals(new Locale(""FI"", ""fi"", ""savo""),
                MAPPER.readValue(quote(""fi_FI_savo""), Locale.class));
        assertEquals(new Locale(""en"", ""US""),
                MAPPER.readValue(quote(""en-US""), Locale.class));

        // [databind#1123]
        Locale loc = MAPPER.readValue(quote(""""), Locale.class);
        assertSame(Locale.ROOT, loc);
    }",junit.framework.AssertionFailedError: expected:<en_US> but was:<en-us>
JacksonDatabind_57,/222043010/omniapr/defects4j/JacksonDatabind_57_buggy/src/test/java/com/fasterxml/jackson/databind/seq/ReadValuesTest.java,testRootBeans,"    public void testRootBeans() throws Exception
    {
        for (Source src : Source.values()) {
            _testRootBeans(src);
        }
    }","java.io.CharConversionException: Invalid UTF-32 character 0x2261223a(above 10ffff)  at char #1, byte #7)"
JacksonDatabind_58,/222043010/omniapr/defects4j/JacksonDatabind_58_buggy/src/test/java/com/fasterxml/jackson/databind/misc/AccessFixTest.java,testCauseOfThrowableIgnoral,"    public void testCauseOfThrowableIgnoral() throws Exception
    {
        final SecurityManager origSecMan = System.getSecurityManager();
        try {
            System.setSecurityManager(new CauseBlockingSecurityManager());
            _testCauseOfThrowableIgnoral();
        } finally {
            System.setSecurityManager(origSecMan);
        }
    }","com.fasterxml.jackson.databind.JsonMappingException: Can not access private java.lang.Throwable java.lang.Throwable.cause (from class java.lang.Throwable; failed to set access: Can not force permission: (""java.lang.reflect.ReflectPermission"" ""suppressAccessChecks"")"
JacksonDatabind_59,/222043010/omniapr/defects4j/JacksonDatabind_59_buggy/src/test/java/com/fasterxml/jackson/databind/jsontype/TypeRefinementForMapTest.java,testMapKeyRefinement1384,"    public void testMapKeyRefinement1384() throws Exception
    {
        final String TEST_INSTANCE_SERIALIZED =
                ""{\""mapProperty\"":[\""java.util.HashMap\"",{\""Compound|Key\"":\""Value\""}]}"";
        ObjectMapper mapper = new ObjectMapper().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);

        TestClass testInstance = mapper.readValue(TEST_INSTANCE_SERIALIZED, TestClass.class);
        assertEquals(1, testInstance.mapProperty.size());
        Object key = testInstance.mapProperty.keySet().iterator().next();
        assertEquals(CompoundKey.class, key.getClass());
        String testInstanceSerialized = mapper.writeValueAsString(testInstance);
        assertEquals(TEST_INSTANCE_SERIALIZED, testInstanceSerialized);
    }","com.fasterxml.jackson.databind.JsonMappingException: Can not find a (Map) Key deserializer for type [simple type, class com.fasterxml.jackson.databind.jsontype.TypeRefinementForMapTest$CompoundKey]"
JacksonDatabind_61,/222043010/omniapr/defects4j/JacksonDatabind_61_buggy/src/test/java/com/fasterxml/jackson/databind/jsontype/DefaultTypingWithPrimitivesTest.java,testDefaultTypingWithLong,"    public void testDefaultTypingWithLong() throws Exception
    {
        Data data = new Data();
        data.key = 1L;
        Map<String, Object> mapData = new HashMap<String, Object>();
        mapData.put(""longInMap"", 2L);
        mapData.put(""longAsField"", data);

        // Configure Jackson to preserve types
        ObjectMapper mapper = new ObjectMapper();
        StdTypeResolverBuilder resolver = new StdTypeResolverBuilder();
        resolver.init(JsonTypeInfo.Id.CLASS, null);
        resolver.inclusion(JsonTypeInfo.As.PROPERTY);
        resolver.typeProperty(""__t"");
        mapper.setDefaultTyping(resolver);
        mapper.enable(SerializationFeature.INDENT_OUTPUT);

        // Serialize
        String json = mapper.writeValueAsString(mapData);

        // Deserialize
        Map<?,?> result = mapper.readValue(json, Map.class);
        assertNotNull(result);
        assertEquals(2, result.size());
    }","com.fasterxml.jackson.databind.JsonMappingException: Class java.lang.Long not subtype of [simple type, class long] (through reference chain: java.util.HashMap[""longAsField""]->com.fasterxml.jackson.databind.jsontype.Data[""key""])"
JacksonDatabind_62,/222043010/omniapr/defects4j/JacksonDatabind_62_buggy/src/test/java/com/fasterxml/jackson/databind/creators/ArrayDelegatorCreatorForCollectionTest.java,testUnmodifiable,"    public void testUnmodifiable() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();
        Class<?> unmodSetType = Collections.unmodifiableSet(Collections.<String>emptySet()).getClass();
        mapper.addMixIn(unmodSetType, UnmodifiableSetMixin.class);
        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);

        final String EXPECTED_JSON = ""[\""""+unmodSetType.getName()+""\"",[]]"";

        Set<?> foo = mapper.readValue(EXPECTED_JSON, Set.class);
        assertTrue(foo.isEmpty());
    }","java.lang.IllegalStateException: No default constructor for [collection type; class java.util.Collections$UnmodifiableSet, contains [simple type, class java.lang.Object]]"
JacksonDatabind_63,/222043010/omniapr/defects4j/JacksonDatabind_63_buggy/src/test/java/com/fasterxml/jackson/databind/deser/exc/ExceptionPathTest.java,testReferenceChainForInnerClass,"    public void testReferenceChainForInnerClass() throws Exception
    {
        String json = MAPPER.writeValueAsString(new Outer());
        try {
            MAPPER.readValue(json, Outer.class);
            fail(""Should not pass"");
        } catch (JsonMappingException e) {
            JsonMappingException.Reference reference = e.getPath().get(0);
            assertEquals(getClass().getName()+""$Outer[\""inner\""]"",
                    reference.toString());
        }
    }","junit.framework.ComparisonFailure: expected:<....databind.deser.exc.[ExceptionPathTest$]Outer[""inner""]> but was:<....databind.deser.exc.[]Outer[""inner""]>"
JacksonDatabind_63,/222043010/omniapr/defects4j/JacksonDatabind_63_buggy/src/test/java/com/fasterxml/jackson/databind/deser/exc/TestExceptionHandlingWithDefaultDeserialization.java,testShouldThrowJsonMappingExceptionWithPathReference,"    public void testShouldThrowJsonMappingExceptionWithPathReference() throws IOException {
        // given
        ObjectMapper mapper = new ObjectMapper();
        String input = ""{\""bar\"":{\""baz\"":{qux:\""quxValue\""))}"";
        final String THIS = getClass().getName();

        // when
        try {
            mapper.readValue(input, Foo.class);
            fail(""Upsss! Exception has not been thrown."");
        } catch (JsonMappingException ex) {
            // then
            assertEquals(THIS+""$Foo[\""bar\""]->""+THIS+""$Bar[\""baz\""]"",
                    ex.getPathReference());
        }
    }
}
","junit.framework.ComparisonFailure: expected:<....databind.deser.exc.[TestExceptionHandlingWithDefaultDeserialization$Foo[""bar""]->com.fasterxml.jackson.databind.deser.exc.TestExceptionHandlingWithDefaultDeserialization$]Bar[""baz""]> but was:<....databind.deser.exc.[Foo[""bar""]->com.fasterxml.jackson.databind.deser.exc.]Bar[""baz""]>"
JacksonDatabind_63,/222043010/omniapr/defects4j/JacksonDatabind_63_buggy/src/test/java/com/fasterxml/jackson/databind/deser/exc/TestExceptionHandlingWithJsonCreatorDeserialization.java,testShouldThrowJsonMappingExceptionWithPathReference,"    public void testShouldThrowJsonMappingExceptionWithPathReference() throws IOException {
        // given
        ObjectMapper mapper = new ObjectMapper();
        String input = ""{\""bar\"":{\""baz\"":{qux:\""quxValue\""))}"";
        final String THIS = getClass().getName();

        // when
        try {
            mapper.readValue(input, Foo.class);
            fail(""Upsss! Exception has not been thrown."");
        } catch (JsonMappingException ex) {
            // then
            assertEquals(THIS+""$Foo[\""bar\""]->""+THIS+""$Bar[\""baz\""]"",
                    ex.getPathReference());
        }
    }
}
","junit.framework.ComparisonFailure: expected:<....databind.deser.exc.[TestExceptionHandlingWithJsonCreatorDeserialization$Foo[""bar""]->com.fasterxml.jackson.databind.deser.exc.TestExceptionHandlingWithJsonCreatorDeserialization$]Bar[""baz""]> but was:<....databind.deser.exc.[Foo[""bar""]->com.fasterxml.jackson.databind.deser.exc.]Bar[""baz""]>"
JacksonDatabind_64,/222043010/omniapr/defects4j/JacksonDatabind_64_buggy/src/test/java/com/fasterxml/jackson/databind/filter/JsonIncludeTest.java,testIssue1351,"    public void testIssue1351() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_DEFAULT);
        assertEquals(aposToQuotes(""{}""),
                mapper.writeValueAsString(new Issue1351Bean(null, (double) 0)));
        // [databind#1417]
        assertEquals(aposToQuotes(""{}""),
                mapper.writeValueAsString(new Issue1351NonBean(0)));
    }","junit.framework.ComparisonFailure: expected:<{[]}> but was:<{[""str"":null]}>"
JacksonDatabind_65,/222043010/omniapr/defects4j/JacksonDatabind_65_buggy/src/test/java/com/fasterxml/jackson/databind/deser/KeyDeser1429Test.java,testDeserializeKeyViaFactory,"    public void testDeserializeKeyViaFactory() throws Exception
    {
        Map<FullName, Double> map =
            new ObjectMapper().readValue(""{\""first.last\"": 42}"",
                    new TypeReference<Map<FullName, Double>>() { });
        Map.Entry<FullName, Double> entry = map.entrySet().iterator().next();
        FullName key = entry.getKey();
        assertEquals(key._firstname, ""first"");
        assertEquals(key._lastname, ""last"");
        assertEquals(entry.getValue().doubleValue(), 42, 0);
    }","com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not deserialize Map key of type com.fasterxml.jackson.databind.deser.KeyDeser1429Test$FullName from String ""first.last"": not a valid representation, problem: wrong number of arguments"
JacksonDatabind_66,/222043010/omniapr/defects4j/JacksonDatabind_66_buggy/src/test/java/com/fasterxml/jackson/databind/module/TestCustomEnumKeyDeserializer.java,testCustomEnumKeySerializerWithPolymorphic,"    public void testCustomEnumKeySerializerWithPolymorphic() throws IOException
    {
        SimpleModule simpleModule = new SimpleModule();
        simpleModule.addDeserializer(SuperTypeEnum.class, new JsonDeserializer<SuperTypeEnum>() {
            @Override
            public SuperTypeEnum deserialize(JsonParser p, DeserializationContext deserializationContext)
                    throws IOException
            {
                return SuperTypeEnum.valueOf(p.getText());
            }
        });
        ObjectMapper mapper = new ObjectMapper()
                .registerModule(simpleModule);

        SuperType superType = mapper.readValue(""{\""someMap\"": {\""FOO\"": \""bar\""}}"",
                SuperType.class);
        assertEquals(""Deserialized someMap.FOO should equal bar"", ""bar"",
                superType.someMap.get(SuperTypeEnum.FOO));
    }","com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not deserialize Map key of type com.fasterxml.jackson.databind.module.TestCustomEnumKeyDeserializer$SuperTypeEnum from String ""FOO"": not a valid representation: No enum constant com.fasterxml.jackson.databind.module.TestCustomEnumKeyDeserializer.SuperTypeEnum.}"
JacksonDatabind_67,/222043010/omniapr/defects4j/JacksonDatabind_67_buggy/src/test/java/com/fasterxml/jackson/databind/module/TestCustomEnumKeyDeserializer.java,testCustomEnumValueAndKeyViaModifier,"    public void testCustomEnumValueAndKeyViaModifier() throws IOException
    {
        SimpleModule module = new SimpleModule();
        module.setDeserializerModifier(new BeanDeserializerModifier() {        
            @Override
            public JsonDeserializer<Enum> modifyEnumDeserializer(DeserializationConfig config,
                    final JavaType type, BeanDescription beanDesc,
                    final JsonDeserializer<?> deserializer) {
                return new JsonDeserializer<Enum>() {
                    @Override
                    public Enum deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
                        Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
                        final String str = p.getValueAsString().toLowerCase();
                        return KeyEnum.valueOf(rawClass, str);
                    }
                };
            }

            @Override
            public KeyDeserializer modifyKeyDeserializer(DeserializationConfig config,
                    final JavaType type, KeyDeserializer deserializer)
            {
                if (!type.isEnumType()) {
                    return deserializer;
                }
                return new KeyDeserializer() {
                    @Override
                    public Object deserializeKey(String key, DeserializationContext ctxt)
                            throws IOException
                    {
                        Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
                        return Enum.valueOf(rawClass, key.toLowerCase());
                    }
                };
            }
        });
        ObjectMapper mapper = new ObjectMapper()
                .registerModule(module);

        // First, enum value as is
        KeyEnum key = mapper.readValue(quote(KeyEnum.replacements.name().toUpperCase()),
                KeyEnum.class);
        assertSame(KeyEnum.replacements, key);

        // and then as key
        EnumMap<KeyEnum,String> map = mapper.readValue(
                aposToQuotes(""{'REPlaceMENTS':'foobar'}""),
                new TypeReference<EnumMap<KeyEnum,String>>() { });
        assertEquals(1, map.size());
        assertSame(KeyEnum.replacements, map.keySet().iterator().next());
    }","com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not deserialize Map key of type com.fasterxml.jackson.databind.module.TestCustomEnumKeyDeserializer$KeyEnum from String ""REPlaceMENTS"": not a valid representation, problem: (com.fasterxml.jackson.databind.exc.InvalidFormatException) Can not deserialize Map key of type com.fasterxml.jackson.databind.module.TestCustomEnumKeyDeserializer$KeyEnum from String ""REPlaceMENTS"": not one of values excepted for Enum class: [rootDirectory, replacements, licenseString]"
JacksonDatabind_68,/222043010/omniapr/defects4j/JacksonDatabind_68_buggy/src/test/java/com/fasterxml/jackson/databind/struct/SingleValueAsArrayTest.java,testSuccessfulDeserializationOfObjectWithChainedArrayCreators,"    public void testSuccessfulDeserializationOfObjectWithChainedArrayCreators() throws IOException
    {
        MAPPER.readValue(JSON, Bean1421A.class);
    }","com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of com.fasterxml.jackson.databind.struct.SingleValueAsArrayTest$Messages: no suitable constructor found, can not deserialize from Object value (missing default constructor or creator, or perhaps need to add/enable type information?)"
JacksonDatabind_68,/222043010/omniapr/defects4j/JacksonDatabind_68_buggy/src/test/java/com/fasterxml/jackson/databind/struct/SingleValueAsArrayTest.java,testWithSingleString,"    public void testWithSingleString() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
        Bean1421B<List<String>> a = objectMapper.readValue(quote(""test2""),
                new TypeReference<Bean1421B<List<String>>>() {});
        List<String> expected = new ArrayList<>();
        expected.add(""test2"");
        assertEquals(expected, a.value);
    }","com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of com.fasterxml.jackson.databind.struct.SingleValueAsArrayTest$Messages: no suitable constructor found, can not deserialize from Object value (missing default constructor or creator, or perhaps need to add/enable type information?)"
JacksonDatabind_69,/222043010/omniapr/defects4j/JacksonDatabind_69_buggy/src/test/java/com/fasterxml/jackson/databind/creators/Creator1476Test.java,testConstructorChoice,"    public void testConstructorChoice() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        SimplePojo pojo = mapper.readValue(""{ \""intField\"": 1, \""stringField\"": \""foo\"" }"", SimplePojo.class);

        assertEquals(1, pojo.getIntField());
        assertEquals(""foo"", pojo.getStringField());
    }",com.fasterxml.jackson.databind.JsonMappingException: Could not find creator property with name 'intField' (in class com.fasterxml.jackson.databind.creators.Creator1476Test$SimplePojo)
JacksonDatabind_70,/222043010/omniapr/defects4j/JacksonDatabind_70_buggy/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrapped.java,testCaseInsensitiveUnwrap,"    public void testCaseInsensitiveUnwrap() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);
        Person p = mapper.readValue(""{ }"", Person.class);
        assertNotNull(p);
    }","java.util.NoSuchElementException: No entry 'businessAddress' found, can't remove"
JacksonDatabind_71,/222043010/omniapr/defects4j/JacksonDatabind_71_buggy/src/test/java/com/fasterxml/jackson/databind/deser/TestMapDeserialization.java,testcharSequenceKeyMap,"    public void testcharSequenceKeyMap() throws Exception {
        String JSON = aposToQuotes(""{'a':'b'}"");
        Map<CharSequence,String> result = MAPPER.readValue(JSON, new TypeReference<Map<CharSequence,String>>() { });
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(""b"", result.get(""a""));
    }","com.fasterxml.jackson.databind.JsonMappingException: Can not find a (Map) Key deserializer for type [simple type, class java.lang.CharSequence]"
JacksonDatabind_72,/222043010/omniapr/defects4j/JacksonDatabind_72_buggy/src/test/java/com/fasterxml/jackson/databind/creators/InnerClassCreatorTest.java,testIssue1501,"    public void testIssue1501() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();
        mapper.disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);
        String ser = mapper.writeValueAsString(new Something());
        mapper.readValue(ser, Something.class);
    }",java.lang.IllegalStateException: Internal error: no creator index for property 'a' (of type com.fasterxml.jackson.databind.deser.impl.InnerClassProperty)
JacksonDatabind_73,/222043010/omniapr/defects4j/JacksonDatabind_73_buggy/src/test/java/com/fasterxml/jackson/databind/deser/ReadOrWriteOnlyTest.java,testReadOnlyAndWriteOnly,"    public void testReadOnlyAndWriteOnly() throws Exception
    {
        String json = MAPPER.writeValueAsString(new ReadXWriteY());
        assertEquals(""{\""x\"":1}"", json);

        ReadXWriteY result = MAPPER.readValue(""{\""x\"":5, \""y\"":6}"", ReadXWriteY.class);
        assertNotNull(result);
        assertEquals(1, result.x);
        assertEquals(6, result.y);
    }","com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field ""x"" (class com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest$ReadXWriteY), not marked as ignorable (one known property: ""y""])"
JacksonDatabind_73,/222043010/omniapr/defects4j/JacksonDatabind_73_buggy/src/test/java/com/fasterxml/jackson/databind/deser/ReadOrWriteOnlyTest.java,testReadOnly935,"    public void testReadOnly935() throws Exception
    {
        String json = MAPPER.writeValueAsString(new Pojo935());
        Pojo935 result = MAPPER.readValue(json, Pojo935.class);
        assertNotNull(result);
    }","com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field ""x"" (class com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest$ReadXWriteY), not marked as ignorable (one known property: ""y""])"
JacksonDatabind_74,/222043010/omniapr/defects4j/JacksonDatabind_74_buggy/src/test/java/com/fasterxml/jackson/databind/jsontype/TestPolymorphicWithDefaultImpl.java,testWithEmptyStringAsNullObject1533,"    public void testWithEmptyStringAsNullObject1533() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper().enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);
        AsPropertyWrapper wrapper = mapper.readValue(""{ \""value\"": \""\"" }"", AsPropertyWrapper.class);
        assertNull(wrapper.value);
    }","com.fasterxml.jackson.databind.JsonMappingException: Unexpected token (VALUE_STRING), expected FIELD_NAME: missing property 'type' that is to contain type id  (for class com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl$AsProperty)"
JacksonDatabind_75,/222043010/omniapr/defects4j/JacksonDatabind_75_buggy/src/test/java/com/fasterxml/jackson/databind/struct/EnumFormatShapeTest.java,testEnumPropertyAsNumber,"    public void testEnumPropertyAsNumber() throws Exception {
        assertEquals(String.format(aposToQuotes(""{'color':%s}""), Color.GREEN.ordinal()),
                MAPPER.writeValueAsString(new ColorWrapper(Color.GREEN)));
    }","junit.framework.ComparisonFailure: expected:<{""color"":[2]}> but was:<{""color"":[""GREEN""]}>"
JacksonDatabind_76,/222043010/omniapr/defects4j/JacksonDatabind_76_buggy/src/test/java/com/fasterxml/jackson/databind/deser/builder/BuilderWithUnwrappedTest.java,testWithUnwrappedAndCreatorSingleParameterAtBeginning,"    public void testWithUnwrappedAndCreatorSingleParameterAtBeginning() throws Exception {
        final String json = aposToQuotes(""{'person_id':1234,'first_name':'John','last_name':'Doe','years_old':30,'living':true}"");

        final ObjectMapper mapper = new ObjectMapper();
        Person person = mapper.readValue(json, Person.class);
        assertEquals(1234, person.getId());
        assertNotNull(person.getName());
        assertEquals(""John"", person.getName().getFirst());
        assertEquals(""Doe"", person.getName().getLast());
        assertEquals(30, person.getAge());
        assertEquals(true, person.isAlive());
    }",junit.framework.ComparisonFailure: expected:<John> but was:<null>
JacksonDatabind_76,/222043010/omniapr/defects4j/JacksonDatabind_76_buggy/src/test/java/com/fasterxml/jackson/databind/deser/builder/BuilderWithUnwrappedTest.java,testWithUnwrappedAndCreatorMultipleParametersAtBeginning,"    public void testWithUnwrappedAndCreatorMultipleParametersAtBeginning() throws Exception {
        final String json = aposToQuotes(""{'animal_id':1234,'living':true,'first_name':'John','last_name':'Doe','years_old':30}"");

        final ObjectMapper mapper = new ObjectMapper();
        Animal animal = mapper.readValue(json, Animal.class);
        assertEquals(1234, animal.getId());
        assertNotNull(animal.getName());
        assertEquals(""John"", animal.getName().getFirst());
        assertEquals(""Doe"", animal.getName().getLast());
        assertEquals(30, animal.getAge());
        assertEquals(true, animal.isAlive());
    }",junit.framework.ComparisonFailure: expected:<John> but was:<null>
JacksonDatabind_76,/222043010/omniapr/defects4j/JacksonDatabind_76_buggy/src/test/java/com/fasterxml/jackson/databind/deser/builder/BuilderWithUnwrappedTest.java,testWithUnwrappedAndCreatorSingleParameterInMiddle,"    public void testWithUnwrappedAndCreatorSingleParameterInMiddle() throws Exception {
        final String json = aposToQuotes(""{'first_name':'John','last_name':'Doe','person_id':1234,'years_old':30,'living':true}"");

        final ObjectMapper mapper = new ObjectMapper();
        Person person = mapper.readValue(json, Person.class);
        assertEquals(1234, person.getId());
        assertNotNull(person.getName());
        assertEquals(""John"", person.getName().getFirst());
        assertEquals(""Doe"", person.getName().getLast());
        assertEquals(30, person.getAge());
        assertEquals(true, person.isAlive());
    }",junit.framework.ComparisonFailure: expected:<John> but was:<null>
JacksonDatabind_76,/222043010/omniapr/defects4j/JacksonDatabind_76_buggy/src/test/java/com/fasterxml/jackson/databind/deser/builder/BuilderWithUnwrappedTest.java,testWithUnwrappedAndCreatorMultipleParametersInMiddle,"    public void testWithUnwrappedAndCreatorMultipleParametersInMiddle() throws Exception {
        final String json = aposToQuotes(""{'first_name':'John','animal_id':1234,'last_name':'Doe','living':true,'years_old':30}"");

        final ObjectMapper mapper = new ObjectMapper();
        Animal animal = mapper.readValue(json, Animal.class);
        assertEquals(1234, animal.getId());
        assertNotNull(animal.getName());
        assertEquals(""John"", animal.getName().getFirst());
        assertEquals(""Doe"", animal.getName().getLast());
        assertEquals(30, animal.getAge());
        assertEquals(true, animal.isAlive());
    }",junit.framework.ComparisonFailure: expected:<John> but was:<null>
JacksonDatabind_77,/222043010/omniapr/defects4j/JacksonDatabind_77_buggy/src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java,testIssue1599,"    public void testIssue1599() throws Exception
    {
        final String JSON = aposToQuotes(
 ""{'id': 124,\n""
+"" 'obj':[ 'com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl',\n""
+""  {\n""
+""    'transletBytecodes' : [ 'AAIAZQ==' ],\n""
+""    'transletName' : 'a.b',\n""
+""    'outputProperties' : { }\n""
+""  }\n""
+"" ]\n""
+""}""
        );
        ObjectMapper mapper = new ObjectMapper();
        mapper.enableDefaultTyping();
        try {
            mapper.readValue(JSON, Bean1599.class);
            fail(""Should not pass"");
        } catch (JsonMappingException e) {
            verifyException(e, ""Illegal type"");
            verifyException(e, ""to deserialize"");
            verifyException(e, ""prevented for security reasons"");
        }
    }","junit.framework.AssertionFailedError: Expected an exception with one of substrings ([Illegal type]): got one with message ""N/A"
JacksonDatabind_78,/222043010/omniapr/defects4j/JacksonDatabind_78_buggy/src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java,testIssue1599,"    public void testIssue1599() throws Exception
    {
        final String JSON = aposToQuotes(
 ""{'id': 124,\n""
+"" 'obj':[ 'com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl',\n""
+""  {\n""
+""    'transletBytecodes' : [ 'AAIAZQ==' ],\n""
+""    'transletName' : 'a.b',\n""
+""    'outputProperties' : { }\n""
+""  }\n""
+"" ]\n""
+""}""
        );
        ObjectMapper mapper = new ObjectMapper();
        mapper.enableDefaultTyping();
        try {
            mapper.readValue(JSON, Bean1599.class);
            fail(""Should not pass"");
        } catch (JsonMappingException e) {
            verifyException(e, ""Illegal type"");
            verifyException(e, ""to deserialize"");
            verifyException(e, ""prevented for security reasons"");
        }
    }","junit.framework.AssertionFailedError: Expected an exception with one of substrings ([Illegal type]): got one with message ""N/A"
JacksonDatabind_79,/222043010/omniapr/defects4j/JacksonDatabind_79_buggy/src/test/java/com/fasterxml/jackson/databind/objectid/AlwaysAsReferenceFirstTest.java,testIssue1607,"    public void testIssue1607() throws Exception
    {
        String json = MAPPER.writeValueAsString(new ReallyAlwaysContainer());
        assertEquals(aposToQuotes(""{'alwaysClass':1,'alwaysProp':2}""), json);
    }","junit.framework.ComparisonFailure: expected:<{""alwaysClass"":[1],""alwaysProp"":2}> but was:<{""alwaysClass"":[{""id"":1,""value"":13}],""alwaysProp"":2}>"
JacksonDatabind_80,/222043010/omniapr/defects4j/JacksonDatabind_80_buggy/src/test/java/com/fasterxml/jackson/databind/jsontype/TestTypeNames.java,testBaseTypeId1616,"    public void testBaseTypeId1616() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();
        Collection<NamedType> subtypes = new StdSubtypeResolver().collectAndResolveSubtypesByTypeId(
                mapper.getDeserializationConfig(),
                // note: `null` is fine here as `AnnotatedMember`:
                null,
                mapper.constructType(Base1616.class));
        assertEquals(2, subtypes.size());
        Set<String> ok = new HashSet<>(Arrays.asList(""A"", ""B""));
        for (NamedType type : subtypes) {
            String id = type.getName();
            if (!ok.contains(id)) {
                fail(""Unexpected id '""+id+""' (mapping to: ""+type.getType()+""), should be one of: ""+ok);
            }
        }
    }",java.lang.NullPointerException
JacksonDatabind_81,/222043010/omniapr/defects4j/JacksonDatabind_81_buggy/src/test/java/com/fasterxml/jackson/databind/introspect/TypeCoercion1592Test.java,testTypeCoercion1592,"    public void testTypeCoercion1592() throws Exception
    {
        // first, serialize
        MAPPER.writeValueAsString(new Bean1592());
        Bean1592 result = MAPPER.readValue(""{}"", Bean1592.class);
        assertNotNull(result);
    }","com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Invalid definition for property ""i"" (of type com.fasterxml.jackson.databind.introspect.TypeCoercion1592Test$Bean1592): Can not refine serialization type [simple type, class int] into java.lang.Integer; types not related"
JacksonDatabind_82,/222043010/omniapr/defects4j/JacksonDatabind_82_buggy/src/test/java/com/fasterxml/jackson/databind/filter/IgnorePropertyOnDeserTest.java,testIgnoreGetterNotSetter1595,"    public void testIgnoreGetterNotSetter1595() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();
        Simple1595 config = new Simple1595();
        config.setId(123);
        config.setName(""jack"");
        String json = mapper.writeValueAsString(config);
        assertEquals(aposToQuotes(""{'id':123}""), json);
        Simple1595 des = mapper.readValue(aposToQuotes(""{'id':123,'name':'jack'}""), Simple1595.class);
        assertEquals(""jack"", des.getName());
    }",junit.framework.ComparisonFailure: expected:<jack> but was:<null>
JacksonDatabind_83,/222043010/omniapr/defects4j/JacksonDatabind_83_buggy/src/test/java/com/fasterxml/jackson/databind/filter/ProblemHandlerTest.java,testWeirdStringHandling,"    public void testWeirdStringHandling() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper()
            .addHandler(new WeirdStringHandler(SingleValuedEnum.A))
            ;
        SingleValuedEnum result = mapper.readValue(""\""B\"""", SingleValuedEnum.class);
        assertEquals(SingleValuedEnum.A, result);

        // also, write [databind#1629] try this
        mapper = new ObjectMapper()
                .addHandler(new WeirdStringHandler(null));
        UUID result2 = mapper.readValue(quote(""not a uuid!""), UUID.class);
        assertNull(result2);
    }","com.fasterxml.jackson.databind.exc.InvalidFormatException: Can not deserialize value of type java.util.UUID from String ""not a uuid!"": not a valid textual representation"
JacksonDatabind_84,/222043010/omniapr/defects4j/JacksonDatabind_84_buggy/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactoryWithRecursiveTypes.java,testBasePropertiesIncludedWhenSerializingSubWhenSubTypeLoadedAfterBaseType,"    public void testBasePropertiesIncludedWhenSerializingSubWhenSubTypeLoadedAfterBaseType() throws IOException {
        TypeFactory tf = TypeFactory.defaultInstance();
        tf.constructType(Base.class);
        tf.constructType(Sub.class);
        Sub sub = new Sub();
        String serialized = objectMapper().writeValueAsString(sub);
        assertEquals(""{\""base\"":1,\""sub\"":2}"", serialized);
    }","junit.framework.ComparisonFailure: expected:<{""[base"":1,""]sub"":2}> but was:<{""[]sub"":2}>"
JacksonDatabind_85,/222043010/omniapr/defects4j/JacksonDatabind_85_buggy/src/test/java/com/fasterxml/jackson/databind/ser/DateSerializationTest.java,testFormatWithoutPattern,"    public void testFormatWithoutPattern() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setDateFormat(new SimpleDateFormat(""yyyy-MM-dd'X'HH:mm:ss""));
        String json = mapper.writeValueAsString(new DateAsDefaultBeanWithTimezone(0L));
        assertEquals(aposToQuotes(""{'date':'1970-01-01X01:00:00'}""), json);
    }","junit.framework.ComparisonFailure: expected:<{""date"":""1970-01-01[X01:00:]00""}> but was:<{""date"":""1970-01-01[T01:00:00.000+01]00""}>"
JacksonDatabind_86,/222043010/omniapr/defects4j/JacksonDatabind_86_buggy/src/test/java/com/fasterxml/jackson/databind/type/RecursiveTypeTest.java,testSuperClassWithReferencedJavaType,"    public void testSuperClassWithReferencedJavaType() {
        TypeFactory tf = objectMapper().getTypeFactory();
        tf.constructType(Base.class); // must be constructed before sub to set the cache correctly
        JavaType subType = tf.constructType(Sub.class);
        // baseTypeFromSub should be a ResolvedRecursiveType in this test
        JavaType baseTypeFromSub = subType.getSuperClass();
        assertNotNull(baseTypeFromSub.getSuperClass());
    }",junit.framework.AssertionFailedError
JacksonDatabind_86,/222043010/omniapr/defects4j/JacksonDatabind_86_buggy/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactoryWithRecursiveTypes.java,testBasePropertiesIncludedWhenSerializingSubWhenSubTypeLoadedAfterBaseType,"    public void testBasePropertiesIncludedWhenSerializingSubWhenSubTypeLoadedAfterBaseType() throws IOException {
        TypeFactory tf = TypeFactory.defaultInstance();
        tf.constructType(Base.class);
        tf.constructType(Sub.class);
        Sub sub = new Sub();
        String serialized = objectMapper().writeValueAsString(sub);
        assertEquals(""{\""base\"":1,\""sub\"":2}"", serialized);
    }","junit.framework.ComparisonFailure: expected:<{""[base"":1,""]sub"":2}> but was:<{""[]sub"":2}>"
JacksonDatabind_87,/222043010/omniapr/defects4j/JacksonDatabind_87_buggy/src/test/java/com/fasterxml/jackson/databind/deser/TestDateDeserialization.java,testDateUtilISO8601NoTimezoneNonDefault,"    public void testDateUtilISO8601NoTimezoneNonDefault() throws Exception
    {
        // In first case, no timezone -> SHOULD use configured timezone
        ObjectReader r = MAPPER.readerFor(Date.class);
        TimeZone tz = TimeZone.getTimeZone(""GMT-2"");
        Date date1 = r.with(tz)
                .readValue(quote(""1970-01-01T00:00:00.000""));
        // Second case, should use specified timezone, not configured
        Date date2 = r.with(TimeZone.getTimeZone(""GMT+5""))
                .readValue(quote(""1970-01-01T00:00:00.000-02:00""));
        assertEquals(date1, date2);

        // also verify actual value, in GMT
        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(""GMT""));
        c.setTime(date1);
        assertEquals(1970, c.get(Calendar.YEAR));
        assertEquals(Calendar.JANUARY, c.get(Calendar.MONTH));
        assertEquals(1, c.get(Calendar.DAY_OF_MONTH));
        assertEquals(2, c.get(Calendar.HOUR_OF_DAY));
    }",junit.framework.AssertionFailedError: expected:<Wed Dec 31 16:00:00 PST 1969> but was:<Wed Dec 31 18:00:00 PST 1969>
JacksonDatabind_88,/222043010/omniapr/defects4j/JacksonDatabind_88_buggy/src/test/java/com/fasterxml/jackson/databind/jsontype/GenericTypeId1735Test.java,testNestedTypeCheck1735,"    public void testNestedTypeCheck1735() throws Exception
    {
        try {
            MAPPER.readValue(aposToQuotes(
""{'w':{'type':'java.util.HashMap<java.lang.String,java.lang.String>'}}""),
                    Wrapper1735.class);
            fail(""Should not pass"");
        } catch (JsonMappingException e) {
            verifyException(e, ""not subtype of"");
        }
    }","junit.framework.AssertionFailedError: Expected an exception with one of substrings ([not subtype of]): got one (of type com.fasterxml.jackson.databind.JsonMappingException) with message ""Problem deserializing property 'w' (expected type: [simple type, class com.fasterxml.jackson.databind.jsontype.GenericTypeId1735Test$Payload1735]; actual type: java.util.HashMap), problem: Can not set com.fasterxml.jackson.databind.jsontype.GenericTypeId1735Test$Payload1735 field com.fasterxml.jackson.databind.jsontype.GenericTypeId1735Test$Wrapper1735.w to java.util.HashMap"
JacksonDatabind_89,/222043010/omniapr/defects4j/JacksonDatabind_89_buggy/src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java,testJDKTypes1737,"    public void testJDKTypes1737() throws Exception
    {
        _testTypes1737(java.util.logging.FileHandler.class);
        _testTypes1737(java.rmi.server.UnicastRemoteObject.class);
    }",junit.framework.AssertionFailedError: Should not pass
JacksonDatabind_90,/222043010/omniapr/defects4j/JacksonDatabind_90_buggy/src/test/java/com/fasterxml/jackson/databind/creators/DelegatingArrayCreator1804Test.java,testDelegatingArray1804,"    public void testDelegatingArray1804() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        MyType thing = mapper.readValue(""[]"", MyType.class);
        assertNotNull(thing);
    }","com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of com.fasterxml.jackson.databind.creators.DelegatingArrayCreator1804Test$MyType: abstract types either need to be mapped to concrete types, have custom deserializer, or contain additional type information"
JacksonDatabind_91,/222043010/omniapr/defects4j/JacksonDatabind_91_buggy/src/test/java/com/fasterxml/jackson/databind/deser/jdk/MapDeserializerCachingTest.java,testCachedSerialize,"    public void testCachedSerialize() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        String json = aposToQuotes(""{'data':{'1st':'onedata','2nd':'twodata'}}"");

        // Do deserialization with non-annotated map property
        NonAnnotatedMapHolderClass ignored = mapper.readValue(json, NonAnnotatedMapHolderClass.class);
        assertTrue(ignored.data.containsKey(""1st""));
        assertTrue(ignored.data.containsKey(""2nd""));

//mapper = new ObjectMapper();
        
        MapHolder model2 = mapper.readValue(json, MapHolder.class);
        if (!model2.data.containsKey(""1st (CUSTOM)"")
            || !model2.data.containsKey(""2nd (CUSTOM)"")) {
            fail(""Not using custom key deserializer for input: ""+json+""; resulted in: ""+model2.data);
        }
    }","junit.framework.AssertionFailedError: Not using custom key deserializer for input: {""data"":{""1st"":""onedata"",""2nd"":""twodata""}}; resulted in: {1st=onedata, 2nd=twodata}"
JacksonDatabind_92,/222043010/omniapr/defects4j/JacksonDatabind_92_buggy/src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java,testJDKTypes1737,"    public void testJDKTypes1737() throws Exception
    {
        _testTypes1737(java.util.logging.FileHandler.class);
        _testTypes1737(java.rmi.server.UnicastRemoteObject.class);
    }",junit.framework.AssertionFailedError: Should not pass
JacksonDatabind_93,/222043010/omniapr/defects4j/JacksonDatabind_93_buggy/src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java,testJDKTypes1872,"    public void testJDKTypes1872() throws Exception
    {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);
    
        String json = aposToQuotes(String.format(""{'@class':'%s','authorities':['java.util.ArrayList',[]]}"",
                Authentication1872.class.getName()));
        Authentication1872 result = mapper.readValue(json, Authentication1872.class);
        assertNotNull(result);
    }",java.lang.NullPointerException
JacksonDatabind_94,/222043010/omniapr/defects4j/JacksonDatabind_94_buggy/src/test/java/com/fasterxml/jackson/databind/interop/IllegalTypesCheckTest.java,testC3P0Types,"    public void testC3P0Types() throws Exception
    {
        _testIllegalType(ComboPooledDataSource.class); // [databind#1931]
    }","junit.framework.AssertionFailedError: Expected an exception with one of substrings ([Illegal type]): got one with message ""Can not instantiate value of type [simple type, class com.mchange.v2.c3p0.jacksontest.ComboPooledDataSource] from String value ('/tmp/foobar.txt'); no single-String constructor/factory method"
JacksonDatabind_95,/222043010/omniapr/defects4j/JacksonDatabind_95_buggy/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory.java,testCanonicalNames,"    public void testCanonicalNames()
    {
        TypeFactory tf = TypeFactory.defaultInstance();
        JavaType t = tf.constructType(java.util.Calendar.class);
        String can = t.toCanonical();
        assertEquals(""java.util.Calendar"", can);
        assertEquals(t, tf.constructFromCanonical(can));

        // Generic maps and collections will default to Object.class if type-erased
        t = tf.constructType(java.util.ArrayList.class);
        can = t.toCanonical();
        assertEquals(""java.util.ArrayList<java.lang.Object>"", can);
        assertEquals(t, tf.constructFromCanonical(can));

        t = tf.constructType(java.util.TreeMap.class);
        can = t.toCanonical();
        assertEquals(""java.util.TreeMap<java.lang.Object,java.lang.Object>"", can);
        assertEquals(t, tf.constructFromCanonical(can));

        // And then EnumMap (actual use case for us)
        t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class);
        can = t.toCanonical();
        assertEquals(""java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>"",
                can);
        assertEquals(t, tf.constructFromCanonical(can));

        // [databind#1941]: allow ""raw"" types too

        t = tf.constructFromCanonical(""java.util.List"");
        assertEquals(List.class, t.getRawClass());
        assertEquals(CollectionType.class, t.getClass());
        // 01-Mar-2018, tatu: not 100% should we expect type parameters here...
        //    But currently we do NOT get any
        /*
        assertEquals(1, t.containedTypeCount());
        assertEquals(Object.class, t.containedType(0).getRawClass());
        */
        assertEquals(Object.class, t.getContentType().getRawClass());
        can = t.toCanonical();
        assertEquals(""java.util.List<java.lang.Object>"", can);
        assertEquals(t, tf.constructFromCanonical(can));
    }",java.lang.NullPointerException
JacksonDatabind_96,/222043010/omniapr/defects4j/JacksonDatabind_96_buggy/src/test/java/com/fasterxml/jackson/databind/deser/creators/CreatorWithNamingStrategyTest.java,testSnakeCaseWithOneArg,"    public void testSnakeCaseWithOneArg() throws Exception
    {
        final String MSG = ""1st"";
        OneProperty actual = MAPPER.readValue(
                ""{\""param_name0\"":\""""+MSG+""\""}"",
                OneProperty.class);
        assertEquals(""CTOR:""+MSG, actual.paramName0);
    }",com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Invalid definition for property `param_name0` (of type `com.fasterxml.jackson.databind.deser.creators.CreatorWithNamingStrategyTest$OneProperty`): Could not find creator property with name 'param_name0' (known Creator properties: [paramName0])
JacksonDatabind_97,/222043010/omniapr/defects4j/JacksonDatabind_97_buggy/src/test/java/com/fasterxml/jackson/databind/node/POJONodeTest.java,testPOJONodeCustomSer,"    public void testPOJONodeCustomSer() throws Exception
    {
      Data data = new Data();
      data.aStr = ""Hello"";

      Map<String, Object> mapTest = new HashMap<>();
      mapTest.put(""data"", data);

      ObjectNode treeTest = MAPPER.createObjectNode();
      treeTest.putPOJO(""data"", data);

      final String EXP = ""{\""data\"":{\""aStr\"":\""The value is: Hello!\""}}"";
      
      String mapOut = MAPPER.writer().withAttribute(""myAttr"", ""Hello!"").writeValueAsString(mapTest);
      assertEquals(EXP, mapOut);

      String treeOut = MAPPER.writer().withAttribute(""myAttr"", ""Hello!"").writeValueAsString(treeTest);
      assertEquals(EXP, treeOut);
    }","junit.framework.ComparisonFailure: expected:<...Str"":""The value is: [Hello!]""}}> but was:<...Str"":""The value is: [NULL]""}}>"
JacksonDatabind_98,/222043010/omniapr/defects4j/JacksonDatabind_98_buggy/src/test/java/com/fasterxml/jackson/databind/jsontype/ext/ExternalTypeIdWithEnum1328Test.java,testExample,"    public void testExample() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        
        String json = mapper.writerWithDefaultPrettyPrinter()
                .writeValueAsString(Arrays.asList(new AnimalAndType(AnimalType.Dog, new Dog())));
        List<AnimalAndType> list = mapper.readerFor(new TypeReference<List<AnimalAndType>>() { })
            .readValue(json);
        assertNotNull(list);
    }","com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `com.fasterxml.jackson.databind.jsontype.ext.ExternalTypeIdWithEnum1328Test$AnimalAndType`, problem: argument type mismatch"
JacksonDatabind_99,/222043010/omniapr/defects4j/JacksonDatabind_99_buggy/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory.java,testCanonicalNames,"    public void testCanonicalNames()
    {
        TypeFactory tf = TypeFactory.defaultInstance();
        JavaType t = tf.constructType(java.util.Calendar.class);
        String can = t.toCanonical();
        assertEquals(""java.util.Calendar"", can);
        assertEquals(t, tf.constructFromCanonical(can));

        // Generic maps and collections will default to Object.class if type-erased
        t = tf.constructType(java.util.ArrayList.class);
        can = t.toCanonical();
        assertEquals(""java.util.ArrayList<java.lang.Object>"", can);
        assertEquals(t, tf.constructFromCanonical(can));

        t = tf.constructType(java.util.TreeMap.class);
        can = t.toCanonical();
        assertEquals(""java.util.TreeMap<java.lang.Object,java.lang.Object>"", can);
        assertEquals(t, tf.constructFromCanonical(can));

        // And then EnumMap (actual use case for us)
        t = tf.constructMapType(EnumMap.class, EnumForCanonical.class, String.class);
        can = t.toCanonical();
        assertEquals(""java.util.EnumMap<com.fasterxml.jackson.databind.type.TestTypeFactory$EnumForCanonical,java.lang.String>"",
                can);
        assertEquals(t, tf.constructFromCanonical(can));

        // [databind#2109]: also ReferenceTypes
        t = tf.constructType(new TypeReference<AtomicReference<Long>>() { });
        can = t.toCanonical();
        assertEquals(""java.util.concurrent.atomic.AtomicReference<java.lang.Long>"",
                can);
        assertEquals(t, tf.constructFromCanonical(can));

        // [databind#1941]: allow ""raw"" types too
        t = tf.constructFromCanonical(""java.util.List"");
        assertEquals(List.class, t.getRawClass());
        assertEquals(CollectionType.class, t.getClass());
        // 01-Mar-2018, tatu: not 100% should we expect type parameters here...
        //    But currently we do NOT get any
        /*
        assertEquals(1, t.containedTypeCount());
        assertEquals(Object.class, t.containedType(0).getRawClass());
        */
        assertEquals(Object.class, t.getContentType().getRawClass());
        can = t.toCanonical();
        assertEquals(""java.util.List<java.lang.Object>"", can);
        assertEquals(t, tf.constructFromCanonical(can));
    }",junit.framework.ComparisonFailure: expected:<...rence<java.lang.Long[>]> but was:<...rence<java.lang.Long[]>
JacksonDatabind_100,/222043010/omniapr/defects4j/JacksonDatabind_100_buggy/src/test/java/com/fasterxml/jackson/databind/node/TestConversions.java,testBase64Text,"    public void testBase64Text() throws Exception
    {
        // let's actually iterate over sets of encoding modes, lengths
        
        final int[] LENS = { 1, 2, 3, 4, 7, 9, 32, 33, 34, 35 };
        final Base64Variant[] VARIANTS = {
                Base64Variants.MIME,
                Base64Variants.MIME_NO_LINEFEEDS,
                Base64Variants.MODIFIED_FOR_URL,
                Base64Variants.PEM
        };

        for (int len : LENS) {
            byte[] input = new byte[len];
            for (int i = 0; i < input.length; ++i) {
                input[i] = (byte) i;
            }
            for (Base64Variant variant : VARIANTS) {
                TextNode n = new TextNode(variant.encode(input));
                byte[] data = null;
                try {
                    data = n.getBinaryValue(variant);
                } catch (Exception e) {
                    fail(""Failed (variant ""+variant+"", data length ""+len+""): ""+e.getMessage());
                }
                assertNotNull(data);
                assertArrayEquals(data, input);

                // 15-Aug-2018, tatu: [databind#2096] requires another test
                JsonParser p = new TreeTraversingParser(n);
                assertEquals(JsonToken.VALUE_STRING, p.nextToken());
                try {
                    data = p.getBinaryValue(variant);
                } catch (Exception e) {
                    fail(""Failed (variant ""+variant+"", data length ""+len+""): ""+e.getMessage());
                }
                assertNotNull(data);
                assertArrayEquals(data, input);
                p.close();
            }
        }
    }","junit.framework.AssertionFailedError: Failed (variant MODIFIED-FOR-URL, data length 1): Cannot access contents of TextNode as binary due to broken Base64 encoding: Unexpected end-of-String in base64 content"
JacksonDatabind_101,/222043010/omniapr/defects4j/JacksonDatabind_101_buggy/src/test/java/com/fasterxml/jackson/databind/struct/TestUnwrapped.java,testIssue2088UnwrappedFieldsAfterLastCreatorProp,"    public void testIssue2088UnwrappedFieldsAfterLastCreatorProp() throws Exception
    {
        Issue2088Bean bean = MAPPER.readValue(""{\""x\"":1,\""a\"":2,\""y\"":3,\""b\"":4}"", Issue2088Bean.class);
        assertEquals(1, bean.x);
        assertEquals(2, bean.w.a);
        assertEquals(3, bean.y);
        assertEquals(4, bean.w.b);
    }",junit.framework.AssertionFailedError: expected:<4> but was:<0>
JacksonDatabind_102,/222043010/omniapr/defects4j/JacksonDatabind_102_buggy/src/test/java/com/fasterxml/jackson/databind/ser/jdk/SqlDateSerializationTest.java,testSqlDateConfigOverride,"    public void testSqlDateConfigOverride() throws Exception
    {
        ObjectMapper mapper = newObjectMapper();
        mapper.configOverride(java.sql.Date.class)
            .setFormat(JsonFormat.Value.forPattern(""yyyy+MM+dd""));        
        assertEquals(""\""1980+04+14\"""",
            mapper.writeValueAsString(java.sql.Date.valueOf(""1980-04-14"")));
    }","junit.framework.ComparisonFailure: expected:<[""1980+04+14""]> but was:<[324547200000]>"
JacksonDatabind_103,/222043010/omniapr/defects4j/JacksonDatabind_103_buggy/src/test/java/com/fasterxml/jackson/databind/exc/BasicExceptionTest.java,testLocationAddition,"    public void testLocationAddition() throws Exception
    {
        try {
            /*Map<?,?> map =*/ MAPPER.readValue(""{\""value\"":\""foo\""}"",
                    new TypeReference<Map<ABC, Integer>>() { });
            fail(""Should not pass"");
        } catch (MismatchedInputException e) {
            String msg = e.getMessage();
            String[] str = msg.split("" at \\["");
            if (str.length != 2) {
                fail(""Should only get one 'at [' marker, got ""+(str.length-1)+"", source: ""+msg);
            }
        }
    }","junit.framework.AssertionFailedError: Should only get one 'at [' marker, got 2, source: Cannot deserialize Map key of type `com.fasterxml.jackson.databind.BaseMapTest$ABC` from String ""value"": not a valid representation, problem: (com.fasterxml.jackson.databind.exc.InvalidFormatException) Cannot deserialize Map key of type `com.fasterxml.jackson.databind.BaseMapTest$ABC` from String ""value"": not one of values excepted for Enum class: [A, B, C]"
JacksonDatabind_104,/222043010/omniapr/defects4j/JacksonDatabind_104_buggy/src/test/java/com/fasterxml/jackson/databind/ser/jdk/DateSerializationTest.java,testDateISO8601_10k,"    public void testDateISO8601_10k() throws IOException
    {
        ObjectWriter w = MAPPER.writer()
                .without(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        serialize(w, judate(10204, 1, 1,  00, 00, 00, 0, ""UTC""),   ""+10204-01-01T00:00:00.000+0000"");
        // and although specification lacks for beyond 5 digits (well, actually even 5...), let's do our best:
        serialize(w, judate(123456, 1, 1,  00, 00, 00, 0, ""UTC""),   ""+123456-01-01T00:00:00.000+0000"");
    }","org.junit.ComparisonFailure: expected:<""[+10]204-01-01T00:00:00.0...> but was:<""[:]204-01-01T00:00:00.0...>"
JacksonDatabind_104,/222043010/omniapr/defects4j/JacksonDatabind_104_buggy/src/test/java/com/fasterxml/jackson/databind/ser/jdk/DateSerializationTest.java,testDateISO8601_BCE,"    public void testDateISO8601_BCE() throws IOException
    {
        ObjectWriter w = MAPPER.writer()
                .without(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);

        // First: I _think_ BCE-1 is what you get with year 0, and should become ""+0000""
        // and from further back in time, it'll be ""-0001"" (BCE-2) etc)

        serialize(w, judate(0, 1, 1,  00, 00, 00, 0, ""UTC""),   ""+0000-01-01T00:00:00.000+0000"");
        serialize(w, judate(-1, 1, 1,  00, 00, 00, 0, ""UTC""),   ""-0001-01-01T00:00:00.000+0000"");
        serialize(w, judate(-49, 1, 1,  00, 00, 00, 0, ""UTC""),   ""-0049-01-01T00:00:00.000+0000""); // All hail Caesar
        serialize(w, judate(-264, 1, 1,  00, 00, 00, 0, ""UTC""),   ""-0264-01-01T00:00:00.000+0000""); // Carthage FTW?
    }","org.junit.ComparisonFailure: expected:<""[+10]204-01-01T00:00:00.0...> but was:<""[:]204-01-01T00:00:00.0...>"
JacksonDatabind_105,/222043010/omniapr/defects4j/JacksonDatabind_105_buggy/src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKScalarsTest.java,testVoidDeser,"    public void testVoidDeser() throws Exception
    {
        VoidBean bean = MAPPER.readValue(aposToQuotes(""{'value' : 123 }""),
                VoidBean.class);
        assertNull(bean.value);
    }",com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `java.lang.Void` (although at least one Creator exists): no int/Int-argument constructor/factory method to deserialize from Number value (123)
JacksonDatabind_106,/222043010/omniapr/defects4j/JacksonDatabind_106_buggy/src/test/java/com/fasterxml/jackson/databind/node/TestTreeTraversingParser.java,testNumberOverflowLong,"    public void testNumberOverflowLong() throws IOException
    {
        final BigInteger tooBig = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.ONE);
        try (final JsonParser p = MAPPER.readTree(""[ ""+tooBig+"" ]"").traverse()) {
            assertToken(JsonToken.START_ARRAY, p.nextToken());
            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
            assertEquals(NumberType.BIG_INTEGER, p.getNumberType());
            try {
                p.getLongValue();
                fail(""Expected failure for `long` overflow"");
            } catch (InputCoercionException e) {
                verifyException(e, ""Numeric value (""+tooBig+"") out of range of long"");
            }
        }
        try (final JsonParser p = MAPPER.readTree(""{ \""value\"" : ""+tooBig+"" }"").traverse()) {
            assertToken(JsonToken.START_OBJECT, p.nextToken());
            assertToken(JsonToken.FIELD_NAME, p.nextToken());
            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
            assertEquals(NumberType.BIG_INTEGER, p.getNumberType());
            try {
                p.getLongValue();
                fail(""Expected failure for `long` overflow"");
            } catch (InputCoercionException e) {
                verifyException(e, ""Numeric value (""+tooBig+"") out of range of long"");
            }
        }
        // But also from floating-point
        final String tooBig2 = ""1.0e30"";
        try (final JsonParser p = MAPPER.readTree(""[ ""+tooBig2+"" ]"").traverse()) {
            assertToken(JsonToken.START_ARRAY, p.nextToken());
            assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());
            assertEquals(NumberType.DOUBLE, p.getNumberType());
            try {
                p.getLongValue();
                fail(""Expected failure for `long` overflow"");
            } catch (InputCoercionException e) {
                verifyException(e, ""Numeric value (""+tooBig2+"") out of range of long"");
            }
        }
    }",junit.framework.AssertionFailedError: Expected failure for `long` overflow
JacksonDatabind_106,/222043010/omniapr/defects4j/JacksonDatabind_106_buggy/src/test/java/com/fasterxml/jackson/databind/node/TestTreeTraversingParser.java,testNumberOverflowInt,"    public void testNumberOverflowInt() throws IOException
    {
        final long tooBig = 1L + Integer.MAX_VALUE;
        try (final JsonParser p = MAPPER.readTree(""[ ""+tooBig+"" ]"").traverse()) {
            assertToken(JsonToken.START_ARRAY, p.nextToken());
            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
            assertEquals(NumberType.LONG, p.getNumberType());
            try {
                p.getIntValue();
                fail(""Expected failure for `int` overflow"");
            } catch (InputCoercionException e) {
                verifyException(e, ""Numeric value (""+tooBig+"") out of range of int"");
            }
        }
        try (final JsonParser p = MAPPER.readTree(""{ \""value\"" : ""+tooBig+"" }"").traverse()) {
            assertToken(JsonToken.START_OBJECT, p.nextToken());
            assertToken(JsonToken.FIELD_NAME, p.nextToken());
            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
            assertEquals(NumberType.LONG, p.getNumberType());
            try {
                p.getIntValue();
                fail(""Expected failure for `int` overflow"");
            } catch (InputCoercionException e) {
                verifyException(e, ""Numeric value (""+tooBig+"") out of range of int"");
            }
        }
        // But also from floating-point
        final String tooBig2 = ""1.0e10"";
        try (final JsonParser p = MAPPER.readTree(""[ ""+tooBig2+"" ]"").traverse()) {
            assertToken(JsonToken.START_ARRAY, p.nextToken());
            assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());
            assertEquals(NumberType.DOUBLE, p.getNumberType());
            try {
                p.getIntValue();
                fail(""Expected failure for `int` overflow"");
            } catch (InputCoercionException e) {
                verifyException(e, ""Numeric value (""+tooBig2+"") out of range of int"");
            }
        }
    }",junit.framework.AssertionFailedError: Expected failure for `long` overflow
JacksonDatabind_107,/222043010/omniapr/defects4j/JacksonDatabind_107_buggy/src/test/java/com/fasterxml/jackson/databind/deser/filter/ProblemHandlerUnknownTypeId2221Test.java,testWithDeserializationProblemHandler,"    public void testWithDeserializationProblemHandler() throws Exception {
        final ObjectMapper mapper = new ObjectMapper()
                .enableDefaultTyping();
        mapper.addHandler(new DeserializationProblemHandler() {
            @Override
            public JavaType handleUnknownTypeId(DeserializationContext ctxt, JavaType baseType, String subTypeId, TypeIdResolver idResolver, String failureMsg) throws IOException {
//                System.out.println(""Print out a warning here"");
                return ctxt.constructType(Void.class);
            }
        });
        GenericContent processableContent = mapper.readValue(JSON, GenericContent.class);
        assertNotNull(processableContent.getInnerObjects());
        assertEquals(2, processableContent.getInnerObjects().size());
    }","com.fasterxml.jackson.databind.JsonMappingException: (was java.lang.NullPointerException) (through reference chain: com.fasterxml.jackson.databind.deser.filter.ProblemHandlerUnknownTypeId2221Test$GenericContent[""innerObjects""]->java.util.ArrayList[1])"
JacksonDatabind_108,/222043010/omniapr/defects4j/JacksonDatabind_108_buggy/src/test/java/com/fasterxml/jackson/databind/node/EmptyContentAsTreeTest.java,testNullFromEOFWithParserAndReader,"    public void testNullFromEOFWithParserAndReader() throws Exception
    {
        try (JsonParser p = MAPPER.getFactory().createParser(EMPTY0)) {
            _assertNullTree(MAPPER.reader().readTree(p));
        }
        try (JsonParser p = MAPPER.getFactory().createParser(EMPTY1)) {
            _assertNullTree(MAPPER.reader().readTree(p));
        }
        try (JsonParser p = MAPPER.getFactory().createParser(new StringReader(EMPTY0))) {
            _assertNullTree(MAPPER.reader().readTree(p));
        }
        try (JsonParser p = MAPPER.getFactory().createParser(new StringReader(EMPTY1))) {
            _assertNullTree(MAPPER.reader().readTree(p));
        }

        try (JsonParser p = MAPPER.getFactory().createParser(EMPTY0_BYTES)) {
            _assertNullTree(MAPPER.reader().readTree(p));
        }
        try (JsonParser p = MAPPER.getFactory().createParser(EMPTY1_BYTES)) {
            _assertNullTree(MAPPER.reader().readTree(p));
        }
        try (JsonParser p = MAPPER.getFactory().createParser(EMPTY1_BYTES, 0, EMPTY1_BYTES.length)) {
            _assertNullTree(MAPPER.reader().readTree(p));
        }

        try (JsonParser p = MAPPER.getFactory().createParser(new ByteArrayInputStream(EMPTY0_BYTES))) {
            _assertNullTree(MAPPER.reader().readTree(p));
        }
        try (JsonParser p = MAPPER.getFactory().createParser(new ByteArrayInputStream(EMPTY1_BYTES))) {
            _assertNullTree(MAPPER.reader().readTree(p));
        }
    }","junit.framework.AssertionFailedError: Should get `null` for reads with `JsonParser`, instead got: com.fasterxml.jackson.databind.node.MissingNode"
JacksonDatabind_109,/222043010/omniapr/defects4j/JacksonDatabind_109_buggy/src/test/java/com/fasterxml/jackson/databind/ser/jdk/BigDecimalPlain2230Test.java,testBigIntegerAsPlainTest,"    public void testBigIntegerAsPlainTest() throws Exception
    {
        final String NORM_VALUE = ""0.0000000005"";
        final BigDecimal BD_VALUE = new BigDecimal(NORM_VALUE);
        final BigDecimalAsString INPUT = new BigDecimalAsString(BD_VALUE);
        // by default, use the default `toString()`
        assertEquals(""{\""value\"":\""""+BD_VALUE.toString()+""\""}"", MAPPER.writeValueAsString(INPUT));

        // but can force to ""plain"" notation
        final ObjectMapper m = jsonMapperBuilder()
            .enable(StreamWriteFeature.WRITE_BIGDECIMAL_AS_PLAIN)
            .build();
        assertEquals(""{\""value\"":\""""+NORM_VALUE+""\""}"", m.writeValueAsString(INPUT));
    }","junit.framework.ComparisonFailure: expected:<{""value"":""[0.0000000005]""}> but was:<{""value"":""[5E-10]""}>"
JacksonDatabind_110,/222043010/omniapr/defects4j/JacksonDatabind_110_buggy/src/test/java/com/fasterxml/jackson/databind/deser/jdk/UtilCollectionsTypesTest.java,testUnmodifiableListFromLinkedList,"   public void testUnmodifiableListFromLinkedList() throws Exception {
       final List<String> input = new LinkedList<>();
       input.add(""first"");
       input.add(""second"");

       // Can't use simple ""_verifyCollection"" as type may change; instead use
       // bit more flexible check:
       Collection<?> act = _writeReadCollection(Collections.unmodifiableList(input));
       assertEquals(input, act);

       // and this check may be bit fragile (may need to revisit), but is good enough for now:
       assertEquals(Collections.unmodifiableList(new ArrayList<>(input)).getClass(), act.getClass());
   }","com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `java.util.Collections$UnmodifiableList` (no Creators, like default construct, exist): no default no-arguments constructor found"
JacksonDatabind_111,/222043010/omniapr/defects4j/JacksonDatabind_111_buggy/src/test/java/com/fasterxml/jackson/databind/deser/jdk/JDKAtomicTypesDeserTest.java,testNullWithinNested,"    public void testNullWithinNested() throws Exception
    {
        final ObjectReader r = MAPPER.readerFor(MyBean2303.class);
        MyBean2303 intRef = r.readValue("" {\""refRef\"": 2 } "");
        assertNotNull(intRef.refRef);
        assertNotNull(intRef.refRef.get());
        assertEquals(intRef.refRef.get().get(), new Integer(2));

        MyBean2303 nullRef = r.readValue("" {\""refRef\"": null } "");
        assertNotNull(nullRef.refRef);
        assertNotNull(nullRef.refRef.get());
        assertNull(nullRef.refRef.get().get());
    }",junit.framework.AssertionFailedError
JacksonDatabind_112,/222043010/omniapr/defects4j/JacksonDatabind_112_buggy/src/test/java/com/fasterxml/jackson/databind/deser/creators/DelegatingArrayCreator2324Test.java,testDeserializeBagOfStrings,"    public void testDeserializeBagOfStrings() throws Exception {
        WithBagOfStrings result = MAPPER.readerFor(WithBagOfStrings.class)
                .readValue(""{\""strings\"": [ \""a\"", \""b\"", \""c\""]}"");
        assertEquals(3, result.getStrings().size());
    }",com.fasterxml.jackson.databind.exc.MismatchedInputException: Cannot construct instance of `com.fasterxml.jackson.databind.deser.creators.DelegatingArrayCreator2324Test$ImmutableBag` (although at least one Creator exists): no default no-arguments constructor found
JacksonCore_2,/222043010/omniapr/defects4j/JacksonCore_2_buggy/src/test/java/com/fasterxml/jackson/core/json/TestParserErrorHandling.java,testMangledNumbersBytes,"    public void testMangledNumbersBytes() throws Exception {
        _testMangledNumbers(true);
    }",junit.framework.AssertionFailedError: Should have gotten an exception; instead got token: VALUE_NUMBER_INT
JacksonCore_2,/222043010/omniapr/defects4j/JacksonCore_2_buggy/src/test/java/com/fasterxml/jackson/core/json/TestParserErrorHandling.java,testMangledNumbersChars,"    public void testMangledNumbersChars() throws Exception {
        _testMangledNumbers(false);
    }",junit.framework.AssertionFailedError: Should have gotten an exception; instead got token: VALUE_NUMBER_INT
JacksonCore_3,/222043010/omniapr/defects4j/JacksonCore_3_buggy/src/test/java/com/fasterxml/jackson/core/json/TestLocation.java,testOffsetWithInputOffset,"    public void testOffsetWithInputOffset() throws Exception
    {
        final JsonFactory f = new JsonFactory();
        JsonLocation loc;
        JsonParser p;
        // 3 spaces before, 2 after, just for padding
        byte[] b = ""   { }  "".getBytes(""UTF-8"");

        // and then peel them off
        p = f.createParser(b, 3, b.length-5);
        assertToken(JsonToken.START_OBJECT, p.nextToken());

        loc = p.getTokenLocation();
        assertEquals(0L, loc.getByteOffset());
        assertEquals(-1L, loc.getCharOffset());
        assertEquals(1, loc.getLineNr());
        assertEquals(1, loc.getColumnNr());
        
        loc = p.getCurrentLocation();
        assertEquals(1L, loc.getByteOffset());
        assertEquals(-1L, loc.getCharOffset());
        assertEquals(1, loc.getLineNr());
        assertEquals(2, loc.getColumnNr());

        p.close();
    }",junit.framework.AssertionFailedError: expected:<0> but was:<3>
JacksonCore_4,/222043010/omniapr/defects4j/JacksonCore_4_buggy/src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,testExpand,"      public void testExpand()
      {
          TextBuffer tb = new TextBuffer(new BufferRecycler());
          char[] buf = tb.getCurrentSegment();

          while (buf.length < 500 * 1000) {
              char[] old = buf;
              buf = tb.expandCurrentSegment();
              if (old.length >= buf.length) {
                  fail(""Expected buffer of ""+old.length+"" to expand, did not, length now ""+buf.length);
              }
          }
      }","junit.framework.AssertionFailedError: Expected buffer of 262145 to expand, did not, length now 262144"
JacksonCore_5,/222043010/omniapr/defects4j/JacksonCore_5_buggy/src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java,testWonkyNumber173,"    public void testWonkyNumber173() throws Exception
    {
        JsonPointer ptr = JsonPointer.compile(""/1e0"");
        assertFalse(ptr.matches());
    }","java.lang.NumberFormatException: For input string: ""1e0"""
JacksonCore_6,/222043010/omniapr/defects4j/JacksonCore_6_buggy/src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java,testIZeroIndex,"    public void testIZeroIndex() throws Exception
    {
        JsonPointer ptr = JsonPointer.compile(""/0"");
        assertEquals(0, ptr.getMatchingIndex());
        ptr = JsonPointer.compile(""/00"");
        assertEquals(-1, ptr.getMatchingIndex());
    }",junit.framework.AssertionFailedError: expected:<-1> but was:<0>
JacksonCore_7,/222043010/omniapr/defects4j/JacksonCore_7_buggy/src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,testFailOnWritingStringNotFieldNameBytes,"    public void testFailOnWritingStringNotFieldNameBytes() throws Exception {
        _testFailOnWritingStringNotFieldName(F, false);
    }","junit.framework.AssertionFailedError: Should not have let com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString() be used in place of 'writeFieldName()': output = {:""a"""
JacksonCore_7,/222043010/omniapr/defects4j/JacksonCore_7_buggy/src/test/java/com/fasterxml/jackson/core/json/GeneratorFailTest.java,testFailOnWritingStringNotFieldNameChars,"    public void testFailOnWritingStringNotFieldNameChars() throws Exception {
        _testFailOnWritingStringNotFieldName(F, true);        
    }","junit.framework.AssertionFailedError: Should not have let com.fasterxml.jackson.core.json.UTF8JsonGenerator.writeString() be used in place of 'writeFieldName()': output = {:""a"""
JacksonCore_8,/222043010/omniapr/defects4j/JacksonCore_8_buggy/src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java,testEmpty,"    public void testEmpty() {
        TextBuffer tb = new TextBuffer(new BufferRecycler());
        tb.resetWithEmpty();

        assertTrue(tb.getTextBuffer().length == 0);
        tb.contentsAsString();
        assertTrue(tb.getTextBuffer().length == 0);
    }",java.lang.NullPointerException
JacksonCore_9,/222043010/omniapr/defects4j/JacksonCore_9_buggy/src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,testGetValueAsTextBytes,"    public void testGetValueAsTextBytes() throws Exception
    {
        JsonFactory f = new JsonFactory();
        _testGetValueAsText(f, true, false);
        _testGetValueAsText(f, true, true);
    }",junit.framework.ComparisonFailure: expected:<a> but was:<null>
JacksonCore_9,/222043010/omniapr/defects4j/JacksonCore_9_buggy/src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java,testGetValueAsTextChars,"    public void testGetValueAsTextChars() throws Exception
    {
        JsonFactory f = new JsonFactory();
        _testGetValueAsText(f, false, false);
        _testGetValueAsText(f, false, true);
    }",junit.framework.ComparisonFailure: expected:<a> but was:<null>
JacksonCore_10,/222043010/omniapr/defects4j/JacksonCore_10_buggy/src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java,testIssue207,"    public void testIssue207() throws Exception
    {
        ByteQuadsCanonicalizer nc = ByteQuadsCanonicalizer.createRoot(-523743345);
        Field byteSymbolCanonicalizerField = JsonFactory.class.getDeclaredField(""_byteSymbolCanonicalizer"");
        byteSymbolCanonicalizerField.setAccessible(true);
        JsonFactory jsonF = new JsonFactory();
        byteSymbolCanonicalizerField.set(jsonF, nc);

        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(""{\n"");
        stringBuilder.append(""    \""expectedGCperPosition\"": null"");
        for (int i = 0; i < 60; ++i) {
            stringBuilder.append("",\n    \"""").append(i + 1).append(""\"": null"");
        }
        stringBuilder.append(""\n}"");

        JsonParser p = jsonF.createParser(stringBuilder.toString().getBytes(""UTF-8""));
        while (p.nextToken() != null) { }
        p.close();
    }",java.lang.ArrayIndexOutOfBoundsException: 256
JacksonCore_10,/222043010/omniapr/defects4j/JacksonCore_10_buggy/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,testCollisionsWithBytesNew187b,"    public void testCollisionsWithBytesNew187b() throws IOException
    {
        ByteQuadsCanonicalizer symbols =
                ByteQuadsCanonicalizer.createRoot(1).makeChild(JsonFactory.Feature.collectDefaults());

        final int COUNT = 10000;
        for (int i = 0; i < COUNT; ++i) {
            String id = String.valueOf(i);
            int[] quads = calcQuads(id.getBytes(""UTF-8""));
            symbols.addName(id, quads, quads.length);
        }
        assertEquals(COUNT, symbols.size());
        
        assertEquals(16384, symbols.bucketCount());

        // fragile, but essential to verify low collision counts;
        // here bit low primary, 55% 
        assertEquals(5402, symbols.primaryCount());
        // secondary higher than usual, above 25%
        assertEquals(2744, symbols.secondaryCount());
        // and most of remaining in tertiary
        assertEquals(1834, symbols.tertiaryCount());
        // with a bit of spillover
        assertEquals(20, symbols.spilloverCount());
    }",junit.framework.AssertionFailedError: expected:<16384> but was:<32768>
JacksonCore_10,/222043010/omniapr/defects4j/JacksonCore_10_buggy/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,testSyntheticWithBytesNew,"    public void testSyntheticWithBytesNew() throws IOException
    {
        // pass seed, to keep results consistent:
        final int SEED = 33333;
        ByteQuadsCanonicalizer symbols =
                ByteQuadsCanonicalizer.createRoot(SEED).makeChild(JsonFactory.Feature.collectDefaults());

        final int COUNT = 12000;
        for (int i = 0; i < COUNT; ++i) {
            String id = fieldNameFor(i);
            int[] quads = calcQuads(id.getBytes(""UTF-8""));
            symbols.addName(id, quads, quads.length);
        }
        assertEquals(COUNT, symbols.size());
        assertEquals(16384, symbols.bucketCount());
        
        // fragile, but essential to verify low collision counts;
        // anywhere between 70-80% primary matches
        assertEquals(8534, symbols.primaryCount());
        // secondary between 10-20%
        assertEquals(2534, symbols.secondaryCount());
        // and most of remaining in tertiary
        assertEquals(932, symbols.tertiaryCount());
        // so that spill-over is empty or close to
        assertEquals(0, symbols.spilloverCount());
    }",junit.framework.AssertionFailedError: expected:<16384> but was:<32768>
JacksonCore_10,/222043010/omniapr/defects4j/JacksonCore_10_buggy/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java,testShortNameCollisionsDirectNew,"    public void testShortNameCollisionsDirectNew() throws IOException
    {
        final int COUNT = 700;
        {
            ByteQuadsCanonicalizer symbols =
                    ByteQuadsCanonicalizer.createRoot(333).makeChild(JsonFactory.Feature.collectDefaults());
            for (int i = 0; i < COUNT; ++i) {
                String id = String.valueOf((char) i);
                int[] quads = calcQuads(id.getBytes(""UTF-8""));
                symbols.addName(id, quads, quads.length);
            }
            assertEquals(COUNT, symbols.size());

            assertEquals(1024, symbols.bucketCount());

            // Primary is good, but secondary spills cluster in nasty way...
            assertEquals(564, symbols.primaryCount());
            assertEquals(122, symbols.secondaryCount());
            assertEquals(14, symbols.tertiaryCount());
            assertEquals(0, symbols.spilloverCount());

            assertEquals(COUNT,
                    symbols.primaryCount() + symbols.secondaryCount() + symbols.tertiaryCount() + symbols.spilloverCount());
        }
    }",junit.framework.AssertionFailedError: expected:<16384> but was:<32768>
JacksonCore_11,/222043010/omniapr/defects4j/JacksonCore_11_buggy/src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java,testSymbolTableExpansionBytes,"    public void testSymbolTableExpansionBytes() throws Exception {
        _testSymbolTableExpansion(true);
    }",java.lang.ArrayIndexOutOfBoundsException: 512
JacksonCore_12,/222043010/omniapr/defects4j/JacksonCore_12_buggy/src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java,testOffsetWithObjectFieldsUsingReader,"    public void testOffsetWithObjectFieldsUsingReader() throws Exception
    {
        final JsonFactory f = new JsonFactory();
        char[] c = ""{\""f1\"":\""v1\"",\""f2\"":{\""f3\"":\""v3\""},\""f4\"":[true,false],\""f5\"":5}"".toCharArray();
        //            1      6      11    16 17    22      28    33 34 39      46    51
        JsonParser p = f.createParser(c);

        assertEquals(JsonToken.START_OBJECT, p.nextToken());

        assertEquals(JsonToken.FIELD_NAME, p.nextToken());
        assertEquals(1L, p.getTokenLocation().getCharOffset());
        assertEquals(JsonToken.VALUE_STRING, p.nextToken());
        assertEquals(6L, p.getTokenLocation().getCharOffset());

        assertEquals(""f2"", p.nextFieldName());
        assertEquals(11L, p.getTokenLocation().getCharOffset());
        assertEquals(JsonToken.START_OBJECT, p.nextValue());
        assertEquals(16L, p.getTokenLocation().getCharOffset());

        assertEquals(""f3"", p.nextFieldName());
        assertEquals(17L, p.getTokenLocation().getCharOffset());
        assertEquals(JsonToken.VALUE_STRING, p.nextValue());
        assertEquals(22L, p.getTokenLocation().getCharOffset());
        assertEquals(JsonToken.END_OBJECT, p.nextToken());

        assertEquals(""f4"", p.nextFieldName());
        assertEquals(28L, p.getTokenLocation().getCharOffset());
        assertEquals(JsonToken.START_ARRAY, p.nextValue());
        assertEquals(33L, p.getTokenLocation().getCharOffset());

        assertEquals(JsonToken.VALUE_TRUE, p.nextValue());
        assertEquals(34L, p.getTokenLocation().getCharOffset());

        assertEquals(JsonToken.VALUE_FALSE, p.nextValue());
        assertEquals(39L, p.getTokenLocation().getCharOffset());
        assertEquals(JsonToken.END_ARRAY, p.nextToken());

        assertEquals(""f5"", p.nextFieldName());
        assertEquals(46L, p.getTokenLocation().getCharOffset());
        assertEquals(JsonToken.VALUE_NUMBER_INT, p.nextToken());
        assertEquals(51L, p.getTokenLocation().getCharOffset());
        assertEquals(JsonToken.END_OBJECT, p.nextToken());

        p.close();
    }",junit.framework.AssertionFailedError: expected:<6> but was:<1>
JacksonCore_13,/222043010/omniapr/defects4j/JacksonCore_13_buggy/src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,testFieldNameQuotingEnabled,"    public void testFieldNameQuotingEnabled() throws IOException
    {
        // // First, test with default factory, with quoting enabled by default
        
        // First, default, with quotes
        _testFieldNameQuotingEnabled(JSON_F, true, true, ""{\""foo\"":1}"");
        _testFieldNameQuotingEnabled(JSON_F, false, true, ""{\""foo\"":1}"");

        // then without quotes
        _testFieldNameQuotingEnabled(JSON_F, true, false, ""{foo:1}"");
        _testFieldNameQuotingEnabled(JSON_F, false, false, ""{foo:1}"");

        // // Then with alternatively configured factory

        JsonFactory JF2 = new JsonFactory();
        JF2.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);

        _testFieldNameQuotingEnabled(JF2, true, true, ""{\""foo\"":1}"");
        _testFieldNameQuotingEnabled(JF2, false, true, ""{\""foo\"":1}"");

        // then without quotes
        _testFieldNameQuotingEnabled(JF2, true, false, ""{foo:1}"");
        _testFieldNameQuotingEnabled(JF2, false, false, ""{foo:1}"");
    }","junit.framework.ComparisonFailure: expected:<{[foo]:1}> but was:<{[""foo""]:1}>"
JacksonCore_14,/222043010/omniapr/defects4j/JacksonCore_14_buggy/src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java,testAllocations,"    public void testAllocations() throws Exception
    {
        IOContext ctxt = new IOContext(new BufferRecycler(), ""N/A"", true);

        /* I/O Read buffer */

        // First succeeds:
        assertNotNull(ctxt.allocReadIOBuffer());
        // second fails
        try {
            ctxt.allocReadIOBuffer();
        } catch (IllegalStateException e) {
            verifyException(e, ""second time"");
        }
        // Also: can't succeed with different buffer
        try {
            ctxt.releaseReadIOBuffer(new byte[1]);
        } catch (IllegalArgumentException e) {
            verifyException(e, ""smaller than original"");
        }
        // but call with null is a NOP for convenience
        ctxt.releaseReadIOBuffer(null);

        /* I/O Write buffer */

        assertNotNull(ctxt.allocWriteEncodingBuffer());
        try {
            ctxt.allocWriteEncodingBuffer();
        } catch (IllegalStateException e) {
            verifyException(e, ""second time"");
        }
        try {
            ctxt.releaseWriteEncodingBuffer(new byte[1]);
        } catch (IllegalArgumentException e) {
            verifyException(e, ""smaller than original"");
        }
        ctxt.releaseWriteEncodingBuffer(null);

        /* Token (read) buffer */

        assertNotNull(ctxt.allocTokenBuffer());
        try {
            ctxt.allocTokenBuffer();
        } catch (IllegalStateException e) {
            verifyException(e, ""second time"");
        }
        try {
            ctxt.releaseTokenBuffer(new char[1]);
        } catch (IllegalArgumentException e) {
            verifyException(e, ""smaller than original"");
        }
        ctxt.releaseTokenBuffer(null);

        /* Concat (write?) buffer */

        assertNotNull(ctxt.allocConcatBuffer());
        try {
            ctxt.allocConcatBuffer();
        } catch (IllegalStateException e) {
            verifyException(e, ""second time"");
        }
        try {
            ctxt.releaseConcatBuffer(new char[1]);
        } catch (IllegalArgumentException e) {
            verifyException(e, ""smaller than original"");
        }
        ctxt.releaseConcatBuffer(null);

        /* NameCopy (write?) buffer */

        assertNotNull(ctxt.allocNameCopyBuffer(100));
        try {
            ctxt.allocNameCopyBuffer(100);
        } catch (IllegalStateException e) {
            verifyException(e, ""second time"");
        }
        try {
            ctxt.releaseNameCopyBuffer(new char[1]);
        } catch (IllegalArgumentException e) {
            verifyException(e, ""smaller than original"");
        }
        ctxt.releaseNameCopyBuffer(null);
    }","junit.framework.AssertionFailedError: Expected an exception with one of substrings ([smaller than original]): got one with message ""Trying to release buffer not owned by the context"""
JacksonCore_15,/222043010/omniapr/defects4j/JacksonCore_15_buggy/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,testNotAllowMultipleMatches,"    public void testNotAllowMultipleMatches() throws Exception
    {
    	String jsonString = aposToQuotes(""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'value':4,'b':true}"");
        JsonParser p0 = JSON_F.createParser(jsonString);
        JsonParser p = new FilteringParserDelegate(p0,
               new NameMatchFilter(""value""),
                   false, // includePath
                   false // multipleMatches -false
                );
        String result = readAndWrite(JSON_F, p);
        assertEquals(aposToQuotes(""3""), result);
    }",junit.framework.ComparisonFailure: expected:<3[]> but was:<3[ 4]>
JacksonCore_16,/222043010/omniapr/defects4j/JacksonCore_16_buggy/src/test/java/com/fasterxml/jackson/core/json/ParserSequenceTest.java,testInitialized,"    public void testInitialized() throws Exception
    {
        JsonParser p1 = JSON_FACTORY.createParser(""1 2"");
        JsonParser p2 = JSON_FACTORY.createParser(""3 false"");
        // consume '1', move to '2'
        assertToken(JsonToken.VALUE_NUMBER_INT, p1.nextToken());
        assertToken(JsonToken.VALUE_NUMBER_INT, p1.nextToken());

        JsonParserSequence seq = JsonParserSequence.createFlattened(p1, p2);
        assertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());
        assertEquals(2, seq.getIntValue());
        assertToken(JsonToken.VALUE_NUMBER_INT, seq.nextToken());
        assertEquals(3, seq.getIntValue());
        seq.close();
    }",junit.framework.AssertionFailedError: expected:<2> but was:<3>
JacksonCore_17,/222043010/omniapr/defects4j/JacksonCore_17_buggy/src/test/java/com/fasterxml/jackson/core/json/RawValueWithSurrogatesTest.java,testRawWithSurrogatesString,"    public void testRawWithSurrogatesString() throws Exception {
        _testRawWithSurrogatesString(false);
    }",com.fasterxml.jackson.core.JsonGenerationException: Split surrogate on writeRaw() input (last character)
JacksonCore_18,/222043010/omniapr/defects4j/JacksonCore_18_buggy/src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java,testTooBigBigDecimal,"    public void testTooBigBigDecimal() throws Exception
    {
        JsonFactory f = new JsonFactory();
        f.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);

        // 24-Aug-2016, tatu: Initial check limits scale to [-9999,+9999]
        BigDecimal BIG = new BigDecimal(""1E+9999"");
        BigDecimal TOO_BIG = new BigDecimal(""1E+10000"");
        BigDecimal SMALL = new BigDecimal(""1E-9999"");
        BigDecimal TOO_SMALL = new BigDecimal(""1E-10000"");

        for (boolean useBytes : new boolean[] { false, true } ) {
            for (boolean asString : new boolean[] { false, true } ) {
                JsonGenerator g;
                
                if (useBytes) {
                    g = f.createGenerator(new ByteArrayOutputStream());
                } else {
                    g = f.createGenerator(new StringWriter());
                }
                if (asString) {
                    g.enable(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS);
                }

                // first, ok cases:
                g.writeStartArray();
                g.writeNumber(BIG);
                g.writeNumber(SMALL);
                g.writeEndArray();
                g.close();

                // then invalid
                for (BigDecimal input : new BigDecimal[] { TOO_BIG, TOO_SMALL }) {
                    if (useBytes) {
                        g = f.createGenerator(new ByteArrayOutputStream());
                    } else {
                        g = f.createGenerator(new StringWriter());
                    }
                    if (asString) {
                        g.enable(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS);
                    }
                    try {
                        g.writeNumber(input);
                        fail(""Should not have written without exception: ""+input);
                    } catch (JsonGenerationException e) {
                        verifyException(e, ""Attempt to write plain `java.math.BigDecimal`"");
                        verifyException(e, ""illegal scale"");
                    }
                    g.close();
                }
            }
        }
    }",junit.framework.AssertionFailedError: Should not have written without exception: 1E+10000
JacksonCore_19,/222043010/omniapr/defects4j/JacksonCore_19_buggy/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java,testLongerFloatingPoint,"    public void testLongerFloatingPoint() throws Exception
    {
        StringBuilder input = new StringBuilder();
        for (int i = 1; i < 201; i++) {
            input.append(1);
        }
        input.append("".0"");
        final String DOC = input.toString();

        // test out with both Reader and ByteArrayInputStream
        JsonParser p;

        p = FACTORY.createParser(new StringReader(DOC));
        _testLongerFloat(p, DOC);
        p.close();
        
        p = FACTORY.createParser(new ByteArrayInputStream(DOC.getBytes(""UTF-8"")));
        _testLongerFloat(p, DOC);
        p.close();
    }",java.lang.ArrayIndexOutOfBoundsException: 200
JacksonCore_20,/222043010/omniapr/defects4j/JacksonCore_20_buggy/src/test/java/com/fasterxml/jackson/core/base64/Base64GenerationTest.java,testBinaryAsEmbeddedObject,"    public void testBinaryAsEmbeddedObject() throws Exception
    {
        JsonGenerator g;

        StringWriter sw = new StringWriter();
        g = JSON_F.createGenerator(sw);
        g.writeEmbeddedObject(WIKIPEDIA_BASE64_AS_BYTES);
        g.close();
        assertEquals(quote(WIKIPEDIA_BASE64_ENCODED), sw.toString());

        ByteArrayOutputStream bytes =  new ByteArrayOutputStream(100);
        g = JSON_F.createGenerator(bytes);
        g.writeEmbeddedObject(WIKIPEDIA_BASE64_AS_BYTES);
        g.close();
        assertEquals(quote(WIKIPEDIA_BASE64_ENCODED), bytes.toString(""UTF-8""));
    }",com.fasterxml.jackson.core.JsonGenerationException: No native support for writing embedded objects
JacksonCore_20,/222043010/omniapr/defects4j/JacksonCore_20_buggy/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java,testAsEmbedded,"    public void testAsEmbedded() throws Exception
    {
        JsonGenerator g;

        StringWriter sw = new StringWriter();
        g = JSON_F.createGenerator(sw);
        g.writeEmbeddedObject(null);
        g.close();
        assertEquals(""null"", sw.toString());

        ByteArrayOutputStream bytes =  new ByteArrayOutputStream(100);
        g = JSON_F.createGenerator(bytes);
        g.writeEmbeddedObject(null);
        g.close();
        assertEquals(""null"", bytes.toString(""UTF-8""));

        // also, for fun, try illegal unknown thingy

        try {
            g = JSON_F.createGenerator(bytes);
            // try writing a Class object
            g.writeEmbeddedObject(getClass());
            fail(""Expected an exception"");
            g.close(); // never gets here
        } catch (JsonGenerationException e) {
            verifyException(e, ""No native support for"");
        }
    }",com.fasterxml.jackson.core.JsonGenerationException: No native support for writing embedded objects
JacksonCore_21,/222043010/omniapr/defects4j/JacksonCore_21_buggy/src/test/java/com/fasterxml/jackson/core/filter/TokenVerifyingParserFiltering330Test.java,testTokensSingleMatchWithPath,"    public void testTokensSingleMatchWithPath() throws Exception
    {
        JsonParser p0 = JSON_F.createParser(SIMPLE);
        JsonParser p = new FilteringParserDelegate(p0,
               new NameMatchFilter(""value""),
                   true, // includePath
                   false // multipleMatches
                );

        assertFalse(p.hasCurrentToken());
        assertNull(p.getCurrentToken());
        assertEquals(JsonTokenId.ID_NO_TOKEN, p.getCurrentTokenId());
        assertFalse(p.isExpectedStartObjectToken());
        assertFalse(p.isExpectedStartArrayToken());
        
// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}
//      String result = readAndWrite(JSON_F, p);
//      assertEquals(aposToQuotes(""{'ob':{'value':3}}""), result);

        assertToken(JsonToken.START_OBJECT, p.nextToken());
        assertEquals(JsonToken.START_OBJECT, p.getCurrentToken());
        assertTrue(p.isExpectedStartObjectToken());
        assertFalse(p.isExpectedStartArrayToken());

        assertToken(JsonToken.FIELD_NAME, p.nextToken());
        assertEquals(JsonToken.FIELD_NAME, p.getCurrentToken());
        assertEquals(""ob"", p.getCurrentName());
//        assertEquals(""ob"", p.getText());

        assertToken(JsonToken.START_OBJECT, p.nextToken());
        assertEquals(""ob"", p.getCurrentName());

        assertToken(JsonToken.FIELD_NAME, p.nextToken());
        assertEquals(""value"", p.getCurrentName());
        assertEquals(""value"", p.getText());

        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
        assertEquals(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());
        assertEquals(NumberType.INT, p.getNumberType());
        assertEquals(3, p.getIntValue());
        assertEquals(""value"", p.getCurrentName());

        assertToken(JsonToken.END_OBJECT, p.nextToken());
        assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());

        assertToken(JsonToken.END_OBJECT, p.nextToken());
        assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());

        p.clearCurrentToken();
        assertNull(p.getCurrentToken());
        
        p.close();
    }","junit.framework.AssertionFailedError: Expected token END_OBJECT, current token null"
JacksonCore_21,/222043010/omniapr/defects4j/JacksonCore_21_buggy/src/test/java/com/fasterxml/jackson/core/filter/TokenVerifyingParserFiltering330Test.java,testBasicSingleMatchFilteringWithPath,"    public void testBasicSingleMatchFilteringWithPath() throws Exception
    {
        JsonParser p0 = JSON_F.createParser(SIMPLE);
        JsonParser p = new FilteringParserDelegate(p0,
               new NameMatchFilter(""value""),
                   true, // includePath
                   false // multipleMatches
                );

// {'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}
        String result = readAndWrite(JSON_F, p);
        assertEquals(aposToQuotes(""{'ob':{'value':3}}""), result);
    }","junit.framework.AssertionFailedError: Expected token END_OBJECT, current token null"
JacksonCore_21,/222043010/omniapr/defects4j/JacksonCore_21_buggy/src/test/java/com/fasterxml/jackson/core/filter/TokenVerifyingParserFiltering330Test.java,testSkippingForSingleWithPath,"    public void testSkippingForSingleWithPath() throws Exception
    {
        JsonParser p0 = JSON_F.createParser(SIMPLE);
        JsonParser p = new FilteringParserDelegate(p0,
               new NameMatchFilter(""value""),
                   true, // includePath
                   false // multipleMatches
                );

//        assertEquals(aposToQuotes(""{'ob':{'value':3}}""), result);

        assertToken(JsonToken.START_OBJECT, p.nextToken());
        p.skipChildren();
        assertEquals(JsonToken.END_OBJECT, p.getCurrentToken());
        assertNull(p.nextToken());
    }","junit.framework.AssertionFailedError: Expected token END_OBJECT, current token null"
JacksonCore_22,/222043010/omniapr/defects4j/JacksonCore_22_buggy/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,testSingleMatchFilteringWithPath,"    public void testSingleMatchFilteringWithPath() throws Exception
    {
        String jsonString = aposToQuotes(""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}"");
        JsonParser p0 = JSON_F.createParser(jsonString);
        FilteringParserDelegate p = new FilteringParserDelegate(p0,
                new NameMatchFilter(""a""),
                true, // includePath
                false // multipleMatches
        );
        String result = readAndWrite(JSON_F, p);
        assertEquals(aposToQuotes(""{'a':123}""), result);
        assertEquals(1, p.getMatchCount());
    }",junit.framework.AssertionFailedError: expected:<1> but was:<0>
JacksonCore_22,/222043010/omniapr/defects4j/JacksonCore_22_buggy/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,testAllowMultipleMatchesWithPath1,"    public void testAllowMultipleMatchesWithPath1() throws Exception
    {
        String jsonString = aposToQuotes(""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'value':\""val\"",'b':true}"");
        JsonParser p0 = JSON_F.createParser(jsonString);
        FilteringParserDelegate p = new FilteringParserDelegate(p0,
                new NameMatchFilter(""value""),
                true, // includePath
                true // multipleMatches - true
        );
        String result = readAndWrite(JSON_F, p);
        assertEquals(aposToQuotes(""{\""ob\"":{\""value\"":3,\""value\"":{\""value0\"":2}},\""value\"":\""val\""}""), result);
        assertEquals(3, p.getMatchCount());
    }",junit.framework.AssertionFailedError: expected:<1> but was:<0>
JacksonCore_22,/222043010/omniapr/defects4j/JacksonCore_22_buggy/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,testAllowMultipleMatchesWithPath2,"    public void testAllowMultipleMatchesWithPath2() throws Exception
    {
        String jsonString = aposToQuotes(""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'array':[3,4],'value':{'value0':2}},'value':\""val\"",'b':true}"");
        JsonParser p0 = JSON_F.createParser(jsonString);
        FilteringParserDelegate p = new FilteringParserDelegate(p0,
                new IndexMatchFilter(1),
                true, // includePath
                true // multipleMatches - true
        );
        String result = readAndWrite(JSON_F, p);
        assertEquals(aposToQuotes(""{\""array\"":[2],\""ob\"":{\""array\"":[4]}}""), result);
        assertEquals(2, p.getMatchCount());
    }",junit.framework.AssertionFailedError: expected:<1> but was:<0>
JacksonCore_22,/222043010/omniapr/defects4j/JacksonCore_22_buggy/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,testMultipleMatchFilteringWithPath1,"    public void testMultipleMatchFilteringWithPath1() throws Exception
    {
        JsonParser p0 = JSON_F.createParser(SIMPLE);
        FilteringParserDelegate p = new FilteringParserDelegate(p0,
                new NameMatchFilter(""value0"", ""value2""),
                true, /* includePath */ true /* multipleMatches */ );
        String result = readAndWrite(JSON_F, p);
        assertEquals(aposToQuotes(""{'ob':{'value0':2,'value2':4}}""), result);
        assertEquals(2, p.getMatchCount());

    }",junit.framework.AssertionFailedError: expected:<1> but was:<0>
JacksonCore_22,/222043010/omniapr/defects4j/JacksonCore_22_buggy/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,testMultipleMatchFilteringWithPath2,"    public void testMultipleMatchFilteringWithPath2() throws Exception
    {
        String INPUT = aposToQuotes(""{'a':123,'ob':{'value0':2,'value':3,'value2':4},'b':true}"");
        JsonParser p0 = JSON_F.createParser(INPUT);
        FilteringParserDelegate p = new FilteringParserDelegate(p0,
                new NameMatchFilter(""b"", ""value""),
                true, true);

        String result = readAndWrite(JSON_F, p);
        assertEquals(aposToQuotes(""{'ob':{'value':3},'b':true}""), result);
        assertEquals(2, p.getMatchCount());
    }",junit.framework.AssertionFailedError: expected:<1> but was:<0>
JacksonCore_22,/222043010/omniapr/defects4j/JacksonCore_22_buggy/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,testMultipleMatchFilteringWithPath3,"    public void testMultipleMatchFilteringWithPath3() throws Exception
    {
        final String JSON = aposToQuotes(""{'root':{'a0':true,'a':{'value':3},'b':{'value':\""foo\""}},'b0':false}"");
        JsonParser p0 = JSON_F.createParser(JSON);
        FilteringParserDelegate p = new FilteringParserDelegate(p0,
                new NameMatchFilter(""value""),
                true, true);
        String result = readAndWrite(JSON_F, p);
        assertEquals(aposToQuotes(""{'root':{'a':{'value':3},'b':{'value':\""foo\""}}}""), result);
        assertEquals(2, p.getMatchCount());
    }",junit.framework.AssertionFailedError: expected:<1> but was:<0>
JacksonCore_22,/222043010/omniapr/defects4j/JacksonCore_22_buggy/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,testSingleMatchFilteringWithoutPath,"    public void testSingleMatchFilteringWithoutPath() throws Exception
    {
        JsonParser p0 = JSON_F.createParser(SIMPLE);
        FilteringParserDelegate p = new FilteringParserDelegate(p0,
               new NameMatchFilter(""value""),
                   false, // includePath
                   false // multipleMatches
                );
        String result = readAndWrite(JSON_F, p);
        assertEquals(aposToQuotes(""3""), result);
        assertEquals(1, p.getMatchCount());
    }",junit.framework.AssertionFailedError: expected:<1> but was:<0>
JacksonCore_22,/222043010/omniapr/defects4j/JacksonCore_22_buggy/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,testNotAllowMultipleMatchesWithoutPath1,"    public void testNotAllowMultipleMatchesWithoutPath1() throws Exception
    {
        String jsonString = aposToQuotes(""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'b':true}"");
        JsonParser p0 = JSON_F.createParser(jsonString);
        FilteringParserDelegate p = new FilteringParserDelegate(p0,
               new NameMatchFilter(""value""),
                   false, // includePath
                   false // multipleMatches -false
                );
        String result = readAndWrite(JSON_F, p);
        assertEquals(aposToQuotes(""3""), result);
        assertEquals(1, p.getMatchCount());
    }",junit.framework.AssertionFailedError: expected:<1> but was:<0>
JacksonCore_22,/222043010/omniapr/defects4j/JacksonCore_22_buggy/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,testNotAllowMultipleMatchesWithoutPath2,"    public void testNotAllowMultipleMatchesWithoutPath2() throws Exception
    {
        String jsonString = aposToQuotes(""{'a':123,'array':[1,2],'array':[3,4],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'value':\""val\"",'b':true}"");
        JsonParser p0 = JSON_F.createParser(jsonString);
        FilteringParserDelegate p = new FilteringParserDelegate(p0,
                new IndexMatchFilter(1),
                false, // includePath
                false // multipleMatches -false
        );
        String result = readAndWrite(JSON_F, p);
        assertEquals(aposToQuotes(""2""), result);
        assertEquals(1, p.getMatchCount());
    }",junit.framework.AssertionFailedError: expected:<1> but was:<0>
JacksonCore_22,/222043010/omniapr/defects4j/JacksonCore_22_buggy/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,testIndexMatchWithPath1,"    public void testIndexMatchWithPath1() throws Exception
    {
        FilteringParserDelegate p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),
                new IndexMatchFilter(1), true, true);
        String result = readAndWrite(JSON_F, p);
        assertEquals(aposToQuotes(""{'array':[2]}""), result);
        assertEquals(1, p.getMatchCount());

        p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),
                new IndexMatchFilter(0), true, true);
        result = readAndWrite(JSON_F, p);
        assertEquals(aposToQuotes(""{'array':[1]}""), result);
        assertEquals(1, p.getMatchCount());
    }",junit.framework.AssertionFailedError: expected:<1> but was:<0>
JacksonCore_22,/222043010/omniapr/defects4j/JacksonCore_22_buggy/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,testIndexMatchWithPath2,"    public void testIndexMatchWithPath2() throws Exception
    {
        FilteringParserDelegate p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),
                new IndexMatchFilter(0, 1), true, true);
        assertEquals(aposToQuotes(""{'array':[1,2]}""), readAndWrite(JSON_F, p));
        assertEquals(2, p.getMatchCount());
    
        String JSON = aposToQuotes(""{'a':123,'array':[1,2,3,4,5],'b':[1,2,3]}"");
        p = new FilteringParserDelegate(JSON_F.createParser(JSON),
                new IndexMatchFilter(1, 3), true, true);
        assertEquals(aposToQuotes(""{'array':[2,4],'b':[2]}""), readAndWrite(JSON_F, p));
        assertEquals(3, p.getMatchCount());
    }",junit.framework.AssertionFailedError: expected:<1> but was:<0>
JacksonCore_22,/222043010/omniapr/defects4j/JacksonCore_22_buggy/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java,testAllowMultipleMatchesWithoutPath,"    public void testAllowMultipleMatchesWithoutPath() throws Exception
    {
        String jsonString = aposToQuotes(""{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4,'value':{'value0':2}},'value':\""val\"",'b':true}"");
        JsonParser p0 = JSON_F.createParser(jsonString);
        FilteringParserDelegate p = new FilteringParserDelegate(p0,
               new NameMatchFilter(""value""),
                   false, // includePath
                   true // multipleMatches - true
                );
        String result = readAndWrite(JSON_F, p);
        assertEquals(aposToQuotes(""3 {\""value0\"":2} \""val\""""), result);
        assertEquals(3, p.getMatchCount());
    }",junit.framework.AssertionFailedError: expected:<1> but was:<0>
JacksonCore_23,/222043010/omniapr/defects4j/JacksonCore_23_buggy/src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java,testInvalidSubClass,"    public void testInvalidSubClass() throws Exception
    {
        DefaultPrettyPrinter pp = new MyPrettyPrinter();
        try {
            pp.createInstance();
            fail(""Should not pass"");
        } catch (IllegalStateException e) {
            verifyException(e, ""does not override"");
        }
    }",junit.framework.AssertionFailedError: Should not pass
JacksonCore_24,/222043010/omniapr/defects4j/JacksonCore_24_buggy/src/test/java/com/fasterxml/jackson/core/json/async/AsyncNumberCoercionTest.java,testToLongFailing,"    public void testToLongFailing() throws Exception
    {
        AsyncReaderWrapper p;

        // BigInteger -> error
        BigInteger big = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.TEN);
        p = createParser(String.valueOf(big));
        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
        assertEquals(NumberType.BIG_INTEGER, p.getNumberType());
        assertEquals(big, p.getBigIntegerValue());
        assertEquals(big, p.getNumberValue());
        try {
            p.getLongValue();
            fail(""Should not pass"");
        } catch (InputCoercionException e) {
            verifyException(e, ""out of range of long"");
            assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
            assertEquals(Long.TYPE, e.getTargetType());
        }
        BigInteger small = BigInteger.valueOf(Long.MIN_VALUE).subtract(BigInteger.TEN);
        p = createParser(String.valueOf(small));
        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
        assertEquals(small, p.getBigIntegerValue());
        try {
            p.getLongValue();
            fail(""Should not pass"");
        } catch (InputCoercionException e) {
            verifyException(e, ""out of range of long"");
            assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
            assertEquals(Long.TYPE, e.getTargetType());
        }
    }",com.fasterxml.jackson.core.JsonParseException: Numeric value (9223372036854775817) out of range of long (-9223372036854775808 - 9223372036854775807)
JacksonCore_24,/222043010/omniapr/defects4j/JacksonCore_24_buggy/src/test/java/com/fasterxml/jackson/core/json/async/AsyncNumberCoercionTest.java,testToIntFailing,"    public void testToIntFailing() throws Exception
    {
        AsyncReaderWrapper p;

        // long -> error
        long big = 1L + Integer.MAX_VALUE;
        p = createParser(String.valueOf(big));
        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
        assertEquals(big, p.getLongValue());
        try {
            p.getIntValue();
            fail(""Should not pass"");
        } catch (InputCoercionException e) {
            verifyException(e, ""out of range of int"");
            assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
            assertEquals(Integer.TYPE, e.getTargetType());
        }
        long small = -1L + Integer.MIN_VALUE;
        p = createParser(String.valueOf(small));
        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
        assertEquals(Long.valueOf(small), p.getNumberValue());
        assertEquals(small, p.getLongValue());
        try {
            p.getIntValue();
            fail(""Should not pass"");
        } catch (InputCoercionException e) {
            verifyException(e, ""out of range of int"");
            assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
            assertEquals(Integer.TYPE, e.getTargetType());
        }

        // double -> error
        p = createParser(String.valueOf(big)+"".0"");
        assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());
        assertEquals((double) big, p.getDoubleValue());
        try {
            p.getIntValue();
            fail(""Should not pass"");
        } catch (InputCoercionException e) {
            verifyException(e, ""out of range of int"");
            assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
            assertEquals(Integer.TYPE, e.getTargetType());
        }
        p = createParser(String.valueOf(small)+"".0"");
        assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());
        assertEquals((double) small, p.getDoubleValue());
        try {
            p.getIntValue();
            fail(""Should not pass"");
        } catch (InputCoercionException e) {
            verifyException(e, ""out of range of int"");
            assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
            assertEquals(Integer.TYPE, e.getTargetType());
        }

        // BigInteger -> error
        p = createParser(String.valueOf(big));
        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
        assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());
        try {
            p.getIntValue();
            fail(""Should not pass"");
        } catch (InputCoercionException e) {
            verifyException(e, ""out of range of int"");
            assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
            assertEquals(Integer.TYPE, e.getTargetType());
        }
        p = createParser(String.valueOf(small));
        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
        assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());
        try {
            p.getIntValue();
            fail(""Should not pass"");
        } catch (InputCoercionException e) {
            verifyException(e, ""out of range of int"");
            assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
            assertEquals(Integer.TYPE, e.getTargetType());
        }
    }",com.fasterxml.jackson.core.JsonParseException: Numeric value (9223372036854775817) out of range of long (-9223372036854775808 - 9223372036854775807)
JacksonCore_24,/222043010/omniapr/defects4j/JacksonCore_24_buggy/src/test/java/com/fasterxml/jackson/core/read/NumberCoercionTest.java,testToLongFailing,"    public void testToLongFailing() throws Exception
    {
        for (int mode : ALL_STREAMING_MODES) {
            JsonParser p;

            // BigInteger -> error
            BigInteger big = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.TEN);
            p = createParser(mode, String.valueOf(big));
            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
            assertEquals(NumberType.BIG_INTEGER, p.getNumberType());
            assertEquals(big, p.getBigIntegerValue());
            assertEquals(big, p.getNumberValue());
            try {
                p.getLongValue();
                fail(""Should not pass"");
            } catch (InputCoercionException e) {
                verifyException(e, ""out of range of long"");
                assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
                assertEquals(Long.TYPE, e.getTargetType());
            }
            BigInteger small = BigInteger.valueOf(Long.MIN_VALUE).subtract(BigInteger.TEN);
            p = createParser(mode, String.valueOf(small));
            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
            assertEquals(small, p.getBigIntegerValue());
            try {
                p.getLongValue();
                fail(""Should not pass"");
            } catch (InputCoercionException e) {
                verifyException(e, ""out of range of long"");
                assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
                assertEquals(Long.TYPE, e.getTargetType());
            }
        }
    }",com.fasterxml.jackson.core.JsonParseException: Numeric value (9223372036854775817) out of range of long (-9223372036854775808 - 9223372036854775807)
JacksonCore_24,/222043010/omniapr/defects4j/JacksonCore_24_buggy/src/test/java/com/fasterxml/jackson/core/read/NumberCoercionTest.java,testToIntFailing,"    public void testToIntFailing() throws Exception
    {
        for (int mode : ALL_STREAMING_MODES) {
            JsonParser p;

            // long -> error
            long big = 1L + Integer.MAX_VALUE;
            p = createParser(mode, String.valueOf(big));
            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
            assertEquals(big, p.getLongValue());
            try {
                p.getIntValue();
                fail(""Should not pass"");
            } catch (InputCoercionException e) {
                verifyException(e, ""out of range of int"");
                assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
                assertEquals(Integer.TYPE, e.getTargetType());
            }
            long small = -1L + Integer.MIN_VALUE;
            p = createParser(mode, String.valueOf(small));
            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
            assertEquals(Long.valueOf(small), p.getNumberValue());
            assertEquals(small, p.getLongValue());
            try {
                p.getIntValue();
                fail(""Should not pass"");
            } catch (InputCoercionException e) {
                verifyException(e, ""out of range of int"");
                assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
                assertEquals(Integer.TYPE, e.getTargetType());
            }

            // double -> error
            p = createParser(mode, String.valueOf(big)+"".0"");
            assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());
            assertEquals((double) big, p.getDoubleValue());
            try {
                p.getIntValue();
                fail(""Should not pass"");
            } catch (InputCoercionException e) {
                verifyException(e, ""out of range of int"");
                assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
                assertEquals(Integer.TYPE, e.getTargetType());
            }
            p = createParser(mode, String.valueOf(small)+"".0"");
            assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());
            assertEquals((double) small, p.getDoubleValue());
            try {
                p.getIntValue();
                fail(""Should not pass"");
            } catch (InputCoercionException e) {
                verifyException(e, ""out of range of int"");
                assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
                assertEquals(Integer.TYPE, e.getTargetType());
            }

            // BigInteger -> error
            p = createParser(mode, String.valueOf(big));
            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
            assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());
            try {
                p.getIntValue();
                fail(""Should not pass"");
            } catch (InputCoercionException e) {
                verifyException(e, ""out of range of int"");
                assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
                assertEquals(Integer.TYPE, e.getTargetType());
            }
            p = createParser(mode, String.valueOf(small));
            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
            assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());
            try {
                p.getIntValue();
                fail(""Should not pass"");
            } catch (InputCoercionException e) {
                verifyException(e, ""out of range of int"");
                assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
                assertEquals(Integer.TYPE, e.getTargetType());
            }
        }
    }",com.fasterxml.jackson.core.JsonParseException: Numeric value (9223372036854775817) out of range of long (-9223372036854775808 - 9223372036854775807)
JacksonCore_24,/222043010/omniapr/defects4j/JacksonCore_24_buggy/src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java,testMaliciousLongOverflow,"    public void testMaliciousLongOverflow() throws Exception
    {
        for (int mode : ALL_STREAMING_MODES) {
            for (String doc : new String[] { BIG_POS_DOC, BIG_NEG_DOC }) {
                JsonParser p = createParser(mode, doc);
                assertToken(JsonToken.START_ARRAY, p.nextToken());
                assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
                try {
                    p.getLongValue();
                    fail(""Should not pass"");
                } catch (InputCoercionException e) {
                    verifyException(e, ""out of range of long"");
                    verifyException(e, ""Integer with ""+BIG_NUM_LEN+"" digits"");
                }
                p.close();
            }
        }
    }",com.fasterxml.jackson.core.JsonParseException: Numeric value ([Integer with 199999 digits]) out of range of long
JacksonCore_24,/222043010/omniapr/defects4j/JacksonCore_24_buggy/src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java,testSimpleLongOverflow,"    public void testSimpleLongOverflow() throws Exception
    {
        BigInteger below = BigInteger.valueOf(Long.MIN_VALUE);
        below = below.subtract(BigInteger.ONE);
        BigInteger above = BigInteger.valueOf(Long.MAX_VALUE);
        above = above.add(BigInteger.ONE);

        String DOC_BELOW = below.toString() + "" "";
        String DOC_ABOVE = below.toString() + "" "";

        for (int mode : ALL_MODES) {
            JsonParser p = createParser(FACTORY, mode, DOC_BELOW);
            p.nextToken();
            try {
                long x = p.getLongValue();
                fail(""Expected an exception for underflow (input ""+p.getText()+""): instead, got long value: ""+x);
            } catch (InputCoercionException e) {
                verifyException(e, ""out of range of long"");
            }
            p.close();

            p = createParser(mode, DOC_ABOVE);
            p.nextToken();
            try {
                long x = p.getLongValue();
                fail(""Expected an exception for underflow (input ""+p.getText()+""): instead, got long value: ""+x);
            } catch (InputCoercionException e) {
                verifyException(e, ""out of range of long"");
            }
            p.close();
        }
    }",com.fasterxml.jackson.core.JsonParseException: Numeric value ([Integer with 199999 digits]) out of range of long
JacksonCore_24,/222043010/omniapr/defects4j/JacksonCore_24_buggy/src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java,testMaliciousIntOverflow,"    public void testMaliciousIntOverflow() throws Exception
    {
        for (int mode : ALL_STREAMING_MODES) {
            for (String doc : new String[] { BIG_POS_DOC, BIG_NEG_DOC }) {
                JsonParser p = createParser(mode, doc);
                assertToken(JsonToken.START_ARRAY, p.nextToken());
                assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
                try {
                    p.getIntValue();
                    fail(""Should not pass"");
                } catch (InputCoercionException e) {
                    verifyException(e, ""out of range of int"");
                    verifyException(e, ""Integer with ""+BIG_NUM_LEN+"" digits"");
                }
                p.close();
            }
        }
    }",com.fasterxml.jackson.core.JsonParseException: Numeric value ([Integer with 199999 digits]) out of range of long
JacksonCore_24,/222043010/omniapr/defects4j/JacksonCore_24_buggy/src/test/java/com/fasterxml/jackson/core/read/NumberParsingTest.java,testSimpleLong,"    public void testSimpleLong() throws Exception
    {
        _testSimpleLong(MODE_INPUT_STREAM);
        _testSimpleLong(MODE_INPUT_STREAM_THROTTLED);
        _testSimpleLong(MODE_READER);
        _testSimpleLong(MODE_DATA_INPUT);
    }",com.fasterxml.jackson.core.JsonParseException: Numeric value (12345678907) out of range of int
JacksonCore_25,/222043010/omniapr/defects4j/JacksonCore_25_buggy/src/test/java/com/fasterxml/jackson/core/read/NonStandardUnquotedNamesTest.java,testUnquotedIssue510,"    public void testUnquotedIssue510() throws Exception
    {
        // NOTE! Requires longer input buffer to trigger longer codepath
        char[] fullChars = new char[4001];
        for (int i = 0; i < 3998; i++) {
             fullChars[i] = ' ';
        }
        fullChars[3998] = '{';
        fullChars[3999] = 'a';
        fullChars[4000] = 256;

        JsonParser p = UNQUOTED_FIELDS_F.createParser(new java.io.StringReader(new String(fullChars)));
        assertToken(JsonToken.START_OBJECT, p.nextToken());
        try {
            p.nextToken();
            fail(""Should not pass"");
        } catch (JsonParseException e) {
            ; // should fail here
        }
        p.close();
    }

    /*
    /****************************************************************
    /* Secondary test methods
    /****************************************************************
     */
    
    private void _testLargeUnquoted(int mode) throws Exception
    {
        StringBuilder sb = new StringBuilder(5000);
        sb.append(""[\n"");
        //final int REPS = 2000;
        final int REPS = 1050;
        for (int i = 0; i < REPS; ++i) {
            if (i > 0) {
                sb.append(',');
                if ((i & 7) == 0) {
                    sb.append('\n');
                }
            }
            sb.append(""{"");
            sb.append(""abc"").append(i&127).append(':');
            sb.append((i & 1) != 0);
            sb.append(""}\n"");
        }
        sb.append(""]"");
        String JSON = sb.toString();
        JsonParser p = createParser(UNQUOTED_FIELDS_F, mode, JSON);
        assertToken(JsonToken.START_ARRAY, p.nextToken());
        for (int i = 0; i < REPS; ++i) {
            assertToken(JsonToken.START_OBJECT, p.nextToken());
            assertToken(JsonToken.FIELD_NAME, p.nextToken());
            assertEquals(""abc""+(i&127), p.getCurrentName());
            assertToken(((i&1) != 0) ? JsonToken.VALUE_TRUE : JsonToken.VALUE_FALSE, p.nextToken());
            assertToken(JsonToken.END_OBJECT, p.nextToken());
        }
        assertToken(JsonToken.END_ARRAY, p.nextToken());
        p.close();
    }

    private void _testSimpleUnquoted(int mode) throws Exception
    {
        String JSON = ""{ a : 1, _foo:true, $:\""money!\"", \"" \"":null }"";
        JsonParser p = createParser(UNQUOTED_FIELDS_F, mode, JSON);

        assertToken(JsonToken.START_OBJECT, p.nextToken());
        assertToken(JsonToken.FIELD_NAME, p.nextToken());
        assertEquals(""a"", p.getCurrentName());
        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
        assertToken(JsonToken.FIELD_NAME, p.nextToken());
        assertEquals(""_foo"", p.getCurrentName());
        assertToken(JsonToken.VALUE_TRUE, p.nextToken());
        assertToken(JsonToken.FIELD_NAME, p.nextToken());
        assertEquals(""$"", p.getCurrentName());
        assertToken(JsonToken.VALUE_STRING, p.nextToken());
        assertEquals(""money!"", p.getText());

        // and then regular quoted one should still work too:
        assertToken(JsonToken.FIELD_NAME, p.nextToken());
        assertEquals("" "", p.getCurrentName());

        assertToken(JsonToken.VALUE_NULL, p.nextToken());

        assertToken(JsonToken.END_OBJECT, p.nextToken());
        p.close();

        // Another thing, as per [Issue#102]: numbers

        JSON = ""{ 123:true,4:false }"";
        p = createParser(UNQUOTED_FIELDS_F, mode, JSON);

        assertToken(JsonToken.START_OBJECT, p.nextToken());
        assertToken(JsonToken.FIELD_NAME, p.nextToken());
        assertEquals(""123"", p.getCurrentName());
        assertToken(JsonToken.VALUE_TRUE, p.nextToken());

        assertToken(JsonToken.FIELD_NAME, p.nextToken());
        assertEquals(""4"", p.getCurrentName());
        assertToken(JsonToken.VALUE_FALSE, p.nextToken());

        assertToken(JsonToken.END_OBJECT, p.nextToken());
        p.close();
    }
}",java.lang.ArrayIndexOutOfBoundsException: 256
JacksonCore_26,/222043010/omniapr/defects4j/JacksonCore_26_buggy/src/test/java/com/fasterxml/jackson/core/json/async/AsyncLocationTest.java,testLocationOffsets,"    public void testLocationOffsets() throws Exception
    {
        JsonParser parser = DEFAULT_F.createNonBlockingByteArrayParser();
        ByteArrayFeeder feeder = (ByteArrayFeeder) parser.getNonBlockingInputFeeder();

        byte[] input = utf8Bytes(""[[["");

        feeder.feedInput(input, 2, 3);
        assertEquals(JsonToken.START_ARRAY, parser.nextToken());
        assertEquals(1, parser.getCurrentLocation().getByteOffset());
        assertEquals(1, parser.getTokenLocation().getByteOffset());
        assertEquals(1, parser.getCurrentLocation().getLineNr());
        assertEquals(1, parser.getTokenLocation().getLineNr());
        assertEquals(2, parser.getCurrentLocation().getColumnNr());
        assertEquals(1, parser.getTokenLocation().getColumnNr());

        feeder.feedInput(input, 0, 1);
        assertEquals(JsonToken.START_ARRAY, parser.nextToken());
        assertEquals(2, parser.getCurrentLocation().getByteOffset());
        assertEquals(2, parser.getTokenLocation().getByteOffset());
        assertEquals(1, parser.getCurrentLocation().getLineNr());
        assertEquals(1, parser.getTokenLocation().getLineNr());
        assertEquals(3, parser.getCurrentLocation().getColumnNr());
        assertEquals(2, parser.getTokenLocation().getColumnNr());
        parser.close();
    }",junit.framework.AssertionFailedError: expected:<1> but was:<3>
Compress_2,/222043010/omniapr/defects4j/Compress_2_buggy/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java,testArDelete,"    public void testArDelete() throws Exception {
        final File output = new File(dir, ""bla.ar"");

        final File file1 = getFile(""test1.xml"");
        final File file2 = getFile(""test2.xml"");
        {
            // create

            final OutputStream out = new FileOutputStream(output);
            final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(""ar"", out);
            os.putArchiveEntry(new ArArchiveEntry(""test1.xml"", file1.length()));
            IOUtils.copy(new FileInputStream(file1), os);
            os.closeArchiveEntry();

            os.putArchiveEntry(new ArArchiveEntry(""test2.xml"", file2.length()));
            IOUtils.copy(new FileInputStream(file2), os);
            os.closeArchiveEntry();
            os.close();
            out.close();
        }

        assertEquals(8
                     + 60 + file1.length() + (file1.length() % 2)
                     + 60 + file2.length() + (file2.length() % 2),
                     output.length());

        final File output2 = new File(dir, ""bla2.ar"");

        int copied = 0;
        int deleted = 0;

        {
            // remove all but one file

            final InputStream is = new FileInputStream(output);
            final OutputStream os = new FileOutputStream(output2);
            final ArchiveOutputStream aos = new ArchiveStreamFactory().createArchiveOutputStream(""ar"", os);
            final ArchiveInputStream ais = new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));
            while(true) {
                final ArArchiveEntry entry = (ArArchiveEntry)ais.getNextEntry();
                if (entry == null) {
                    break;
                }

                if (""test1.xml"".equals(entry.getName())) {
                    aos.putArchiveEntry(entry);
                    IOUtils.copy(ais, aos);
                    aos.closeArchiveEntry();
                    copied++;
                } else {
                    IOUtils.copy(ais, new ByteArrayOutputStream());
                    deleted++;
                }

            }
            ais.close();
            aos.close();
            is.close();
            os.close();
        }

        assertEquals(1, copied);
        assertEquals(1, deleted);
        assertEquals(144, output2.length());

        long files = 0;
        long sum = 0;

        {
            final InputStream is = new FileInputStream(output2);
            final ArchiveInputStream ais = new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));
            while(true) {
                final ArArchiveEntry entry = (ArArchiveEntry)ais.getNextEntry();
                if (entry == null) {
                    break;
                }

                IOUtils.copy(ais, new ByteArrayOutputStream());

                sum +=  entry.getLength();
                files++;
            }
            ais.close();
            is.close();
        }

        assertEquals(1, files);
        assertEquals(76, sum);

    }",junit.framework.AssertionFailedError: expected:<1> but was:<0>
Compress_3,/222043010/omniapr/defects4j/Compress_3_buggy/src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java,testFinish,"    public void testFinish() throws Exception {
        OutputStream out1 = new ByteArrayOutputStream();
        
        ArchiveOutputStream aos1 = factory.createArchiveOutputStream(""zip"", out1);
        aos1.putArchiveEntry(new ZipArchiveEntry(""dummy""));
        try {
            aos1.finish();
            fail(""After putArchive should follow closeArchive"");
        } catch (IOException io) {
            // Exception expected
        }
        
        aos1 = factory.createArchiveOutputStream(""jar"", out1);
        aos1.putArchiveEntry(new JarArchiveEntry(""dummy""));
        try {
            aos1.finish();
            fail(""After putArchive should follow closeArchive"");
        } catch (IOException io) {
            // Exception expected
        }
        
        aos1 = factory.createArchiveOutputStream(""ar"", out1);
        aos1.putArchiveEntry(new ArArchiveEntry(""dummy"", 100));
        try {
            aos1.finish();
            fail(""After putArchive should follow closeArchive"");
        } catch (IOException io) {
            // Exception expected
        }
        
        aos1 = factory.createArchiveOutputStream(""cpio"", out1);
        aos1.putArchiveEntry(new CpioArchiveEntry(""dummy""));
        try {
            aos1.finish();
            fail(""After putArchive should follow closeArchive"");
        } catch (IOException io) {
            // Exception expected
        }
        
        aos1 = factory.createArchiveOutputStream(""tar"", out1);
        aos1.putArchiveEntry(new TarArchiveEntry(""dummy""));
        try {
            aos1.finish();
            fail(""After putArchive should follow closeArchive"");
        } catch (IOException io) {
            // Exception expected
        }
    }",junit.framework.AssertionFailedError: After putArchive should follow closeArchive
Compress_4,/222043010/omniapr/defects4j/Compress_4_buggy/src/test/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStreamTest.java,testJarMarker,"    public void testJarMarker() throws IOException {
        File testArchive = File.createTempFile(""jar-aostest"", "".jar"");
        JarArchiveOutputStream out = null;
        ZipFile zf = null;
        try {

            out = new JarArchiveOutputStream(new FileOutputStream(testArchive));
            out.putArchiveEntry(new ZipArchiveEntry(""foo/""));
            out.closeArchiveEntry();
            out.putArchiveEntry(new ZipArchiveEntry(""bar/""));
            out.closeArchiveEntry();
            out.finish();
            out.close();
            out = null;

            zf = new ZipFile(testArchive);
            ZipArchiveEntry ze = zf.getEntry(""foo/"");
            assertNotNull(ze);
            ZipExtraField[] fes = ze.getExtraFields();
            assertEquals(1, fes.length);
            assertTrue(fes[0] instanceof JarMarker);

            ze = zf.getEntry(""bar/"");
            assertNotNull(ze);
            fes = ze.getExtraFields();
            assertEquals(0, fes.length);
        } finally {
            if (out != null) {
                try {
                    out.close();
                } catch (IOException e) { /* swallow */ }
            }
            ZipFile.closeQuietly(zf);
            if (testArchive.exists()) {
                testArchive.delete();
            }
        }
    }","java.io.IOException: central directory is empty, can't expand corrupt archive."
Compress_4,/222043010/omniapr/defects4j/Compress_4_buggy/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,testCP437FileRoundtripImplicitUnicodeExtra,"    public void testCP437FileRoundtripImplicitUnicodeExtra()
        throws IOException {
        testFileRoundtrip(CP437, false, false);
    }","java.io.IOException: central directory is empty, can't expand corrupt archive."
Compress_4,/222043010/omniapr/defects4j/Compress_4_buggy/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,testUtf8FileRoundtripImplicitUnicodeExtra,"    public void testUtf8FileRoundtripImplicitUnicodeExtra()
        throws IOException {
        testFileRoundtrip(UTF_8, true, false);
    }","java.io.IOException: central directory is empty, can't expand corrupt archive."
Compress_4,/222043010/omniapr/defects4j/Compress_4_buggy/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,testCP437FileRoundtripExplicitUnicodeExtra,"    public void testCP437FileRoundtripExplicitUnicodeExtra()
        throws IOException {
        testFileRoundtrip(CP437, false, true);
    }","java.io.IOException: central directory is empty, can't expand corrupt archive."
Compress_4,/222043010/omniapr/defects4j/Compress_4_buggy/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,testUtf8FileRoundtripExplicitUnicodeExtra,"    public void testUtf8FileRoundtripExplicitUnicodeExtra()
        throws IOException {
        testFileRoundtrip(UTF_8, true, true);
    }","java.io.IOException: central directory is empty, can't expand corrupt archive."
Compress_4,/222043010/omniapr/defects4j/Compress_4_buggy/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,testASCIIFileRoundtripImplicitUnicodeExtra,"    public void testASCIIFileRoundtripImplicitUnicodeExtra()
        throws IOException {
        testFileRoundtrip(US_ASCII, false, false);
    }","java.io.IOException: central directory is empty, can't expand corrupt archive."
Compress_4,/222043010/omniapr/defects4j/Compress_4_buggy/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,testUtf8FileRoundtripNoEFSImplicitUnicodeExtra,"    public void testUtf8FileRoundtripNoEFSImplicitUnicodeExtra()
        throws IOException {
        testFileRoundtrip(UTF_8, false, false);
    }","java.io.IOException: central directory is empty, can't expand corrupt archive."
Compress_4,/222043010/omniapr/defects4j/Compress_4_buggy/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,testZipArchiveInputStreamReadsUnicodeFields,"    public void testZipArchiveInputStreamReadsUnicodeFields()
        throws IOException {
        File file = File.createTempFile(""unicode-test"", "".zip"");
        ZipFile zf = null;
        try {
            createTestFile(file, US_ASCII, false, true);
            zf = new ZipFile(file, US_ASCII, true);
            assertNotNull(zf.getEntry(ASCII_TXT));
            assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT));
            assertNotNull(zf.getEntry(OIL_BARREL_TXT));
        } finally {
            ZipFile.closeQuietly(zf);
            if (file.exists()) {
                file.delete();
            }
        }
    }","java.io.IOException: central directory is empty, can't expand corrupt archive."
Compress_4,/222043010/omniapr/defects4j/Compress_4_buggy/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,testASCIIFileRoundtripExplicitUnicodeExtra,"    public void testASCIIFileRoundtripExplicitUnicodeExtra()
        throws IOException {
        testFileRoundtrip(US_ASCII, false, true);
    }","java.io.IOException: central directory is empty, can't expand corrupt archive."
Compress_4,/222043010/omniapr/defects4j/Compress_4_buggy/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,testUtf8FileRoundtripNoEFSExplicitUnicodeExtra,"    public void testUtf8FileRoundtripNoEFSExplicitUnicodeExtra()
        throws IOException {
        testFileRoundtrip(UTF_8, false, true);
    }","java.io.IOException: central directory is empty, can't expand corrupt archive."
Compress_5,/222043010/omniapr/defects4j/Compress_5_buggy/src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java,testRead7ZipMultiVolumeArchiveForStream,"    public void testRead7ZipMultiVolumeArchiveForStream() throws IOException,
	    URISyntaxException {
	
	URL zip = getClass().getResource(""/apache-maven-2.2.1.zip.001"");
	FileInputStream archive = new FileInputStream(
		new File(new URI(zip.toString())));
	ZipArchiveInputStream zi = null;
	try {
	    zi = new ZipArchiveInputStream(archive,null,false);
	    
	    // these are the entries that are supposed to be processed
	    // correctly without any problems
	    for (int i = 0; i < ENTRIES.length; i++) {
		assertEquals(ENTRIES[i], zi.getNextEntry().getName());
	    }
	    
	    // this is the last entry that is truncated
	    ArchiveEntry lastEntry = zi.getNextEntry();
	    assertEquals(LAST_ENTRY_NAME, lastEntry.getName());
	    byte [] buffer = new byte [4096];
	    
	    // before the fix, we'd get 0 bytes on this read and all
	    // subsequent reads thus a client application might enter
	    // an infinite loop after the fix, we should get an
	    // exception
	    try {
                int read = 0;
		while ((read = zi.read(buffer)) > 0) { }
		fail(""shouldn't be able to read from truncated entry"");
	    } catch (IOException e) {
                assertEquals(""Truncated ZIP file"", e.getMessage());
	    }
	    
	    // and now we get another entry, which should also yield
	    // an exception
	    try {
		zi.getNextEntry();
		fail(""shouldn't be able to read another entry from truncated""
                     + "" file"");
	    } catch (IOException e) {
		// this is to be expected
	    }
	} finally {
	    if (zi != null) {
		zi.close();
	    }
	}
    }",junit.framework.AssertionFailedError: shouldn't be able to read from truncated entry
Compress_6,/222043010/omniapr/defects4j/Compress_6_buggy/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,testNotEquals,"    public void testNotEquals() {
        ZipArchiveEntry entry1 = new ZipArchiveEntry(""foo"");
        ZipArchiveEntry entry2 = new ZipArchiveEntry(""bar"");
        assertFalse(entry1.equals(entry2));
    }",junit.framework.AssertionFailedError
Compress_7,/222043010/omniapr/defects4j/Compress_7_buggy/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,testRoundTripNames,"    public void testRoundTripNames(){
        checkName("""");
        checkName(""The quick brown fox\n"");
        checkName(""\177"");
        // checkName(""\0""); // does not work, because NUL is ignored
        // COMPRESS-114
        checkName(""0302-0601-3±±±F06±W220±ZB±LALALA±±±±±±±±±±CAN±±DC±±±04±060302±MOE.model"");
    }",junit.framework.ComparisonFailure: expected:<0302-0601-3[±±±F06±W220±ZB±LALALA±±±±±±±±±±CAN±±DC±±±04±060302±]MOE.model> but was:<0302-0601-3[ﾱﾱﾱF06ﾱW220ﾱZBﾱLALALAﾱﾱﾱﾱﾱﾱﾱﾱﾱﾱCANﾱﾱDCﾱﾱﾱ04ﾱ060302ﾱ]MOE.model>
Compress_8,/222043010/omniapr/defects4j/Compress_8_buggy/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,testParseOctalInvalid,"    public void testParseOctalInvalid() throws Exception{
        byte [] buffer;
        buffer=new byte[0]; // empty byte array
        try {
            TarUtils.parseOctal(buffer,0, buffer.length);
            fail(""Expected IllegalArgumentException - should be at least 2 bytes long"");
        } catch (IllegalArgumentException expected) {
        }
        buffer=new byte[]{0}; // 1-byte array
        try {
            TarUtils.parseOctal(buffer,0, buffer.length);
            fail(""Expected IllegalArgumentException - should be at least 2 bytes long"");
        } catch (IllegalArgumentException expected) {
        }
        buffer=new byte[]{0,0,' '}; // not all NULs
        try {
            TarUtils.parseOctal(buffer,0, buffer.length);
            fail(""Expected IllegalArgumentException - not all NULs"");
        } catch (IllegalArgumentException expected) {
        }
        buffer=new byte[]{' ',0,0,0}; // not all NULs
        try {
            TarUtils.parseOctal(buffer,0, buffer.length);
            fail(""Expected IllegalArgumentException - not all NULs"");
        } catch (IllegalArgumentException expected) {
        }
        buffer = ""abcdef "".getBytes(""UTF-8""); // Invalid input
        try {
            TarUtils.parseOctal(buffer,0, buffer.length);
            fail(""Expected IllegalArgumentException"");
        } catch (IllegalArgumentException expected) {
        }
        buffer = ""77777777777"".getBytes(""UTF-8""); // Invalid input - no trailer
        try {
            TarUtils.parseOctal(buffer,0, buffer.length);
            fail(""Expected IllegalArgumentException - no trailer"");
        } catch (IllegalArgumentException expected) {
        }
        buffer = "" 0 07 "".getBytes(""UTF-8""); // Invalid - embedded space
        try {
            TarUtils.parseOctal(buffer,0, buffer.length);
            fail(""Expected IllegalArgumentException - embedded space"");
        } catch (IllegalArgumentException expected) {
        }
        buffer = "" 0\00007 "".getBytes(""UTF-8""); // Invalid - embedded NUL
        try {
            TarUtils.parseOctal(buffer,0, buffer.length);
            fail(""Expected IllegalArgumentException - embedded NUL"");
        } catch (IllegalArgumentException expected) {
        }
    }",junit.framework.AssertionFailedError: Expected IllegalArgumentException - should be at least 2 bytes long
Compress_9,/222043010/omniapr/defects4j/Compress_9_buggy/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,testCount,"    public void testCount() throws Exception {
        File f = File.createTempFile(""commons-compress-tarcount"", "".tar"");
        f.deleteOnExit();
        FileOutputStream fos = new FileOutputStream(f);

        ArchiveOutputStream tarOut = new ArchiveStreamFactory()
            .createArchiveOutputStream(ArchiveStreamFactory.TAR, fos);

        File file1 = getFile(""test1.xml"");
        TarArchiveEntry sEntry = new TarArchiveEntry(file1);
        tarOut.putArchiveEntry(sEntry);

        FileInputStream in = new FileInputStream(file1);
        byte[] buf = new byte[8192];

        int read = 0;
        while ((read = in.read(buf)) > 0) {
            tarOut.write(buf, 0, read);
        }

        in.close();
        tarOut.closeArchiveEntry();
        tarOut.close();

        assertEquals(f.length(), tarOut.getBytesWritten());
    }",junit.framework.AssertionFailedError: expected:<10240> but was:<76>
Compress_10,/222043010/omniapr/defects4j/Compress_10_buggy/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java,testReadWinZipArchive,"    public void testReadWinZipArchive() throws IOException, URISyntaxException {
        URL zip = getClass().getResource(""/utf8-winzip-test.zip"");
        File archive = new File(new URI(zip.toString()));
        ZipFile zf = null;
        try {
            zf = new ZipFile(archive, null, true);
            assertCanRead(zf, ASCII_TXT);
            assertCanRead(zf, EURO_FOR_DOLLAR_TXT);
            assertCanRead(zf, OIL_BARREL_TXT);
        } finally {
            ZipFile.closeQuietly(zf);
        }
    }",junit.framework.AssertionFailedError: InputStream is null
Compress_11,/222043010/omniapr/defects4j/Compress_11_buggy/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,shortTextFilesAreNoTARs,"    public void shortTextFilesAreNoTARs() throws Exception {
        try {
            new ArchiveStreamFactory()
                .createArchiveInputStream(new ByteArrayInputStream(""This certainly is not a tar archive, really, no kidding"".getBytes()));
            fail(""created an input stream for a non-archive"");
        } catch (ArchiveException ae) {
            assertTrue(ae.getMessage().startsWith(""No Archiver found""));
        }
    }",junit.framework.AssertionFailedError: created an input stream for a non-archive
Compress_12,/222043010/omniapr/defects4j/Compress_12_buggy/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,testCOMPRESS178,"    public void testCOMPRESS178() throws Exception {
        final File input = getFile(""COMPRESS-178.tar"");
        final InputStream is = new FileInputStream(input);
        final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(""tar"", is);
        try {
            in.getNextEntry();
            fail(""Expected IOException"");
        } catch (IOException e) {
            Throwable t = e.getCause();
            assertTrue(""Expected cause = IllegalArgumentException"", t instanceof IllegalArgumentException);
        }
        in.close();
    }",java.lang.IllegalArgumentException: Invalid byte 0 at offset 2 in '00{NUL}0765{NUL}' len=8
Compress_13,/222043010/omniapr/defects4j/Compress_13_buggy/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,winzipBackSlashWorkaround,"    public void winzipBackSlashWorkaround() throws Exception {
        URL zip = getClass().getResource(""/test-winzip.zip"");
        ZipArchiveInputStream in = null;
        try {
            in = new ZipArchiveInputStream(new FileInputStream(new File(new URI(zip.toString()))));
            ZipArchiveEntry zae = in.getNextZipEntry();
            zae = in.getNextZipEntry();
            zae = in.getNextZipEntry();
            assertEquals(""\u00e4/"", zae.getName());
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }",junit.framework.AssertionFailedError: expected:<ä[/]> but was:<ä[\]>
Compress_13,/222043010/omniapr/defects4j/Compress_13_buggy/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,testWinzipBackSlashWorkaround,"    public void testWinzipBackSlashWorkaround() throws Exception {
        URL zip = getClass().getResource(""/test-winzip.zip"");
        File archive = new File(new URI(zip.toString()));
        zf = new ZipFile(archive);
        assertNull(zf.getEntry(""\u00e4\\\u00fc.txt""));
        assertNotNull(zf.getEntry(""\u00e4/\u00fc.txt""));
    }",junit.framework.AssertionFailedError: Expected: <null> but was: ä\ü.txt
Compress_14,/222043010/omniapr/defects4j/Compress_14_buggy/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,workaroundForBrokenTimeHeader,"    public void workaroundForBrokenTimeHeader() throws Exception {
        URL tar = getClass().getResource(""/simple-aix-native-tar.tar"");
        TarArchiveInputStream in = null;
        try {
            in = new TarArchiveInputStream(new FileInputStream(new File(new URI(tar.toString()))));
            TarArchiveEntry tae = in.getNextTarEntry();
            tae = in.getNextTarEntry();
            assertEquals(""sample/link-to-txt-file.lnk"", tae.getName());
            assertEquals(new Date(0), tae.getLastModifiedDate());
            assertTrue(tae.isSymbolicLink());
        } finally {
            if (in != null) {
                in.close();
            }
        }
    }",java.io.IOException: Error detected parsing the header
Compress_15,/222043010/omniapr/defects4j/Compress_15_buggy/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,testNullCommentEqualsEmptyComment,"    public void testNullCommentEqualsEmptyComment() {
        ZipArchiveEntry entry1 = new ZipArchiveEntry(""foo"");
        ZipArchiveEntry entry2 = new ZipArchiveEntry(""foo"");
        ZipArchiveEntry entry3 = new ZipArchiveEntry(""foo"");
        entry1.setComment(null);
        entry2.setComment("""");
        entry3.setComment(""bar"");
        assertEquals(entry1, entry2);
        assertFalse(entry1.equals(entry3));
        assertFalse(entry2.equals(entry3));
    }",junit.framework.AssertionFailedError: expected:<foo> but was:<foo>
Compress_16,/222043010/omniapr/defects4j/Compress_16_buggy/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,aiffFilesAreNoTARs,"    public void aiffFilesAreNoTARs() throws Exception {
        InputStream is = null;
        try {
            is = new BufferedInputStream(new FileInputStream(""src/test/resources/testAIFF.aif""));
            new ArchiveStreamFactory().createArchiveInputStream(is);
            fail(""created an input stream for a non-archive"");
        } catch (ArchiveException ae) {
            assertTrue(ae.getMessage().startsWith(""No Archiver found""));
        } finally {
            if (is != null) {
                is.close();
            }
        }
    }",junit.framework.AssertionFailedError: created an input stream for a non-archive
Compress_17,/222043010/omniapr/defects4j/Compress_17_buggy/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,testCompress197,"    public void testCompress197() throws Exception {
        TarArchiveInputStream tar = getTestStream(""/COMPRESS-197.tar"");
        try {
            TarArchiveEntry entry = tar.getNextTarEntry();
            while (entry != null) {
                entry = tar.getNextTarEntry();
            }
        } catch (IOException e) {
            fail(""COMPRESS-197: "" + e.getMessage());
        } finally {
            tar.close();
        }
    }",junit.framework.AssertionFailedError: COMPRESS-197: Error detected parsing the header
Compress_18,/222043010/omniapr/defects4j/Compress_18_buggy/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java,testWriteNonAsciiDirectoryNamePosixMode,"    public void testWriteNonAsciiDirectoryNamePosixMode() throws Exception {
        String n = ""f\u00f6\u00f6/"";
        TarArchiveEntry t = new TarArchiveEntry(n);
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);
        tos.setAddPaxHeadersForNonAsciiNames(true);
        tos.putArchiveEntry(t);
        tos.closeArchiveEntry();
        tos.close();
        byte[] data = bos.toByteArray();
        TarArchiveInputStream tin =
            new TarArchiveInputStream(new ByteArrayInputStream(data));
        TarArchiveEntry e = tin.getNextTarEntry();
        assertEquals(n, e.getName());
        assertTrue(e.isDirectory());
        tin.close();
    }",java.io.IOException: request to write '15' bytes exceeds size in header of '0' bytes for entry './PaxHeaders.X/fvv/'
Compress_19,/222043010/omniapr/defects4j/Compress_19_buggy/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java,testExcessDataInZip64ExtraField,"    public void testExcessDataInZip64ExtraField() throws Exception {
        File archive = getFile(""COMPRESS-228.zip"");
        zf = new ZipFile(archive);
        // actually, if we get here, the test already has passed

        ZipArchiveEntry ze = zf.getEntry(""src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java"");
        assertEquals(26101, ze.getSize());
    }",java.util.zip.ZipException: central directory zip64 extended information extra field's length doesn't match central directory data.  Expected length 16 but is 28
Compress_20,/222043010/omniapr/defects4j/Compress_20_buggy/src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java,testCpioUnarchiveCreatedByRedlineRpm,"    public void testCpioUnarchiveCreatedByRedlineRpm() throws Exception {
        CpioArchiveInputStream in =
            new CpioArchiveInputStream(new FileInputStream(getFile(""redline.cpio"")));
        CpioArchiveEntry entry= null;

        int count = 0;
        while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) {
            count++;
        }
        in.close();

        assertEquals(count, 1);
    }",java.lang.IllegalArgumentException: Unknown mode. Full: 1a4 Masked: 0
Compress_21,/222043010/omniapr/defects4j/Compress_21_buggy/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,testSevenEmptyFiles,"    public void testSevenEmptyFiles() throws Exception {
        testCompress252(7, 0);
    }",java.io.IOException: Unknown property 128
Compress_21,/222043010/omniapr/defects4j/Compress_21_buggy/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,testEightFilesSomeNotEmpty,"    public void testEightFilesSomeNotEmpty() throws Exception {
        testCompress252(8, 2);
    }",java.io.IOException: Unknown property 128
Compress_21,/222043010/omniapr/defects4j/Compress_21_buggy/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,testSixEmptyFiles,"    public void testSixEmptyFiles() throws Exception {
        testCompress252(6, 0);
    }",java.io.IOException: Unknown property 128
Compress_21,/222043010/omniapr/defects4j/Compress_21_buggy/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,testEightEmptyFiles,"    public void testEightEmptyFiles() throws Exception {
        testCompress252(8, 0);
    }",java.io.IOException: Unknown property 128
Compress_21,/222043010/omniapr/defects4j/Compress_21_buggy/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,testNineEmptyFiles,"    public void testNineEmptyFiles() throws Exception {
        testCompress252(9, 0);
    }",java.io.IOException: Unknown property 128
Compress_21,/222043010/omniapr/defects4j/Compress_21_buggy/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,testSixFilesSomeNotEmpty,"    public void testSixFilesSomeNotEmpty() throws Exception {
        testCompress252(6, 2);
    }",java.io.IOException: Unknown property 128
Compress_21,/222043010/omniapr/defects4j/Compress_21_buggy/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,testNineFilesSomeNotEmpty,"    public void testNineFilesSomeNotEmpty() throws Exception {
        testCompress252(9, 2);
    }",java.io.IOException: Unknown property 128
Compress_21,/222043010/omniapr/defects4j/Compress_21_buggy/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java,testSevenFilesSomeNotEmpty,"    public void testSevenFilesSomeNotEmpty() throws Exception {
        testCompress252(7, 2);
    }",java.io.IOException: Unknown property 128
Compress_22,/222043010/omniapr/defects4j/Compress_22_buggy/src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java,testPartialReadTruncatedData,"    public void testPartialReadTruncatedData() throws IOException {
        //with BZ2File(self.filename) as f:
        //    self.assertEqual(f.read(len(self.TEXT)), self.TEXT)
        //    self.assertRaises(EOFError, f.read, 1)

        final int length = TEXT.length();
        ByteBuffer buffer = ByteBuffer.allocate(length);
        bz2Channel.read(buffer);

        assertArrayEquals(Arrays.copyOfRange(TEXT.getBytes(), 0, length),
                buffer.array());

        // subsequent read should throw
        buffer = ByteBuffer.allocate(1);
        try {
            bz2Channel.read(buffer);
            Assert.fail(""The read should have thrown."");
        } catch (IOException e) {
            // pass
        }
    }",java.io.IOException: unexpected end of stream
Compress_23,/222043010/omniapr/defects4j/Compress_23_buggy/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,testCompressedHeaderWithNonDefaultDictionarySize,"    public void testCompressedHeaderWithNonDefaultDictionarySize() throws Exception {
        SevenZFile sevenZFile = new SevenZFile(getFile(""COMPRESS-256.7z""));
        try {
            int count = 0;
            while (sevenZFile.getNextEntry() != null) {
                count++;
            }
            assertEquals(446, count);
        } finally {
            sevenZFile.close();
        }
    }",org.tukaani.xz.UnsupportedOptionsException: LZMA dictionary is too big for this implementation
Compress_24,/222043010/omniapr/defects4j/Compress_24_buggy/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,testParseOctal,"    public void testParseOctal() throws Exception{
        long value; 
        byte [] buffer;
        final long MAX_OCTAL  = 077777777777L; // Allowed 11 digits
        final long MAX_OCTAL_OVERFLOW  = 0777777777777L; // in fact 12 for some implementations
        final String maxOctal = ""777777777777""; // Maximum valid octal
        buffer = maxOctal.getBytes(CharsetNames.UTF_8);
        value = TarUtils.parseOctal(buffer,0, buffer.length);
        assertEquals(MAX_OCTAL_OVERFLOW, value);
        buffer[buffer.length - 1] = ' ';
        value = TarUtils.parseOctal(buffer,0, buffer.length);
        assertEquals(MAX_OCTAL, value);
        buffer[buffer.length-1]=0;
        value = TarUtils.parseOctal(buffer,0, buffer.length);
        assertEquals(MAX_OCTAL, value);
        buffer=new byte[]{0,0};
        value = TarUtils.parseOctal(buffer,0, buffer.length);
        assertEquals(0, value);
        buffer=new byte[]{0,' '};
        value = TarUtils.parseOctal(buffer,0, buffer.length);
        assertEquals(0, value);
    }",java.lang.IllegalArgumentException: Invalid byte 55 at offset 11 in '777777777777' len=12
Compress_25,/222043010/omniapr/defects4j/Compress_25_buggy/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,testReadingOfFirstStoredEntry,"    public void testReadingOfFirstStoredEntry() throws Exception {
        ZipArchiveInputStream in = new ZipArchiveInputStream(new FileInputStream(getFile(""COMPRESS-264.zip"")));
        
        try {
            ZipArchiveEntry ze = in.getNextZipEntry();
            assertEquals(5, ze.getSize());
            assertArrayEquals(new byte[] {'d', 'a', 't', 'a', '\n'},
                              IOUtils.toByteArray(in));
        } finally {
            in.close();
        }
    }",junit.framework.AssertionFailedError: arrays first differed at element [0]; expected:<100> but was:<0>
Compress_26,/222043010/omniapr/defects4j/Compress_26_buggy/src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,skipUsingRead,"    public void skipUsingRead() throws Exception {
        skip(new StreamWrapper() {
                public InputStream wrap(InputStream toWrap) {
                    return new FilterInputStream(toWrap) {
                        public long skip(long s) {
                            return 0;
                        }
                    };
                }
            });
    }",junit.framework.AssertionFailedError: expected:<10> but was:<0>
Compress_26,/222043010/omniapr/defects4j/Compress_26_buggy/src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java,skipUsingSkipAndRead,"    public void skipUsingSkipAndRead() throws Exception {
        skip(new StreamWrapper() {
                public InputStream wrap(final InputStream toWrap) {
                    return new FilterInputStream(toWrap) {
                        boolean skipped;
                        public long skip(long s) throws IOException {
                            if (!skipped) {
                                toWrap.skip(5);
                                skipped = true;
                                return 5;
                            }
                            return 0;
                        }
                    };
                }
            });
    }",junit.framework.AssertionFailedError: expected:<10> but was:<0>
Compress_27,/222043010/omniapr/defects4j/Compress_27_buggy/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,testParseOctal,"    public void testParseOctal() throws Exception{
        long value; 
        byte [] buffer;
        final long MAX_OCTAL  = 077777777777L; // Allowed 11 digits
        final long MAX_OCTAL_OVERFLOW  = 0777777777777L; // in fact 12 for some implementations
        final String maxOctal = ""777777777777""; // Maximum valid octal
        buffer = maxOctal.getBytes(CharsetNames.UTF_8);
        value = TarUtils.parseOctal(buffer,0, buffer.length);
        assertEquals(MAX_OCTAL_OVERFLOW, value);
        buffer[buffer.length - 1] = ' ';
        value = TarUtils.parseOctal(buffer,0, buffer.length);
        assertEquals(MAX_OCTAL, value);
        buffer[buffer.length-1]=0;
        value = TarUtils.parseOctal(buffer,0, buffer.length);
        assertEquals(MAX_OCTAL, value);
        buffer=new byte[]{0,0};
        value = TarUtils.parseOctal(buffer,0, buffer.length);
        assertEquals(0, value);
        buffer=new byte[]{0,' '};
        value = TarUtils.parseOctal(buffer,0, buffer.length);
        assertEquals(0, value);
        buffer=new byte[]{' ',0};
        value = TarUtils.parseOctal(buffer,0, buffer.length);
        assertEquals(0, value);
    }",java.lang.IllegalArgumentException: Invalid byte 32 at offset 1 in ' {NUL}' len=2
Compress_28,/222043010/omniapr/defects4j/Compress_28_buggy/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,shouldThrowAnExceptionOnTruncatedEntries,"    public void shouldThrowAnExceptionOnTruncatedEntries() throws Exception {
        File dir = mkdir(""COMPRESS-279"");
        TarArchiveInputStream is = getTestStream(""/COMPRESS-279.tar"");
        FileOutputStream out = null;
        try {
            TarArchiveEntry entry = is.getNextTarEntry();
            int count = 0;
            while (entry != null) {
                out = new FileOutputStream(new File(dir, String.valueOf(count)));
                IOUtils.copy(is, out);
                out.close();
                out = null;
                count++;
                entry = is.getNextTarEntry();
            }
        } finally {
            is.close();
            if (out != null) {
                out.close();
            }
        }
    }",junit.framework.AssertionFailedError: Expected exception: java.io.IOException
Compress_29,/222043010/omniapr/defects4j/Compress_29_buggy/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,testEncodingInputStream,"    public void testEncodingInputStream() throws Exception {
        int failed = 0;
        for(int i = 1; i <= TESTS.length; i++) {
            TestData test = TESTS[i-1];
            ArchiveInputStream ais = getInputStreamFor(test.type, test.testFile, test.fac);
            final String field = getField(ais,test.fieldName);
            if (!eq(test.expectedEncoding,field)) {
                System.out.println(""Failed test "" + i + "". expected: "" + test.expectedEncoding + "" actual: "" + field + "" type: "" + test.type);
                failed++;
            }
        }
        if (failed > 0) {
            fail(""Tests failed: "" + failed);
        }
    }",junit.framework.AssertionFailedError: Tests failed: 20
Compress_29,/222043010/omniapr/defects4j/Compress_29_buggy/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,testEncodingInputStreamAutodetect,"    public void testEncodingInputStreamAutodetect() throws Exception {
        int failed = 0;
        for(int i = 1; i <= TESTS.length; i++) {
            TestData test = TESTS[i-1];
            ArchiveInputStream ais = getInputStreamFor(test.testFile, test.fac);
            final String field = getField(ais,test.fieldName);
            if (!eq(test.expectedEncoding,field)) {
                System.out.println(""Failed test "" + i + "". expected: "" + test.expectedEncoding + "" actual: "" + field + "" type: "" + test.type);
                failed++;
            }
        }
        if (failed > 0) {
            fail(""Tests failed: "" + failed);
        }
    }",junit.framework.AssertionFailedError: Tests failed: 20
Compress_29,/222043010/omniapr/defects4j/Compress_29_buggy/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java,testEncodingOutputStream,"    public void testEncodingOutputStream() throws Exception {
        int failed = 0;
        for(int i = 1; i <= TESTS.length; i++) {
            TestData test = TESTS[i-1];
            if (test.hasOutputStream) {
                ArchiveOutputStream ais = getOutputStreamFor(test.type, test.fac);
                final String field = getField(ais, test.fieldName);
                if (!eq(test.expectedEncoding, field)) {
                    System.out.println(""Failed test "" + i + "". expected: "" + test.expectedEncoding + "" actual: "" + field + "" type: "" + test.type);
                    failed++;
                }
            }
        }
        if (failed > 0) {
            fail(""Tests failed: "" + failed);
        }
    }",junit.framework.AssertionFailedError: Tests failed: 20
Compress_30,/222043010/omniapr/defects4j/Compress_30_buggy/src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java,readOfLength0ShouldReturn0,"    public void readOfLength0ShouldReturn0() throws Exception {
        // Create a big random piece of data
        byte[] rawData = new byte[1048576];
        for (int i=0; i < rawData.length; ++i) {
            rawData[i] = (byte) Math.floor(Math.random()*256);
        }

        // Compress it
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        BZip2CompressorOutputStream bzipOut = new BZip2CompressorOutputStream(baos);
        bzipOut.write(rawData);
        bzipOut.flush();
        bzipOut.close();
        baos.flush();
        baos.close();

        // Try to read it back in
        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
        BZip2CompressorInputStream bzipIn = new BZip2CompressorInputStream(bais);
        byte[] buffer = new byte[1024];
        Assert.assertEquals(1024, bzipIn.read(buffer, 0, 1024));
        Assert.assertEquals(0, bzipIn.read(buffer, 1024, 0));
        Assert.assertEquals(1024, bzipIn.read(buffer, 0, 1024));
        bzipIn.close();
    }",junit.framework.AssertionFailedError: expected:<0> but was:<-1>
Compress_31,/222043010/omniapr/defects4j/Compress_31_buggy/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java,testCOMPRESS178,"    public void testCOMPRESS178() throws Exception {
        final File input = getFile(""COMPRESS-178.tar"");
        final InputStream is = new FileInputStream(input);
        final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(""tar"", is);
        try {
            in.getNextEntry();
            fail(""Expected IOException"");
        } catch (IOException e) {
            Throwable t = e.getCause();
            assertTrue(""Expected cause = IllegalArgumentException"", t instanceof IllegalArgumentException);
        }
        in.close();
    }",junit.framework.AssertionFailedError: Expected IOException
Compress_31,/222043010/omniapr/defects4j/Compress_31_buggy/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,testParseOctalInvalid,"    public void testParseOctalInvalid() throws Exception{
        byte [] buffer;
        buffer=new byte[0]; // empty byte array
        try {
            TarUtils.parseOctal(buffer,0, buffer.length);
            fail(""Expected IllegalArgumentException - should be at least 2 bytes long"");
        } catch (IllegalArgumentException expected) {
        }
        buffer=new byte[]{0}; // 1-byte array
        try {
            TarUtils.parseOctal(buffer,0, buffer.length);
            fail(""Expected IllegalArgumentException - should be at least 2 bytes long"");
        } catch (IllegalArgumentException expected) {
        }
        buffer = ""abcdef "".getBytes(CharsetNames.UTF_8); // Invalid input
        try {
            TarUtils.parseOctal(buffer,0, buffer.length);
            fail(""Expected IllegalArgumentException"");
        } catch (IllegalArgumentException expected) {
        }
        buffer = "" 0 07 "".getBytes(CharsetNames.UTF_8); // Invalid - embedded space
        try {
            TarUtils.parseOctal(buffer,0, buffer.length);
            fail(""Expected IllegalArgumentException - embedded space"");
        } catch (IllegalArgumentException expected) {
        }
        buffer = "" 0\00007 "".getBytes(CharsetNames.UTF_8); // Invalid - embedded NUL
        try {
            TarUtils.parseOctal(buffer,0, buffer.length);
            fail(""Expected IllegalArgumentException - embedded NUL"");
        } catch (IllegalArgumentException expected) {
        }
    }",junit.framework.AssertionFailedError: Expected IllegalArgumentException - embedded NUL
Compress_32,/222043010/omniapr/defects4j/Compress_32_buggy/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,shouldReadBigGid,"    public void shouldReadBigGid() throws Exception {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);
        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);
        TarArchiveEntry t = new TarArchiveEntry(""name"");
        t.setGroupId(4294967294l);
        t.setSize(1);
        tos.putArchiveEntry(t);
        tos.write(30);
        tos.closeArchiveEntry();
        tos.close();
        byte[] data = bos.toByteArray();
        ByteArrayInputStream bis = new ByteArrayInputStream(data);
        TarArchiveInputStream tis =
            new TarArchiveInputStream(bis);
        t = tis.getNextTarEntry();
        assertEquals(4294967294l, t.getLongGroupId());
        tis.close();
    }","java.lang.NumberFormatException: For input string: ""4294967294"""
Compress_33,/222043010/omniapr/defects4j/Compress_33_buggy/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java,testDetection,"    public void testDetection() throws Exception {
        CompressorInputStream bzip2 = getStreamFor(""bla.txt.bz2""); 
        assertNotNull(bzip2);
        assertTrue(bzip2 instanceof BZip2CompressorInputStream);

        CompressorInputStream gzip = getStreamFor(""bla.tgz"");
        assertNotNull(gzip);
        assertTrue(gzip instanceof GzipCompressorInputStream);
        
        CompressorInputStream pack200 = getStreamFor(""bla.pack"");
        assertNotNull(pack200);
        assertTrue(pack200 instanceof Pack200CompressorInputStream);

        CompressorInputStream xz = getStreamFor(""bla.tar.xz"");
        assertNotNull(xz);
        assertTrue(xz instanceof XZCompressorInputStream);

        CompressorInputStream zlib = getStreamFor(""bla.tar.deflatez"");
        assertNotNull(zlib);
        assertTrue(zlib instanceof DeflateCompressorInputStream);

        try {
            factory.createCompressorInputStream(new ByteArrayInputStream(new byte[0]));
            fail(""No exception thrown for an empty input stream"");
        } catch (CompressorException e) {
            // expected
        }
    }",org.apache.commons.compress.compressors.CompressorException: No Compressor found for the stream signature.
Compress_34,/222043010/omniapr/defects4j/Compress_34_buggy/src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java,testParseReparse,"    public void testParseReparse() throws ZipException {

        // Version=1, Len=0, Len=0.
        final byte[] ZERO_LEN = {1, 0, 0};

        // Version=1, Len=1, zero, Len=1, zero.
        final byte[] ZERO_UID_GID = {1, 1, 0, 1, 0};

        // Version=1, Len=1, one, Len=1, one
        final byte[] ONE_UID_GID = {1, 1, 1, 1, 1};

        // Version=1, Len=2, one thousand, Len=2, one thousand
        final byte[] ONE_THOUSAND_UID_GID = {1, 2, -24, 3, 2, -24, 3};

        // (2^32 - 2).   I guess they avoid (2^32 - 1) since it's identical to -1 in
        // two's complement, and -1 often has a special meaning.
        final byte[] UNIX_MAX_UID_GID = {1, 4, -2, -1, -1, -1, 4, -2, -1, -1, -1};

        // Version=1, Len=5, 2^32, Len=5, 2^32 + 1
        // Esoteric test:  can we handle 40 bit numbers?
        final byte[] LENGTH_5 = {1, 5, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 1};

        // Version=1, Len=8, 2^63 - 2, Len=8, 2^63 - 1
        // Esoteric test:  can we handle 64 bit numbers?
        final byte[] LENGTH_8 = {1, 8, -2, -1, -1, -1, -1, -1, -1, 127, 8, -1, -1, -1, -1, -1, -1, -1, 127};

        final long TWO_TO_32 = 0x100000000L;
        final long MAX = TWO_TO_32 - 2;

        parseReparse(0, 0, ZERO_LEN, 0, 0);
        parseReparse(0, 0, ZERO_UID_GID, 0, 0);
        parseReparse(1, 1, ONE_UID_GID, 1, 1);
        parseReparse(1000, 1000, ONE_THOUSAND_UID_GID, 1000, 1000);
        parseReparse(MAX, MAX, UNIX_MAX_UID_GID, MAX, MAX);
        parseReparse(-2, -2, UNIX_MAX_UID_GID, MAX, MAX);
        parseReparse(TWO_TO_32, TWO_TO_32 + 1, LENGTH_5, TWO_TO_32, TWO_TO_32 + 1);
        parseReparse(Long.MAX_VALUE - 1, Long.MAX_VALUE, LENGTH_8, Long.MAX_VALUE - 1, Long.MAX_VALUE);

        // We never emit this, but we should be able to parse it:
        final byte[] SPURIOUS_ZEROES_1 = {1, 4, -1, 0, 0, 0, 4, -128, 0, 0, 0};
        final byte[] EXPECTED_1 = {1, 1, -1, 1, -128};
        xf.parseFromLocalFileData(SPURIOUS_ZEROES_1, 0, SPURIOUS_ZEROES_1.length);

        assertEquals(255, xf.getUID());
        assertEquals(128, xf.getGID());
        assertTrue(Arrays.equals(EXPECTED_1, xf.getLocalFileDataData()));

        final byte[] SPURIOUS_ZEROES_2 = {1, 4, -1, -1, 0, 0, 4, 1, 2, 0, 0};
        final byte[] EXPECTED_2 = {1, 2, -1, -1, 2, 1, 2};
        xf.parseFromLocalFileData(SPURIOUS_ZEROES_2, 0, SPURIOUS_ZEROES_2.length);

        assertEquals(65535, xf.getUID());
        assertEquals(513, xf.getGID());
        assertTrue(Arrays.equals(EXPECTED_2, xf.getLocalFileDataData()));
    }",junit.framework.AssertionFailedError: expected:<0> but was:<5>
Compress_35,/222043010/omniapr/defects4j/Compress_35_buggy/src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java,testCOMPRESS335,"    public void testCOMPRESS335() throws Exception {
        final ArchiveInputStream tar = getStreamFor(""COMPRESS-335.tar"");
        assertNotNull(tar);
        assertTrue(tar instanceof TarArchiveInputStream);
    }",org.apache.commons.compress.archivers.ArchiveException: No Archiver found for the stream signature
Compress_36,/222043010/omniapr/defects4j/Compress_36_buggy/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java,readEntriesOfSize0,"    public void readEntriesOfSize0() throws IOException {
        final SevenZFile sevenZFile = new SevenZFile(getFile(""COMPRESS-348.7z""));
        try {
            int entries = 0;
            SevenZArchiveEntry entry = sevenZFile.getNextEntry();
            while (entry != null) {
                entries++;
                int b = sevenZFile.read();
                if (""2.txt"".equals(entry.getName()) || ""5.txt"".equals(entry.getName())) {
                    assertEquals(-1, b);
                } else {
                    assertNotEquals(-1, b);
                }
                entry = sevenZFile.getNextEntry();
            }
            assertEquals(5, entries);
        } finally {
            sevenZFile.close();
        }
    }",java.lang.IllegalStateException: No current 7z entry (call getNextEntry() first).
Compress_37,/222043010/omniapr/defects4j/Compress_37_buggy/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,survivesBlankLinesInPaxHeader,"    public void survivesBlankLinesInPaxHeader() throws Exception {
        final TarArchiveInputStream is = getTestStream(""/COMPRESS-355.tar"");
        try {
            final TarArchiveEntry entry = is.getNextTarEntry();
            assertEquals(""package/package.json"", entry.getName());
            assertNull(is.getNextTarEntry());
        } finally {
            is.close();
        }
    }",java.lang.NegativeArraySizeException
Compress_38,/222043010/omniapr/defects4j/Compress_38_buggy/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java,survivesPaxHeaderWithNameEndingInSlash,"    public void survivesPaxHeaderWithNameEndingInSlash() throws Exception {
        final TarArchiveInputStream is = getTestStream(""/COMPRESS-356.tar"");
        try {
            final TarArchiveEntry entry = is.getNextTarEntry();
            assertEquals(""package/package.json"", entry.getName());
            assertNull(is.getNextTarEntry());
        } finally {
            is.close();
        }
    }",java.io.IOException: Error detected parsing the header
Compress_39,/222043010/omniapr/defects4j/Compress_39_buggy/src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java,sanitizeShortensString,"    public void sanitizeShortensString() {
        String input = ""012345678901234567890123456789012345678901234567890123456789""
            + ""012345678901234567890123456789012345678901234567890123456789""
            + ""012345678901234567890123456789012345678901234567890123456789""
            + ""012345678901234567890123456789012345678901234567890123456789""
            + ""012345678901234567890123456789012345678901234567890123456789"";
        String expected = ""012345678901234567890123456789012345678901234567890123456789""
            + ""012345678901234567890123456789012345678901234567890123456789""
            + ""012345678901234567890123456789012345678901234567890123456789""
            + ""012345678901234567890123456789012345678901234567890123456789""
            + ""012345678901..."";
        assertEquals(expected, ArchiveUtils.sanitize(input));
    }",junit.framework.AssertionFailedError: expected:<...23456789012345678901[...]> but was:<...23456789012345678901[234567890123456789012345678901234567890123456789]>
Compress_40,/222043010/omniapr/defects4j/Compress_40_buggy/src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,littleEndianWithOverflow,"    public void littleEndianWithOverflow() throws Exception {
        ByteArrayInputStream in = new ByteArrayInputStream(new byte[] {
                87, // 01010111
                45, // 00101101
                66, // 01000010
                15, // 00001111
                90, // 01011010
                29, // 00011101
                88, // 01011000
                61, // 00111101
                33, // 00100001
                74  // 01001010
            });
        BitInputStream bin = new BitInputStream(in, ByteOrder.LITTLE_ENDIAN);
        assertEquals(23, // 10111
                     bin.readBits(5));
        assertEquals(714595605644185962l, // 0001-00111101-01011000-00011101-01011010-00001111-01000010-00101101-010
                     bin.readBits(63));
        assertEquals(1186, // 01001010-0010
                     bin.readBits(12));
        assertEquals(-1 , bin.readBits(1));
    }",junit.framework.AssertionFailedError: expected:<1186> but was:<1184>
Compress_40,/222043010/omniapr/defects4j/Compress_40_buggy/src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java,bigEndianWithOverflow,"    public void bigEndianWithOverflow() throws Exception {
        ByteArrayInputStream in = new ByteArrayInputStream(new byte[] {
                87, // 01010111
                45, // 00101101
                66, // 01000010
                15, // 00001111
                90, // 01011010
                29, // 00011101
                88, // 01011000
                61, // 00111101
                33, // 00100001
                74  // 01001010
            });
        BitInputStream bin = new BitInputStream(in, ByteOrder.BIG_ENDIAN);
        assertEquals(10, // 01010
                     bin.readBits(5));
        assertEquals(8274274654740644818l, //111-00101101-01000010-00001111-01011010-00011101-01011000-00111101-0010
                     bin.readBits(63));
        assertEquals(330, // 0001-01001010
                     bin.readBits(12));
        assertEquals(-1 , bin.readBits(1));
    }",junit.framework.AssertionFailedError: expected:<1186> but was:<1184>
Compress_41,/222043010/omniapr/defects4j/Compress_41_buggy/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java,testListAllFilesWithNestedArchive,"    public void testListAllFilesWithNestedArchive() throws Exception {
        final File input = getFile(""OSX_ArchiveWithNestedArchive.zip"");

        final List<String> results = new ArrayList<>();
        final List<ZipException> expectedExceptions = new ArrayList<>();

        final InputStream is = new FileInputStream(input);
        ArchiveInputStream in = null;
        try {
            in = new ArchiveStreamFactory().createArchiveInputStream(""zip"", is);

            ZipArchiveEntry entry = null;
            while ((entry = (ZipArchiveEntry) in.getNextEntry()) != null) {
                results.add(entry.getName());

                final ArchiveInputStream nestedIn = new ArchiveStreamFactory().createArchiveInputStream(""zip"", in);
                try {
                    ZipArchiveEntry nestedEntry = null;
                    while ((nestedEntry = (ZipArchiveEntry) nestedIn.getNextEntry()) != null) {
                        results.add(nestedEntry.getName());
                    }
                } catch (ZipException ex) {
                    // expected since you cannot create a final ArchiveInputStream from test3.xml
                    expectedExceptions.add(ex);
                }
                // nested stream must not be closed here
            }
        } finally {
            if (in != null) {
                in.close();
            }
        }
        is.close();

        assertTrue(results.contains(""NestedArchiv.zip""));
        assertTrue(results.contains(""test1.xml""));
        assertTrue(results.contains(""test2.xml""));
        assertTrue(results.contains(""test3.xml""));
        assertEquals(1, expectedExceptions.size());
    }",junit.framework.AssertionFailedError: expected:<1> but was:<0>
Compress_41,/222043010/omniapr/defects4j/Compress_41_buggy/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,testThrowOnInvalidEntry,"    public void testThrowOnInvalidEntry() throws Exception {
        final InputStream is = ZipArchiveInputStreamTest.class
                .getResourceAsStream(""/invalid-zip.zip"");
        final ZipArchiveInputStream zip = new ZipArchiveInputStream(is);

        try {
            zip.getNextZipEntry();
            fail(""IOException expected"");
        } catch (ZipException expected) {
            assertTrue(expected.getMessage().contains(""Unexpected record signature""));
        } finally {
            zip.close();
        }
    }",junit.framework.AssertionFailedError: IOException expected
Compress_42,/222043010/omniapr/defects4j/Compress_42_buggy/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java,isUnixSymlinkIsFalseIfMoreThanOneFlagIsSet,"    public void isUnixSymlinkIsFalseIfMoreThanOneFlagIsSet() throws Exception {
        try (ZipFile zf = new ZipFile(getFile(""COMPRESS-379.jar""))) {
            ZipArchiveEntry ze = zf.getEntry(""META-INF/maven/"");
            assertFalse(ze.isUnixSymlink());
        }
    }",junit.framework.AssertionFailedError
Compress_43,/222043010/omniapr/defects4j/Compress_43_buggy/src/test/java/org/apache/commons/compress/archivers/zip/DataDescriptorTest.java,doesntWriteDataDescriptorWhenAddingRawEntries,"    public void doesntWriteDataDescriptorWhenAddingRawEntries() throws IOException {
        ByteArrayOutputStream init = new ByteArrayOutputStream();
        try (ZipArchiveOutputStream zos = new ZipArchiveOutputStream(init)) {
            zos.putArchiveEntry(new ZipArchiveEntry(""test1.txt""));
            zos.write(""foo"".getBytes(""UTF-8""));
            zos.closeArchiveEntry();
        }

        File f = new File(dir, ""test.zip"");
        try (FileOutputStream fos = new FileOutputStream(f)) {
            fos.write(init.toByteArray());
        }

        ByteArrayOutputStream o = new ByteArrayOutputStream();
        ZipArchiveEntry zae;
        try (ZipFile zf = new ZipFile(f);
             ZipArchiveOutputStream zos = new ZipArchiveOutputStream(o)) {
            zae = zf.getEntry(""test1.txt"");
            zos.addRawArchiveEntry(zae, zf.getRawInputStream(zae));
        }

        byte[] data = o.toByteArray();
        byte[] versionInLFH = Arrays.copyOfRange(data, 4, 6);
        // still 2.0 because of Deflate
        assertArrayEquals(new byte[] { 20, 0 }, versionInLFH);
        byte[] gpbInLFH = Arrays.copyOfRange(data, 6, 8);
        // no DD but EFS flag
        assertArrayEquals(new byte[] { 0, 8 }, gpbInLFH);

        int cdhStart = findCentralDirectory(data);
        byte[] versionInCDH = Arrays.copyOfRange(data, cdhStart + 6, cdhStart + 8);
        assertArrayEquals(new byte[] { 20, 0 }, versionInCDH);
        byte[] gpbInCDH = Arrays.copyOfRange(data, cdhStart + 8, cdhStart + 10);
        assertArrayEquals(new byte[] { 0, 8 }, gpbInCDH);

        int ddStart = cdhStart - 16;
        assertNotEquals(ZipLong.DD_SIG, new ZipLong(data, ddStart));
        long crcFromLFH = ZipLong.getValue(data, 14);
        long cSizeFromLFH = ZipLong.getValue(data, 18);
        long sizeFromLFH = ZipLong.getValue(data, 22);
        assertEquals(3, sizeFromLFH);

        long crcFromCDH = ZipLong.getValue(data, cdhStart + 16);
        assertEquals(crcFromLFH, crcFromCDH);
        long cSizeFromCDH = ZipLong.getValue(data, cdhStart + 20);
        assertEquals(cSizeFromLFH, cSizeFromCDH);
        long sizeFromCDH = ZipLong.getValue(data, cdhStart + 24);
        assertEquals(sizeFromLFH, sizeFromCDH);
    }",junit.framework.AssertionFailedError: arrays first differed at element [0]; expected:<0> but was:<8>
Compress_44,/222043010/omniapr/defects4j/Compress_44_buggy/src/test/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStreamTest.java,testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionOne,"    public void testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionOne() {

        ChecksumCalculatingInputStream checksumCalculatingInputStream = new ChecksumCalculatingInputStream(null,null);


    }",junit.framework.AssertionFailedError: Expected exception: java.lang.NullPointerException
Compress_44,/222043010/omniapr/defects4j/Compress_44_buggy/src/test/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStreamTest.java,testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionTwo,"    public void testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionTwo() {

        ChecksumCalculatingInputStream checksumCalculatingInputStream = new ChecksumCalculatingInputStream(null,new ByteArrayInputStream(new byte[1]));


    }",junit.framework.AssertionFailedError: Expected exception: java.lang.NullPointerException
Compress_44,/222043010/omniapr/defects4j/Compress_44_buggy/src/test/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStreamTest.java,testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionThree,"    public void testClassInstantiationWithParameterBeingNullThrowsNullPointerExceptionThree() {

        ChecksumCalculatingInputStream checksumCalculatingInputStream = new ChecksumCalculatingInputStream(new CRC32(),null);

    }",junit.framework.AssertionFailedError: Expected exception: java.lang.NullPointerException
Compress_45,/222043010/omniapr/defects4j/Compress_45_buggy/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java,testRoundTripOctalOrBinary8,"    public void testRoundTripOctalOrBinary8() {
        testRoundTripOctalOrBinary(8);
    }",java.lang.IllegalArgumentException: Value -72057594037927935 is too large for 8 byte field.
Compress_46,/222043010/omniapr/defects4j/Compress_46_buggy/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java,testGettersSetters,"    public void testGettersSetters() {
        // X5455 is concerned with time, so let's
        // get a timestamp to play with (Jan 1st, 2000).
        final Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(""UTC""));
        cal.set(Calendar.YEAR, 2000);
        cal.set(Calendar.MONTH, Calendar.JANUARY);
        cal.set(Calendar.DATE, 1);
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        cal.set(Calendar.MILLISECOND, 0);
        final long timeMillis = cal.getTimeInMillis();
        final ZipLong time = new ZipLong(timeMillis / 1000);

        // set too big
        try {
            // Java time is 1000 x larger (milliseconds).
            xf.setModifyJavaTime(new Date(1000L * (MAX_TIME_SECONDS.getValue() + 1L)));
            fail(""Time too big for 32 bits!"");
        } catch (final IllegalArgumentException iae) {
            // All is good.
        }

        // get/set modify time
        xf.setModifyTime(time);
        assertEquals(time, xf.getModifyTime());
        Date xfModifyJavaTime = xf.getModifyJavaTime();
        assertEquals(timeMillis, xfModifyJavaTime.getTime());
        xf.setModifyJavaTime(new Date(timeMillis));
        assertEquals(time, xf.getModifyTime());
        assertEquals(timeMillis, xf.getModifyJavaTime().getTime());
        // Make sure milliseconds get zeroed out:
        xf.setModifyJavaTime(new Date(timeMillis + 123));
        assertEquals(time, xf.getModifyTime());
        assertEquals(timeMillis, xf.getModifyJavaTime().getTime());
        // Null
        xf.setModifyTime(null);
        assertNull(xf.getModifyJavaTime());
        xf.setModifyJavaTime(null);
        assertNull(xf.getModifyTime());

        // get/set access time
        xf.setAccessTime(time);
        assertEquals(time, xf.getAccessTime());
        assertEquals(timeMillis, xf.getAccessJavaTime().getTime());
        xf.setAccessJavaTime(new Date(timeMillis));
        assertEquals(time, xf.getAccessTime());
        assertEquals(timeMillis, xf.getAccessJavaTime().getTime());
        // Make sure milliseconds get zeroed out:
        xf.setAccessJavaTime(new Date(timeMillis + 123));
        assertEquals(time, xf.getAccessTime());
        assertEquals(timeMillis, xf.getAccessJavaTime().getTime());
        // Null
        xf.setAccessTime(null);
        assertNull(xf.getAccessJavaTime());
        xf.setAccessJavaTime(null);
        assertNull(xf.getAccessTime());

        // get/set create time
        xf.setCreateTime(time);
        assertEquals(time, xf.getCreateTime());
        assertEquals(timeMillis, xf.getCreateJavaTime().getTime());
        xf.setCreateJavaTime(new Date(timeMillis));
        assertEquals(time, xf.getCreateTime());
        assertEquals(timeMillis, xf.getCreateJavaTime().getTime());
        // Make sure milliseconds get zeroed out:
        xf.setCreateJavaTime(new Date(timeMillis + 123));
        assertEquals(time, xf.getCreateTime());
        assertEquals(timeMillis, xf.getCreateJavaTime().getTime());
        // Null
        xf.setCreateTime(null);
        assertNull(xf.getCreateJavaTime());
        xf.setCreateJavaTime(null);
        assertNull(xf.getCreateTime());


        // initialize for flags
        xf.setModifyTime(time);
        xf.setAccessTime(time);
        xf.setCreateTime(time);

        // get/set flags: 000
        xf.setFlags((byte) 0);
        assertEquals(0, xf.getFlags());
        assertFalse(xf.isBit0_modifyTimePresent());
        assertFalse(xf.isBit1_accessTimePresent());
        assertFalse(xf.isBit2_createTimePresent());
        // Local length=1, Central length=1 (flags only!)
        assertEquals(1, xf.getLocalFileDataLength().getValue());
        assertEquals(1, xf.getCentralDirectoryLength().getValue());

        // get/set flags: 001
        xf.setFlags((byte) 1);
        assertEquals(1, xf.getFlags());
        assertTrue(xf.isBit0_modifyTimePresent());
        assertFalse(xf.isBit1_accessTimePresent());
        assertFalse(xf.isBit2_createTimePresent());
        // Local length=5, Central length=5 (flags + mod)
        assertEquals(5, xf.getLocalFileDataLength().getValue());
        assertEquals(5, xf.getCentralDirectoryLength().getValue());

        // get/set flags: 010
        xf.setFlags((byte) 2);
        assertEquals(2, xf.getFlags());
        assertFalse(xf.isBit0_modifyTimePresent());
        assertTrue(xf.isBit1_accessTimePresent());
        assertFalse(xf.isBit2_createTimePresent());
        // Local length=5, Central length=1
        assertEquals(5, xf.getLocalFileDataLength().getValue());
        assertEquals(1, xf.getCentralDirectoryLength().getValue());

        // get/set flags: 100
        xf.setFlags((byte) 4);
        assertEquals(4, xf.getFlags());
        assertFalse(xf.isBit0_modifyTimePresent());
        assertFalse(xf.isBit1_accessTimePresent());
        assertTrue(xf.isBit2_createTimePresent());
        // Local length=5, Central length=1
        assertEquals(5, xf.getLocalFileDataLength().getValue());
        assertEquals(1, xf.getCentralDirectoryLength().getValue());

        // get/set flags: 111
        xf.setFlags((byte) 7);
        assertEquals(7, xf.getFlags());
        assertTrue(xf.isBit0_modifyTimePresent());
        assertTrue(xf.isBit1_accessTimePresent());
        assertTrue(xf.isBit2_createTimePresent());
        // Local length=13, Central length=5
        assertEquals(13, xf.getLocalFileDataLength().getValue());
        assertEquals(5, xf.getCentralDirectoryLength().getValue());

        // get/set flags: 11111111
        xf.setFlags((byte) -1);
        assertEquals(-1, xf.getFlags());
        assertTrue(xf.isBit0_modifyTimePresent());
        assertTrue(xf.isBit1_accessTimePresent());
        assertTrue(xf.isBit2_createTimePresent());
        // Local length=13, Central length=5
        assertEquals(13, xf.getLocalFileDataLength().getValue());
        assertEquals(5, xf.getCentralDirectoryLength().getValue());
    }",junit.framework.AssertionFailedError: Time too big for 32 bits!
Compress_47,/222043010/omniapr/defects4j/Compress_47_buggy/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java,properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown,"    public void properlyMarksEntriesAsUnreadableIfUncompressedSizeIsUnknown() throws Exception {
        // we never read any data
        try (ZipArchiveInputStream zis = new ZipArchiveInputStream(new ByteArrayInputStream(new byte[0]))) {
            ZipArchiveEntry e = new ZipArchiveEntry(""test"");
            e.setMethod(ZipMethod.DEFLATED.getCode());
            assertTrue(zis.canReadEntryData(e));
            e.setMethod(ZipMethod.ENHANCED_DEFLATED.getCode());
            assertTrue(zis.canReadEntryData(e));
            e.setMethod(ZipMethod.BZIP2.getCode());
            assertFalse(zis.canReadEntryData(e));
        }
    }",junit.framework.AssertionFailedError
Collections_26,/222043010/omniapr/defects4j/Collections_26_buggy/src/test/java/org/apache/commons/collections4/keyvalue/MultiKeyTest.java,testEqualsAfterSerializationOfDerivedClass,"    public void testEqualsAfterSerializationOfDerivedClass() throws IOException, ClassNotFoundException
    {
        final DerivedMultiKey<?> mk = new DerivedMultiKey<String>(""A"", ""B"");

        // serialize
        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
        final ObjectOutputStream out = new ObjectOutputStream(baos);
        out.writeObject(mk);
        out.close();

        // deserialize
        final ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
        final ObjectInputStream in = new ObjectInputStream(bais);
        final DerivedMultiKey<?> mk2 = (DerivedMultiKey<?>)in.readObject();
        in.close();

        assertEquals(mk.hashCode(), mk2.hashCode());
    }",junit.framework.AssertionFailedError: expected:<3> but was:<0>
Collections_27,/222043010/omniapr/defects4j/Collections_27_buggy/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java,testUnsafeDeSerialization,"    public void testUnsafeDeSerialization() throws Exception {
        MultiValueMap map1 = MultiValueMap.multiValueMap(new HashMap(), ArrayList.class);
        byte[] bytes = serialize(map1);
        Object result = deserialize(bytes);
        assertEquals(map1, result);
        
        MultiValueMap map2 = MultiValueMap.multiValueMap(new HashMap(), (Class) String.class);
        bytes = serialize(map2);
        try {
            result = deserialize(bytes);
            fail(""unsafe clazz accepted when de-serializing MultiValueMap"");
        } catch (UnsupportedOperationException ex) {
            // expected
        }
    }",junit.framework.AssertionFailedError: unsafe clazz accepted when de-serializing MultiValueMap
Collections_28,/222043010/omniapr/defects4j/Collections_28_buggy/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java,testPrefixMapClear,"    public void testPrefixMapClear() {
        Trie<String, Integer> trie = new PatriciaTrie<Integer>();
        trie.put(""Anna"", 1);
        trie.put(""Anael"", 2);
        trie.put(""Analu"", 3);
        trie.put(""Andreas"", 4);
        trie.put(""Andrea"", 5);
        trie.put(""Andres"", 6);
        trie.put(""Anatole"", 7);
        SortedMap<String, Integer> prefixMap = trie.prefixMap(""And"");
        assertEquals(new HashSet<String>(Arrays.asList(""Andrea"", ""Andreas"", ""Andres"")), prefixMap.keySet());
        assertEquals(Arrays.asList(5, 4, 6), new ArrayList<Integer>(prefixMap.values()));

        prefixMap.clear();
        assertTrue(prefixMap.isEmpty());
        assertTrue(prefixMap.keySet().isEmpty());
        assertTrue(prefixMap.values().isEmpty());
        assertEquals(new HashSet<String>(Arrays.asList(""Anael"", ""Analu"", ""Anatole"", ""Anna"")), trie.keySet());
        assertEquals(Arrays.asList(2, 3, 7, 1), new ArrayList<Integer>(trie.values()));
    }",java.lang.NullPointerException
Time_1,/222043010/omniapr/defects4j/Time_1_buggy/src/test/java/org/joda/time/TestPartial_Constructors.java,testConstructorEx7_TypeArray_intArray,"    public void testConstructorEx7_TypeArray_intArray() throws Throwable {
        int[] values = new int[] {1, 1, 1};
        DateTimeFieldType[] types = new DateTimeFieldType[] {
            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };
        try {
            new Partial(types, values);
            fail();
        } catch (IllegalArgumentException ex) {
            assertMessageContains(ex, ""must be in order"", ""largest-smallest"");
        }
        
        types = new DateTimeFieldType[] {
            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };
        try {
            new Partial(types, values);
            fail();
        } catch (IllegalArgumentException ex) {
            assertMessageContains(ex, ""must be in order"", ""largest-smallest"");
        }
        
        types = new DateTimeFieldType[] {
            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };
        try {
            new Partial(types, values);
            fail();
        } catch (IllegalArgumentException ex) {
            assertMessageContains(ex, ""must be in order"", ""largest-smallest"");
        }
        
        types = new DateTimeFieldType[] {
            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };
        try {
            new Partial(types, values);
            fail();
        } catch (IllegalArgumentException ex) {
            assertMessageContains(ex, ""must be in order"", ""largest-smallest"");
        }
        
        types = new DateTimeFieldType[] {
            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };
        try {
            new Partial(types, values);
            fail();
        } catch (IllegalArgumentException ex) {
            assertMessageContains(ex, ""must be in order"", ""largest-smallest"");
        }
        
        types = new DateTimeFieldType[] {
            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };
        try {
            new Partial(types, values);
            fail();
        } catch (IllegalArgumentException ex) {
            assertMessageContains(ex, ""must be in order"", ""largest-smallest"");
        }
    }",junit.framework.AssertionFailedError
Time_2,/222043010/omniapr/defects4j/Time_2_buggy/src/test/java/org/joda/time/TestPartial_Basics.java,testWith_baseAndArgHaveNoRange,"    public void testWith_baseAndArgHaveNoRange() {
        Partial test = new Partial(DateTimeFieldType.year(), 1);
        Partial result = test.with(DateTimeFieldType.era(), 1);
        assertEquals(2, result.size());
        assertEquals(0, result.indexOf(DateTimeFieldType.era()));
        assertEquals(1, result.indexOf(DateTimeFieldType.year()));
    }",java.lang.IllegalArgumentException: Types array must not contain duplicate: era and year
Time_3,/222043010/omniapr/defects4j/Time_3_buggy/src/test/java/org/joda/time/TestMutableDateTime_Adds.java,testAddYears_int_dstOverlapWinter_addZero,"    public void testAddYears_int_dstOverlapWinter_addZero() {
        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));
        test.addHours(1);
        assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());
        test.addYears(0);
        assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());
    }",junit.framework.ComparisonFailure: expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>
Time_3,/222043010/omniapr/defects4j/Time_3_buggy/src/test/java/org/joda/time/TestMutableDateTime_Adds.java,testAddDays_int_dstOverlapWinter_addZero,"    public void testAddDays_int_dstOverlapWinter_addZero() {
        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));
        test.addHours(1);
        assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());
        test.addDays(0);
        assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());
    }",junit.framework.ComparisonFailure: expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>
Time_3,/222043010/omniapr/defects4j/Time_3_buggy/src/test/java/org/joda/time/TestMutableDateTime_Adds.java,testAddWeeks_int_dstOverlapWinter_addZero,"    public void testAddWeeks_int_dstOverlapWinter_addZero() {
        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));
        test.addHours(1);
        assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());
        test.addWeeks(0);
        assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());
    }",junit.framework.ComparisonFailure: expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>
Time_3,/222043010/omniapr/defects4j/Time_3_buggy/src/test/java/org/joda/time/TestMutableDateTime_Adds.java,testAdd_DurationFieldType_int_dstOverlapWinter_addZero,"    public void testAdd_DurationFieldType_int_dstOverlapWinter_addZero() {
        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));
        test.addHours(1);
        assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());
        test.add(DurationFieldType.years(), 0);
        assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());
    }",junit.framework.ComparisonFailure: expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>
Time_3,/222043010/omniapr/defects4j/Time_3_buggy/src/test/java/org/joda/time/TestMutableDateTime_Adds.java,testAddMonths_int_dstOverlapWinter_addZero,"    public void testAddMonths_int_dstOverlapWinter_addZero() {
        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(""Europe/Berlin""));
        test.addHours(1);
        assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());
        test.addMonths(0);
        assertEquals(""2011-10-30T02:30:00.000+01:00"", test.toString());
    }",junit.framework.ComparisonFailure: expected:<...10-30T02:30:00.000+0[1]:00> but was:<...10-30T02:30:00.000+0[2]:00>
Time_4,/222043010/omniapr/defects4j/Time_4_buggy/src/test/java/org/joda/time/TestPartial_Basics.java,testWith3,"    public void testWith3() {
        Partial test = createHourMinPartial();
        try {
            test.with(DateTimeFieldType.clockhourOfDay(), 6);
            fail();
        } catch (IllegalArgumentException ex) {}
        check(test, 10, 20);
    }",junit.framework.AssertionFailedError
Time_5,/222043010/omniapr/defects4j/Time_5_buggy/src/test/java/org/joda/time/TestPeriod_Basics.java,testNormalizedStandard_periodType_months1,"    public void testNormalizedStandard_periodType_months1() {
        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);
        Period result = test.normalizedStandard(PeriodType.months());
        assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);
        assertEquals(new Period(0, 27, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);
    }",java.lang.UnsupportedOperationException: Field is not supported
Time_5,/222043010/omniapr/defects4j/Time_5_buggy/src/test/java/org/joda/time/TestPeriod_Basics.java,testNormalizedStandard_periodType_months2,"    public void testNormalizedStandard_periodType_months2() {
        Period test = new Period(-2, 15, 0, 0, 0, 0, 0, 0);
        Period result = test.normalizedStandard(PeriodType.months());
        assertEquals(new Period(-2, 15, 0, 0, 0, 0, 0, 0), test);
        assertEquals(new Period(0, -9, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);
    }",java.lang.UnsupportedOperationException: Field is not supported
Time_5,/222043010/omniapr/defects4j/Time_5_buggy/src/test/java/org/joda/time/TestPeriod_Basics.java,testNormalizedStandard_periodType_monthsWeeks,"    public void testNormalizedStandard_periodType_monthsWeeks() {
        PeriodType type = PeriodType.forFields(new DurationFieldType[]{
                        DurationFieldType.months(),
                        DurationFieldType.weeks(),
                        DurationFieldType.days()});
        Period test = new Period(2, 4, 6, 0, 0, 0, 0, 0);
        Period result = test.normalizedStandard(type);
        assertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);
        assertEquals(new Period(0, 28, 6, 0, 0, 0, 0, 0, type), result);
    }",java.lang.UnsupportedOperationException: Field is not supported
Time_6,/222043010/omniapr/defects4j/Time_6_buggy/src/test/java/org/joda/time/chrono/TestGJDate.java,test_cutoverPreZero,"    public void test_cutoverPreZero() {
        DateTime cutover = new LocalDate(-2, 6, 30, ISOChronology.getInstanceUTC()).toDateTimeAtStartOfDay(DateTimeZone.UTC);
        try {
            GJChronology.getInstance(DateTimeZone.UTC, cutover);
            fail();
        } catch (IllegalArgumentException ex) {
            // expected
        }
    }",junit.framework.AssertionFailedError
Time_6,/222043010/omniapr/defects4j/Time_6_buggy/src/test/java/org/joda/time/chrono/TestGJDate.java,test_plusWeekyears_positiveToNegative_crossCutover,"    public void test_plusWeekyears_positiveToNegative_crossCutover() {
        LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);
        LocalDate expected = new LocalDate(-2, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek());
        assertEquals(expected, date.weekyear().addToCopy(-2004));
    }",junit.framework.AssertionFailedError
Time_6,/222043010/omniapr/defects4j/Time_6_buggy/src/test/java/org/joda/time/chrono/TestGJDate.java,test_plusYears_positiveToZero_crossCutover,"    public void test_plusYears_positiveToZero_crossCutover() {
        LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);
        LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY);
        assertEquals(expected, date.plusYears(-2003));
    }",junit.framework.AssertionFailedError
Time_6,/222043010/omniapr/defects4j/Time_6_buggy/src/test/java/org/joda/time/chrono/TestGJDate.java,test_plusYears_positiveToNegative_crossCutover,"    public void test_plusYears_positiveToNegative_crossCutover() {
        LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);
        LocalDate expected = new LocalDate(-2, 6, 30, GJ_CHRONOLOGY);
        assertEquals(expected, date.plusYears(-2004));
    }",junit.framework.AssertionFailedError
Time_6,/222043010/omniapr/defects4j/Time_6_buggy/src/test/java/org/joda/time/chrono/TestGJDate.java,test_plusWeekyears_positiveToZero_crossCutover,"    public void test_plusWeekyears_positiveToZero_crossCutover() {
        LocalDate date = new LocalDate(2003, 6, 30, GJ_CHRONOLOGY);
        LocalDate expected = new LocalDate(-1, 6, 30, GJ_CHRONOLOGY).withWeekOfWeekyear(date.getWeekOfWeekyear()).withDayOfWeek(date.getDayOfWeek());
        assertEquals(expected, date.weekyear().addToCopy(-2003));
    }",junit.framework.AssertionFailedError
Time_7,/222043010/omniapr/defects4j/Time_7_buggy/src/test/java/org/joda/time/format/TestDateTimeFormatter.java,testParseInto_monthDay_feb29_newYork_startOfYear,"    public void testParseInto_monthDay_feb29_newYork_startOfYear() {
        DateTimeFormatter f = DateTimeFormat.forPattern(""M d"").withLocale(Locale.UK);
        MutableDateTime result = new MutableDateTime(2004, 1, 1, 0, 0, 0, 0, NEWYORK);
        assertEquals(4, f.parseInto(result, ""2 29"", 0));
        assertEquals(new MutableDateTime(2004, 2, 29, 0, 0, 0, 0, NEWYORK), result);
    }","org.joda.time.IllegalFieldValueException: Cannot parse ""2 29"": Value 29 for dayOfMonth must be in the range [1,28]"
Time_7,/222043010/omniapr/defects4j/Time_7_buggy/src/test/java/org/joda/time/format/TestDateTimeFormatter.java,testParseInto_monthDay_feb29_tokyo_endOfYear,"    public void testParseInto_monthDay_feb29_tokyo_endOfYear() {
        DateTimeFormatter f = DateTimeFormat.forPattern(""M d"").withLocale(Locale.UK);
        MutableDateTime result = new MutableDateTime(2004, 12, 31, 23, 59, 59, 999, TOKYO);
        assertEquals(4, f.parseInto(result, ""2 29"", 0));
        assertEquals(new MutableDateTime(2004, 2, 29, 23, 59, 59, 999, TOKYO), result);
    }","org.joda.time.IllegalFieldValueException: Cannot parse ""2 29"": Value 29 for dayOfMonth must be in the range [1,28]"
Time_8,/222043010/omniapr/defects4j/Time_8_buggy/src/test/java/org/joda/time/TestDateTimeZone.java,testForOffsetHoursMinutes_int_int,"    public void testForOffsetHoursMinutes_int_int() {
        assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));
        assertEquals(DateTimeZone.forID(""+23:59""), DateTimeZone.forOffsetHoursMinutes(23, 59));
        
        assertEquals(DateTimeZone.forID(""+02:15""), DateTimeZone.forOffsetHoursMinutes(2, 15));
        assertEquals(DateTimeZone.forID(""+02:00""), DateTimeZone.forOffsetHoursMinutes(2, 0));
        try {
            DateTimeZone.forOffsetHoursMinutes(2, -15);
            fail();
        } catch (IllegalArgumentException ex) {}
        
        assertEquals(DateTimeZone.forID(""+00:15""), DateTimeZone.forOffsetHoursMinutes(0, 15));
        assertEquals(DateTimeZone.forID(""+00:00""), DateTimeZone.forOffsetHoursMinutes(0, 0));
        assertEquals(DateTimeZone.forID(""-00:15""), DateTimeZone.forOffsetHoursMinutes(0, -15));
        
        assertEquals(DateTimeZone.forID(""-02:00""), DateTimeZone.forOffsetHoursMinutes(-2, 0));
        assertEquals(DateTimeZone.forID(""-02:15""), DateTimeZone.forOffsetHoursMinutes(-2, -15));
        assertEquals(DateTimeZone.forID(""-02:15""), DateTimeZone.forOffsetHoursMinutes(-2, 15));
        
        assertEquals(DateTimeZone.forID(""-23:59""), DateTimeZone.forOffsetHoursMinutes(-23, 59));
        try {
            DateTimeZone.forOffsetHoursMinutes(2, 60);
            fail();
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, 60);
            fail();
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(24, 0);
            fail();
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-24, 0);
            fail();
        } catch (IllegalArgumentException ex) {}
    }",java.lang.IllegalArgumentException: Minutes out of range: -15
Time_9,/222043010/omniapr/defects4j/Time_9_buggy/src/test/java/org/joda/time/TestDateTimeZone.java,testForOffsetHoursMinutes_int_int,"    public void testForOffsetHoursMinutes_int_int() {
        assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));
        assertEquals(DateTimeZone.forID(""+23:59""), DateTimeZone.forOffsetHoursMinutes(23, 59));
        assertEquals(DateTimeZone.forID(""+03:15""), DateTimeZone.forOffsetHoursMinutes(3, 15));
        assertEquals(DateTimeZone.forID(""-02:00""), DateTimeZone.forOffsetHoursMinutes(-2, 0));
        assertEquals(DateTimeZone.forID(""-02:30""), DateTimeZone.forOffsetHoursMinutes(-2, 30));
        assertEquals(DateTimeZone.forID(""-23:59""), DateTimeZone.forOffsetHoursMinutes(-23, 59));
        try {
            DateTimeZone.forOffsetHoursMinutes(2, 60);
            fail();
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, 60);
            fail();
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(2, -1);
            fail();
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-2, -1);
            fail();
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(24, 0);
            fail();
        } catch (IllegalArgumentException ex) {}
        try {
            DateTimeZone.forOffsetHoursMinutes(-24, 0);
            fail();
        } catch (IllegalArgumentException ex) {}
    }",junit.framework.AssertionFailedError
Time_10,/222043010/omniapr/defects4j/Time_10_buggy/src/test/java/org/joda/time/TestDays.java,testFactory_daysBetween_RPartial_MonthDay,"    public void testFactory_daysBetween_RPartial_MonthDay() {
        MonthDay start1 = new MonthDay(2, 1);
        MonthDay start2 = new MonthDay(2, 28);
        MonthDay end1 = new MonthDay(2, 28);
        MonthDay end2 = new MonthDay(2, 29);
        
        assertEquals(27, Days.daysBetween(start1, end1).getDays());
        assertEquals(28, Days.daysBetween(start1, end2).getDays());
        assertEquals(0, Days.daysBetween(start2, end1).getDays());
        assertEquals(1, Days.daysBetween(start2, end2).getDays());
        
        assertEquals(-27, Days.daysBetween(end1, start1).getDays());
        assertEquals(-28, Days.daysBetween(end2, start1).getDays());
        assertEquals(0, Days.daysBetween(end1, start2).getDays());
        assertEquals(-1, Days.daysBetween(end2, start2).getDays());
    }","org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]"
Time_10,/222043010/omniapr/defects4j/Time_10_buggy/src/test/java/org/joda/time/TestMonths.java,testFactory_monthsBetween_RPartial_MonthDay,"    public void testFactory_monthsBetween_RPartial_MonthDay() {
        MonthDay start = new MonthDay(2, 1);
        MonthDay end1 = new MonthDay(2, 28);
        MonthDay end2 = new MonthDay(2, 29);
        MonthDay end3 = new MonthDay(3, 1);
        
        assertEquals(0, Months.monthsBetween(start, end1).getMonths());
        assertEquals(0, Months.monthsBetween(start, end2).getMonths());
        assertEquals(1, Months.monthsBetween(start, end3).getMonths());
        
        assertEquals(0, Months.monthsBetween(end1, start).getMonths());
        assertEquals(0, Months.monthsBetween(end2, start).getMonths());
        assertEquals(-1, Months.monthsBetween(end3, start).getMonths());
    }","org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]"
Time_11,/222043010/omniapr/defects4j/Time_11_buggy/src/test/java/org/joda/time/tz/TestCompiler.java,testDateTimeZoneBuilder,"    public void testDateTimeZoneBuilder() throws Exception {
        // test multithreading, issue #18
        getTestDataTimeZoneBuilder().toDateTimeZone(""TestDTZ1"", true);
        final DateTimeZone[] zone = new DateTimeZone[1];
        Thread t = new Thread(new Runnable() {
            public void run() {
                zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone(""TestDTZ2"", true);
            }
        });
        t.start();
        t.join();
        assertNotNull(zone[0]);
    }",junit.framework.AssertionFailedError
Time_12,/222043010/omniapr/defects4j/Time_12_buggy/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,testFactory_fromDateFields_beforeYearZero1,"    public void testFactory_fromDateFields_beforeYearZero1() throws Exception {
        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
        cal.set(Calendar.ERA, GregorianCalendar.BC);
        cal.set(Calendar.MILLISECOND, 7);
        LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);
        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
    }",junit.framework.AssertionFailedError: expected:<0000-02-03T04:05:06.007> but was:<0001-02-03T04:05:06.007>
Time_12,/222043010/omniapr/defects4j/Time_12_buggy/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,testFactory_fromDateFields_beforeYearZero3,"    public void testFactory_fromDateFields_beforeYearZero3() throws Exception {
        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
        cal.set(Calendar.ERA, GregorianCalendar.BC);
        cal.set(Calendar.MILLISECOND, 7);
        LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);
        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
    }",junit.framework.AssertionFailedError: expected:<0000-02-03T04:05:06.007> but was:<0001-02-03T04:05:06.007>
Time_12,/222043010/omniapr/defects4j/Time_12_buggy/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,testFactory_fromCalendarFields_beforeYearZero1,"    public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {
        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
        cal.set(Calendar.ERA, GregorianCalendar.BC);
        cal.set(Calendar.MILLISECOND, 7);
        LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);
        assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
    }",junit.framework.AssertionFailedError: expected:<0000-02-03T04:05:06.007> but was:<0001-02-03T04:05:06.007>
Time_12,/222043010/omniapr/defects4j/Time_12_buggy/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java,testFactory_fromCalendarFields_beforeYearZero3,"    public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {
        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
        cal.set(Calendar.ERA, GregorianCalendar.BC);
        cal.set(Calendar.MILLISECOND, 7);
        LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);
        assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
    }",junit.framework.AssertionFailedError: expected:<0000-02-03T04:05:06.007> but was:<0001-02-03T04:05:06.007>
Time_12,/222043010/omniapr/defects4j/Time_12_buggy/src/test/java/org/joda/time/TestLocalDate_Constructors.java,testFactory_fromDateFields_beforeYearZero1,"    public void testFactory_fromDateFields_beforeYearZero1() throws Exception {
        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
        cal.set(Calendar.ERA, GregorianCalendar.BC);
        cal.set(Calendar.MILLISECOND, 7);
        LocalDate expected = new LocalDate(0, 2, 3);
        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
    }",junit.framework.AssertionFailedError: expected:<0000-02-03> but was:<0001-02-03>
Time_12,/222043010/omniapr/defects4j/Time_12_buggy/src/test/java/org/joda/time/TestLocalDate_Constructors.java,testFactory_fromDateFields_beforeYearZero3,"    public void testFactory_fromDateFields_beforeYearZero3() throws Exception {
        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
        cal.set(Calendar.ERA, GregorianCalendar.BC);
        cal.set(Calendar.MILLISECOND, 7);
        LocalDate expected = new LocalDate(-2, 2, 3);
        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
    }",junit.framework.AssertionFailedError: expected:<0000-02-03> but was:<0001-02-03>
Time_12,/222043010/omniapr/defects4j/Time_12_buggy/src/test/java/org/joda/time/TestLocalDate_Constructors.java,testFactory_fromCalendarFields_beforeYearZero1,"    public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {
        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);
        cal.set(Calendar.ERA, GregorianCalendar.BC);
        cal.set(Calendar.MILLISECOND, 7);
        LocalDate expected = new LocalDate(0, 2, 3);
        assertEquals(expected, LocalDate.fromCalendarFields(cal));
    }",junit.framework.AssertionFailedError: expected:<0000-02-03> but was:<0001-02-03>
Time_12,/222043010/omniapr/defects4j/Time_12_buggy/src/test/java/org/joda/time/TestLocalDate_Constructors.java,testFactory_fromCalendarFields_beforeYearZero3,"    public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {
        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);
        cal.set(Calendar.ERA, GregorianCalendar.BC);
        cal.set(Calendar.MILLISECOND, 7);
        LocalDate expected = new LocalDate(-2, 2, 3);
        assertEquals(expected, LocalDate.fromCalendarFields(cal));
    }",junit.framework.AssertionFailedError: expected:<0000-02-03> but was:<0001-02-03>
Time_13,/222043010/omniapr/defects4j/Time_13_buggy/src/test/java/org/joda/time/format/TestISOPeriodFormat.java,testFormatStandard_negative,"    public void testFormatStandard_negative() {
        Period p = new Period(-1, -2, -3, -4, -5, -6, -7, -8);
        assertEquals(""P-1Y-2M-3W-4DT-5H-6M-7.008S"", ISOPeriodFormat.standard().print(p));
        
        p = Period.years(-54);
        assertEquals(""P-54Y"", ISOPeriodFormat.standard().print(p));
        
        p = Period.seconds(4).withMillis(-8);
        assertEquals(""PT3.992S"", ISOPeriodFormat.standard().print(p));
        
        p = Period.seconds(-4).withMillis(8);
        assertEquals(""PT-3.992S"", ISOPeriodFormat.standard().print(p));
        
        p = Period.seconds(-23);
        assertEquals(""PT-23S"", ISOPeriodFormat.standard().print(p));
        
        p = Period.millis(-8);
        assertEquals(""PT-0.008S"", ISOPeriodFormat.standard().print(p));
    }",junit.framework.ComparisonFailure: expected:<PT[-]0.008S> but was:<PT[]0.008S>
Time_14,/222043010/omniapr/defects4j/Time_14_buggy/src/test/java/org/joda/time/TestMonthDay_Basics.java,testPlusMonths_int_negativeFromLeap,"    public void testPlusMonths_int_negativeFromLeap() {
        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
        MonthDay result = test.plusMonths(-1);
        MonthDay expected = new MonthDay(1, 29, ISOChronology.getInstance());
        assertEquals(expected, result);
    }","org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]"
Time_14,/222043010/omniapr/defects4j/Time_14_buggy/src/test/java/org/joda/time/TestMonthDay_Basics.java,testMinusDays_int_negativeFromLeap,"    public void testMinusDays_int_negativeFromLeap() {
        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
        MonthDay result = test.minusDays(-1);
        MonthDay expected = new MonthDay(3, 1, ISOChronology.getInstance());
        assertEquals(expected, result);
    }","org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]"
Time_14,/222043010/omniapr/defects4j/Time_14_buggy/src/test/java/org/joda/time/TestMonthDay_Basics.java,testPlusMonths_int_fromLeap,"    public void testPlusMonths_int_fromLeap() {
        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
        MonthDay result = test.plusMonths(1);
        MonthDay expected = new MonthDay(3, 29, ISOChronology.getInstance());
        assertEquals(expected, result);
    }","org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]"
Time_14,/222043010/omniapr/defects4j/Time_14_buggy/src/test/java/org/joda/time/TestMonthDay_Basics.java,testPlusMonths_int_negativeEndOfMonthAdjust,"    public void testPlusMonths_int_negativeEndOfMonthAdjust() {
        MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());
        MonthDay result = test.plusMonths(-1);
        MonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance());
        assertEquals(expected, result);
    }","org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]"
Time_14,/222043010/omniapr/defects4j/Time_14_buggy/src/test/java/org/joda/time/TestMonthDay_Basics.java,testMinusMonths_int_endOfMonthAdjust,"    public void testMinusMonths_int_endOfMonthAdjust() {
        MonthDay test = new MonthDay(3, 31, ISOChronology.getInstanceUTC());
        MonthDay result = test.minusMonths(1);
        MonthDay expected = new MonthDay(2, 29, ISOChronology.getInstance());
        assertEquals(expected, result);
    }","org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]"
Time_14,/222043010/omniapr/defects4j/Time_14_buggy/src/test/java/org/joda/time/TestMonthDay_Basics.java,testMinusMonths_int_negativeFromLeap,"    public void testMinusMonths_int_negativeFromLeap() {
        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
        MonthDay result = test.minusMonths(-1);
        MonthDay expected = new MonthDay(3, 29, ISOChronology.getInstance());
        assertEquals(expected, result);
    }","org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]"
Time_14,/222043010/omniapr/defects4j/Time_14_buggy/src/test/java/org/joda/time/TestMonthDay_Basics.java,testMinusMonths_int_fromLeap,"    public void testMinusMonths_int_fromLeap() {
        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
        MonthDay result = test.minusMonths(1);
        MonthDay expected = new MonthDay(1, 29, ISOChronology.getInstance());
        assertEquals(expected, result);
    }","org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]"
Time_14,/222043010/omniapr/defects4j/Time_14_buggy/src/test/java/org/joda/time/TestMonthDay_Basics.java,testPlusDays_int_fromLeap,"    public void testPlusDays_int_fromLeap() {
        MonthDay test = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
        MonthDay result = test.plusDays(1);
        MonthDay expected = new MonthDay(3, 1, ISOChronology.getInstance());
        assertEquals(expected, result);
    }","org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]"
Time_15,/222043010/omniapr/defects4j/Time_15_buggy/src/test/java/org/joda/time/field/TestFieldUtils.java,testSafeMultiplyLongInt,"    public void testSafeMultiplyLongInt() {
        assertEquals(0L, FieldUtils.safeMultiply(0L, 0));
        
        assertEquals(1L, FieldUtils.safeMultiply(1L, 1));
        assertEquals(3L, FieldUtils.safeMultiply(1L, 3));
        assertEquals(3L, FieldUtils.safeMultiply(3L, 1));
        
        assertEquals(6L, FieldUtils.safeMultiply(2L, 3));
        assertEquals(-6L, FieldUtils.safeMultiply(2L, -3));
        assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3));
        assertEquals(6L, FieldUtils.safeMultiply(-2L, -3));
        
        assertEquals(-1L * Integer.MIN_VALUE, FieldUtils.safeMultiply(-1L, Integer.MIN_VALUE));
        
        assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1));
        assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1));
        assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1));
        
        try {
            FieldUtils.safeMultiply(Long.MIN_VALUE, -1);
            fail();
        } catch (ArithmeticException e) {
        }
        
        try {
            FieldUtils.safeMultiply(Long.MIN_VALUE, 100);
            fail();
        } catch (ArithmeticException e) {
        }
        
        try {
            FieldUtils.safeMultiply(Long.MIN_VALUE, Integer.MAX_VALUE);
            fail();
        } catch (ArithmeticException e) {
        }
        
        try {
            FieldUtils.safeMultiply(Long.MAX_VALUE, Integer.MIN_VALUE);
            fail();
        } catch (ArithmeticException e) {
        }
    }",junit.framework.AssertionFailedError
Time_16,/222043010/omniapr/defects4j/Time_16_buggy/src/test/java/org/joda/time/format/TestDateTimeFormatter.java,testParseInto_monthOnly_baseStartYear,"    public void testParseInto_monthOnly_baseStartYear() {
        DateTimeFormatter f = DateTimeFormat.forPattern(""M"").withLocale(Locale.UK);
        MutableDateTime result = new MutableDateTime(2004, 1, 1, 12, 20, 30, 0, TOKYO);
        assertEquals(1, f.parseInto(result, ""5"", 0));
        assertEquals(new MutableDateTime(2004, 5, 1, 12, 20, 30, 0, TOKYO), result);
    }",junit.framework.AssertionFailedError: expected:<2004-05-01T12:20:30.000+09:00> but was:<2000-05-01T12:20:30.000+09:00>
Time_16,/222043010/omniapr/defects4j/Time_16_buggy/src/test/java/org/joda/time/format/TestDateTimeFormatter.java,testParseInto_monthOnly_parseStartYear,"    public void testParseInto_monthOnly_parseStartYear() {
        DateTimeFormatter f = DateTimeFormat.forPattern(""M"").withLocale(Locale.UK);
        MutableDateTime result = new MutableDateTime(2004, 2, 1, 12, 20, 30, 0, TOKYO);
        assertEquals(1, f.parseInto(result, ""1"", 0));
        assertEquals(new MutableDateTime(2004, 1, 1, 12, 20, 30, 0, TOKYO), result);
    }",junit.framework.AssertionFailedError: expected:<2004-05-01T12:20:30.000+09:00> but was:<2000-05-01T12:20:30.000+09:00>
Time_16,/222043010/omniapr/defects4j/Time_16_buggy/src/test/java/org/joda/time/format/TestDateTimeFormatter.java,testParseInto_monthOnly_baseEndYear,"    public void testParseInto_monthOnly_baseEndYear() {
        DateTimeFormatter f = DateTimeFormat.forPattern(""M"").withLocale(Locale.UK);
        MutableDateTime result = new MutableDateTime(2004, 12, 31, 12, 20, 30, 0, TOKYO);
        assertEquals(1, f.parseInto(result, ""5"", 0));
        assertEquals(new MutableDateTime(2004, 5, 31, 12, 20, 30, 0, TOKYO), result);
   }",junit.framework.AssertionFailedError: expected:<2004-05-01T12:20:30.000+09:00> but was:<2000-05-01T12:20:30.000+09:00>
Time_16,/222043010/omniapr/defects4j/Time_16_buggy/src/test/java/org/joda/time/format/TestDateTimeFormatter.java,testParseInto_monthOnly,"    public void testParseInto_monthOnly() {
        DateTimeFormatter f = DateTimeFormat.forPattern(""M"").withLocale(Locale.UK);
        MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, LONDON);
        assertEquals(1, f.parseInto(result, ""5"", 0));
        assertEquals(new MutableDateTime(2004, 5, 9, 12, 20, 30, 0, LONDON), result);
    }",junit.framework.AssertionFailedError: expected:<2004-05-01T12:20:30.000+09:00> but was:<2000-05-01T12:20:30.000+09:00>
Time_16,/222043010/omniapr/defects4j/Time_16_buggy/src/test/java/org/joda/time/format/TestDateTimeFormatter.java,testParseInto_monthDay_withDefaultYear_feb29,"    public void testParseInto_monthDay_withDefaultYear_feb29() {
        DateTimeFormatter f = DateTimeFormat.forPattern(""M d"").withDefaultYear(2012);
        MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, LONDON);
        assertEquals(4, f.parseInto(result, ""2 29"", 0));
        assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, LONDON), result);
    }",junit.framework.AssertionFailedError: expected:<2004-05-01T12:20:30.000+09:00> but was:<2000-05-01T12:20:30.000+09:00>
Time_16,/222043010/omniapr/defects4j/Time_16_buggy/src/test/java/org/joda/time/format/TestDateTimeFormatter.java,testParseInto_monthDay_feb29,"    public void testParseInto_monthDay_feb29() {
        DateTimeFormatter f = DateTimeFormat.forPattern(""M d"").withLocale(Locale.UK);
        MutableDateTime result = new MutableDateTime(2004, 1, 9, 12, 20, 30, 0, LONDON);
        assertEquals(4, f.parseInto(result, ""2 29"", 0));
        assertEquals(new MutableDateTime(2004, 2, 29, 12, 20, 30, 0, LONDON), result);
    }",junit.framework.AssertionFailedError: expected:<2004-05-01T12:20:30.000+09:00> but was:<2000-05-01T12:20:30.000+09:00>
Time_16,/222043010/omniapr/defects4j/Time_16_buggy/src/test/java/org/joda/time/format/TestDateTimeFormatter.java,testParseInto_monthOnly_parseEndYear,"    public void testParseInto_monthOnly_parseEndYear() {
        DateTimeFormatter f = DateTimeFormat.forPattern(""M"").withLocale(Locale.UK);
        MutableDateTime result = new MutableDateTime(2004, 1, 31, 12, 20, 30, 0,TOKYO);
        assertEquals(2, f.parseInto(result, ""12"", 0));
        assertEquals(new MutableDateTime(2004, 12, 31, 12, 20, 30, 0, TOKYO), result);
    }",junit.framework.AssertionFailedError: expected:<2004-05-01T12:20:30.000+09:00> but was:<2000-05-01T12:20:30.000+09:00>
Time_17,/222043010/omniapr/defects4j/Time_17_buggy/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,testBug3476684_adjustOffset,"    public void testBug3476684_adjustOffset() {
        final DateTimeZone zone = DateTimeZone.forID(""America/Sao_Paulo"");
        DateTime base = new DateTime(2012, 2, 25, 22, 15, zone);
        DateTime baseBefore = base.plusHours(1);  // 23:15 (first)
        DateTime baseAfter = base.plusHours(2);  // 23:15 (second)
        
        assertSame(base, base.withEarlierOffsetAtOverlap());
        assertSame(base, base.withLaterOffsetAtOverlap());
        
        assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());
        assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());
        
        assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());
        assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());
    }",junit.framework.AssertionFailedError: expected:<2012-02-25T23:15:00.000-03:00> but was:<2012-02-25T23:15:00.000-02:00>
Time_18,/222043010/omniapr/defects4j/Time_18_buggy/src/test/java/org/joda/time/chrono/TestGJChronology.java,testLeapYearRulesConstruction,"    public void testLeapYearRulesConstruction() {
        // 1500 not leap in Gregorian, but is leap in Julian
        DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());
        assertEquals(dt.getYear(), 1500);
        assertEquals(dt.getMonthOfYear(), 2);
        assertEquals(dt.getDayOfMonth(), 29);
    }","org.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]"
Time_19,/222043010/omniapr/defects4j/Time_19_buggy/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,testDateTimeCreation_london,"    public void testDateTimeCreation_london() {
        DateTimeZone zone = DateTimeZone.forID(""Europe/London"");
        DateTime base = new DateTime(2011, 10, 30, 1, 15, zone);
        assertEquals(""2011-10-30T01:15:00.000+01:00"", base.toString());
        assertEquals(""2011-10-30T01:15:00.000Z"", base.plusHours(1).toString());
    }",junit.framework.ComparisonFailure: expected:<...1-10-30T01:15:00.000[+01:00]> but was:<...1-10-30T01:15:00.000[Z]>
Time_20,/222043010/omniapr/defects4j/Time_20_buggy/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java,test_printParseZoneDawsonCreek,"    public void test_printParseZoneDawsonCreek() {  // clashes with shorter Dawson
        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder()
            .appendPattern(""yyyy-MM-dd HH:mm "").appendTimeZoneId();
        DateTimeFormatter f = bld.toFormatter();
        
        DateTime dt = new DateTime(2007, 3, 4, 12, 30, 0, DateTimeZone.forID(""America/Dawson_Creek""));
        assertEquals(""2007-03-04 12:30 America/Dawson_Creek"", f.print(dt));
        assertEquals(dt, f.parseDateTime(""2007-03-04 12:30 America/Dawson_Creek""));
    }","java.lang.IllegalArgumentException: Invalid format: ""2007-03-04 12:30 America/Dawson_Creek"" is malformed at ""_Creek"""
Time_22,/222043010/omniapr/defects4j/Time_22_buggy/src/test/java/org/joda/time/TestDuration_Basics.java,testToPeriod_fixedZone,"    public void testToPeriod_fixedZone() throws Throwable {
        DateTimeZone zone = DateTimeZone.getDefault();
        try {
            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
            long length =
                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
                5L * DateTimeConstants.MILLIS_PER_HOUR +
                6L * DateTimeConstants.MILLIS_PER_MINUTE +
                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
            Duration dur = new Duration(length);
            Period test = dur.toPeriod();
            assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450
            assertEquals(0, test.getMonths());
            assertEquals(0, test.getWeeks());
            assertEquals(0, test.getDays());
            assertEquals((450 * 24) + 5, test.getHours());
            assertEquals(6, test.getMinutes());
            assertEquals(7, test.getSeconds());
            assertEquals(8, test.getMillis());
        } finally {
            DateTimeZone.setDefault(zone);
        }
    }",junit.framework.AssertionFailedError: expected:<0> but was:<64>
Time_22,/222043010/omniapr/defects4j/Time_22_buggy/src/test/java/org/joda/time/TestPeriod_Constructors.java,testConstructor_long_fixedZone,"    public void testConstructor_long_fixedZone() throws Throwable {
        DateTimeZone zone = DateTimeZone.getDefault();
        try {
            DateTimeZone.setDefault(DateTimeZone.forOffsetHours(2));
            long length =
                (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +
                5L * DateTimeConstants.MILLIS_PER_HOUR +
                6L * DateTimeConstants.MILLIS_PER_MINUTE +
                7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;
            Period test = new Period(length);
            assertEquals(PeriodType.standard(), test.getPeriodType());
            // only time fields are precise in AllType
            assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450
            assertEquals(0, test.getMonths());
            assertEquals(0, test.getWeeks());
            assertEquals(0, test.getDays());
            assertEquals((450 * 24) + 5, test.getHours());
            assertEquals(6, test.getMinutes());
            assertEquals(7, test.getSeconds());
            assertEquals(8, test.getMillis());
        } finally {
            DateTimeZone.setDefault(zone);
        }
    }",junit.framework.AssertionFailedError: expected:<0> but was:<64>
Time_23,/222043010/omniapr/defects4j/Time_23_buggy/src/test/java/org/joda/time/TestDateTimeZone.java,testForID_String_old,"    public void testForID_String_old() {
        Map<String, String> map = new LinkedHashMap<String, String>();
        map.put(""GMT"", ""UTC"");
        map.put(""WET"", ""WET"");
        map.put(""CET"", ""CET"");
        map.put(""MET"", ""CET"");
        map.put(""ECT"", ""CET"");
        map.put(""EET"", ""EET"");
        map.put(""MIT"", ""Pacific/Apia"");
        map.put(""HST"", ""Pacific/Honolulu"");
        map.put(""AST"", ""America/Anchorage"");
        map.put(""PST"", ""America/Los_Angeles"");
        map.put(""MST"", ""America/Denver"");
        map.put(""PNT"", ""America/Phoenix"");
        map.put(""CST"", ""America/Chicago"");
        map.put(""EST"", ""America/New_York"");
        map.put(""IET"", ""America/Indiana/Indianapolis"");
        map.put(""PRT"", ""America/Puerto_Rico"");
        map.put(""CNT"", ""America/St_Johns"");
        map.put(""AGT"", ""America/Argentina/Buenos_Aires"");
        map.put(""BET"", ""America/Sao_Paulo"");
        map.put(""ART"", ""Africa/Cairo"");
        map.put(""CAT"", ""Africa/Harare"");
        map.put(""EAT"", ""Africa/Addis_Ababa"");
        map.put(""NET"", ""Asia/Yerevan"");
        map.put(""PLT"", ""Asia/Karachi"");
        map.put(""IST"", ""Asia/Kolkata"");
        map.put(""BST"", ""Asia/Dhaka"");
        map.put(""VST"", ""Asia/Ho_Chi_Minh"");
        map.put(""CTT"", ""Asia/Shanghai"");
        map.put(""JST"", ""Asia/Tokyo"");
        map.put(""ACT"", ""Australia/Darwin"");
        map.put(""AET"", ""Australia/Sydney"");
        map.put(""SST"", ""Pacific/Guadalcanal"");
        map.put(""NST"", ""Pacific/Auckland"");
        for (String key : map.keySet()) {
            String value = map.get(key);
            TimeZone juZone = TimeZone.getTimeZone(key);
            DateTimeZone zone = DateTimeZone.forTimeZone(juZone);
            assertEquals(value, zone.getID());
//            System.out.println(juZone);
//            System.out.println(juZone.getDisplayName());
//            System.out.println(zone);
//            System.out.println(""------"");
        }
    }",junit.framework.ComparisonFailure: expected:<[WET]> but was:<[Europe/London]>
Time_24,/222043010/omniapr/defects4j/Time_24_buggy/src/test/java/org/joda/time/format/TestDateTimeFormatter.java,testParseLocalDate_weekyear_month_week_2010,"    public void testParseLocalDate_weekyear_month_week_2010() {
        Chronology chrono = GJChronology.getInstanceUTC();
        DateTimeFormatter f = DateTimeFormat.forPattern(""xxxx-MM-ww"").withChronology(chrono);
        assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate(""2010-01-01""));
    }",junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>
Time_24,/222043010/omniapr/defects4j/Time_24_buggy/src/test/java/org/joda/time/format/TestDateTimeFormatter.java,testParseLocalDate_weekyear_month_week_2011,"    public void testParseLocalDate_weekyear_month_week_2011() {
        Chronology chrono = GJChronology.getInstanceUTC();
        DateTimeFormatter f = DateTimeFormat.forPattern(""xxxx-MM-ww"").withChronology(chrono);
        assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate(""2011-01-01""));
    }",junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>
Time_24,/222043010/omniapr/defects4j/Time_24_buggy/src/test/java/org/joda/time/format/TestDateTimeFormatter.java,testParseLocalDate_weekyear_month_week_2012,"    public void testParseLocalDate_weekyear_month_week_2012() {
        Chronology chrono = GJChronology.getInstanceUTC();
        DateTimeFormatter f = DateTimeFormat.forPattern(""xxxx-MM-ww"").withChronology(chrono);
        assertEquals(new LocalDate(2012, 1, 2, chrono), f.parseLocalDate(""2012-01-01""));
    }",junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>
Time_24,/222043010/omniapr/defects4j/Time_24_buggy/src/test/java/org/joda/time/format/TestDateTimeFormatter.java,testParseLocalDate_year_month_week_2010,"    public void testParseLocalDate_year_month_week_2010() {
        Chronology chrono = GJChronology.getInstanceUTC();
        DateTimeFormatter f = DateTimeFormat.forPattern(""yyyy-MM-ww"").withChronology(chrono);
        assertEquals(new LocalDate(2010, 1, 4, chrono), f.parseLocalDate(""2010-01-01""));
    }",junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>
Time_24,/222043010/omniapr/defects4j/Time_24_buggy/src/test/java/org/joda/time/format/TestDateTimeFormatter.java,testParseLocalDate_year_month_week_2011,"    public void testParseLocalDate_year_month_week_2011() {
        Chronology chrono = GJChronology.getInstanceUTC();
        DateTimeFormatter f = DateTimeFormat.forPattern(""yyyy-MM-ww"").withChronology(chrono);
        assertEquals(new LocalDate(2011, 1, 3, chrono), f.parseLocalDate(""2011-01-01""));
    }",junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>
Time_24,/222043010/omniapr/defects4j/Time_24_buggy/src/test/java/org/joda/time/format/TestDateTimeFormatter.java,testParseLocalDate_year_month_week_2012,"    public void testParseLocalDate_year_month_week_2012() {
        Chronology chrono = GJChronology.getInstanceUTC();
        DateTimeFormatter f = DateTimeFormat.forPattern(""yyyy-MM-ww"").withChronology(chrono);
        assertEquals(new LocalDate(2012, 1, 2, chrono), f.parseLocalDate(""2012-01-01""));
    }",junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>
Time_24,/222043010/omniapr/defects4j/Time_24_buggy/src/test/java/org/joda/time/format/TestDateTimeFormatter.java,testParseLocalDate_year_month_week_2016,"    public void testParseLocalDate_year_month_week_2016() {
        Chronology chrono = GJChronology.getInstanceUTC();
        DateTimeFormatter f = DateTimeFormat.forPattern(""yyyy-MM-ww"").withChronology(chrono);
        assertEquals(new LocalDate(2016, 1, 4, chrono), f.parseLocalDate(""2016-01-01""));
    }",junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>
Time_25,/222043010/omniapr/defects4j/Time_25_buggy/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,test_DateTime_constructor_Moscow_Autumn,"    public void test_DateTime_constructor_Moscow_Autumn() {
        DateTime dt = new DateTime(2007, 10, 28, 2, 30, ZONE_MOSCOW);
        assertEquals(""2007-10-28T02:30:00.000+04:00"", dt.toString());
    }",junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>
Time_25,/222043010/omniapr/defects4j/Time_25_buggy/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,test_getOffsetFromLocal_Moscow_Autumn_overlap_mins,"    public void test_getOffsetFromLocal_Moscow_Autumn_overlap_mins() {
        for (int min = 0; min < 60; min++) {
            if (min < 10) {
                doTest_getOffsetFromLocal(10, 28, 2, min, ""2007-10-28T02:0"" + min + "":00.000+04:00"", ZONE_MOSCOW);
            } else {
                doTest_getOffsetFromLocal(10, 28, 2, min, ""2007-10-28T02:"" + min + "":00.000+04:00"", ZONE_MOSCOW);
            }
        }
    }",junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>
Time_25,/222043010/omniapr/defects4j/Time_25_buggy/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,test_getOffsetFromLocal_Moscow_Autumn,"    public void test_getOffsetFromLocal_Moscow_Autumn() {
        doTest_getOffsetFromLocal(10, 28, 0, 0, ""2007-10-28T00:00:00.000+04:00"", ZONE_MOSCOW);
        doTest_getOffsetFromLocal(10, 28, 0,30, ""2007-10-28T00:30:00.000+04:00"", ZONE_MOSCOW);
        doTest_getOffsetFromLocal(10, 28, 1, 0, ""2007-10-28T01:00:00.000+04:00"", ZONE_MOSCOW);
        doTest_getOffsetFromLocal(10, 28, 1,30, ""2007-10-28T01:30:00.000+04:00"", ZONE_MOSCOW);
        
        doTest_getOffsetFromLocal(10, 28, 2, 0, ""2007-10-28T02:00:00.000+04:00"", ZONE_MOSCOW);
        doTest_getOffsetFromLocal(10, 28, 2,30, ""2007-10-28T02:30:00.000+04:00"", ZONE_MOSCOW);
        doTest_getOffsetFromLocal(10, 28, 2,30,59,999, ""2007-10-28T02:30:59.999+04:00"", ZONE_MOSCOW);
        doTest_getOffsetFromLocal(10, 28, 2,59,59,998, ""2007-10-28T02:59:59.998+04:00"", ZONE_MOSCOW);
        doTest_getOffsetFromLocal(10, 28, 2,59,59,999, ""2007-10-28T02:59:59.999+04:00"", ZONE_MOSCOW);
        
        doTest_getOffsetFromLocal(10, 28, 3, 0, ""2007-10-28T03:00:00.000+03:00"", ZONE_MOSCOW);
        doTest_getOffsetFromLocal(10, 28, 3,30, ""2007-10-28T03:30:00.000+03:00"", ZONE_MOSCOW);
        doTest_getOffsetFromLocal(10, 28, 4, 0, ""2007-10-28T04:00:00.000+03:00"", ZONE_MOSCOW);
        doTest_getOffsetFromLocal(10, 28, 5, 0, ""2007-10-28T05:00:00.000+03:00"", ZONE_MOSCOW);
        doTest_getOffsetFromLocal(10, 28, 6, 0, ""2007-10-28T06:00:00.000+03:00"", ZONE_MOSCOW);
        doTest_getOffsetFromLocal(10, 28, 7, 0, ""2007-10-28T07:00:00.000+03:00"", ZONE_MOSCOW);
        doTest_getOffsetFromLocal(10, 28, 8, 0, ""2007-10-28T08:00:00.000+03:00"", ZONE_MOSCOW);
    }",junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>
Time_26,/222043010/omniapr/defects4j/Time_26_buggy/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,testWithSecondOfMinuteInDstChange,"    public void testWithSecondOfMinuteInDstChange() {
        DateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);
        assertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());
        DateTime test = dateTime.withSecondOfMinute(0);
        assertEquals(""2010-10-31T02:30:00.123+02:00"", test.toString());
    }",junit.framework.ComparisonFailure: expected:<...10-31T02:30:00.123+0[2]:00> but was:<...10-31T02:30:00.123+0[1]:00>
Time_26,/222043010/omniapr/defects4j/Time_26_buggy/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,testWithMinuteOfHourInDstChange,"    public void testWithMinuteOfHourInDstChange() {
        DateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);
        assertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());
        DateTime test = dateTime.withMinuteOfHour(0);
        assertEquals(""2010-10-31T02:00:10.123+02:00"", test.toString());
    }",junit.framework.ComparisonFailure: expected:<...10-31T02:30:00.123+0[2]:00> but was:<...10-31T02:30:00.123+0[1]:00>
Time_26,/222043010/omniapr/defects4j/Time_26_buggy/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,testWithMinuteOfHourInDstChange_mockZone,"    public void testWithMinuteOfHourInDstChange_mockZone() {
        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));
        assertEquals(""2010-10-31T01:15:00.000+00:30"", cutover.toString());
        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);
        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);
        assertEquals(""2010-10-31T01:00:00.000+01:00"", pre.toString());
        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);
        assertEquals(""2010-10-31T01:59:00.000+00:30"", post.toString());
        
        DateTime testPre1 = pre.withMinuteOfHour(30);
        assertEquals(""2010-10-31T01:30:00.000+01:00"", testPre1.toString());  // retain offset
        DateTime testPre2 = pre.withMinuteOfHour(50);
        assertEquals(""2010-10-31T01:50:00.000+00:30"", testPre2.toString());
        
        DateTime testPost1 = post.withMinuteOfHour(30);
        assertEquals(""2010-10-31T01:30:00.000+00:30"", testPost1.toString());  // retain offset
        DateTime testPost2 = post.withMinuteOfHour(10);
        assertEquals(""2010-10-31T01:10:00.000+01:00"", testPost2.toString());
    }",junit.framework.ComparisonFailure: expected:<...10-31T02:30:00.123+0[2]:00> but was:<...10-31T02:30:00.123+0[1]:00>
Time_26,/222043010/omniapr/defects4j/Time_26_buggy/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,testBug2182444_usCentral,"    public void testBug2182444_usCentral() {
        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(""US/Central""));
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);
        assertTrue(""Should be standard time"", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));
        assertFalse(""Should be daylight time"", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));
        
        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
        assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());
        assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());
        assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());
        assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));
        assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());
        assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));
        assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());
    }",junit.framework.ComparisonFailure: expected:<...10-31T02:30:00.123+0[2]:00> but was:<...10-31T02:30:00.123+0[1]:00>
Time_26,/222043010/omniapr/defects4j/Time_26_buggy/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,testWithMillisOfSecondInDstChange_Paris_summer,"    public void testWithMillisOfSecondInDstChange_Paris_summer() {
        DateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);
        assertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());
        DateTime test = dateTime.withMillisOfSecond(0);
        assertEquals(""2010-10-31T02:30:10.000+02:00"", test.toString());
    }",junit.framework.ComparisonFailure: expected:<...10-31T02:30:00.123+0[2]:00> but was:<...10-31T02:30:00.123+0[1]:00>
Time_26,/222043010/omniapr/defects4j/Time_26_buggy/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,testWithHourOfDayInDstChange,"    public void testWithHourOfDayInDstChange() {
        DateTime dateTime = new DateTime(""2010-10-31T02:30:10.123+02:00"", ZONE_PARIS);
        assertEquals(""2010-10-31T02:30:10.123+02:00"", dateTime.toString());
        DateTime test = dateTime.withHourOfDay(2);
        assertEquals(""2010-10-31T02:30:10.123+02:00"", test.toString());
    }",junit.framework.ComparisonFailure: expected:<...10-31T02:30:00.123+0[2]:00> but was:<...10-31T02:30:00.123+0[1]:00>
Time_26,/222043010/omniapr/defects4j/Time_26_buggy/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,testWithMillisOfSecondInDstChange_NewYork_winter,"    public void testWithMillisOfSecondInDstChange_NewYork_winter() {
        DateTime dateTime = new DateTime(""2007-11-04T01:30:00.123-05:00"", ZONE_NEW_YORK);
        assertEquals(""2007-11-04T01:30:00.123-05:00"", dateTime.toString());
        DateTime test = dateTime.withMillisOfSecond(0);
        assertEquals(""2007-11-04T01:30:00.000-05:00"", test.toString());
    }",junit.framework.ComparisonFailure: expected:<...10-31T02:30:00.123+0[2]:00> but was:<...10-31T02:30:00.123+0[1]:00>
Time_26,/222043010/omniapr/defects4j/Time_26_buggy/src/test/java/org/joda/time/TestDateTimeZoneCutover.java,testBug2182444_ausNSW,"    public void testBug2182444_ausNSW() {
        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(""Australia/NSW""));
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);
        assertTrue(""Should be standard time"", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));
        assertFalse(""Should be daylight time"", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));
        
        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
        assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());
        assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());
        assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());
        assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));
        assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());
        assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));
        assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());
    }",junit.framework.ComparisonFailure: expected:<...10-31T02:30:00.123+0[2]:00> but was:<...10-31T02:30:00.123+0[1]:00>
Time_27,/222043010/omniapr/defects4j/Time_27_buggy/src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java,testBug2495455,"    public void testBug2495455() {
        PeriodFormatter pfmt1 = new PeriodFormatterBuilder()
            .appendLiteral(""P"")
            .appendYears()
            .appendSuffix(""Y"")
            .appendMonths()
            .appendSuffix(""M"")
            .appendWeeks()
            .appendSuffix(""W"")
            .appendDays()
            .appendSuffix(""D"")
            .appendSeparatorIfFieldsAfter(""T"")
            .appendHours()
            .appendSuffix(""H"")
            .appendMinutes()
            .appendSuffix(""M"")
            .appendSecondsWithOptionalMillis()
            .appendSuffix(""S"")
            .toFormatter();
        PeriodFormatter pfmt2 = new PeriodFormatterBuilder()
            .append(ISOPeriodFormat.standard())
            .toFormatter();
        pfmt1.parsePeriod(""PT1003199059S"");
        pfmt2.parsePeriod(""PT1003199059S"");
    }","java.lang.IllegalArgumentException: Invalid format: ""PT1003199059S"" is malformed at ""1003199059S"""
JacksonXml_2,/222043010/omniapr/defects4j/JacksonXml_2_buggy/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/XmlTextTest.java,testMixedContent,"    public void testMixedContent() throws Exception
    {
        WindSpeed result = MAPPER.readValue(""<windSpeed units='kt'> 27 <radius>20</radius></windSpeed>"",
                WindSpeed.class);
        assertEquals(27, result.value);
        assertNotNull(result.radius);
        assertEquals(20, result.radius.value);
    }",junit.framework.AssertionFailedError: expected:<27> but was:<0>
JacksonXml_3,/222043010/omniapr/defects4j/JacksonXml_3_buggy/src/test/java/com/fasterxml/jackson/dataformat/xml/stream/XmlParserNextXxxTest.java,testXmlAttributesWithNextTextValue,"    public void testXmlAttributesWithNextTextValue() throws Exception
    {
        final String XML = ""<data max=\""7\"" offset=\""9\""/>"";

        FromXmlParser xp = (FromXmlParser) _xmlFactory.createParser(new StringReader(XML));

        // First: verify handling without forcing array handling:
        assertToken(JsonToken.START_OBJECT, xp.nextToken()); // <data>
        assertToken(JsonToken.FIELD_NAME, xp.nextToken()); // <max>
        assertEquals(""max"", xp.getCurrentName());

        assertEquals(""7"", xp.nextTextValue());

        assertToken(JsonToken.FIELD_NAME, xp.nextToken()); // <offset>
        assertEquals(""offset"", xp.getCurrentName());

        assertEquals(""offset"", xp.getText());

        assertEquals(""9"", xp.nextTextValue());

        assertEquals(""9"", xp.getText());

        assertToken(JsonToken.END_OBJECT, xp.nextToken()); // </data>
        xp.close();
    }",junit.framework.ComparisonFailure: expected:<7> but was:<null>
JacksonXml_4,/222043010/omniapr/defects4j/JacksonXml_4_buggy/src/test/java/com/fasterxml/jackson/dataformat/xml/misc/RootNameTest.java,testDynamicRootName,"    public void testDynamicRootName() throws IOException
    {
        String xml;

        ObjectWriter w = _xmlMapper.writer().withRootName(""rudy"");

        xml = w.writeValueAsString(new StringBean(""foo""));
        assertEquals(""<rudy><text>foo</text></rudy>"", xml);

        xml = w.writeValueAsString(new StringBean(null));
        assertEquals(""<rudy><text/></rudy>"", xml);

        // and even with null will respect configured root name
        xml = w.writeValueAsString(null);
        assertEquals(""<rudy/>"", xml);
    }",junit.framework.ComparisonFailure: expected:<<[rudy]/>> but was:<<[null]/>>
JacksonXml_5,/222043010/omniapr/defects4j/JacksonXml_5_buggy/src/test/java/com/fasterxml/jackson/dataformat/xml/MapperCopyTest.java,testCopyWith,"    public void testCopyWith() throws Exception
    {
        XmlMapper xmlMapper = newMapper();
        final ObjectMapper xmlMapperNoAnno = xmlMapper.copy()
                .disable(MapperFeature.USE_ANNOTATIONS)
                .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);

        String xml1 = xmlMapper.writeValueAsString(new Pojo282());
        String xml2 = xmlMapperNoAnno.writeValueAsString(new Pojo282());

        if (!xml1.contains(""AnnotatedName"")) {
            fail(""Should use name 'AnnotatedName', xml = ""+xml1);
        }
        if (!xml2.contains(""Pojo282"")
                || xml2.contains(""AnnotatedName"")) {
            fail(""Should NOT use name 'AnnotatedName' but 'Pojo282', xml = ""+xml1);
        }
    }","junit.framework.AssertionFailedError: Should NOT use name 'AnnotatedName' but 'Pojo282', xml = <AnnotatedName><a>3</a></AnnotatedName>"
JacksonXml_6,/222043010/omniapr/defects4j/JacksonXml_6_buggy/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestBinaryStreamToXMLSerialization.java,testWith0Bytes,"    public void testWith0Bytes() throws Exception 
    {
        String xml = MAPPER.writeValueAsString(createPojo());
        assertEquals(""<TestPojo><field/></TestPojo>"", xml);
    }","com.fasterxml.jackson.databind.JsonMappingException: Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator (through reference chain: com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo[""field""])"
JacksonXml_6,/222043010/omniapr/defects4j/JacksonXml_6_buggy/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestBinaryStreamToXMLSerialization.java,testWith2Bytes,"    public void testWith2Bytes() throws Exception 
    {
        String xml = MAPPER.writeValueAsString(createPojo( 'A', 'B' ));
        assertEquals(""<TestPojo><field>QUI=</field></TestPojo>"", xml);
    }","com.fasterxml.jackson.databind.JsonMappingException: Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator (through reference chain: com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo[""field""])"
JacksonXml_6,/222043010/omniapr/defects4j/JacksonXml_6_buggy/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestBinaryStreamToXMLSerialization.java,testWith3Bytes,"    public void testWith3Bytes() throws Exception 
    {
        String xml = MAPPER.writeValueAsString(createPojo( 'A', 'B', 'C' ));
        assertEquals(""<TestPojo><field>QUJD</field></TestPojo>"", xml);
    }","com.fasterxml.jackson.databind.JsonMappingException: Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator (through reference chain: com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo[""field""])"
JacksonXml_6,/222043010/omniapr/defects4j/JacksonXml_6_buggy/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestBinaryStreamToXMLSerialization.java,testWith4Bytes,"    public void testWith4Bytes() throws Exception 
    {
        String xml = MAPPER.writeValueAsString(createPojo( 'A', 'B', 'C', 'D' ));
        assertEquals(""<TestPojo><field>QUJDRA==</field></TestPojo>"", xml);
    }","com.fasterxml.jackson.databind.JsonMappingException: Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator (through reference chain: com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo[""field""])"
JacksonXml_6,/222043010/omniapr/defects4j/JacksonXml_6_buggy/src/test/java/com/fasterxml/jackson/dataformat/xml/ser/TestBinaryStreamToXMLSerialization.java,testWith1Byte,"    public void testWith1Byte() throws Exception 
    {
        String xml = MAPPER.writeValueAsString(createPojo( 'A' ));
        assertEquals(""<TestPojo><field>QQ==</field></TestPojo>"", xml);
    }","com.fasterxml.jackson.databind.JsonMappingException: Operation not supported by generator of type com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator (through reference chain: com.fasterxml.jackson.dataformat.xml.ser.TestBinaryStreamToXMLSerialization$TestPojo[""field""])"
Gson_2,/222043010/omniapr/defects4j/Gson_2_buggy/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java,testJsonElementTypeMismatch,"  public void testJsonElementTypeMismatch() {
    try {
      gson.fromJson(""\""abc\"""", JsonObject.class);
      fail();
    } catch (JsonSyntaxException expected) {
      assertEquals(""Expected a com.google.gson.JsonObject but was com.google.gson.JsonPrimitive"",
          expected.getMessage());
    }
  }",java.lang.ClassCastException: Cannot cast com.google.gson.JsonPrimitive to com.google.gson.JsonObject
Gson_3,/222043010/omniapr/defects4j/Gson_3_buggy/gson/src/test/java/com/google/gson/functional/MapTest.java,testConcurrentMap,"  public void testConcurrentMap() throws Exception {
    Type typeOfMap = new TypeToken<ConcurrentMap<Integer, String>>() {}.getType();
    ConcurrentMap<Integer, String> map = gson.fromJson(""{\""123\"":\""456\""}"", typeOfMap);
    assertEquals(1, map.size());
    assertTrue(map.containsKey(123));
    assertEquals(""456"", map.get(123));
    String json = gson.toJson(map);
    assertEquals(""{\""123\"":\""456\""}"", json);
  }",java.lang.ClassCastException: java.util.LinkedHashMap cannot be cast to java.util.concurrent.ConcurrentMap
Gson_3,/222043010/omniapr/defects4j/Gson_3_buggy/gson/src/test/java/com/google/gson/functional/MapTest.java,testConcurrentNavigableMap,"  public void testConcurrentNavigableMap() throws Exception {
    Type typeOfMap = new TypeToken<ConcurrentNavigableMap<Integer, String>>() {}.getType();
    ConcurrentNavigableMap<Integer, String> map = gson.fromJson(""{\""123\"":\""456\""}"", typeOfMap);
    assertEquals(1, map.size());
    assertTrue(map.containsKey(123));
    assertEquals(""456"", map.get(123));
    String json = gson.toJson(map);
    assertEquals(""{\""123\"":\""456\""}"", json);
  }",java.lang.ClassCastException: java.util.LinkedHashMap cannot be cast to java.util.concurrent.ConcurrentMap
Gson_4,/222043010/omniapr/defects4j/Gson_4_buggy/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,testTopLevelValueTypeWithSkipValue,"  public void testTopLevelValueTypeWithSkipValue() throws IOException {
    JsonReader reader = new JsonReader(reader(""true""));
    reader.skipValue();
    assertEquals(JsonToken.END_DOCUMENT, reader.peek());
  }",com.google.gson.stream.MalformedJsonException: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
Gson_4,/222043010/omniapr/defects4j/Gson_4_buggy/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,testTopLevelValueTypes,"  public void testTopLevelValueTypes() throws IOException {
    JsonReader reader1 = new JsonReader(reader(""true""));
    assertTrue(reader1.nextBoolean());
    assertEquals(JsonToken.END_DOCUMENT, reader1.peek());

    JsonReader reader2 = new JsonReader(reader(""false""));
    assertFalse(reader2.nextBoolean());
    assertEquals(JsonToken.END_DOCUMENT, reader2.peek());

    JsonReader reader3 = new JsonReader(reader(""null""));
    assertEquals(JsonToken.NULL, reader3.peek());
    reader3.nextNull();
    assertEquals(JsonToken.END_DOCUMENT, reader3.peek());

    JsonReader reader4 = new JsonReader(reader(""123""));
    assertEquals(123, reader4.nextInt());
    assertEquals(JsonToken.END_DOCUMENT, reader4.peek());

    JsonReader reader5 = new JsonReader(reader(""123.4""));
    assertEquals(123.4, reader5.nextDouble());
    assertEquals(JsonToken.END_DOCUMENT, reader5.peek());

    JsonReader reader6 = new JsonReader(reader(""\""a\""""));
    assertEquals(""a"", reader6.nextString());
    assertEquals(JsonToken.END_DOCUMENT, reader6.peek());
  }",com.google.gson.stream.MalformedJsonException: Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
Gson_4,/222043010/omniapr/defects4j/Gson_4_buggy/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,testTopLevelValueTypes,"  public void testTopLevelValueTypes() throws IOException {
    StringWriter string1 = new StringWriter();
    JsonWriter writer1 = new JsonWriter(string1);
    writer1.value(true);
    writer1.close();
    assertEquals(""true"", string1.toString());

    StringWriter string2 = new StringWriter();
    JsonWriter writer2 = new JsonWriter(string2);
    writer2.nullValue();
    writer2.close();
    assertEquals(""null"", string2.toString());

    StringWriter string3 = new StringWriter();
    JsonWriter writer3 = new JsonWriter(string3);
    writer3.value(123);
    writer3.close();
    assertEquals(""123"", string3.toString());

    StringWriter string4 = new StringWriter();
    JsonWriter writer4 = new JsonWriter(string4);
    writer4.value(123.4);
    writer4.close();
    assertEquals(""123.4"", string4.toString());

    StringWriter string5 = new StringWriter();
    JsonWriter writert = new JsonWriter(string5);
    writert.value(""a"");
    writert.close();
    assertEquals(""\""a\"""", string5.toString());
  }",java.lang.IllegalStateException: JSON must start with an array or an object.
Gson_5,/222043010/omniapr/defects4j/Gson_5_buggy/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,testDateDeserializationISO8601,"  public void testDateDeserializationISO8601() throws Exception {
  	DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter();
    assertParsed(""1970-01-01T00:00:00.000Z"", adapter);
    assertParsed(""1970-01-01T00:00Z"", adapter);
    assertParsed(""1970-01-01T00:00:00+00:00"", adapter);
    assertParsed(""1970-01-01T01:00:00+01:00"", adapter);
    assertParsed(""1970-01-01T01:00:00+01"", adapter);
  }",com.google.gson.JsonSyntaxException: 1970-01-01T01:00:00+01
Gson_6,/222043010/omniapr/defects4j/Gson_6_buggy/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java,testNullSafeBugDeserialize,"  public void testNullSafeBugDeserialize() throws Exception {
    Device device = gson.fromJson(""{'id':'ec57803e2'}"", Device.class);
    assertEquals(""ec57803e2"", device.id);
  }",java.lang.NullPointerException
Gson_6,/222043010/omniapr/defects4j/Gson_6_buggy/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java,testNullSafeBugSerialize,"  public void testNullSafeBugSerialize() throws Exception {
    Device device = new Device(""ec57803e"");
    gson.toJson(device);
  }",java.lang.NullPointerException
Gson_7,/222043010/omniapr/defects4j/Gson_7_buggy/gson/src/test/java/com/google/gson/functional/MapTest.java,testMapDeserializationWithUnquotedLongKeys,"  public void testMapDeserializationWithUnquotedLongKeys() {
    long longKey = 9876543210L;
    String json = String.format(""{%d:\""456\""}"", longKey);
    Type typeOfMap = new TypeToken<Map<Long, String>>() {}.getType();
    Map<Long, String> map = gson.fromJson(json, typeOfMap);
    assertEquals(1, map.size());
    assertTrue(map.containsKey(longKey));
    assertEquals(""456"", map.get(longKey));
  }",com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected a long but was STRING at line 1 column 2 path $.
Gson_7,/222043010/omniapr/defects4j/Gson_7_buggy/gson/src/test/java/com/google/gson/functional/MapTest.java,testMapDeserializationWithUnquotedIntegerKeys,"  public void testMapDeserializationWithUnquotedIntegerKeys() {
    Type typeOfMap = new TypeToken<Map<Integer, String>>() {}.getType();
    Map<Integer, String> map = gson.fromJson(""{123:\""456\""}"", typeOfMap);
    assertEquals(1, map.size());
    assertTrue(map.containsKey(123));
    assertEquals(""456"", map.get(123));
  }",com.google.gson.JsonSyntaxException: java.lang.IllegalStateException: Expected a long but was STRING at line 1 column 2 path $.
Gson_7,/222043010/omniapr/defects4j/Gson_7_buggy/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,testPeekingUnquotedStringsPrefixedWithIntegers,"  public void testPeekingUnquotedStringsPrefixedWithIntegers() throws IOException {
    JsonReader reader = new JsonReader(reader(""[12.34e5x]""));
    reader.setLenient(true);
    reader.beginArray();
    assertEquals(STRING, reader.peek());
    try {
      reader.nextInt();
      fail();
    } catch (NumberFormatException expected) {
    }
    assertEquals(""12.34e5x"", reader.nextString());
  }",java.lang.IllegalStateException: Expected an int but was STRING at line 1 column 2 path $[0]
Gson_8,/222043010/omniapr/defects4j/Gson_8_buggy/gson/src/test/java/com/google/gson/internal/UnsafeAllocatorInstantiationTest.java,testInterfaceInstantiation,"  public void testInterfaceInstantiation() {
    UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();
    try {
      unsafeAllocator.newInstance(Interface.class);
      fail();
    } catch (Exception e) {
      assertEquals(e.getClass(), UnsupportedOperationException.class);
    }
  }",junit.framework.AssertionFailedError: expected:<class java.lang.reflect.InvocationTargetException> but was:<class java.lang.UnsupportedOperationException>
Gson_8,/222043010/omniapr/defects4j/Gson_8_buggy/gson/src/test/java/com/google/gson/internal/UnsafeAllocatorInstantiationTest.java,testAbstractClassInstantiation,"  public void testAbstractClassInstantiation() {
    UnsafeAllocator unsafeAllocator = UnsafeAllocator.create();
    try {
      unsafeAllocator.newInstance(AbstractClass.class);
      fail();
    } catch (Exception e) {
      assertEquals(e.getClass(), UnsupportedOperationException.class);
    }
  }",junit.framework.AssertionFailedError: expected:<class java.lang.reflect.InvocationTargetException> but was:<class java.lang.UnsupportedOperationException>
Gson_9,/222043010/omniapr/defects4j/Gson_9_buggy/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,testBoxedBooleans,"  public void testBoxedBooleans() throws IOException {
    StringWriter stringWriter = new StringWriter();
    JsonWriter jsonWriter = new JsonWriter(stringWriter);
    jsonWriter.beginArray();
    jsonWriter.value((Boolean) true);
    jsonWriter.value((Boolean) false);
    jsonWriter.value((Boolean) null);
    jsonWriter.endArray();
    assertEquals(""[true,false,null]"", stringWriter.toString());
  }",java.lang.NullPointerException
Gson_10,/222043010/omniapr/defects4j/Gson_10_buggy/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java,testPrimitiveFieldAnnotationTakesPrecedenceOverDefault,"  public void testPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {
    Gson gson = new Gson();
    String json = gson.toJson(new GadgetWithPrimitivePart(42));
    assertEquals(""{\""part\"":\""42\""}"", json);
    GadgetWithPrimitivePart gadget = gson.fromJson(json, GadgetWithPrimitivePart.class);
    assertEquals(42, gadget.part);
  }","junit.framework.ComparisonFailure: expected:<{""part"":[""42""]}> but was:<{""part"":[42]}>"
Gson_11,/222043010/omniapr/defects4j/Gson_11_buggy/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java,testNumberAsStringDeserialization,"  public void testNumberAsStringDeserialization() {
    Number value = gson.fromJson(""\""18\"""", Number.class);
    assertEquals(18, value.intValue());
  }","com.google.gson.JsonSyntaxException: Expecting number, got: STRING"
Gson_12,/222043010/omniapr/defects4j/Gson_12_buggy/gson/src/test/java/com/google/gson/internal/bind/JsonTreeReaderTest.java,testSkipValue_filledJsonObject,"  public void testSkipValue_filledJsonObject() throws IOException {
    JsonObject jsonObject = new JsonObject();
    JsonArray jsonArray = new JsonArray();
    jsonArray.add('c');
    jsonArray.add(""text"");
    jsonObject.add(""a"", jsonArray);
    jsonObject.addProperty(""b"", true);
    jsonObject.addProperty(""i"", 1);
    jsonObject.add(""n"", JsonNull.INSTANCE);
    JsonObject jsonObject2 = new JsonObject();
    jsonObject2.addProperty(""n"", 2L);
    jsonObject.add(""o"", jsonObject2);
    jsonObject.addProperty(""s"", ""text"");
    JsonTreeReader in = new JsonTreeReader(jsonObject);
    in.skipValue();
    assertEquals(JsonToken.END_DOCUMENT, in.peek());
  }",java.lang.ArrayIndexOutOfBoundsException: -1
Gson_12,/222043010/omniapr/defects4j/Gson_12_buggy/gson/src/test/java/com/google/gson/internal/bind/JsonTreeReaderTest.java,testSkipValue_emptyJsonObject,"  public void testSkipValue_emptyJsonObject() throws IOException {
    JsonTreeReader in = new JsonTreeReader(new JsonObject());
    in.skipValue();
    assertEquals(JsonToken.END_DOCUMENT, in.peek());
  }",java.lang.ArrayIndexOutOfBoundsException: -1
Gson_13,/222043010/omniapr/defects4j/Gson_13_buggy/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java,testNegativeZero,"  public void testNegativeZero() throws Exception {
	  	JsonReader reader = new JsonReader(reader(""[-0]""));
	    reader.setLenient(false);
	    reader.beginArray();
	    assertEquals(NUMBER, reader.peek());
	    assertEquals(""-0"", reader.nextString());
  }",junit.framework.ComparisonFailure: expected:<[-]0> but was:<[]0>
Gson_14,/222043010/omniapr/defects4j/Gson_14_buggy/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,testDoubleSupertype,"  public void testDoubleSupertype() {
    assertEquals($Gson$Types.supertypeOf(Number.class),
            $Gson$Types.supertypeOf($Gson$Types.supertypeOf(Number.class)));
  }",junit.framework.AssertionFailedError: expected:<? super java.lang.Number> but was:<? super ? super java.lang.Number>
Gson_14,/222043010/omniapr/defects4j/Gson_14_buggy/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,testIssue440WeakReference,"  public void testIssue440WeakReference() throws Exception {
    TypeAdapter<WeakReference> adapter = new Gson().getAdapter(WeakReference.class);
    assertNotNull(adapter);
  }",junit.framework.AssertionFailedError: expected:<? super java.lang.Number> but was:<? super ? super java.lang.Number>
Gson_14,/222043010/omniapr/defects4j/Gson_14_buggy/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,testSubSupertype,"  public void testSubSupertype() {
    assertEquals($Gson$Types.subtypeOf(Object.class),
            $Gson$Types.subtypeOf($Gson$Types.supertypeOf(Number.class)));
  }",junit.framework.AssertionFailedError: expected:<? super java.lang.Number> but was:<? super ? super java.lang.Number>
Gson_14,/222043010/omniapr/defects4j/Gson_14_buggy/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,testDoubleSubtype,"  public void testDoubleSubtype() {
    assertEquals($Gson$Types.subtypeOf(Number.class),
            $Gson$Types.subtypeOf($Gson$Types.subtypeOf(Number.class)));
  }",junit.framework.AssertionFailedError: expected:<? super java.lang.Number> but was:<? super ? super java.lang.Number>
Gson_14,/222043010/omniapr/defects4j/Gson_14_buggy/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,testIssue603PrintStream,"  public void testIssue603PrintStream() {
    TypeAdapter<PrintStream> adapter = new Gson().getAdapter(PrintStream.class);
    assertNotNull(adapter);
  }",junit.framework.AssertionFailedError: expected:<? super java.lang.Number> but was:<? super ? super java.lang.Number>
Gson_14,/222043010/omniapr/defects4j/Gson_14_buggy/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,testSuperSubtype,"  public void testSuperSubtype() {
    assertEquals($Gson$Types.subtypeOf(Object.class),
            $Gson$Types.supertypeOf($Gson$Types.subtypeOf(Number.class)));
  }",junit.framework.AssertionFailedError: expected:<? super java.lang.Number> but was:<? super ? super java.lang.Number>
Gson_14,/222043010/omniapr/defects4j/Gson_14_buggy/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,testRecursiveResolveSimple,"  public void testRecursiveResolveSimple() {
    TypeAdapter<Foo1> adapter = new Gson().getAdapter(Foo1.class);
    assertNotNull(adapter);
  }",junit.framework.AssertionFailedError: expected:<? super java.lang.Number> but was:<? super ? super java.lang.Number>
Gson_15,/222043010/omniapr/defects4j/Gson_15_buggy/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java,testNonFiniteDoublesWhenLenient,"  public void testNonFiniteDoublesWhenLenient() throws IOException {
    StringWriter stringWriter = new StringWriter();
    JsonWriter jsonWriter = new JsonWriter(stringWriter);
    jsonWriter.setLenient(true);
    jsonWriter.beginArray();
    jsonWriter.value(Double.NaN);
    jsonWriter.value(Double.NEGATIVE_INFINITY);
    jsonWriter.value(Double.POSITIVE_INFINITY);
    jsonWriter.endArray();
    assertEquals(""[NaN,-Infinity,Infinity]"", stringWriter.toString());
  }","java.lang.IllegalArgumentException: Numeric values must be finite, but was NaN"
Gson_16,/222043010/omniapr/defects4j/Gson_16_buggy/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,testRecursiveTypeVariablesResolve12,"  public void testRecursiveTypeVariablesResolve12() throws Exception {
    TypeAdapter<TestType2> adapter = new Gson().getAdapter(TestType2.class);
    assertNotNull(adapter);
  }",java.lang.StackOverflowError
Gson_16,/222043010/omniapr/defects4j/Gson_16_buggy/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java,testRecursiveTypeVariablesResolve1,"  public void testRecursiveTypeVariablesResolve1() throws Exception {
    TypeAdapter<TestType> adapter = new Gson().getAdapter(TestType.class);
    assertNotNull(adapter);
  }",java.lang.StackOverflowError
Gson_17,/222043010/omniapr/defects4j/Gson_17_buggy/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,testUnexpectedToken,"  public void testUnexpectedToken() throws Exception {
    try {
      DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(Date.class);
      adapter.fromJson(""{}"");
      fail(""Unexpected token should fail."");
    } catch (IllegalStateException expected) { }
  }",com.google.gson.JsonParseException: The date should be a string value
Gson_17,/222043010/omniapr/defects4j/Gson_17_buggy/gson/src/test/java/com/google/gson/DefaultDateTypeAdapterTest.java,testNullValue,"  public void testNullValue() throws Exception {
    DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(Date.class);
    assertNull(adapter.fromJson(""null""));
    assertEquals(""null"", adapter.toJson(null));
  }",com.google.gson.JsonParseException: The date should be a string value
Gson_18,/222043010/omniapr/defects4j/Gson_18_buggy/gson/src/test/java/com/google/gson/functional/CollectionTest.java,testIssue1107,"  public void testIssue1107() {
    String json = ""{\n"" +
            ""  \""inBig\"": {\n"" +
            ""    \""key\"": [\n"" +
            ""      { \""inSmall\"": \""hello\"" }\n"" +
            ""    ]\n"" +
            ""  }\n"" +
            ""}"";
    BigClass bigClass = new Gson().fromJson(json, BigClass.class);
    SmallClass small = bigClass.inBig.get(""key"").get(0);
    assertNotNull(small);
    assertEquals(""hello"", small.inSmall);
  }",java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to com.google.gson.functional.CollectionTest$SmallClass
Csv_2,/222043010/omniapr/defects4j/Csv_2_buggy/src/test/java/org/apache/commons/csv/CSVRecordTest.java,testGetStringInconsistentRecord,"    public void testGetStringInconsistentRecord() {
        header.put(""fourth"", Integer.valueOf(4));
        recordWithHeader.get(""fourth"");
    }","java.lang.Exception: Unexpected exception, expected<java.lang.IllegalArgumentException> but was<java.lang.ArrayIndexOutOfBoundsException>"
Csv_3,/222043010/omniapr/defects4j/Csv_3_buggy/src/test/java/org/apache/commons/csv/CSVLexerTest.java,testEscapedMySqlNullValue,"    public void testEscapedMySqlNullValue() throws Exception {
        // MySQL uses \N to symbolize null values. We have to restore this
        final Lexer lexer = getLexer(""character\\NEscaped"", formatWithEscaping);
        assertThat(lexer.nextToken(new Token()), hasContent(""character\\NEscaped""));
    }",junit.framework.AssertionFailedError: 
Csv_3,/222043010/omniapr/defects4j/Csv_3_buggy/src/test/java/org/apache/commons/csv/CSVLexerTest.java,testEscapedCharacter,"    public void testEscapedCharacter() throws Exception {
        final Lexer lexer = getLexer(""character\\aEscaped"", formatWithEscaping);
        assertThat(lexer.nextToken(new Token()), hasContent(""character\\aEscaped""));
    }",junit.framework.AssertionFailedError: 
Csv_3,/222043010/omniapr/defects4j/Csv_3_buggy/src/test/java/org/apache/commons/csv/CSVParserTest.java,testBackslashEscaping,"    public void testBackslashEscaping() throws IOException {

        // To avoid confusion over the need for escaping chars in java code,
        // We will test with a forward slash as the escape char, and a single
        // quote as the encapsulator.

        final String code =
                ""one,two,three\n"" // 0
                        + ""'',''\n""       // 1) empty encapsulators
                        + ""/',/'\n""       // 2) single encapsulators
                        + ""'/'','/''\n""   // 3) single encapsulators encapsulated via escape
                        + ""'''',''''\n""   // 4) single encapsulators encapsulated via doubling
                        + ""/,,/,\n""       // 5) separator escaped
                        + ""//,//\n""       // 6) escape escaped
                        + ""'//','//'\n""   // 7) escape escaped in encapsulation
                        + ""   8   ,   \""quoted \""\"" /\"" // string\""   \n""     // don't eat spaces
                        + ""9,   /\n   \n""  // escaped newline
                        + """";
        final String[][] res = {
                {""one"", ""two"", ""three""}, // 0
                {"""", """"},                // 1
                {""'"", ""'""},              // 2
                {""'"", ""'""},              // 3
                {""'"", ""'""},              // 4
                {"","", "",""},              // 5
                {""/"", ""/""},              // 6
                {""/"", ""/""},              // 7
                {""   8   "", ""   \""quoted \""\"" /\"" / string\""   ""},
                {""9"", ""   \n   ""},
        };


        final CSVFormat format = CSVFormat.newBuilder(',').withQuoteChar('\'').withEscape('/')
                               .withIgnoreEmptyLines(true).withRecordSeparator(CRLF).build();

        final CSVParser parser = new CSVParser(code, format);
        final List<CSVRecord> records = parser.getRecords();
        assertTrue(records.size() > 0);

        Utils.compare(""Records do not match expected result"", res, records);
    }","junit.framework.AssertionFailedError: Records do not match expected result (entry 8): arrays first differed at element [1]; expected:<   ""quoted """" [/]"" / string""   > but was:<   ""quoted """" []"" / string""   >"
Csv_4,/222043010/omniapr/defects4j/Csv_4_buggy/src/test/java/org/apache/commons/csv/CSVParserTest.java,testNoHeaderMap,"    public void testNoHeaderMap() throws Exception {
        final CSVParser parser = CSVParser.parse(""a,b,c\n1,2,3\nx,y,z"", CSVFormat.DEFAULT);
        Assert.assertNull(parser.getHeaderMap());
    }",java.lang.NullPointerException
Csv_5,/222043010/omniapr/defects4j/Csv_5_buggy/src/test/java/org/apache/commons/csv/CSVFormatTest.java,testNullRecordSeparatorCsv106,"    public void testNullRecordSeparatorCsv106() {
        final CSVFormat format = CSVFormat.newFormat(';').withSkipHeaderRecord(true).withHeader(""H1"", ""H2"");
        final String formatStr = format.format(""A"", ""B"");
        assertNotNull(formatStr);
        assertFalse(formatStr.endsWith(""null""));
    }",junit.framework.AssertionFailedError
Csv_6,/222043010/omniapr/defects4j/Csv_6_buggy/src/test/java/org/apache/commons/csv/CSVRecordTest.java,testToMapWithShortRecord,"    public void testToMapWithShortRecord() throws Exception {
       final CSVParser parser =  CSVParser.parse(""a,b"", CSVFormat.DEFAULT.withHeader(""A"", ""B"", ""C""));
       final CSVRecord shortRec = parser.iterator().next();
       shortRec.toMap();
    }",java.lang.ArrayIndexOutOfBoundsException: 2
Csv_7,/222043010/omniapr/defects4j/Csv_7_buggy/src/test/java/org/apache/commons/csv/CSVParserTest.java,testDuplicateHeaderEntries,"    public void testDuplicateHeaderEntries() throws Exception {
        CSVParser.parse(""a,b,a\n1,2,3\nx,y,z"", CSVFormat.DEFAULT.withHeader(new String[]{}));
    }",junit.framework.AssertionFailedError: Expected exception: java.lang.IllegalStateException
Csv_8,/222043010/omniapr/defects4j/Csv_8_buggy/src/test/java/org/apache/commons/csv/CSVFormatTest.java,testDuplicateHeaderElements,"    public void testDuplicateHeaderElements() {
        CSVFormat.DEFAULT.withHeader(""A"", ""A"").validate();
    }","java.lang.Exception: Unexpected exception, expected<java.lang.IllegalArgumentException> but was<java.lang.IllegalStateException>"
Csv_9,/222043010/omniapr/defects4j/Csv_9_buggy/src/test/java/org/apache/commons/csv/CSVRecordTest.java,testToMapWithNoHeader,"    public void testToMapWithNoHeader() throws Exception {
       final CSVParser parser =  CSVParser.parse(""a,b"", CSVFormat.newFormat(','));
       final CSVRecord shortRec = parser.iterator().next();
       Map<String, String> map = shortRec.toMap();
       assertNotNull(""Map is not null."", map);
       assertTrue(""Map is empty."", map.isEmpty());
    }",java.lang.NullPointerException
Csv_10,/222043010/omniapr/defects4j/Csv_10_buggy/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,testHeader,"    public void testHeader() throws IOException {
        final StringWriter sw = new StringWriter();
        final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuoteChar(null)
                .withHeader(""C1"", ""C2"", ""C3""));
        printer.printRecord(""a"", ""b"", ""c"");
        printer.printRecord(""x"", ""y"", ""z"");
        assertEquals(""C1,C2,C3\r\na,b,c\r\nx,y,z\r\n"", sw.toString());
        printer.close();
    }","junit.framework.AssertionFailedError: expected:<[C1,C2,C3"
Csv_11,/222043010/omniapr/defects4j/Csv_11_buggy/src/test/java/org/apache/commons/csv/CSVParserTest.java,testHeaderMissingWithNull,"    public void testHeaderMissingWithNull() throws Exception {
        final Reader in = new StringReader(""a,,c,,d\n1,2,3,4\nx,y,z,zz"");
        CSVFormat.DEFAULT.withHeader().withNullString("""").withIgnoreEmptyHeaders(true).parse(in).iterator();
    }",java.lang.NullPointerException
Csv_12,/222043010/omniapr/defects4j/Csv_12_buggy/src/test/java/org/apache/commons/csv/CSVParserTest.java,testExcelHeaderCountLessThanData,"    public void testExcelHeaderCountLessThanData() throws Exception {
        final String code = ""A,B,C,,\r\na,b,c,d,e\r\n"";
        final CSVParser parser = CSVParser.parse(code, CSVFormat.EXCEL.withHeader());
        try {
            for (CSVRecord record : parser.getRecords()) {
                Assert.assertEquals(""a"", record.get(""A""));
                Assert.assertEquals(""b"", record.get(""B""));
                Assert.assertEquals(""c"", record.get(""C""));
            }
        } finally {
            parser.close();
        }
    }","java.lang.IllegalArgumentException: The header contains a duplicate name: """" in [A, B, C, , ]"
Csv_13,/222043010/omniapr/defects4j/Csv_13_buggy/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,testMySqlNullOutput,"    public void testMySqlNullOutput() throws IOException {
        Object[] s = new String[] { ""NULL"", null };
        CSVFormat format = CSVFormat.MYSQL.withQuote('""').withNullString(""NULL"").withQuoteMode(QuoteMode.NON_NUMERIC);
        StringWriter writer = new StringWriter();
        CSVPrinter printer = new CSVPrinter(writer, format);
        printer.printRecord(s);
        printer.close();
        String expected = ""\""NULL\""\tNULL\n"";
        assertEquals(expected, writer.toString());
        String[] record0 = toFirstRecordValues(expected, format);
        assertArrayEquals(new Object[2], record0);

        s = new String[] { ""\\N"", null };
        format = CSVFormat.MYSQL.withNullString(""\\N"");
        writer = new StringWriter();
        printer = new CSVPrinter(writer, format);
        printer.printRecord(s);
        printer.close();
        expected = ""\\\\N\t\\N\n"";
        assertEquals(expected, writer.toString());
        record0 = toFirstRecordValues(expected, format);
        assertArrayEquals(expectNulls(s, format), record0);

        s = new String[] { ""\\N"", ""A"" };
        format = CSVFormat.MYSQL.withNullString(""\\N"");
        writer = new StringWriter();
        printer = new CSVPrinter(writer, format);
        printer.printRecord(s);
        printer.close();
        expected = ""\\\\N\tA\n"";
        assertEquals(expected, writer.toString());
        record0 = toFirstRecordValues(expected, format);
        assertArrayEquals(expectNulls(s, format), record0);

        s = new String[] { ""\n"", ""A"" };
        format = CSVFormat.MYSQL.withNullString(""\\N"");
        writer = new StringWriter();
        printer = new CSVPrinter(writer, format);
        printer.printRecord(s);
        printer.close();
        expected = ""\\n\tA\n"";
        assertEquals(expected, writer.toString());
        record0 = toFirstRecordValues(expected, format);
        assertArrayEquals(expectNulls(s, format), record0);

        s = new String[] { """", null };
        format = CSVFormat.MYSQL.withNullString(""NULL"");
        writer = new StringWriter();
        printer = new CSVPrinter(writer, format);
        printer.printRecord(s);
        printer.close();
        expected = ""\tNULL\n"";
        assertEquals(expected, writer.toString());
        record0 = toFirstRecordValues(expected, format);
        assertArrayEquals(expectNulls(s, format), record0);

        s = new String[] { """", null };
        format = CSVFormat.MYSQL;
        writer = new StringWriter();
        printer = new CSVPrinter(writer, format);
        printer.printRecord(s);
        printer.close();
        expected = ""\t\\N\n"";
        assertEquals(expected, writer.toString());
        record0 = toFirstRecordValues(expected, format);
        assertArrayEquals(expectNulls(s, format), record0);

        s = new String[] { ""\\N"", """", ""\u000e,\\\r"" };
        format = CSVFormat.MYSQL;
        writer = new StringWriter();
        printer = new CSVPrinter(writer, format);
        printer.printRecord(s);
        printer.close();
        expected = ""\\\\N\t\t\u000e,\\\\\\r\n"";
        assertEquals(expected, writer.toString());
        record0 = toFirstRecordValues(expected, format);
        assertArrayEquals(expectNulls(s, format), record0);

        s = new String[] { ""NULL"", ""\\\r"" };
        format = CSVFormat.MYSQL;
        writer = new StringWriter();
        printer = new CSVPrinter(writer, format);
        printer.printRecord(s);
        printer.close();
        expected = ""NULL\t\\\\\\r\n"";
        assertEquals(expected, writer.toString());
        record0 = toFirstRecordValues(expected, format);
        assertArrayEquals(expectNulls(s, format), record0);

        s = new String[] { ""\\\r"" };
        format = CSVFormat.MYSQL;
        writer = new StringWriter();
        printer = new CSVPrinter(writer, format);
        printer.printRecord(s);
        printer.close();
        expected = ""\\\\\\r\n"";
        assertEquals(expected, writer.toString());
        record0 = toFirstRecordValues(expected, format);
        assertArrayEquals(expectNulls(s, format), record0);
    }","junit.framework.AssertionFailedError: expected:<""NULL""	[NULL]"
Csv_13,/222043010/omniapr/defects4j/Csv_13_buggy/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,testMySqlNullStringDefault,"    public void testMySqlNullStringDefault() throws IOException {
        assertEquals(""\\N"", CSVFormat.MYSQL.getNullString());
    }","junit.framework.AssertionFailedError: expected:<""NULL""	[NULL]"
Csv_14,/222043010/omniapr/defects4j/Csv_14_buggy/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,testEscapeNull1,"    public void testEscapeNull1() throws IOException {
        StringWriter sw = new StringWriter();
        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape(null))) {
            printer.print(""\\"");
        }
        assertEquals(""\\"", sw.toString());
    }","junit.framework.AssertionFailedError: expected:<[\]> but was:<[""\""]>"
Csv_14,/222043010/omniapr/defects4j/Csv_14_buggy/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,testEscapeNull4,"    public void testEscapeNull4() throws IOException {
        StringWriter sw = new StringWriter();
        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape(null))) {
            printer.print(""\\\\"");
        }
        assertEquals(""\\\\"", sw.toString());
    }","junit.framework.AssertionFailedError: expected:<[\]> but was:<[""\""]>"
Csv_14,/222043010/omniapr/defects4j/Csv_14_buggy/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,testEscapeNull5,"    public void testEscapeNull5() throws IOException {
        StringWriter sw = new StringWriter();
        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withEscape(null))) {
            printer.print(""\\\\"");
        }
        assertEquals(""\\\\"", sw.toString());
    }","junit.framework.AssertionFailedError: expected:<[\]> but was:<[""\""]>"
Csv_14,/222043010/omniapr/defects4j/Csv_14_buggy/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,testEscapeBackslash1,"    public void testEscapeBackslash1() throws IOException {
        StringWriter sw = new StringWriter();
        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(QUOTE_CH))) {
            printer.print(""\\"");
        }
        assertEquals(""\\"", sw.toString());
    }","junit.framework.AssertionFailedError: expected:<[\]> but was:<[""\""]>"
Csv_14,/222043010/omniapr/defects4j/Csv_14_buggy/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,testEscapeBackslash4,"    public void testEscapeBackslash4() throws IOException {
        StringWriter sw = new StringWriter();
        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(QUOTE_CH))) {
            printer.print(""\\\\"");
        }
        assertEquals(""\\\\"", sw.toString());
    }","junit.framework.AssertionFailedError: expected:<[\]> but was:<[""\""]>"
Csv_14,/222043010/omniapr/defects4j/Csv_14_buggy/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,testEscapeBackslash5,"    public void testEscapeBackslash5() throws IOException {
        StringWriter sw = new StringWriter();
        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.DEFAULT.withQuote(QUOTE_CH))) {
            printer.print(""\\\\"");
        }
        assertEquals(""\\\\"", sw.toString());
    }","junit.framework.AssertionFailedError: expected:<[\]> but was:<[""\""]>"
Csv_15,/222043010/omniapr/defects4j/Csv_15_buggy/src/test/java/org/apache/commons/csv/CSVPrinterTest.java,testDontQuoteEuroFirstChar,"    public void testDontQuoteEuroFirstChar() throws IOException {
        final StringWriter sw = new StringWriter();
        try (final CSVPrinter printer = new CSVPrinter(sw, CSVFormat.RFC4180)) {
            printer.printRecord(EURO_CH, ""Deux"");
            assertEquals(EURO_CH + "",Deux"" + recordSeparator, sw.toString());
        }
    }","junit.framework.AssertionFailedError: expected:<[€],Deux"
Csv_16,/222043010/omniapr/defects4j/Csv_16_buggy/src/test/java/org/apache/commons/csv/CSVParserTest.java,testIteratorSequenceBreaking,"    public void testIteratorSequenceBreaking() throws IOException {
        final String fiveRows = ""1\n2\n3\n4\n5\n"";

        // Iterator hasNext() shouldn't break sequence
        CSVParser parser = CSVFormat.DEFAULT.parse(new StringReader(fiveRows));
        int recordNumber = 0;
        Iterator<CSVRecord> iter = parser.iterator();
        recordNumber = 0;
        while (iter.hasNext()) {
            CSVRecord record = iter.next();
            recordNumber++;
            assertEquals(String.valueOf(recordNumber), record.get(0));
            if (recordNumber >= 2) {
                break;
            }
        }
        iter.hasNext();
        while (iter.hasNext()) {
            CSVRecord record = iter.next();
            recordNumber++;
            assertEquals(String.valueOf(recordNumber), record.get(0));
        }

        // Consecutive enhanced for loops shouldn't break sequence
        parser = CSVFormat.DEFAULT.parse(new StringReader(fiveRows));
        recordNumber = 0;
        for (CSVRecord record : parser) {
            recordNumber++;
            assertEquals(String.valueOf(recordNumber), record.get(0));
            if (recordNumber >= 2) {
                break;
            }
        }
        for (CSVRecord record : parser) {
            recordNumber++;
            assertEquals(String.valueOf(recordNumber), record.get(0));
        }

        // Consecutive enhanced for loops with hasNext() peeking shouldn't break sequence
        parser = CSVFormat.DEFAULT.parse(new StringReader(fiveRows));
        recordNumber = 0;
        for (CSVRecord record : parser) {
            recordNumber++;
            assertEquals(String.valueOf(recordNumber), record.get(0));
            if (recordNumber >= 2) {
                break;
            }
        }
        parser.iterator().hasNext();
        for (CSVRecord record : parser) {
            recordNumber++;
            assertEquals(String.valueOf(recordNumber), record.get(0));
        }
    }",junit.framework.AssertionFailedError: expected:<[3]> but was:<[4]>
JxPath_2,/222043010/omniapr/defects4j/JxPath_2_buggy/src/test/org/apache/commons/jxpath/ri/compiler/ExtensionFunctionTest.java,testNodeSetReturn,"    public void testNodeSetReturn() {
        assertXPathValueIterator(
            context,
            ""test:nodeSet()/name"",
            list(""Name 1"", ""Name 2""));

        assertXPathValueIterator(
            context,
            ""test:nodeSet()"",
            list(testBean.getBeans()[0], testBean.getBeans()[1]));

        assertXPathPointerIterator(
            context,
            ""test:nodeSet()/name"",
            list(""/beans[1]/name"", ""/beans[2]/name""));
            
        assertXPathValueAndPointer(
            context,
            ""test:nodeSet()/name"",
            ""Name 1"",
            ""/beans[1]/name"");        

        assertXPathValueAndPointer(
            context,
            ""test:nodeSet()/@name"",
            ""Name 1"",
            ""/beans[1]/@name"");
    }","junit.framework.AssertionFailedError: Evaluating value iterator <test:nodeSet()> expected:<[Nested: Name 1, Nested: Name 2]> but was:<[[/beans[1], /beans[2]]]>"
JxPath_3,/222043010/omniapr/defects4j/JxPath_3_buggy/src/test/org/apache/commons/jxpath/ri/model/beans/BadlyImplementedFactoryTest.java,testBadFactoryImplementation,"    public void testBadFactoryImplementation() {
        try {
            context.createPath(""foo/bar"");
            fail(""should fail with JXPathException caused by JXPathAbstractFactoryException"");
        } catch (JXPathException e) {
            assertTrue(e.getCause() instanceof JXPathAbstractFactoryException);
        }
    }",junit.framework.AssertionFailedError
JxPath_4,/222043010/omniapr/defects4j/JxPath_4_buggy/src/test/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java,testPreserveDOM,"    public void testPreserveDOM() {
        doTest(""preserve"", DocumentContainer.MODEL_DOM, "" foo "");
    }",junit.framework.AssertionFailedError: expected:<foo> but was:< foo >
JxPath_4,/222043010/omniapr/defects4j/JxPath_4_buggy/src/test/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java,testNestedJDOM,"    public void testNestedJDOM() {
        doTest(""nested"", DocumentContainer.MODEL_JDOM, ""foo;bar; baz "");
    }",junit.framework.AssertionFailedError: expected:<foo> but was:< foo >
JxPath_4,/222043010/omniapr/defects4j/JxPath_4_buggy/src/test/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java,testNestedWithCommentsJDOM,"    public void testNestedWithCommentsJDOM() {
        doTest(""nested-with-comments"", DocumentContainer.MODEL_JDOM, ""foo;bar; baz "");
    }",junit.framework.AssertionFailedError: expected:<foo> but was:< foo >
JxPath_4,/222043010/omniapr/defects4j/JxPath_4_buggy/src/test/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java,testPreserveJDOM,"    public void testPreserveJDOM() {
        doTest(""preserve"", DocumentContainer.MODEL_JDOM, "" foo "");
    }",junit.framework.AssertionFailedError: expected:<foo> but was:< foo >
JxPath_4,/222043010/omniapr/defects4j/JxPath_4_buggy/src/test/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java,testNestedDOM,"    public void testNestedDOM() {
        doTest(""nested"", DocumentContainer.MODEL_DOM, ""foo;bar; baz "");
    }",junit.framework.AssertionFailedError: expected:<foo> but was:< foo >
JxPath_4,/222043010/omniapr/defects4j/JxPath_4_buggy/src/test/org/apache/commons/jxpath/ri/model/XMLSpaceTest.java,testNestedWithCommentsDOM,"    public void testNestedWithCommentsDOM() {
        doTest(""nested-with-comments"", DocumentContainer.MODEL_DOM, ""foo;bar; baz "");
    }",junit.framework.AssertionFailedError: expected:<foo> but was:< foo >
JxPath_5,/222043010/omniapr/defects4j/JxPath_5_buggy/src/test/org/apache/commons/jxpath/ri/compiler/VariableTest.java,testUnionOfVariableAndNode,"    public void testUnionOfVariableAndNode() throws Exception {
        Document doc = DocumentBuilderFactory.newInstance()
                .newDocumentBuilder().parse(
                        new InputSource(new StringReader(
                                ""<MAIN><A/><A/></MAIN>"")));

        JXPathContext context = JXPathContext.newContext(doc);
        context.getVariables().declareVariable(""var"", ""varValue"");
        int sz = 0;
        for (Iterator ptrs = context.iteratePointers(""$var | /MAIN/A""); ptrs.hasNext(); sz++) {
            ptrs.next();
        }
        assertEquals(3, sz);
    }",org.apache.commons.jxpath.JXPathException: Cannot compare pointers that do not belong to the same tree: '' and '$var'
JxPath_6,/222043010/omniapr/defects4j/JxPath_6_buggy/src/test/org/apache/commons/jxpath/ri/compiler/VariableTest.java,testIterateVariable,"    public void testIterateVariable() throws Exception {
        assertXPathValueIterator(context, ""$d"", list(""a"", ""b""));
        assertXPathValue(context, ""$d = 'a'"", Boolean.TRUE);
        assertXPathValue(context, ""$d = 'b'"", Boolean.TRUE);
    }",junit.framework.AssertionFailedError: Evaluating <$d = 'a'> expected:<true> but was:<false>
JxPath_7,/222043010/omniapr/defects4j/JxPath_7_buggy/src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java,testNodeSetOperations,"    public void testNodeSetOperations() {
        assertXPathValue(context, ""$array > 0"", Boolean.TRUE, Boolean.class);
        assertXPathValue(context, ""$array >= 0"", Boolean.TRUE, Boolean.class);
        assertXPathValue(context, ""$array = 0"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$array = 0.25"", Boolean.TRUE, Boolean.class);
        assertXPathValue(context, ""$array = 0.5"", Boolean.TRUE, Boolean.class);
        assertXPathValue(context, ""$array = 0.50000"", Boolean.TRUE, Boolean.class);
        assertXPathValue(context, ""$array = 0.75"", Boolean.TRUE, Boolean.class);
        assertXPathValue(context, ""$array < 1"", Boolean.TRUE, Boolean.class);
        assertXPathValue(context, ""$array <= 1"", Boolean.TRUE, Boolean.class);
        assertXPathValue(context, ""$array = 1"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$array > 1"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$array < 0"", Boolean.FALSE, Boolean.class);
    }",junit.framework.AssertionFailedError: Evaluating <$array > 0> expected:<true> but was:<false>
JxPath_8,/222043010/omniapr/defects4j/JxPath_8_buggy/src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java,testNan,"    public void testNan() {
        assertXPathValue(context, ""$nan > $nan"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan < $nan"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan = $nan"", Boolean.TRUE, Boolean.class);
        assertXPathValue(context, ""$nan > 0"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan < 0"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan = 0"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan > 1"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan < 1"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan = 1"", Boolean.FALSE, Boolean.class);
    }",junit.framework.AssertionFailedError: Evaluating <$nan > $nan> expected:<false> but was:<true>
JxPath_9,/222043010/omniapr/defects4j/JxPath_9_buggy/src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java,testNan,"    public void testNan() {
        assertXPathValue(context, ""$nan > $nan"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan < $nan"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan >= $nan"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan <= $nan"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan >= $nan and $nan <= $nan"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan = $nan"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan != $nan"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan > 0"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan < 0"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan >= 0"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan <= 0"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan >= 0 and $nan <= 0"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan = 0"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan != 0"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan > 1"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan < 1"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan >= 1"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan <= 1"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan >= 1 and $nan <= 1"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan = 1"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$nan != 1"", Boolean.FALSE, Boolean.class);
    }",junit.framework.AssertionFailedError: Evaluating <$nan = $nan> expected:<false> but was:<true>
JxPath_10,/222043010/omniapr/defects4j/JxPath_10_buggy/src/test/org/apache/commons/jxpath/ri/compiler/CoreOperationTest.java,testEmptyNodeSetOperations,"    public void testEmptyNodeSetOperations() {
        assertXPathValue(context, ""/idonotexist = 0"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""/idonotexist != 0"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""/idonotexist < 0"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""/idonotexist > 0"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""/idonotexist >= 0"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""/idonotexist <= 0"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$array[position() < 1] = 0"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$array[position() < 1] != 0"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$array[position() < 1] < 0"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$array[position() < 1] > 0"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$array[position() < 1] >= 0"", Boolean.FALSE, Boolean.class);
        assertXPathValue(context, ""$array[position() < 1] <= 0"", Boolean.FALSE, Boolean.class);
    }",junit.framework.AssertionFailedError: Evaluating </idonotexist >= 0> expected:<false> but was:<true>
JxPath_12,/222043010/omniapr/defects4j/JxPath_12_buggy/src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java,testElementDOM,"    public void testElementDOM() {
        doTestElement(DocumentContainer.MODEL_DOM);
    }",org.apache.commons.jxpath.JXPathNotFoundException: No value for xpath: /ElementA/B:ElementB
JxPath_13,/222043010/omniapr/defects4j/JxPath_13_buggy/src/test/org/apache/commons/jxpath/ri/model/ExternalXMLNamespaceTest.java,testCreateAndSetAttributeDOM,"    public void testCreateAndSetAttributeDOM() {
        doTestCreateAndSetAttribute(DocumentContainer.MODEL_DOM);
    }",org.apache.commons.jxpath.JXPathException: Unknown namespace prefix: A
JxPath_14,/222043010/omniapr/defects4j/JxPath_14_buggy/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java,testCoreFunctions,"    public void testCoreFunctions() {
        assertXPathValue(context, ""string(2)"", ""2"");
        assertXPathValue(context, ""string($nan)"", ""NaN"");
        assertXPathValue(context, ""string(-$nan)"", ""NaN"");
        assertXPathValue(context, ""string(-2 div 0)"", ""-Infinity"");
        assertXPathValue(context, ""string(2 div 0)"", ""Infinity"");
        assertXPathValue(context, ""concat('a', 'b', 'c')"", ""abc"");
        assertXPathValue(context, ""starts-with('abc', 'ab')"", Boolean.TRUE);
        assertXPathValue(context, ""starts-with('xabc', 'ab')"", Boolean.FALSE);
        assertXPathValue(context, ""contains('xabc', 'ab')"", Boolean.TRUE);
        assertXPathValue(context, ""contains('xabc', 'ba')"", Boolean.FALSE);
        assertXPathValue(
            context,
            ""substring-before('1999/04/01', '/')"",
            ""1999"");
        assertXPathValue(
            context,
            ""substring-after('1999/04/01', '/')"",
            ""04/01"");
        assertXPathValue(context, ""substring('12345', 2, 3)"", ""234"");
        assertXPathValue(context, ""substring('12345', 2)"", ""2345"");
        assertXPathValue(context, ""substring('12345', 1.5, 2.6)"", ""234"");
        assertXPathValue(context, ""substring('12345', 0, 3)"", ""12"");
        assertXPathValue(context, ""substring('12345', 0 div 0, 3)"", """");
        assertXPathValue(context, ""substring('12345', 1, 0 div 0)"", """");
        assertXPathValue(context, ""substring('12345', -42, 1 div 0)"", ""12345"");
        assertXPathValue(context, ""substring('12345', -1 div 0, 1 div 0)"", """");
        assertXPathValue(context, ""substring('12345', 6, 6)"", """");
        assertXPathValue(context, ""substring('12345', 7, 8)"", """");
        assertXPathValue(context, ""substring('12345', 7)"", """");
        assertXPathValue(context, ""string-length('12345')"", new Double(5));
        assertXPathValue(context, ""normalize-space(' abc  def  ')"", ""abc def"");
        assertXPathValue(context, ""normalize-space('abc def')"", ""abc def"");
        assertXPathValue(context, ""normalize-space('   ')"", """");
        assertXPathValue(context, ""translate('--aaa--', 'abc-', 'ABC')"", ""AAA"");
        assertXPathValue(context, ""boolean(1)"", Boolean.TRUE);
        assertXPathValue(context, ""boolean(0)"", Boolean.FALSE);
        assertXPathValue(context, ""boolean('x')"", Boolean.TRUE);
        assertXPathValue(context, ""boolean('')"", Boolean.FALSE);
        assertXPathValue(context, ""boolean(/list)"", Boolean.TRUE);
        assertXPathValue(context, ""boolean(/list[position() < 1])"", Boolean.FALSE);

        assertXPathValue(context, ""true()"", Boolean.TRUE);
        assertXPathValue(context, ""false()"", Boolean.FALSE);
        assertXPathValue(context, ""not(false())"", Boolean.TRUE);
        assertXPathValue(context, ""not(true())"", Boolean.FALSE);
        assertXPathValue(context, ""null()"", null);        
        assertXPathValue(context, ""number('1')"", new Double(1));
        assertXPathValue(context, ""number($bool_true)"", new Double(1));
        assertXPathValue(context, ""number($bool_false)"", new Double(0));
        assertXPathValue(context, ""floor(1.5)"", new Double(1));
        assertXPathValue(context, ""floor(-1.5)"", new Double(-2));
        assertXPathValue(context, ""ceiling(1.5)"", new Double(2));
        assertXPathValue(context, ""ceiling(-1.5)"", new Double(-1));
        assertXPathValue(context, ""round(1.5)"", new Double(2));
        assertXPathValue(context, ""round(-1.5)"", new Double(-1));

        assertXPathValue(context, ""floor('NaN')"", new Double(Double.NaN));
        assertXPathValue(context, ""floor(-2 div 0)"", new Double(Double.NEGATIVE_INFINITY));
        assertXPathValue(context, ""floor(2 div 0)"", new Double(Double.POSITIVE_INFINITY));
        assertXPathValue(context, ""ceiling('NaN')"", new Double(Double.NaN));
        assertXPathValue(context, ""ceiling(-2 div 0)"", new Double(Double.NEGATIVE_INFINITY));
        assertXPathValue(context, ""ceiling(2 div 0)"", new Double(Double.POSITIVE_INFINITY));
        assertXPathValue(context, ""round('NaN')"", new Double(Double.NaN));
        assertXPathValue(context, ""round(-2 div 0)"", new Double(Double.NEGATIVE_INFINITY));
        assertXPathValue(context, ""round(2 div 0)"", new Double(Double.POSITIVE_INFINITY));
    }",junit.framework.AssertionFailedError: Evaluating <round('NaN')> expected:<NaN> but was:<0.0>
JxPath_19,/222043010/omniapr/defects4j/JxPath_19_buggy/src/test/org/apache/commons/jxpath/ri/model/AliasedNamespaceIterationTest.java,testIterateJDOM,"    public void testIterateJDOM() {
        doTestIterate(DocumentContainer.MODEL_JDOM);
    }","junit.framework.AssertionFailedError: Evaluating pointer iterator </a:doc/a:elem> expected:<[/a:doc[1]/a:elem[1], /a:doc[1]/a:elem[2]]> but was:<[/a:doc[1]/a:elem[1], /a:doc[1]/a:elem[1]]>"
JxPath_19,/222043010/omniapr/defects4j/JxPath_19_buggy/src/test/org/apache/commons/jxpath/ri/model/AliasedNamespaceIterationTest.java,testIterateDOM,"    public void testIterateDOM() {
        doTestIterate(DocumentContainer.MODEL_DOM);
    }","junit.framework.AssertionFailedError: Evaluating pointer iterator </a:doc/a:elem> expected:<[/a:doc[1]/a:elem[1], /a:doc[1]/a:elem[2]]> but was:<[/a:doc[1]/a:elem[1], /a:doc[1]/a:elem[1]]>"
JxPath_20,/222043010/omniapr/defects4j/JxPath_20_buggy/src/test/org/apache/commons/jxpath/ri/compiler/JXPath149Test.java,testComplexOperationWithVariables,"    public void testComplexOperationWithVariables() {
        JXPathContext context = JXPathContext.newContext(null);
        context.getVariables().declareVariable(""a"", Integer.valueOf(0));
        context.getVariables().declareVariable(""b"", Integer.valueOf(0));
        context.getVariables().declareVariable(""c"", Integer.valueOf(1));
        assertXPathValue(context, ""$a + $b <= $c"", Boolean.TRUE);
    }",junit.framework.AssertionFailedError: Evaluating <$a + $b <= $c> expected:<true> but was:<false>
JxPath_21,/222043010/omniapr/defects4j/JxPath_21_buggy/src/test/org/apache/commons/jxpath/ri/model/JXPath151Test.java,testMapValueEquality,"    public void testMapValueEquality() {
        assertXPathValue(context, ""map/b != map/a"", Boolean.TRUE);
        assertXPathValue(context, ""map/a != map/b"", Boolean.TRUE);
        assertXPathValue(context, ""map/a != map/c"", Boolean.FALSE);
        assertXPathValue(context, ""map/a = map/b"", Boolean.FALSE);
        assertXPathValue(context, ""map/a = map/c"", Boolean.TRUE);
        assertXPathValue(context, ""not(map/a = map/b)"", Boolean.TRUE);
        assertXPathValue(context, ""not(map/a = map/c)"", Boolean.FALSE);
    }",junit.framework.AssertionFailedError: Evaluating <map/b != map/a> expected:<true> but was:<false>
JxPath_21,/222043010/omniapr/defects4j/JxPath_21_buggy/src/test/org/apache/commons/jxpath/ri/model/MixedModelTest.java,testNull,"    public void testNull() {

        assertXPathPointerLenient(context, ""$null"", ""$null"");

        assertXPathPointerLenient(context, ""$null[3]"", ""$null[3]"");

        assertXPathPointerLenient(
            context,
            ""$testnull/nothing"",
            ""$testnull/nothing"");

        assertXPathPointerLenient(
            context,
            ""$testnull/nothing[2]"",
            ""$testnull/nothing[2]"");

        assertXPathPointerLenient(context, ""beans[8]/int"", ""/beans[8]/int"");

        assertXPathValueIterator(
            context,
            ""$testnull/nothing[1]"",
            list(null));

        JXPathContext ctx = JXPathContext.newContext(new TestNull());
        assertXPathValue(ctx, ""nothing"", null);

        assertXPathValue(ctx, ""child/nothing"", null);

        assertXPathValue(ctx, ""array[2]"", null);

        assertXPathValueLenient(ctx, ""nothing/something"", null);

        assertXPathValueLenient(ctx, ""array[2]/something"", null);
    }",junit.framework.AssertionFailedError: Evaluating value iterator <$testnull/nothing[1]> expected:<[null]> but was:<[]>
JxPath_22,/222043010/omniapr/defects4j/JxPath_22_buggy/src/test/org/apache/commons/jxpath/ri/model/JXPath154Test.java,testInnerEmptyNamespaceDOM,"    public void testInnerEmptyNamespaceDOM() {
        doTest(""b:foo/test"", DocumentContainer.MODEL_DOM, ""/b:foo[1]/test[1]"");
    }",junit.framework.ComparisonFailure: expected:</b:foo[1]/[test[1]]> but was:</b:foo[1]/[node()[2]]>
