class Solution:
    def maxMoves(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])  # Correct assignment for n
        dq = deque(i for i in range(m))  # Start from any cell in the first column
        moves = 0
        while dq and moves < n - 1:
            nxt = set()
            for _ in range(len(dq)):
                idx = dq.popleft()
                val = grid[idx][moves]
                for i in range(max(0, idx - 1), min(m, idx + 2)):
                    if moves + 1 < n and grid[i][moves + 1] > val:  # Range check
                        nxt.add(i)
            if len(nxt) > 0:
                moves += 1
            dq.extend(nxt)
        return moves
