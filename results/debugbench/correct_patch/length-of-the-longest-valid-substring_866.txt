class Solution {
public:
    int longestValidSubstring(string word, vector<string>& forbidden) {
        vector<int> ends(word.size(), -1);
        unordered_map<string, int> forbidden_word;
        for(auto& it : forbidden) forbidden_word[it] = 1;
        int n = word.size();
        for(int i = 0; i < n; ++i){
            string temp = "";
            for(int j = i; j < i + 10 && j < n; ++j){
                temp += word[j];
                if(forbidden_word.find(temp) != forbidden_word.end()) {
                    ends[j] = i;
                }
            }
        }

        int i = 0, j = 0;
        int ans = 0;
        while(j < n){
            if(ends[j] != -1){
                int st = ends[j];
                if(st >= i){
                    i = st + 1;
                }
            }
            ans = max(ans, j - i + 1);
            ++j;
        }
        return ans;
    }
};
