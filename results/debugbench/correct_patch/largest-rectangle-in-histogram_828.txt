#include<stack>
#include<vector>

class Solution {
public:
    std::vector<int> nextSmallNumberIndex(std::vector<int>& v){
        int n = v.size(), num = 0;
        std::vector<int> ans(n);
        std::stack<int> s;
        s.push(-1);
        for(int i = n - 1; i >= 0; i--){
            num = v[i];
            while(s.top() != -1 && v[s.top()] >= num){
                s.pop();
            }
            ans[i] = s.top();
            s.push(i);
        }
        return ans;
    }
    
    std::vector<int> prevSmallNumberIndex(std::vector<int>& v){
        int n = v.size(), num = 0;
        std::vector<int> ans(n);
        std::stack<int> s;
        s.push(-1);
        for(int i = 0; i < n; i++){
            num = v[i];
            while(s.top() != -1 && v[s.top()] >= num){
                s.pop();
            }
            ans[i] = s.top();
            s.push(i);
        }
        return ans;
    }
    
    int largestRectangleArea(std::vector<int>& heights) {
        int size = heights.size(), h, l, area = 0, curArea;
        std::vector<int> next = nextSmallNumberIndex(heights);
        std::vector<int> prev = prevSmallNumberIndex(heights);
        for(int i = 0; i < size; i++){
            h = heights[i];
            if(next[i] == -1) next[i] = size;
            l = next[i] - prev[i] - 1;
            curArea = l * h;
            area = std::max(area, curArea);
        }
        return area;        
    }
};
