class Solution {
public:
     long long int getSum(vector<int> &nums){
        long long int temp = 0;
        for(auto &i : nums) temp += i;
        return temp;
    }

    bool check(const unordered_map<long long int, pair<int, int>> &mp, long long int val, int pivot, bool flag){
        auto it = mp.find(val);
        if(it == mp.end()) return false;
        
        if(flag){
            return it->second.second >= pivot;
        } else {
            return it->second.first < pivot;
        }
    }

    int waysToPartition(vector<int>& nums, int k) {
        unordered_map<long long int, pair<int, int>> mp;
        unordered_map<long long int, pair<int, int>> count;

        for(int i=0; i<nums.size(); i++){
            if(mp.find(nums[i]) == mp.end()){
                mp[nums[i]] = {i, i};  // Initialize both first and second for safety
            } else {
                mp[nums[i]].second = i;  // Update the last index appearance
            }
        }

        long long int totSum = getSum(nums);
        long long int left = nums[0];
        int ans = 0;

        for(int i=1; i<nums.size(); i++){
            long long int right = totSum - left;

            if(left == right){
                ans++;
            } else {
                long long int diff = left - right;
                long long int num = k - diff;

                if(check(mp, num, i, true)){
                    count[num].second++;
                }

                diff = right - left;
                num = k - diff;

                if(check(mp, num, i, false)){
                    count[num].first++; 
                }
            }

            left += nums[i];

            if(count.find(nums[i]) == count.end()){
                count[nums[i]] = {0, 0};
            }
            count[nums[i]].first = max(count[nums[i]].first, count[nums[i]].second);
        }

        int maxi = INT_MIN;
        for(auto &[i, j] : count){
            maxi = max(maxi, max(j.first, j.second));
        }

        return max(maxi, ans);
    }
};
