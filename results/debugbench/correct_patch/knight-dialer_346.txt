long long mod = 1e9+7;
int dx[] = {2,2,1,1,-2,-2,-1,-1};
int dy[] = {1,-1,2,-2,1,-1,2,-2};
int dp[4][3][5002];
class Solution {
public:
    int f(vector<vector<int>>& nums, int i, int j, int n) {
        if(i < 0 || j < 0 || i >= 4 || j >= 3 || nums[i][j] == -1) return 0;
        if(n == 0) return 1;
        auto &t = dp[i][j][n];
        if(t != -1) return t;
        int ans = 0;
        for(int k = 0; k < 8; k++) {
            int x = dx[k] + i;
            int y = dy[k] + j;
            ans = (ans + f(nums, x, y, n - 1)) % mod;
        }
        return t = ans;
    }

    int knightDialer(int n) {
        vector<vector<int>> nums(4, vector<int>(3, -1));
        memset(dp, -1, sizeof(dp));
        nums[3][1] = 0; // Place '0' on the pad correctly
        int x = 1;
        for(int i = 0; i < 3; i++) {
            for(int j = 0; j < 3; j++) {
                nums[i][j] = x++;
            }
        }
        int ans = 0;
        for(int i = 0; i < 4; i++) {
            for(int j = 0; j < 3; j++) {
                if(nums[i][j] != -1) {
                    ans = (ans + f(nums, i, j, n - 1)) % mod;
                }
            }
        }
        return ans;
    }
};
