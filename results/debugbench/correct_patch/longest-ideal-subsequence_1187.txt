class Solution {

    int SolveByMemo(string &s, int &k, int index, int prev, vector<vector<int>> &dp)
    {
        if (index == s.length())
            return 0;

        // Ensure previous index is within bounds
        if (prev != -1 && (prev < 0 || prev > 25))
            return 0;

        if (dp[index][prev + 1] != -1)
            return dp[index][prev + 1];

        int op1 = SolveByMemo(s, k, index + 1, prev, dp);

        int op2 = 0;
        int currentChar = s[index] - 'a';

        if (prev == -1 || abs(currentChar - prev) <= k)
            op2 = 1 + SolveByMemo(s, k, index + 1, currentChar, dp);

        return dp[index][prev + 1] = max(op1, op2);
    }

    int SolveByTab(string &s, int &k)
    {
        vector<vector<int>> dp(s.length() + 1, vector<int>(27, 0));

        for (int index = s.length() - 1; index >= 0; index--)
        {
            for (int prev = -1; prev <= 25; prev++)
            {
                if (prev != -1 && (prev < 0 || prev > 25))
                    continue;

                int op1 = dp[index + 1][prev + 1];
                int op2 = 0;
                int currentChar = s[index] - 'a';

                if (prev == -1 || abs(currentChar - prev) <= k)
                    op2 = 1 + dp[index + 1][currentChar + 1];

                dp[index][prev + 1] = max(op1, op2);
            }
        }

        return max(dp[0][s[0] - 'a' + 1], dp[0][0]);
    }
public:
    int longestIdealString(string s, int k) {
        vector<vector<int>> dp(s.length(), vector<int>(27, -1));
        return SolveByMemo(s, k, 0, -1, dp);
    }
};
