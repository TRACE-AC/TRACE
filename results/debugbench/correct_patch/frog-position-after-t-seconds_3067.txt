from queue import Queue
from typing import List

class Solution:
    def frogPosition(self, n: int, edges: List[List[int]], t: int, target: int) -> float:
        # Initialize adjacency list for the graph
        if not edges:
            return 1 if target == 1 else 0

        graph = {}
        for edge in edges:
            graph.setdefault(edge[0], []).append(edge[1])
            graph.setdefault(edge[1], []).append(edge[0])

        # Initialize visitation array for vertices
        visited = [False] * (n + 1)

        queue = Queue()
        queue.put((1, 1.0))  # Starting at vertex 1 with probability 1

        duration = 0

        while not queue.empty() and duration <= t:
            size = queue.qsize()
            for _ in range(size):
                vertex, probability = queue.get()
                if vertex == target and (duration == t or len([v for v in graph[vertex] if not visited[v]]) == 0):
                    return probability

                if visited[vertex]:
                    continue
                
                visited[vertex] = True
                unvisited_neighbors = [v for v in graph[vertex] if not visited[v]]

                for neighbor in unvisited_neighbors:
                    queue.put((neighbor, probability / len(unvisited_neighbors)))

            duration += 1
        
        return 0.0
