class Solution:
    def maxProfit(self, prices: list[int]) -> int:
        if not prices:
            return 0
        
        n = len(prices)
        # dp[i][j] represents the max profit at day i with j state:
        # j = 0: Holding a stock
        # j = 1: Sold a stock and in cooldown
        # j = 2: No stock and can buy
        dp = [[0] * 3 for _ in range(n)]
        
        # Initial conditions
        dp[0][0] = -prices[0]
        dp[0][1] = 0
        dp[0][2] = 0
        
        for i in range(1, n):
            # Max profit holding a stock at day i can be derived from either holding from yesterday or buying today
            dp[i][0] = max(dp[i-1][0], dp[i-1][2] - prices[i])
            
            # Max profit in cooldown period must come from selling the stock today
            dp[i][1] = dp[i-1][0] + prices[i]
            
            # Max profit not holding a stock and can buy must come from staying in cooldown yesterday or not holding
            dp[i][2] = max(dp[i-1][2], dp[i-1][1])
        
        # The maximum profit at last day can only be in cooldown or ready to buy
        return max(dp[n-1][1], dp[n-1][2])
