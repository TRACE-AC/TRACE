#include <vector>
#include <unordered_map>
using namespace std;

class Solution {
public:
    int lenLongestFibSubseq(vector<int>& nums) {
        int n = nums.size();
        if (n < 3) return 0;  // Base condition for sequences less than 3

        unordered_map<int, int> index;
        for (int i = 0; i < n; i++) {
            index[nums[i]] = i;
        }

        vector<vector<int>> dp(n, vector<int>(n, 2));
        int maxi = 0;

        for (int k = 2; k < n; k++) {
            for (int j = 1; j < k; j++) {
                int i = index.find(nums[k] - nums[j]) != index.end() ? index[nums[k] - nums[j]] : -1;
                if (i >= 0 && i < j) {
                    dp[j][k] = dp[i][j] + 1;
                    maxi = max(maxi, dp[j][k]);
                }
            }
        }

        return maxi >= 3 ? maxi : 0; // Return result if a valid sequence is found
    }
};
