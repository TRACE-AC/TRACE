class Solution {
    public String smallestEquivalentString(String s1, String s2, String baseStr) {
        
        UFDS dsu = new UFDS(26);
        for(int i = 0; i < s1.length(); i++){
            dsu.union(s1.charAt(i)-97,s2.charAt(i)-97);
        }

        StringBuilder sb = new StringBuilder(); 

        for(int i = 0; i < baseStr.length(); i++){
            int root = dsu.root(baseStr.charAt(i) - 97);
            sb.append((char)(dsu.min[root] + 97));
        }
        return sb.toString(); // Removed reverse() call
    }
    
    class UFDS {
        
        int[] id;
        int[] size;
        int[] min;
        
        public UFDS(int N){
            id = new int[N];
            size = new int[N];
            min = new int[N];
            for(int i = 0; i < N; i++){
                id[i] = i;
                size[i] = 1;
                min[i] = i;
            }
        }
        
        private int root(int i){
            if (i != id[i]) {
                id[i] = root(id[i]); // Correct path compression
            }
            return id[i];
        }
        
        public void union(int p, int q){
            int i = root(p);
            int j = root(q);
            if (i == j) return;
            if (size[i] < size[j]) {
                id[i] = id[j];
                size[j] += size[i];
                min[j] = Math.min(min[i], min[j]);
            } else {
                id[j] = id[i];
                size[i] += size[j];
                min[i] = Math.min(min[i], min[j]);
            }
        }

    }   
}
