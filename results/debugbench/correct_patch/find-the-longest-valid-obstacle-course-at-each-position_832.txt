class Solution {
public:
    vector<int> longestObstacleCourseAtEachPosition(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans(n, 0);
        vector<int> lis;

        for(int i = 0; i < n; i++) {
            // Implement Fenwick Tree or Dynamic Programming to maintain non-decreasing sequence
            int idx = upper_bound(lis.begin(), lis.end(), nums[i]) - lis.begin();
            
            if(idx == lis.size()) {
                lis.push_back(nums[i]);
            } else {
                lis[idx] = nums[i];
            }
            
            ans[i] = idx + 1; // Correctly manage sequence length based on index usage
        }

        return ans;
    }
};
