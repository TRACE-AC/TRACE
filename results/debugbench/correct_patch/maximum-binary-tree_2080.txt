/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        TreeNode root = construct(nums, 0, nums.length);
        return root;
    }

    private static TreeNode construct(int arr[], int s, int e) {
        if (s >= e) return null;  // Fix: Corrected the termination condition to handle empty interval

        int idx = findMax(arr, s, e);
        TreeNode root = new TreeNode(arr[idx]);
        root.left = construct(arr, s, idx);
        root.right = construct(arr, idx + 1, e);

        return root;
    }

    private static int findMax(int arr[], int s, int e) {
        int max = Integer.MIN_VALUE;
        int idx = -1;
        for (int i = s; i < e; i++) {  // Fix: Corrected the loop to prevent out-of-bounds access
            if (arr[i] > max) {
                max = arr[i];
                idx = i;
            }
        }
        return idx;
    }
}
