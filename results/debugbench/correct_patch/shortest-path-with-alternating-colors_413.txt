class Solution {
public:
    vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& redEdges, vector<vector<int>>& blueEdges) {
        vector<int> ans(n, -1);
        vector<unordered_set<int>> redchilds(n), bluechilds(n);
        
        for (auto& edge : redEdges) {
            redchilds[edge[0]].insert(edge[1]);
        }
        for (auto& edge : blueEdges) {
            bluechilds[edge[0]].insert(edge[1]);
        }
        
        queue<pair<int, int>> visit;
        unordered_set<string> visited;  // to keep track of visited states, e.g., "node-color"
        visit.push({0, 0});  // start with red edge (0 means no prior colored edge)
        visit.push({0, 1});  // start with blue edge
        visited.insert("0-0");
        visited.insert("0-1");
        
        ans[0] = 0;  // distance to the starting node is 0
        int steps = 0;

        while (!visit.empty()) {
            int size = visit.size();
            for (int i = 0; i < size; i++) {
                auto [current, color] = visit.front();
                visit.pop();

                // color 1 means previous edge was red, look at blue children
                if (color == 0 || color == 1) {
                    for (int neighbor : bluechilds[current]) {
                        if (visited.insert(to_string(neighbor) + "-2").second) { // check and mark visited
                            visit.push({neighbor, 2});
                            if (ans[neighbor] == -1) ans[neighbor] = steps + 1;
                        }
                    }
                }
                
                // color 2 means previous edge was blue, look at red children
                if (color == 0 || color == 2) {
                    for (int neighbor : redchilds[current]) {
                        if (visited.insert(to_string(neighbor) + "-1").second) { // check and mark visited
                            visit.push({neighbor, 1});
                            if (ans[neighbor] == -1) ans[neighbor] = steps + 1;
                        }
                    }
                }
            }
            steps++;
        }
        
        return ans;
    }
};
