class Solution:
    def isPossible(self, n: int, edges: List[List[int]]) -> bool:
        graph = defaultdict(set)
        for a, b in edges:
            graph[a].add(b)
            graph[b].add(a)

        odds = [node for node in graph if len(graph[node]) % 2 == 1]

        # If there are no nodes with odd degrees, the graph is already valid
        if not odds:
            return True

        # Handling cases with odd-degree nodes
        num_odds = len(odds)
        
        # Handle cases where pairing is impossible
        if num_odds > 4 or num_odds % 2 != 0:
            return False

        if num_odds == 2:
            a, b = odds[0], odds[1]
            if a not in graph[b]:
                return True
            # Check for potential connections
            for i in range(1, n + 1):
                if i != a and i != b and i not in graph[a] and i not in graph[b]:
                    return True
            return False

        if num_odds == 4:
            a, b, c, d = odds[0], odds[1], odds[2], odds[3]
            # Check various pairing possibilities
            if (a not in graph[b] and c not in graph[d]) or \
               (a not in graph[c] and b not in graph[d]) or \
               (a not in graph[d] and b not in graph[c]):
                return True

        return False
