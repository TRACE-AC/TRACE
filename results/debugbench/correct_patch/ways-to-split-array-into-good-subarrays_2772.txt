class Solution {
    public int numberOfGoodSubarraySplits(int[] nums) {
        
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 1) list.add(i);
        }
        if (list.size() == 0) return 0;
        if (list.size() == 1) return 1;
        
        int mod = (int)1e9 + 7;
        long res = 1; // Start accumulation from 1 to incorporate splits
        
        for (int i = 0; i < list.size() - 1; i++) {
            long index1 = list.get(i);
            long index2 = list.get(i + 1);
            // Calculate number of split ways between each pair of indices
            long splitWays = index2 - index1;
            // Accumulate ways and apply modulo to prevent overflow
            res = (res * splitWays) % mod;
        }
        
        return (int) res;
    }
}
