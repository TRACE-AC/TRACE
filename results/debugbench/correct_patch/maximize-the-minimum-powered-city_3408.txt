from collections import defaultdict
from typing import List

class Solution:
    def maxPower(self, stations: List[int], r: int, k: int) -> int:
        start, end = min(stations), sum(stations) + k
        while start + 1 < end:
            mid = (start + end) // 2
            if self.check(stations, r, k, mid):
                start = mid
            else:
                end = mid
        if self.check(stations, r, k, end):
            return end
        else:
            return start
    
    def check(self, stations, r, k, target):
        n = len(stations)
        ans = True
        newStations = defaultdict(int)
        power = sum(stations[ : r])
        adjustments = [0] * n  # Independent tracking of adjustments
        for i in range(n):
            if i + r < n:
                power += stations[i + r] + adjustments[i + r]
            if i - r - 1 >= 0:
                power -= stations[i - r - 1] + adjustments[i - r - 1]
            if power >= target:
                continue
            elif power + k < target:
                ans = False
                break
            else:
                diff = target - power
                power = target
                adjustments[min(i + r, n - 1)] += diff
                k -= diff
        return ans
