import java.util.*;

class Solution {
    public int[] maxPoints(int[][] grid, int[] queries) {
        int n = grid.length;
        int m = grid[0].length;
        int k = queries.length;
        
        int[][] queryIndices = new int[k][2];
        for (int i = 0; i < k; i++) {
            queryIndices[i][0] = i;
            queryIndices[i][1] = queries[i];
        }
        
        Arrays.sort(queryIndices, Comparator.comparingInt(a -> a[1]));
        
        int[] result = new int[k];
        boolean[][] visited = new boolean[n][m];
        int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        
        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> grid[a[0]][a[1]]));
        pq.offer(new int[]{0, 0});
        visited[0][0] = true;
        int cnt = 0;
        int idx = 0;
        
        while (idx < k) {
            int currentValue = queryIndices[idx][1];
            
            while (!pq.isEmpty() && grid[pq.peek()[0]][pq.peek()[1]] < currentValue) {
                int[] cell = pq.poll();
                int r = cell[0];
                int c = cell[1];
                cnt++;
                
                for (int[] dir : dirs) {
                    int newR = r + dir[0];
                    int newC = c + dir[1];
                    if (newR >= 0 && newR < n && newC >= 0 && newC < m && !visited[newR][newC]) {
                        visited[newR][newC] = true;
                        pq.offer(new int[]{newR, newC});
                    }
                }
            }
            
            result[queryIndices[idx][0]] = cnt;
            idx++;
        }
        
        return result;
    }
}
