class Solution {
public:
    int calculateSideJumps(int i, int l, vector<int>& obstacles, vector<vector<int>>& dp) {
        if (i == obstacles.size() - 1) {
            return 0;
        }

        if (dp[i][l] != -1) return dp[i][l];

        if (obstacles[i + 1] != l) {
            dp[i][l] = calculateSideJumps(i + 1, l, obstacles, dp);
        } else {
            int b = INT_MAX;
            for (int j = 1; j <= 3; j++) {
                if (l != j && obstacles[i] != j) { // Evaluate all potential non-blocking lanes
                    b = min(b, 1 + calculateSideJumps(i + 1, j, obstacles, dp));
                }
            }
            dp[i][l] = b;
        }

        return dp[i][l];
    }

    int minSideJumps(vector<int>& obstacles) {
        int n = obstacles.size();
        vector<vector<int>> dp(n, vector<int>(4, -1));
        return calculateSideJumps(0, 2, obstacles, dp);
    }
};
