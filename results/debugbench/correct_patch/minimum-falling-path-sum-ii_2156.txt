class Solution {
    int m;
    int n;
    Integer memo[][];

    public int minFallingPathSum(int[][] grid) {   
         m=grid.length;
         n=grid[0].length;
         memo=new Integer[m][n];

         int recRes=Integer.MAX_VALUE;

         for(int col=0;col<n;col++)
                    recRes=Math.min(recRes,minFallingPathSum_Rec(grid,0,col));

        return recRes;
    }

    public int minFallingPathSum_Rec(int[][] grid,int i,int j){
            
            if(j<0 || j>=n || i<0 || i>=m)
                           return Integer.MAX_VALUE;

            if(i==m-1)
                     return grid[i][j];

            if(memo[i][j]!=null)
                        return memo[i][j];

            int lowerLeftSum=Integer.MAX_VALUE;
            int lowerRightSum=Integer.MAX_VALUE;

            for(int col=0;col<j;col++)
                    lowerLeftSum=Math.min(lowerLeftSum,minFallingPathSum_Rec(grid,i+1,col));

            for(int col=j+1;col<n;col++)
                    lowerRightSum=Math.min(lowerRightSum,minFallingPathSum_Rec(grid,i+1,col));

          return memo[i][j]=Math.min(lowerLeftSum,lowerRightSum)+grid[i][j];

     }

     int minFallingPathSum_Tabulation(int[][] grid){
          int dp[][]=new int[m][n];

          for(int i=m-1;i>=0;i--){
              for(int j=n-1;j>=0;j--){
                    
                    if(i==m-1)
                     {
                         dp[i][j]=grid[i][j];
                         continue;
                     }
                
                int lowerLeftSum=Integer.MAX_VALUE;
                int lowerRightSum=Integer.MAX_VALUE;
                
                for(int col=0;col<j;col++){
                    lowerLeftSum=Math.min(lowerLeftSum,dp[i+1][col]);
                }
                
                for(int col=j+1;col<n;col++){
                    lowerRightSum=Math.min(lowerRightSum,dp[i+1][col]);
                
                }
                
                dp[i][j]=Math.min(lowerLeftSum,lowerRightSum)+grid[i][j];
              
              }
          }
           
          int Ans=Integer.MAX_VALUE;

          for(int COL=0;COL<n;COL++){
              Ans=Math.min(Ans,dp[0][COL]);
          }
          
          return Ans;
     }
}
