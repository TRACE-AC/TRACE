class Solution:
    def minCost(self, grid: List[List[int]]) -> int:

        m, n = len(grid), len(grid[0])
        cost, queue = 0, deque()
        M, N = range(m), range(n)

        def seen(x, y):
            if x not in M or y not in N:
                return True
            return False
            
        dir = ((), (0, 1), (0, -1), (1, 0), (-1, 0))

        visited = set()

        def dfs(x: int, y: int) -> None:
            while not seen(x, y) and (x, y) not in visited:
                visited.add((x, y))
                dx, dy = dir[grid[x][y]]
                queue.append((x, y))
                x, y = x + dx, y + dy
            return

        dfs(0, 0)

        while queue:
            if (m - 1, n - 1) in queue:
                return cost
            cost += 1
            q = len(queue)

            for _ in range(q):
                x, y = queue.popleft()
                for dx, dy in dir[1:]:
                    nx, ny = x + dx, y + dy
                    if not seen(nx, ny) and (nx, ny) not in visited:
                        dfs(nx, ny)

        return cost
