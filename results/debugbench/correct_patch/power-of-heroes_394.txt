class Solution {
    const int M = 1000000007;
    
    // Function to perform multiplication with modulo
    int mul(long long x, long long y) {
        return x * y % M;
    }
    
    // Function to perform addition with modulo
    int add(int x, int y) {
        if ((x += y) >= M) {
            x -= M;
        }
        return x;
    }

public:
    int sumOfPower(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        const int n = nums.size();
        
        int r = 0; // Start with zero, accumulate powers within the loop
        
        for (int i = 0, last = 0; i < n; ++i) {
            if (i > 0) { // Check to prevent out-of-bound access
                last = add(nums[i - 1], add(last, last));
            }
            r = add(r, mul(add(last, nums[i]), mul(nums[i], nums[i])));
        }
        
        return r;
    }
};
